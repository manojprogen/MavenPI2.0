package com.progen.reportview.action;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Iterables;
import com.google.common.collect.LinkedHashMultimap;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.progen.action.UserStatusHelper;
import com.progen.bd.ProgenJqplotGraphBD;
import com.progen.cacheLayer.CacheLayer;
import com.progen.charts.GraphProperty;
import com.progen.charts.JqplotGraphProperty;
import com.progen.charts.ProGenChartUtilities;
import com.progen.dashboardView.db.DashboardViewerDAO;
import com.progen.datasnapshots.DataSnapshotDAO;
import com.progen.datasnapshots.DataSnapshotGenerator;
import com.progen.db.ProgenDataSet;
import com.progen.handsontable.bd.HandsonTableBD;
import com.progen.jqplot.ProGenJqPlotChartTypes;
import com.progen.jqplot.ProGenJqPlotProperties;
import com.progen.oneView.bd.OneViewBD;
import com.progen.query.RTMeasureElement;
import com.progen.report.*;
import com.progen.report.colorgroup.*;
import com.progen.report.data.DataFacade;
import com.progen.report.display.util.NumberFormatter;
import com.progen.report.query.GetDimFactMapping;
import com.progen.report.query.PbReportQuery;
import com.progen.report.query.QueryExecutor;
import com.progen.report.segmentation.*;
import com.progen.report.util.stat.StatUtil;
import com.progen.reportdesigner.action.ReportAssignmentsResBundleMySql;
import com.progen.reportdesigner.action.ReportAssignmentsResBundleSqlServer;
import com.progen.reportdesigner.action.ReportAssignmentsResourceBundle;
import com.progen.reportdesigner.bd.DashboardTemplateBD;
import com.progen.reportdesigner.bd.ReportTemplateBD;
import com.progen.reportdesigner.db.DashboardTemplateDAO;
import com.progen.reportdesigner.db.ReportTemplateDAO;
import com.progen.reportview.bd.PbReportViewerBD;
import com.progen.reportview.db.CreateKPIFromReport;
import com.progen.reportview.db.PbReportViewerDAO;
import com.progen.reportview.db.ProgenReportViewerDAO;
import com.progen.reportview.db.WallData;
import com.progen.scheduler.ReportSchedule;
import com.progen.scheduler.SchedulerBD;
import com.progen.servlet.ServletUtilities;
import com.progen.servlet.ServletWriterTransferObject;
import com.progen.userlayer.action.GenerateDragAndDrophtml;
import java.io.*;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.MathContext;
import java.net.*;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.mail.MessagingException;
import javax.servlet.ServletContext;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionRedirect;
import org.apache.struts.actions.LookupDispatchAction;
import org.hyperic.sigar.CpuPerc;
import org.hyperic.sigar.Mem;
import org.hyperic.sigar.Sigar;
import org.hyperic.sigar.SigarException;
import org.json.simple.JSONObject;
import prg.business.group.BusinessGroupDAO;
import prg.db.*;
import prg.util.*;
import utils.db.ProgenConnection;
import utils.db.ProgenParam;
import com.progen.report.colorgroup.ColorGroup;
public class ReportViewerAction extends LookupDispatchAction {

    public static Logger logger = Logger.getLogger(ReportViewerAction.class);

    private ResourceBundle getResourceBundle() {
        ResourceBundle resourceBundle;
        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
            resourceBundle = new CustomMeasureResourceBundleSqlServer();
        } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
            resourceBundle = new CustomMeasureResourceBundleMySql();
        } else {
            resourceBundle = new CustomMeasureResourceBundle();
        }
        return resourceBundle;
    }

    private ResourceBundle getResourceBundle1() {
        ResourceBundle resourceBundle1;
        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
            resourceBundle1 = new ReportAssignmentsResBundleSqlServer();
        } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
            resourceBundle1 = new ReportAssignmentsResBundleMySql();
        } else {

            resourceBundle1 = new ReportAssignmentsResourceBundle();
        }
        return resourceBundle1;
    }
//    PbReportViewerBD reportViewBD = new PbReportViewerBD();
//    ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
//    ReportTemplateBD reportTemplateBD = new ReportTemplateBD();
//    PbReportQuery reportQry = new PbReportQuery();

    protected Map getKeyMethodMap() {
        Map map = new HashMap();
        map.put("viewReport", "viewReport");
        map.put("editReport", "editReport");
        map.put("viewReportPageSize", "viewReportPageSize");
        map.put("graphChanges", "graphChanges");
        map.put("customizeReport", "customizeReport");
        map.put("getMeasures", "getMeasures");
        map.put("buildTable", "buildTable");
        map.put("buildParams", "buildParams");
        map.put("buildGraphs", "buildGraphs");
        map.put("dispParams", "dispParams");
        map.put("dispTable", "dispTable");
        map.put("refreshGraphs", "refreshGraphs");
        map.put("saveCustomReport", "saveCustomReport");
        map.put("getUserDims", "getUserDims");
        map.put("graphColumnChanges", "graphColumnChanges");
        map.put("tableMeasureChanges", "tableMeasureChanges");
        map.put("tableChanges", "tableChanges");
        map.put("kpitableChanges", "kpitableChanges");
        map.put("deleteSnapshot", "deleteSnapshot");
        map.put("saveAsNewReport", "saveAsNewReport");

        map.put("saveReportDrillForUser", "saveReportDrillForUser");
        map.put("forwardToReport", "forwardToReport");
        map.put("testQuery", "testQuery");
        map.put("saveGrpAnalysisBy", "saveGrpAnalysisBy");
        map.put("backToReportDesigner", "backToReportDesigner");//added by santhosh.k on 08-03-2010 for going back to report designer
        map.put("saveBucketAnalysisBy", "saveBucketAnalysisBy");
        map.put("getnewCustomId", "getnewCustomId");
        map.put("saveViewerCustomFormula", "saveViewerCustomFormula");
        map.put("changeViewBy", "changeViewBy");
        map.put("showViewBy", "showViewBy");

        map.put("changeGraphDataset", "changeGraphDataset");
        map.put("getParamFilterMbrs", "getParamFilterMbrs");
        map.put("loadDialogs", "loadDialogs");
        map.put("getFactTreeHtml", "getFactTreeHtml");
        map.put("createSegment", "createSegment");
        map.put("getMeasureSegmentDialog", "getMeasureSegmentDialog");
        map.put("getColorRulesForMeasure", "getColorRulesForMeasure");
        map.put("changeTableDisplayStyle", "changeTableDisplayStyle");
        map.put("changeTheme", "changeTheme");
        map.put("findDuplicate", "findDuplicate");
        map.put("isDimensionSegmented", "isDimensionSegmented");
        map.put("getSegmentValues", "getSegmentValues");
        map.put("getMeasuresInContainer", "getMeasuresInContainer");
        map.put("createSegmentByValue", "createSegmentByValue");
        map.put("getValueSegmentDialog", "getValueSegmentDialog");
        map.put("isNewTargetMeasure", "isNewTargetMeasure");
        map.put("getCorrelation", "getCorrelation");
        map.put("getRefferedElementsofMeasure", "getRefferedElementsofMeasure");
        map.put("openGroupMeasure", "openGroupMeasure");
        map.put("saveGroupMeasure", "saveGroupMeasure");
        map.put("getFormulaForMeasure", "getFormulaForMeasure");
        map.put("resetColorRulesForMeasure", "resetColorRulesForMeasure");
        map.put("createTimeBasedFormula", "createTimeBasedFormula");
        map.put("saveTimeBasedFormula", "saveTimeBasedFormula");
        map.put("getMapMainMeasures", "getMapMainMeasures");
        map.put("getLevelDetails", "getLevelDetails");
        map.put("getLevelDetailsForDiscrete", "getLevelDetailsForDiscrete");
        map.put("getReportHeadlinesData", "getReportHeadlinesData");
        map.put("sendSharereportMail", "sendSharereportMail");
        map.put("getViewByValues", "getViewByValues");
        map.put("setCustomViewSeq", "setCustomViewSeq");
        map.put("applyCustomSequence", "applyCustomSequence");
        map.put("setTransposeFormats", "setTransposeFormats");
        map.put("getViewByValuesadhoc", "getViewByValuesadhoc");
        map.put("saveCreateKPIMeasure", "saveCreateKPIMeasure");
        map.put("multRowColorGroup", "multRowColorGroup");
        map.put("getViewByValuesTimeBaseIndvl", "getViewByValuesTimeBaseIndvl");
        map.put("getNewProdItroViewBys", "getNewProdItroViewBys");
        map.put("newProductFormHtmlGeneration", "newProductFormHtmlGeneration");
        map.put("newProductPercentBase", "newProductPercentBase");
        map.put("dailyScheduleReport", "dailyScheduleReport");
        map.put("getSchedulerNames", "getSchedulerNames");
        map.put("editSchedulerDetails", "editSchedulerDetails");
        map.put("editSchedulerDashboardDetails", "editSchedulerDashboardDetails");
        map.put("deleteSchedulerDetails", "deleteSchedulerDetails");
        map.put("deleteDashboardSchedulerDetails", "deleteDashboardSchedulerDetails");
        map.put("getscheduleCount", "getscheduleCount");
        map.put("getEnableMeasureDrill", "getEnableMeasureDrill");
        map.put("getDimenssionDetails", "getDimenssionDetails");
        map.put("getDateforDateFormat", "getDateforDateFormat");
        map.put("getMeasureValues", "getMeasureValues");
        map.put("getMeasureNamesforParamFilter", "getMeasureNamesforParamFilter");
        map.put("checkforMeasureType", "checkforMeasureType");
        map.put("chkMsrforConversionFormula", "chkMsrforConversionFormula");
        map.put("getViewbysRelatedReport", "getViewbysRelatedReport");
        map.put("saveAdvanceParameters", "saveAdvanceParameters");

        map.put("getInsightTableData", "getInsightTableData");
        map.put("getViewbyDrillData", "getViewbyDrillData");
        map.put("getMeasuresForOneView", "getMeasuresForOneView");
        map.put("insertOneViewName", "insertOneViewName");
        map.put("generateRegions", "generateRegions");
        map.put("deleteOneViewFromSession", "deleteOneViewFromSession");
        map.put("saveingOneviews", "saveingOneviews");
//        map.put("getingOneviews", "getingOneviews");
//        map.put("getOneViewMeasureValue", "getOneViewMeasureValue");
        map.put("getRepTimeSpanDisplay", "getRepTimeSpanDisplay");
        map.put("generateJsonData", "generateJsonData");
        map.put("generateoneviewJsonData", "generateoneviewJsonData");
        map.put("hideLeftTd", "hideLeftTd");
        map.put("getLeftTdStatus", "getLeftTdStatus");
        map.put("saveFactFilterDetails", "saveFactFilterDetails");
        map.put("viewFactFormula", "viewFactFormula");
        map.put("deleteFactFormulas", "deleteFactFormulas");
        map.put("drillView", "drillView");
        map.put("chkforUserPrevilages", "chkforUserPrevilages");
        map.put("getBussTabId", "getBussTabId");
        map.put("quickTimeBasedFormula", "quickTimeBasedFormula");
        map.put("getConn", "getConn");
        map.put("getCalanderDetails", "getCalanderDetails");
        map.put("viewParameterReset", "viewParameterReset");
        map.put("dateParse", "dateParse");
        map.put("updateParamswithChanges", "updateParamswithChanges");
        map.put("updateScheduleDetails", "updateScheduleDetails");
        map.put("updateExportReportScheduleDetails", "updateExportReportScheduleDetails");
        map.put("updateScheduleParamMetadataDetails", "updateScheduleParamMetadataDetails");
        map.put("adhocChangeViewBy", "adhocChangeViewBy");
        map.put("defineCustomSequence", "defineCustomSequence");
        map.put("reOrderCustomSeq", "reOrderCustomSeq");
        map.put("saveDynamicHeadline", "saveDynamicHeadline");
        map.put("getReportParameters", "getReportParameters");
        map.put("saveInnerViewbys", "saveInnerViewbys");
        map.put("buildJqPlotGraphs", "buildJqPlotGraphs");
        map.put("JqGraphSize", "JqGraphSize");
        map.put("saveAsNewOneView", "saveAsNewOneView");
        map.put("saveTimeDetails", "saveTimeDetails");
        map.put("saveParameterSection", "saveParameterSection");
        map.put("saveGraphRegion", "saveGraphRegion");
        map.put("saveTableRegion", "saveTableRegion");
        map.put("getAllDateEids", "getAllDateEids");
        map.put("dateToggle", "dateToggle");
        map.put("reportDrillAssignment", "reportDrillAssignment");
        map.put("saveDrillAssignReports", "saveDrillAssignReports");
        map.put("getLevelDetailsForDiscreteFromTargetMe", "getLevelDetailsForDiscreteFromTargetMe");
        map.put("multiSelectAdhocDrillDown", "multiSelectAdhocDrillDown");
        map.put("getTableList", "getTableList");
        map.put("setTableListToContainer", "setTableListToContainer");
        map.put("getViewFilters", "getViewFilters");
        map.put("saveViewFilters", "saveViewFilters");
        map.put("designGraphInViewer", "designGraphInViewer");
        map.put("saveInitializeReport", "saveInitializeReport");
        map.put("getRelatedMeasureDetails", "getRelatedMeasureDetails");
        map.put("getReportsforMsrDrill", "getReportsforMsrDrill");
        map.put("getMultiSelectReportNames", "getMultiSelectReportNames");
        map.put("getAllParams", "getAllParams");
        map.put("saveSplitBy", "saveSplitBy");
        map.put("viewReportPopUp", "viewReportPopUp");
        map.put("saveDateFormula", "saveDateFormula");
        map.put("executeDimensionScript", "executeDimensionScript");
        map.put("modifyMeasure", "modifyMeasure");
        map.put("saveModifyMeasures", "saveModifyMeasures");
        map.put("getSequnceParams", "getSequnceParams");
        map.put("chkforBackupfiles", "chkforBackupfiles");
        map.put("designGraphInDesigner", "designGraphInDesigner");
        map.put("refreshHomePage", "refreshHomePage");
        map.put("getOperatorFilters", "getOperatorFilters");
        map.put("setOperatorFilters", "setOperatorFilters");
        map.put("getSubtotal", "getSubtotal");
        map.put("getMultiRetObj", "getMultiRetObj");
        map.put("modifyMeasureAttr", "modifyMeasureAttr");
        map.put("saveModifyMeasuresAttr", "saveModifyMeasuresAttr");
        map.put("lockDataset", "lockDataset");
        map.put("getRoleIds", "getRoleIds");
        map.put("quickRefresh", "quickRefresh");
        map.put("disableQuickRefresh", "disableQuickRefresh");
        map.put("hideMeasuresinTable", "hideMeasuresinTable");
        map.put("saveHideTableMeasures", "saveHideTableMeasures");
        map.put("checkSchedulerPermission", "checkSchedulerPermission");
        map.put("getDimensionMembersForDimDep", "getDimensionMembersForDimDep");
        map.put("disableTopbottomEnable", "disableTopbottomEnable");
        map.put("getViewbysfromReport", "getViewbysfromReport");
        map.put("getvewericons", "getvewericons");
        map.put("hideViewbysinTable", "hideViewbysinTable");
        map.put("saveHideTableViewbys", "saveHideTableViewbys");
        map.put("checkforDimensionType", "checkforDimensionType");
        map.put("saveGblParamDetails", "saveGblParamDetails");
        map.put("getCSV", "getCSV");
        map.put("getbusinessroleid", "getbusinessroleid");
//        map.put("importExcelFile","importExcelFile");
        map.put("exportReportsIntoExcelsheets", "exportReportsIntoExcelsheets");
        map.put("exportScheduleReportsInExcels", "exportScheduleReportsInExcels");
        map.put("refreshProgentable", "refreshProgentable");
        map.put("getTagsBlocks", "getTagsBlocks");
        map.put("getDataCall", "getDataCall");
        map.put("setIntermediateFilters", "setIntermediateFilters");
        map.put("getSearchReports", "getSearchReports");
        map.put("saveXtCharts", "saveXtCharts");
        map.put("addNewChartsUI", "addNewChartsUI");
        map.put("getAvailableCharts", "getAvailableCharts");
        map.put("getAvailableCharts1", "getAvailableCharts1");
        map.put("drillCharts", "drillCharts");
        map.put("drillSingleCharts", "drillSingleCharts");
        map.put("editCharts", "editCharts");
        map.put("buildCharts", "buildCharts");
        map.put("addNewTrendUI", "addNewTrendUI");
        map.put("saveXtTrend", "saveXtTrend");
        map.put("getAvailableTrend", "getAvailableTrend");
        map.put("getViewBys", "getViewBys");
        map.put("buildTrend", "buildTrend");
        map.put("editTrend", "editTrend");
        map.put("drillSingleTrend", "drillSingleTrend");
        map.put("getTrendMeasures", "getTrendMeasures");
        map.put("getFilters", "getFilters");
//         map.put("generateFilters", "generateFilters");
        map.put("showViewByTag", "showViewByTag");
        map.put("saveDescInAssignment", "saveDescInAssignment");
        map.put("getObjectMap", "getObjectMap");
        map.put("buildchartsWithObject", "buildchartsWithObject");
        map.put("getSortingCharts", "getSortingCharts");
        map.put("getLocalChart", "getLocalChart");
        map.put("getchangeVisual", "getchangeVisual");
        map.put("gettingJsonData", "gettingJsonData");
        map.put("drilloneviewCharts", "drilloneviewCharts");
        map.put("updateFontSizeChangeOfTag", "updateFontSizeChangeOfTag");//added by Dinanath
        map.put("updateSequence", "updateSequence");
        map.put("sendSchedulerNow", "sendSchedulerNow");
        map.put("updateAccordingSequence", "updateAccordingSequence");
        map.put("updateTagReportAssignmentSequence", "updateTagReportAssignmentSequence");
        map.put("getAvailableChartsForLogin", "getAvailableChartsForLogin");
        map.put("saveLoginCharts", "saveLoginCharts");
        map.put("getChartsForWall", "getChartsForWall");
        map.put("generateFilters", "generateFilters");
        map.put("oneviewGlobalFilter", "oneviewGlobalFilter");
        map.put("globalfileteroneview", "globalfileteroneview");
        map.put("saveGlobalFilterOneview", "saveGlobalFilterOneview");
        map.put("buildKpiDashboard", "buildKpiDashboard");
        // map.put("buildTimeDashboard", "buildTimeDashboard");
        map.put("getParameterdrill", "getParameterdrill");
        map.put("enableComparisionInKpiDash", "enableComparisionInKpiDash");
        map.put("updatenumbrformat", "updatenumbrformat");//sandeep
        map.put("updategttype", "updategttype");//sandeep
        map.put("rowAddingKpi", "rowAddingKpi");//sandeep
        map.put("renameMeasure", "renameMeasure");
        map.put("editDbTableProperties", "editDbTableProperties");
        map.put("GTKPICalculateFunction", "GTKPICalculateFunction");
        map.put("getStatistics", "getStatistics");
        map.put("setqfilters", "setqfilters");
        map.put("comparableCharts", "comparableCharts");
        map.put("getToggle", "getToggle");
        //Added by shobhit for multi dashboard on 22/09/15
        map.put("getSelectedDimsFacts", "getSelectedDimsFacts");
        //added by krishan  pratap
        map.put("exportReportsIntoExcelsheetsTemp", "exportReportsIntoExcelsheetsTemp");
        map.put("setSelectedDefaultCompanyId", "setSelectedDefaultCompanyId");
        //Added by Ram for language Lookup on 01Des2015
        map.put("unableLookup", "unableLookup");
        map.put("enableLookup", "enableLookup");

        return map;
    }
    ArrayList<String> mes = new ArrayList<String>();

    public ActionForward loadDialogs(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        String reportId = request.getParameter("REPORTID");
        if (reportId == null) {
            reportId = request.getParameter("reportId");//added by Dinanath
        }
        String graphId = request.getParameter("graphId");
        String folderIds = request.getParameter("folderIds");
        String grpIds = request.getParameter("grpIds");
        Enumeration<String> paramNames = request.getParameterNames();
        while (paramNames.hasMoreElements()) {
            String parameter = paramNames.nextElement();
            if (!"reportBy".equalsIgnoreCase(parameter)) {
                session.setAttribute(parameter, request.getParameter(parameter));
            }
        }
        HashMap map = null;
        Container container = null;
        if (session.getAttribute("PROGENTABLES") != null) {
            map = (HashMap) session.getAttribute("PROGENTABLES");

            if (map.get(reportId) != null) {
                container = (Container) map.get(reportId);
            } else {
                container = new Container();
            }
            if (container != null) {
                container.setGarphIdForFact(graphId);
                container.setGarphIdsForFact(grpIds);
                container.setFolderIdsForFact(folderIds);
            }
        }
        session.setAttribute("from", "true");

        return null;
    }

    public ActionForward openGroupMeasure(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        PrintWriter outPrintWriter = null;
        Container container = null;
        try {
            String reportId = request.getParameter("repID");
            outPrintWriter = response.getWriter();
            container = Container.getContainerFromSession(request, reportId);
            ArrayList<String> dropedList = new ArrayList<String>();
            ArrayList<String> dragableList = container.getTableDisplayMeasures();
            GenerateDragAndDrophtml dragAndDrophtml = new GenerateDragAndDrophtml("", "", dropedList, container.getTableDisplayMeasures(), "");
            dragAndDrophtml.setDragableListNames(container.getReportMeasureNames());
            String drarAndDropHtml = dragAndDrophtml.getDragAndDropDiv();
            outPrintWriter.print(drarAndDropHtml);

        } catch (IOException e) {
            logger.error("Exception: ", e);
        }
        return null;
    }

    public ActionForward saveGroupMeasure(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        PrintWriter outPrintWriter = null;
        Container container = null;
        try {
            String reportId = request.getParameter("repID");
            String grpMes = request.getParameter("grpMesArray");
            String grpName = request.getParameter("grpName");
            String grpMesIDs = request.getParameter("grpMesIDsArray");
            String[] grpMeasures = grpMes.split(",");
            String[] grpMesIDsArray = grpMesIDs.split(",");
            ArrayList<MeasureGroup> measureGroups = new ArrayList<MeasureGroup>();
            MeasureGroup measureGroup = new MeasureGroup(grpName);
            outPrintWriter = response.getWriter();
            container = Container.getContainerFromSession(request, reportId);
            for (int i = 0; i < grpMeasures.length; i++) {
                MeasureGroupColumn measureGroupColumn = new MeasureGroupColumn(grpMesIDsArray[i], grpMeasures[i]);
                measureGroup.addMeasureGroupColumn(measureGroupColumn);
            }
            container.addMeasureGroups(measureGroup);

        } catch (IOException e) {
            logger.error("Exception: ", e);
        }
        return null;
    }

    public void viewReportPageSize(HttpServletRequest request, HttpServletResponse response) //Alo called when user clicks on his/her snap shots
    {
        String pageSize = request.getParameter("sVal");
        String reportid = request.getParameter("reportid");
        Container container = null;
        container = Container.getContainerFromSession(request, reportid);
        container.setPagesPerSlide(pageSize);
    }
    //Is called when ever user clicks on a particular report  from report studio or when user wants to view the report
    //Alo called when user clicks on his/her snap shots

    public ActionForward viewReport(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        logger.info("*************************************viewReport***********************************");
        HttpSession session = request.getSession(false);
        //added by Amar
        long start_time;
//       // Added By Prabal
        String current_defaulttab = null;
//        current_defaulttab=request.getParameter("currentDefaultTab");
        start_time = System.currentTimeMillis();
        boolean zeroFlag =false;
        session.setAttribute("rep_st_time", start_time);
        String ReportId = "";
        String UserId = "";
        StringBuilder imagebuffer = new StringBuilder();
        PbReportViewerBD reportViewerBD = new PbReportViewerBD();
        PbReportViewerDAO DAO = new PbReportViewerDAO();
        PbReportQuery pbReportQuery = new PbReportQuery();
        ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
//        String settingvalue=DAO.getCustomSetting();          //added by Mohit for Custom setting
        // session.setAttribute("settingvalue", settingvalue);
        //added by krishan
//        String opentab=DAO.getGlobalParametersPiReporttab();
        //
//        session.setAttribute("opentab", opentab);
        String url = request.getRequestURL().toString();
//        String type = request.getParameter("type");
        String fromreport = request.getParameter("fromreport");
//        String expireAcct = "";
        boolean isSnapShot = false;
        boolean isTimeSeries = false;
        boolean drillViewCheck = false;
        boolean isColorForAllViewBys = false;
        boolean isColorAppyAcrossCurrentData = false;
        String applyColorProperty="";
        imagebuffer.append("<div id='loading' class='loading_image'>");
//       imagebuffer.append("<img id='imgId' src='images/help-loading.gif'  border='0px' style='position:absolute;left:600px;top:200px;'>");
//        imagebuffer.append("<i id='imgId' class='fa fa-spinner fa-pulse' style='position:absolute;left:35%;top: 10%;font-size: 70px;color: #fff;'></i>");
//        imagebuffer.append("<section id='loadingData'><div class='loadingC1'></div><div class='loadingC2'></div></section>");
        //imagebuffer.append("<img id='imgId' src='images/udisenewimage.gif'  border='0px' style='position:absolute;left:350px;top:200px;'>");
//        imagebuffer.append("<img id='imgId' src='images/udisenewimage21.gif' width='750px' height='400px' border='0px' style='position:absolute;left:350px;top:200px;margin-top:20px;'>");
        imagebuffer.append("<div class='cssload-loader'><div class='cssload-inner cssload-one'></div><div class='cssload-inner cssload-two'></div><div class='cssload-inner cssload-three'></div></div>");
        imagebuffer.append("</div>");

        if (request.getParameter("isTimeSeries") != null) {
            isTimeSeries = Boolean.parseBoolean(request.getParameter("isTimeSeries"));
            reportViewerBD.setTimeSeries(isTimeSeries);
        } else {
            reportViewerBD.setTimeSeries(isTimeSeries);
        }
        if (request.getParameter("drillViewCheck") != null) {
            drillViewCheck = true;
        }
        if (request.getParameter("isKPIDashboard") != null && request.getParameter("isKPIDashboard").toString().equalsIgnoreCase("true")) {
            request.setAttribute("isKPIDashboard", "true");
//               return mapping.findForward("reportView");
        }
        //sandeep for differntiate oneview time and report time
        if (fromreport != null && fromreport.equalsIgnoreCase("report")) {
            session.setAttribute("fromreport", fromreport);
        }
        //
        String SnapShotId = "";
        boolean invalidReportAccess = false;
        if (request.getParameter("isSnapShot") != null) {
            isSnapShot = Boolean.parseBoolean(request.getParameter("isSnapShot"));
            SnapShotId = request.getParameter("SnapShotId");
            reportViewerBD.setSnapShotId(SnapShotId);
        }
//        Added By prabal
        HashMap<String, String> current_tab = null;
//        String current_defaulttab = null;
        if (session != null) {

            try {
                //by g
                if (request.getAttribute("REPORTID") != null) {
                    ReportId = String.valueOf(request.getAttribute("REPORTID"));
                    //added by prabal
                    try {
                        // 
                        String s11 = "current_reptId" + ReportId;
                        String curr_repId = (String) session.getAttribute(s11);
                        current_tab = (HashMap<String, String>) session.getAttribute(curr_repId);
                        if (current_tab != null && !current_tab.keySet().isEmpty()) {
                            current_defaulttab = (String) current_tab.get(curr_repId);
//                            String current_tab_report_Id = (String) session.getAttribute("current_repId");
//                            current_tab = (HashMap<String, String>) session.getAttribute(current_tab_report_Id);
//                            if (!current_tab.keySet().isEmpty()) {
//                                current_defaulttab = (String) current_tab.get(current_tab_report_Id);
//                            }
                            }
                    } catch (Exception e) {
                        logger.error("Exception: ", e);
                    }
                    //ended by prabal
                    Container container = null;
                    container = Container.getContainerFromSession(request, ReportId);
                    String DEFAULT_TAB = reportTemplateDAO.GetDefaultTab(ReportId);
                    //Added By Prabal 6-feb
                    if (current_defaulttab != null) {
                        Container.setDefault_tab("Key" + ReportId, current_defaulttab);
                    } else {
                        Container.setDefault_tab("Key" + ReportId, DEFAULT_TAB.split("::")[0]);
                    }
                    //end Added By Prabal 6-feb
                    String COMPARISON_DATE = reportTemplateDAO.comparisonDate(ReportId);
                    String graphGOList = reportTemplateDAO.getResetGraph(ReportId);
                    // session.setAttribute("DEFAULT_TAB", DEFAULT_TAB.split("::")[0]);
                    session.setAttribute("COMPARISON_DATE", COMPARISON_DATE);
                    session.setAttribute("aoAsGoId", reportTemplateDAO.GetaoAsGoId(ReportId));//by mohit
//                  System.out.println("##### aoAsGoIdReportLayout="+DEFAULT_TAB.split("::")[1]);
//                  if(session.getAttribute("ReportLayout")==null)
//                  {
//                  session.setAttribute("ReportLayout", DEFAULT_TAB.split("::")[1]);
//                  }
                    // added by prabal

                    if (DEFAULT_TAB != null && !DEFAULT_TAB.equalsIgnoreCase("")) {
                        if (current_defaulttab != null && !current_defaulttab.equalsIgnoreCase("")) {
                            session.setAttribute("DEFAULT_TAB", current_defaulttab);
                            if (current_defaulttab.equalsIgnoreCase("Table") || current_defaulttab.equalsIgnoreCase("")) {
                                pbReportQuery.setNeedZeroRowQuery(false);
                            } else {
                                zeroFlag=true;
                                pbReportQuery.setNeedZeroRowQuery(true);
                            }
                        } else {
                            session.setAttribute("DEFAULT_TAB", DEFAULT_TAB.split("::")[0]);
                            if (DEFAULT_TAB.split("::")[0].toString().equalsIgnoreCase("Report") || DEFAULT_TAB.split("::")[0].toString().equalsIgnoreCase("")) {
                                pbReportQuery.setNeedZeroRowQuery(false);
                            } else {
                                zeroFlag=true;
                                pbReportQuery.setNeedZeroRowQuery(true);
                            }
                        }
                    } else {
                        session.setAttribute("DEFAULT_TAB", "Table");
                    }
                    // end of code added by prabal
                    // added by Mayank for auto refresh graphs
                    if (graphGOList != null && !graphGOList.equalsIgnoreCase("") && !graphGOList.equalsIgnoreCase("::") && container != null) {
                        session.setAttribute("isGraphGO", graphGOList.split("::")[0].toString());
                        if (graphGOList.split("::")[0].toString().equalsIgnoreCase("true")) {
                            container.checkGOflag = "true";
                        }
                        session.setAttribute("isGraphRefresh", graphGOList.split("::")[1].toString());
                    }

                    //end
//                 request.setAttribute("defaulttab", DEFAULT_TAB);
                    //.println("in request attribute report id is : " + ReportId);
                    url = url + "?reportBy=viewReport;REPORTID=" + ReportId + "&action=open";
                    request.setAttribute("url", url);

                    request.setAttribute("REPORTID1", ReportId);
                } else {
                    if (request.getParameter("REPORTID") != null) {
                        ReportId = request.getParameter("REPORTID");
                        //added by prabal
                        try {
                            // 
                             //By Ram 4May2016 for Apply color on all parameters & CrossTab Across Current Data       
                                applyColorProperty=reportTemplateDAO.isColorApplyForAllViewBys(ReportId);
                                String[] value = applyColorProperty.split("_");
                                isColorForAllViewBys=Boolean.valueOf(value[0]);
                                isColorAppyAcrossCurrentData=Boolean.valueOf(value[1]);
                                if(request.getParameter("action")!=null && request.getParameter("action").equalsIgnoreCase("reset") || request.getParameter("action")!=null && request.getParameter("action").equalsIgnoreCase("open") ){
                                Container.setColorAppyForAllParameters(isColorForAllViewBys);
                                Container.setColorAppyAcrossCurrentData(isColorAppyAcrossCurrentData);
                                }
                            //End 
                            session.setAttribute("aoAsGoId", reportTemplateDAO.GetaoAsGoId(ReportId));//by mohit
                            String s11 = "current_reptId" + ReportId;
                            String curr_repId = (String) session.getAttribute(s11);
                            current_tab = (HashMap<String, String>) session.getAttribute(curr_repId);
                            if (current_tab != null && !current_tab.keySet().isEmpty()) {
                                current_defaulttab = (String) current_tab.get(curr_repId);
//                                String current_tab_report_Id = (String) session.getAttribute("current_repId");
//                                current_tab = (HashMap<String, String>) session.getAttribute(current_tab_report_Id);
//                                if (!current_tab.keySet().isEmpty()) {
//                                    current_defaulttab = (String) current_tab.get(current_tab_report_Id);
//                                }
                                }
                        } catch (Exception e) {
                            logger.error("Exception: ", e);
                        }
                        //ended by prabal
                        request.setAttribute("REPORTID1", ReportId);
                        String DEFAULT_TAB = reportTemplateDAO.GetDefaultTab(ReportId);
                        String COMPARISON_DATE = reportTemplateDAO.comparisonDate(ReportId);
                        //Added By Prabal 6-feb
                        if (current_defaulttab != null) {
                            Container.setDefault_tab("Key" + ReportId, current_defaulttab);
                        } else {
                            if (DEFAULT_TAB.split("::")[0].equalsIgnoreCase("")) {
                                Container.setDefault_tab("Key" + ReportId, "table");
                            } else {
                                Container.setDefault_tab("Key" + ReportId, DEFAULT_TAB.split("::")[0]);
                            }
                        }
                        //End Added By Prabal 6-feb
                        // added by prabal
                        if (DEFAULT_TAB != null && !DEFAULT_TAB.equalsIgnoreCase("")) {
                            if (current_defaulttab != null && !current_defaulttab.equalsIgnoreCase("")) {
                                request.setAttribute("defaulttab", current_defaulttab);
                                session.setAttribute("DEFAULT_TAB", current_defaulttab);
                                if (current_defaulttab.equalsIgnoreCase("Table") || current_defaulttab.equalsIgnoreCase("")) {
                                    pbReportQuery.setNeedZeroRowQuery(false);
                                } else {
                                    zeroFlag=true;
                                    pbReportQuery.setNeedZeroRowQuery(true);
                                }
                            } else {
                                session.setAttribute("DEFAULT_TAB", DEFAULT_TAB.split("::")[0]);
                                request.setAttribute("defaulttab", DEFAULT_TAB.split("::")[0]);
                                if (DEFAULT_TAB.split("::")[0].toString().equalsIgnoreCase("Report") || DEFAULT_TAB.split("::")[0].toString().equalsIgnoreCase("")) {
                                    pbReportQuery.setNeedZeroRowQuery(false);
                                } else {
                                    zeroFlag=true;
                                    pbReportQuery.setNeedZeroRowQuery(true);
                                }
                            }
                        } else {
                            session.setAttribute("DEFAULT_TAB", "Table");
                            request.setAttribute("defaulttab", "Table");
                        }
                        // end of code added by prabal

                        // 
                        String graphGOList = reportTemplateDAO.getResetGraph(ReportId);
                        //  session.setAttribute("DEFAULT_TAB", DEFAULT_TAB.split("::")[0]);
                        session.setAttribute("COMPARISON_DATE", COMPARISON_DATE);
                        // request.setAttribute("defaulttab", DEFAULT_TAB.split("::")[0]);
                        if (session.getAttribute("ReportLayout") == null) {
                            session.setAttribute("ReportLayout", DEFAULT_TAB.split("::")[1]);
                        }

                        if (graphGOList != null && !graphGOList.equalsIgnoreCase("") && !graphGOList.equalsIgnoreCase("::")) {
                            session.setAttribute("isGraphGO", graphGOList.split("::")[0].toString());
//                   if(graphGOList.split("::")[0].toString().equalsIgnoreCase("true")){
//                      container.checkGOflag = "true";
//                  }
                            session.setAttribute("isGraphRefresh", graphGOList.split("::")[1].toString());
                        }
                        //.println("reportid in vieweraction after is : " + ReportId);
                        url = url + "?reportBy=viewReport;REPORTID=" + ReportId + "&action=open";
                        request.setAttribute("url", url);
                    } else if (request.getAttribute("REPORTID") != null) {
                        ReportId = String.valueOf(request.getAttribute("REPORTID"));
                        //.println("in request attribute report id is : " + ReportId);
                        url = url + "?reportBy=viewReport;REPORTID=" + ReportId + "&action=open";
                        request.setAttribute("url", url);
                    }
                }
//                //Start of code by Nazneen in March14 for Dimension Segmentation
//                Container container = null;
//                HashMap myMap = null;
//                if (session.getAttribute("PROGENTABLES") != null) {
//                myMap = (HashMap) session.getAttribute("PROGENTABLES");
//                container = (Container) myMap.get(ReportId);
//                String filesPath =  "";
//                    PbReportViewerDAO pb = new PbReportViewerDAO();
//                    filesPath  = pb.getFilePath(session);
//                    container.setFilesPath(filesPath);
//                }
//
//
////End of code by Nazneen in March14 for Dimension Segmentation

                if (session.getAttribute("MeasureDrillTest") != null) {
                    session.removeAttribute("MeasureDrillTest");
                }
                if (session.getAttribute("USERID") != null) {
                    UserId = String.valueOf(session.getAttribute("USERID"));
                    invalidReportAccess = DAO.checkUserReportAccess(ReportId, UserId);
                    //addded on 26-12-09 for accounts
               /*
                     * String userAccountQ = "select account_type from
                     * prg_ar_users where pu_id=" + UserId; String accountStQ =
                     * ""; String accountType = null; PbDb pbdb = new PbDb();
                     * PbReturnObject userObj =
                     * pbdb.execSelectSQL(userAccountQ); accountType =
                     * userObj.getFieldValueString(0, "ACCOUNT_TYPE");
                     * PbReturnObject accountObj = new PbReturnObject();
                     *
                     * if (!accountType.equalsIgnoreCase("null") && accountType
                     * != null) { if (!accountType.equalsIgnoreCase("")) {
                     * accountStQ = "select to_char(org_end_date,'dd-mm-yy')
                     * from prg_org_master where org_id=" + accountType;
                     * accountObj = pbdb.execSelectSQL(accountStQ); String
                     * accountExpireDate = accountObj.getFieldValueString(0, 0);
                     *
                     * String actTimeDiffQ = "select sysdate-(select
                     * org_end_date from prg_org_master where org_id=" +
                     * accountType + ") from dual"; PbReturnObject timObj =
                     * pbdb.execSelectSQL(actTimeDiffQ); float diff = 0; diff =
                     * Float.parseFloat(timObj.getFieldValueString(0, 0)); if
                     * (diff > 0) { expireAcct = "expired"; } else { expireAcct
                     * = ""; } } }
                     */
                    //if (expireAcct.equalsIgnoreCase("")) {

                    request.setAttribute("REPORTID", ReportId);
                    if (!invalidReportAccess) {
                        reportViewerBD.setIsSnapShot(isSnapShot);
                        PbReportViewerDAO dao = new PbReportViewerDAO();

                        ArrayList dependentlist = dao.getDependentViewByidsandReps(ReportId);
                        if (dependentlist != null && !dependentlist.isEmpty()) {
                            HashMap map1 = (HashMap) dependentlist.get(0);
                            HashMap map2 = (HashMap) dependentlist.get(1);
                            if (map2 != null && !map2.isEmpty()) {
                                Set<String> viewbys = map2.keySet();
                                request.setAttribute("dependentVieByid", viewbys.toArray()[0].toString());
                                request.setAttribute("dependentviewbyHashMap", map1);
                                String dependentReportId = map2.get(viewbys.toArray()[0]).toString();
                                request.setAttribute("isDepentReport", true);
                                reportViewerBD.prepareReport(dependentReportId, UserId, request, response,zeroFlag);
                            } else {
                                HashMap Viewbyhashmap = new HashMap();
                                Viewbyhashmap.put("dependentviewbyHashMap", map1);
                                session.setAttribute(ReportId, Viewbyhashmap);
                            }
                        }
                        HashMap map = reportViewerBD.getFactDetails(ReportId);
                        if (map != null && !map.isEmpty()) {
                            ArrayList<String> factformulas = (ArrayList<String>) map.get("filterFormula");
                            if (factformulas != null && !factformulas.isEmpty()) {
                                //   
                                session.setAttribute("factFormulas", factformulas);
                            }
                        } else {
                            session.removeAttribute("factFormulas");
                            // 
                        }
//                        else{
//                         session.removeAttribute("dependentVieByid");
//                         session.removeAttribute("dependentviewbyHashMap");
//                         session.removeAttribute("dependentReportQuery");
//
//                        }
                        request.setAttribute("isDepentReport", false);
                        boolean quickRefreshEnable = false;
                        boolean fileExist = false;
                        String filePath = null;
                        HashMap refreshMap = dao.getQuickRefreshData(ReportId);
                        if (refreshMap != null && !refreshMap.isEmpty()) {
                            if (String.valueOf(refreshMap.get("refreshEnable")) != null && !String.valueOf(refreshMap.get("refreshEnable")).equalsIgnoreCase("null")) {
                                quickRefreshEnable = Boolean.parseBoolean(String.valueOf(refreshMap.get("refreshEnable")));
                                filePath = refreshMap.get("filePath").toString();
                                File file = new File(filePath);
                                if (file.exists() && filePath != null && filePath != "") {
                                    fileExist = true;
                                }
                            }
                        }
                        String action = request.getParameter("action");
                        String isSharedReportP = request.getParameter("shareReport");
                        String isShareReportA = String.valueOf(session.getAttribute("shareReport"));
                        //
                        if (quickRefreshEnable && ("open".equals(action)) && fileExist) {
                            reportViewerBD.prepareReportFrmFile(ReportId, UserId, filePath, request, response);
                        } else if (isSharedReportP != null || (isShareReportA != "null")) {
                            String sharedFilePath;
                            if (request.getParameter("filePath") != null) {
                                sharedFilePath = request.getParameter("filePath");
                            } else {
                                sharedFilePath = String.valueOf(session.getAttribute("filePath").toString());
                            }
                            reportViewerBD.prepareReportFrmSharedFile(ReportId, UserId, sharedFilePath, request, response);
                        } else {
                            reportViewerBD.prepareReport(ReportId, UserId, request, response,zeroFlag);
                        }
                        request.setAttribute("loadingimage", imagebuffer.toString());
                        if ((request.getAttribute("isKPIDashboard") != null && request.getAttribute("isKPIDashboard").toString().equalsIgnoreCase("true")) || request.getParameter("isKPIDashboard") != null && request.getParameter("isKPIDashboard").toString().equalsIgnoreCase("true")) {
                            Container containerNew = new Container();
                            if (session.getAttribute("PROGENTABLES") != null) {
                                map = (HashMap) session.getAttribute("PROGENTABLES");
                            } else {
                                map = new HashMap();
                            }
                            if (map.get(ReportId) != null) {
                                containerNew = (Container) map.get(ReportId);
                            }
                            request.setAttribute("roleid", containerNew.getFolderIdsForFact());
                            request.setAttribute("ReportId", ReportId);
                            if (request.getParameter("isKPIDashboard") != null && request.getParameter("isKPIDashboard").toString().equalsIgnoreCase("true")) {
                                request.setAttribute("isKPIDashboard", "true");
                                request.setAttribute("isTimeDashboard", containerNew.IsTimedasboard());
//               return mapping.findForward("reportView");
                            }
                            if (containerNew.IsTimedasboard()) {
                                return mapping.findForward("Showtimedashboard");
                            } else {
                                return mapping.findForward("Showkpidashboard");
                            }
                        } else {
                            logger.info("*************************************end of viewReport() calling***********************************");
                            return mapping.findForward("showViewReport");
                        }
                    } else {
                        return mapping.findForward("invalidReportAccess");
                    }
                } else {
                    if (request.getParameter("shareReport") != null) {
                        //request.setAttribute("shareReport", request.getParameter("shareReport"));
                        //request.setAttribute("filePath", request.getParameter("filePath"));
                        //session.setAttribute("shareReport", request.getParameter("shareReport"));
                        Cookie cookie1 = new Cookie("shareReport", request.getParameter("shareReport"));
                        cookie1.setMaxAge(200);
                        response.addCookie(cookie1);
                        Cookie cookie2 = new Cookie("filePath", request.getParameter("filePath"));
                        cookie2.setMaxAge(200);
                        response.addCookie(cookie2);
                    }
                    request.setAttribute("REPORTID", request.getParameter("REPORTID"));
                    return mapping.findForward("loginPage");
                }
            } catch (Exception exp) {
                logger.error("Exception: ", exp);
                return mapping.findForward("exceptionPage");
            }
        } else {
            return mapping.findForward("sessionExpired");
        }

        /*
         * if (expireAcct.equalsIgnoreCase("expired")) { return
         * mapping.findForward("expireAccountPage"); } else {
         *
         * return mapping.findForward("showViewReport"); }
         */
    }
    //sandeep for quickfilters on top

    public ActionForward setqfilters(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {

        HttpSession session = request.getSession(false);
        String rowViewByArray = request.getParameter("RowViewByArray");
        HashMap map = null;
        Container container = null;
        String reportId = request.getParameter("REPORTID");
        String[] rowIdArr = rowViewByArray.split(",");
        ArrayList rowViewByLst = new ArrayList<String>(Arrays.asList(rowIdArr));

        if (session != null) {
            if (session.getAttribute("PROGENTABLES") != null) {
                map = (HashMap) session.getAttribute("PROGENTABLES");
                container = (Container) map.get(reportId);
            }
            container.setqfilters(rowViewByLst);
        }
        return null;
    }
    //end of sandeep code

    public ActionForward changeViewBy(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        HashMap map = null;
        Container container = null;
        String userId = "";
        String rowViewByArray = request.getParameter("RowViewByArray");
        String[] rowIdArr = rowViewByArray.split(",");
        String colViewByArray = request.getParameter("ColViewByArray");
        String colViewNamesArr = request.getParameter("colViewNamesArr");
        String rowViewNamesArr = request.getParameter("rowViewNamesArr");
        String sortColumnFlag = request.getParameter("sortColumnFlag");
         String singleselect = request.getParameter("singleselection");
//        String viewbyproprtys = request.getParameter("viewbyproprtys");
        String[] rowNamesArr = rowViewNamesArr.split(",");
        String reportId = request.getParameter("reportId");
        Boolean flag = false;
        ArrayList<String> colViewByLst = null;
        String[] colIdArr = colViewByArray.split(",");
        String[] colNamesArr = colViewNamesArr.split(",");
        if (colViewByArray != null && !"".equals(colViewByArray)) {
            colViewByLst = new ArrayList<String>(Arrays.asList(colIdArr));
        } else {
            colViewByLst = new ArrayList<String>();
        }
        ArrayList<String> colViewNamesLst;
        if (colViewNamesArr != null && !"".equals(colViewNamesArr)) {
            colViewNamesLst = new ArrayList<String>(Arrays.asList(colNamesArr));
        } else {
            colViewNamesLst = new ArrayList<String>();
        }
        if(sortColumnFlag!=null && sortColumnFlag.equalsIgnoreCase("true")&&colViewNamesLst!=null &&!colViewNamesLst.isEmpty()){
            session.setAttribute("refreshFrmChViewby", "Y");
        }
        ArrayList rowViewByLst = new ArrayList<String>(Arrays.asList(rowIdArr));
        ArrayList rowViewNamesLst = new ArrayList<String>(Arrays.asList(rowNamesArr));
          ArrayList rowViewByLstName = new ArrayList<String>(Arrays.asList(rowNamesArr));
        for (int i = 0; i < rowViewByLst.size(); i++) {
            if (rowViewByLst.get(i).toString().equalsIgnoreCase("KPI") || rowViewByLst.get(i).toString().equalsIgnoreCase("None")) {
                flag = true;
                session.removeAttribute("ReportLayout");
                session.setAttribute("ReportLayout", rowViewByLst.get(i).toString());
                break;
            }
        }
        if (!flag) {
            session.removeAttribute("ReportLayout");
            session.setAttribute("ReportLayout", "ViewBy");
        }
        if (session != null) {
            if (session.getAttribute("PROGENTABLES") != null) {
                map = (HashMap) session.getAttribute("PROGENTABLES");
                container = (Container) map.get(reportId);
                userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
                 session.setAttribute("singleselection", singleselect);
                if (rowViewByArray != "") {
                    session.removeAttribute("colViewByLst");
                    session.removeAttribute("rowViewByLst");
                    session.setAttribute("colViewByLst", colViewByLst);
                    session.setAttribute("rowViewByLst", rowViewByLst);
                     session.setAttribute("rowViewByLstName", rowViewByLstName);
                    //container.setColumnViewList(colViewByLst);
                    // container.setRowViewList(rowViewByLst);
                    session.removeAttribute("allViewIds");
                    session.removeAttribute("allViewNames");
                    session.removeAttribute("rowViewIdList");
                    session.removeAttribute("colViewIdList");
                    session.removeAttribute("rowNamesLst");
                    session.removeAttribute("colNamesLst");
                }
            }
            return null;
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    public ActionForward showViewBy(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        HashMap map = null;
        HashMap allViewBys = new HashMap();
        ArrayList<String> allViewIds = new ArrayList<String>();
        ArrayList<String> allViewNames = new ArrayList<String>();
        ArrayList<String> rowViewIdList = new ArrayList<String>();
        ArrayList<String> colViewIdList = new ArrayList<String>();
        ArrayList<String> rowNamesLst = new ArrayList<String>();
        ArrayList<String> colNamesLst = new ArrayList<String>();
        String rowName = "";
        String colName = "";
        String ViewFrom = String.valueOf(session.getAttribute("ViewFrom"));
        Container container = null;
        String reportId = request.getParameter("REPORTID");
        String fromdesigner = request.getParameter("fromdesigner");
        String globalfilter = request.getParameter("globalfilter");
        if (fromdesigner == null) {
            fromdesigner = "";
        }
        PbReportCollection collect = new PbReportCollection();
        HashMap ParameterMap = new HashMap();
        String selectedParams = "";
        String viewByName = "";
        String def_id = "";
        if (session != null) {
            if (session.getAttribute("PROGENTABLES") != null) {
                map = (HashMap) session.getAttribute("PROGENTABLES");
                container = (Container) map.get(reportId);
            }
            if (container != null) {
                PbDisplayLabel dispLab = PbDisplayLabel.getPbDisplayLabel();
                def_id = container.getDefaultCompanyId();
                selectedParams = container.getSelectedParameterIds();
                ArrayList alist = new ArrayList();
                String[] selectedParamsArray = null;
                if (selectedParams != null && !selectedParams.equalsIgnoreCase("")) {
                    selectedParamsArray = selectedParams.split(",");
                }
                if (selectedParamsArray != null) {
                    for (int i = 0; i < selectedParamsArray.length; i++) {
                        alist.add(selectedParamsArray[i]);
                    }
                }
                if (ViewFrom.equalsIgnoreCase("Designer") && !fromdesigner.equalsIgnoreCase("fromdesigner")) {
                    ParameterMap = container.getParametersHashMap();
                    allViewIds = (ArrayList<String>) ParameterMap.get("Parameters");
                    allViewNames = (ArrayList<String>) ParameterMap.get("ParametersNames");
                } else {
                    collect = container.getReportCollect();
                    allViewBys = collect.getReportParameters();
                    String[] allKeys = (String[]) (allViewBys.keySet()).toArray(new String[0]);
                    for (int i = 0; i < allViewBys.size(); i++) {
                        allViewIds.add(allKeys[i]);
                        //code added by Amar on Oct 9, 2015
                        if (dispLab != null && dispLab.getColDisplayWithCompany(def_id, allKeys[i]) != null) {
                            viewByName = dispLab.getColDisplayWithCompany(def_id, allKeys[i]);
                        }
                        if (viewByName == null || viewByName.equalsIgnoreCase("") || viewByName.isEmpty()) {
                            viewByName = collect.getElementName(allKeys[i]);
                        }
                        //end of code
                        //allViewNames.add(collect.getElementName(allKeys[i]));
                        allViewNames.add(viewByName);
                        viewByName = "";
                    }
                    for (int i = 0; i < alist.size(); i++) {
                        allViewIds.remove(alist.get(i));
                        allViewNames.remove(collect.getElementName((String) alist.get(i)));
                    }
                    //added by Dinanath
//                    if(request.getParameter("isGraphObject")!=null && request.getParameter("isGraphObject").equalsIgnoreCase("y")){
                    if (request.getParameter("isGraphObject") != null && request.getParameter("isGraphObject").equalsIgnoreCase("y") || (ViewFrom.equalsIgnoreCase("Designer") && fromdesigner.equalsIgnoreCase("fromdesigner"))) {
                    } else {
                        allViewIds.add("KPI");
                        allViewNames.add("KPI");
                        allViewIds.add("None");
                        allViewNames.add("None");
                    }

                    allViewIds.add("TIME");
                    allViewNames.add("Time");
                }
                rowViewIdList = collect.reportRowViewbyValues;
                colViewIdList = collect.reportColViewbyValues;
                if (globalfilter != null && globalfilter.equalsIgnoreCase("true")) {
                    rowViewIdList = container.getqfilters();
                }
                if (rowViewIdList != null && rowViewIdList.size() != 0) {
                    for (int i = 0; i < rowViewIdList.size(); i++) {
                        rowName = (String) rowViewIdList.get(i);
                        if (rowName.equalsIgnoreCase("Time")) {
                            rowNamesLst.add("Time");
                        } else if (rowName.equalsIgnoreCase("KPI")) {
                            rowNamesLst.add("KPI");
                        } else if (rowName.equalsIgnoreCase("None")) {
                            rowNamesLst.add("None");
                        } else {
                            viewByName = "";
                            //code added by Amar on Oct 9, 2015
                            if (dispLab != null && dispLab.getColDisplayWithCompany(def_id, rowName) != null) {
                                viewByName = dispLab.getColDisplayWithCompany(def_id, rowName);
                            }
                            if (viewByName == null || viewByName.equalsIgnoreCase("") || viewByName.isEmpty()) {
                                viewByName = collect.getParameterDispName(rowName);
                            }
                            //end of code
                            //rowNamesLst.add(collect.getParameterDispName(rowName));
                            rowNamesLst.add(viewByName);

                        }
                    }
                }
                if (colViewIdList != null && colViewIdList.size() != 0) {
                    for (int i = 0; i < colViewIdList.size(); i++) {
                        colName = (String) colViewIdList.get(i);
                        if (colName.equalsIgnoreCase("Time")) {
                            colNamesLst.add("Time");
                        } else if (colName.equalsIgnoreCase("KPI")) {
                            colNamesLst.add("KPI");
                        } else if (colName.equalsIgnoreCase("None")) {    //mohit
                            colNamesLst.add("None");
                        } else {
                            colNamesLst.add(collect.getParameterDispName(colName));
                        }
                    }
                }
                //by gopesh for test add measures in change view by section
                if (container.getTableHashMap() != null && !container.getTableHashMap().isEmpty()) {
                    ArrayList aggregationType = new ArrayList();
                    //                ArrayList nameListName = collect.reportQryColNames;
                    ArrayList nameListName = (ArrayList) (container.getTableHashMap().get("MeasuresNames"));
                    ArrayList nameListIds = (ArrayList) (container.getTableHashMap().get("Measures"));
//                ArrayList nameListIds = collect.reportQryElementIds;
                    //for test hybrid summ measures
                    if (container.isSummarizedMeasuresEnabled()) {
                        HashMap summarizedmMesMap = container.getSummerizedTableHashMap();
                        if (summarizedmMesMap != null && !summarizedmMesMap.isEmpty()) {
                            nameListIds.addAll((List<String>) summarizedmMesMap.get("summerizedQryeIds"));
                            nameListName.addAll((List<String>) summarizedmMesMap.get("summerizedQryColNames"));
                        }
                    }
                    aggregationType = collect.reportQryAggregations;
                    for (int i = 0; i < nameListIds.size(); i++) {

                        if (nameListIds.get(i).toString() != null && (nameListIds.get(i).toString().contains("_percentwise") || nameListIds.get(i).toString().contains("_rank") || nameListIds.get(i).toString().contains("_wf") || nameListIds.get(i).toString().contains("_wtrg") || nameListIds.get(i).toString().contains("_rt") || nameListIds.get(i).toString().contains("_pwst") || nameListIds.get(i).toString().contains("_excel") || nameListIds.get(i).toString().contains("_excel_target") || nameListIds.get(i).toString().contains("_deviation_mean") || nameListIds.get(i).toString().contains("_gl") || nameListIds.get(i).toString().contains("_userGl") || nameListIds.get(i).toString().contains("_timeBased") || nameListIds.get(i).toString().contains("_changedPer") || nameListIds.get(i).toString().contains("_glPer"))) {
                            aggregationType.add("SUM");
                        }
                    }
                    if (request.getParameter("isGraphObject") != null && request.getParameter("isGraphObject").equalsIgnoreCase("y")) {
                        try {
                            for (Object nameList11 : nameListIds) {
                                allViewIds.add(nameList11.toString());
                            }
                            for (Object nameList12 : nameListName) {
                                allViewNames.add(nameList12.toString());
                            }
                        } catch (Exception e) {
                            logger.error("Exception: ", e);
                        }
                    }
                    if (container.isSummarizedMeasuresEnabled()) {
                        HashMap summarizedmMesMap = container.getSummerizedTableHashMap();
                        if (summarizedmMesMap != null && !summarizedmMesMap.isEmpty()) {
                            aggregationType.addAll((List<String>) summarizedmMesMap.get("summerizedQryAggregations"));
                        }
                    }
                    session.setAttribute("aggType", aggregationType);
                    if (fromdesigner == null || fromdesigner.equalsIgnoreCase("")) {
                        session.setAttribute("rowMeasIdList", nameListIds);
                        session.setAttribute("rowMeasNamesLst", nameListName);
                    }
                }
                session.setAttribute("allViewIds", allViewIds);
                session.setAttribute("allViewNames", allViewNames);
                if (fromdesigner == null || fromdesigner.equalsIgnoreCase("")) {
                    session.setAttribute("rowViewIdList", rowViewIdList);
                    session.setAttribute("colViewIdList", colViewIdList);
                    session.setAttribute("rowNamesLst", rowNamesLst);
                    session.setAttribute("colNamesLst", colNamesLst);
                }
                if (fromdesigner != null || !fromdesigner.equalsIgnoreCase("")) {
                    if (allViewIds == null || allViewIds.isEmpty() || allViewBys.size() == 0) {
                        PrintWriter out = null;
                        out = response.getWriter();
                        out.print("NoViewBys");
                    }
                }
            }
        }
        return null;
    }

//called when user clicks on customize report in report viewer and it is obsolete as it is not used presently.
    //if required it is be upadted  based on the changes done in report viewer
    public ActionForward customizeReport(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        PbReportViewerBD reportViewBD = new PbReportViewerBD();
        String oldReportId = request.getParameter("REPORTID");
        String customReportName = request.getParameter("custRepName");
        String customReportDesc = request.getParameter("custRepDesc");
        String backToRD = request.getParameter("backToRD");
        String customReportId = null;
        HttpSession session = request.getSession(false);
        if (session != null) {
            try {
                if (backToRD != null) {
                    customReportId = reportViewBD.backToReportDesigner(oldReportId, request, response, session);
                } else {
                    customReportId = reportViewBD.customizeReport(oldReportId, customReportName, customReportDesc, request, response, session);
                }

            } catch (Exception exp) {
                logger.error("Exception: ", exp);
                return mapping.findForward("exceptionPage");
            }
            request.setAttribute("CustomReportId", customReportId);
            return mapping.findForward("reportCustomize");
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    //code for New Customize report starts here
    public ActionForward getMeasures(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        HashMap map = new HashMap();
        Container container = null;
        String customReportId = "";
        HashMap ParametersHashMap = null;
        ArrayList Parameters = null;
        ArrayList ParametersNames = null;
        if (session != null) {
            customReportId = request.getParameter("REPORTID");
            map = (HashMap) session.getAttribute("PROGENTABLES");
            container = (Container) map.get(customReportId);
            ParametersHashMap = container.getParametersHashMap();
            if (ParametersHashMap.get("ParametersNames") != null) {
                Parameters = (ArrayList) ParametersHashMap.get("Parameters");
                ParametersNames = (ArrayList) ParametersHashMap.get("ParametersNames");
            }
            String foldersIds = request.getParameter("foldersIds");
            ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
            String result = reportTemplateDAO.getMeasures(foldersIds, Parameters, request.getContextPath());
            request.setAttribute("Measures", result);
            return mapping.findForward("customizeMeasures");
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    public ActionForward getFactTreeHtml(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        HashMap map = new HashMap();
        Container container = null;
        String reportId = "";
        HashMap ParametersHashMap = null;
        ArrayList Parameters = null;
        if (session != null) {
            reportId = request.getParameter("REPORTID");
            map = (HashMap) session.getAttribute("PROGENTABLES");
            container = (Container) map.get(reportId);
            ParametersHashMap = container.getParametersHashMap();
            if (ParametersHashMap.get("ParametersNames") != null) {
                Parameters = (ArrayList) ParametersHashMap.get("Parameters");
            }
            String foldersIds = request.getParameter("foldersIds");
            ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
            String result = reportTemplateDAO.getMeasures(foldersIds, Parameters, request.getContextPath());
            PrintWriter out = null;
            try {
                out = response.getWriter();
                out.print(result);
            } catch (IOException e) {
                logger.error("Exception: ", e);
            }
            return null;
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    public ActionForward buildTable(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        PbReportViewerBD reportViewerBD = new PbReportViewerBD();
        if (session != null && session.getAttribute("PROGENTABLES") != null) {
            String customReportId = request.getParameter("REPORTID");
            String buildTableChange = request.getParameter("buildTableChange");
            String Measures = request.getParameter("Msrs");
            String rowEdgeParams = request.getParameter("rowEdgeParams");
            String colEdgeParams = request.getParameter("colEdgeParams");
            String MeasureNames = request.getParameter("MsrsNames");//newly added on 15-10-2009 by santhosh.kumar@progenbusiness.com
            String rowEdgeParamsNames = request.getParameter("rowEdgeParamsNames");//newly added on 15-10-2009 by santhosh.kumar@progenbusiness.com
            String colEdgeParamsNames = request.getParameter("colEdgeParamsNames");//newly added on 15-10-2009 by santhosh.kumar@progenbusiness.com
            HashMap map = new HashMap();
            Container container = null;
            map = (HashMap) session.getAttribute("PROGENTABLES");
            container = (Container) map.get(customReportId);
            HashMap TableHashMap = container.getTableHashMap();//(HashMap) session.getAttribute("TableHashMap");
            HashMap GraphHashMap = container.getGraphHashMap();
            HashMap ParametersHashMap = container.getParametersHashMap();
            ArrayList Parameters = null;
            ArrayList ParametersNames = null;
            if (ParametersHashMap.get("ParametersNames") != null) {
                Parameters = (ArrayList) ParametersHashMap.get("Parameters");
                ParametersNames = (ArrayList) ParametersHashMap.get("ParametersNames");
            }
            try {
                if (TableHashMap != null) {
                    if (buildTableChange != null && buildTableChange.equalsIgnoreCase("REP")) {
                        String[] REP = rowEdgeParams.split(",");
                        String[] REPNames = rowEdgeParamsNames.split(",");//newly added on 15-10-2009 by santhosh.kumar@progenbusiness.com
                        ArrayList rowEdgeArray = new ArrayList();
                        ArrayList rowEdgeNameArray = new ArrayList();//newly added on 15-10-2009 by santhosh.kumar@progenbusiness.com
                        for (int i = 0; i < REP.length; i++) {
                            if (!(REP[i].equalsIgnoreCase(""))) {
                                rowEdgeArray.add(REP[i]);
                                rowEdgeNameArray.add(REPNames[i]);//newly added on 15-10-2009 by santhosh.kumar@progenbusiness.com
                            }
                        }
                        TableHashMap.put("REP", rowEdgeArray);
                        TableHashMap.put("REPNames", rowEdgeNameArray);//newly added on 15-10-2009 by santhosh.kumar@progenbusiness.com
                        GraphHashMap = reportViewerBD.changeViewBys(GraphHashMap, rowEdgeArray, rowEdgeNameArray, Parameters, ParametersNames);
                    }
                    if (buildTableChange != null && buildTableChange.equalsIgnoreCase("CEP")) {
                        String[] CEP = colEdgeParams.split(",");
                        String[] CEPNames = colEdgeParamsNames.split(",");//newly added on 15-10-2009 by santhosh.kumar@progenbusiness.com
                        ArrayList colEdgeArray = new ArrayList();
                        ArrayList colEdgeNameArray = new ArrayList();//newly added on 15-10-2009 by santhosh.kumar@progenbusiness.com
                        for (int i = 0; i < CEP.length; i++) {
                            if (!(CEP[i].equalsIgnoreCase(""))) {
                                colEdgeArray.add(CEP[i]);
                                colEdgeNameArray.add(CEPNames[i]);//newly added on 15-10-2009 by santhosh.kumar@progenbusiness.com
                            }
                        }
                        TableHashMap.put("CEP", colEdgeArray);
                        TableHashMap.put("CEPNames", colEdgeNameArray);//newly added on 15-10-2009 by santhosh.kumar@progenbusiness.com
                    }
                    if (buildTableChange != null && buildTableChange.equalsIgnoreCase("Measures") && Measures != null) {
                        if (MeasureNames != null) {
                            MeasureNames = MeasureNames.replace("^", "%");
                        }
                        String[] Msrs = Measures.split(",");
                        String[] MsrsNames = MeasureNames.split(",");//newly added on 15-10-2009 by santhosh.kumar@progenbusiness.com

                        ArrayList measureArray = new ArrayList();
                        ArrayList MeasuresNames = new ArrayList();//newly added on 15-10-2009 by santhosh.kumar@progenbusiness.com
                        for (int i = 0; i < Msrs.length; i++) {
                            if (!(Msrs[i].equalsIgnoreCase(""))) {
                                measureArray.add(Msrs[i]);
                                MeasuresNames.add(MsrsNames[i]);//newly added on 15-10-2009 by santhosh.kumar@progenbusiness.com
                            }
                        }
                        TableHashMap.put("Measures", measureArray);
                        TableHashMap.put("MeasuresNames", MeasuresNames);//newly added on 15-10-2009 by santhosh.kumar@progenbusiness.com
                    }
                }
                //session.setAttribute("TableHashMap", TableHashMap);
                container.setTableHashMap(TableHashMap);
                container.setGraphHashMap(GraphHashMap);
                return null;
            } catch (Exception exp) {
                logger.error("Exception: ", exp);
                return mapping.findForward("exceptionPage");
            }
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    public ActionForward buildParams(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        ProgenParam pParam = new ProgenParam();
        ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
        HttpSession session = request.getSession(false);
        String foldersIds = null;
        String minTimeLevel = null;
        HashMap ParametersMap;
        if (session != null && session.getAttribute("PROGENTABLES") != null) {
            String customReportId = request.getParameter("REPORTID");
            HashMap map = new HashMap();
            Container container = null;
            map = (HashMap) session.getAttribute("PROGENTABLES");
            container = (Container) map.get(customReportId);
            foldersIds = request.getParameter("foldersIds");
            ParametersMap = container.getParametersHashMap();//(HashMap) session.getAttribute("ParametersHashMap");
            if (ParametersMap == null) {
                ParametersMap = new HashMap();
            }
            ParametersMap.put("UserFolderIds", foldersIds);//added by santhosh.kumar@progenbusiness.com on 03/12/2009 for getting Report Biz Roles
            minTimeLevel = reportTemplateDAO.getUserFolderMinTimeLevel(foldersIds);
            String paramIds = request.getParameter("params");
            String[] parameterIds = null;
            ArrayList Parameters = new ArrayList();
            //update Param hashmap in session
            if (paramIds != null) {
                parameterIds = paramIds.split(",");
                for (int paramCount = 0; paramCount < parameterIds.length; paramCount++) {
                    Parameters.add(parameterIds[paramCount]);
                }
                ParametersMap.put("Parameters", Parameters);
                //session.setAttribute("ParametersHashMap", ParametersMap);
                HashMap timeDimMap = new HashMap();
                ArrayList timeDetails = new ArrayList();
                ArrayList dateArray = new ArrayList();
                ArrayList weekArray = new ArrayList();
                ArrayList asofWeekArray = new ArrayList();
                ArrayList monthArray = new ArrayList();
                ArrayList asofMonthArray = new ArrayList();
                ArrayList qtrArray = new ArrayList();
                ArrayList asofQtrArray = new ArrayList();
                ArrayList yearArray = new ArrayList();
                ArrayList asofYrArray = new ArrayList();
                ArrayList periodTypeArray = new ArrayList();
                ArrayList compareArray = new ArrayList();
                Date date = new Date();
                String DATE_FORMAT = "MM/dd/yyyy";
                SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
                if (ParametersMap.get("TimeDimHashMap") == null || ParametersMap.get("TimeDetailstList") == null) {
                    if (minTimeLevel.equals("5")) {
                        //dateArray.add(sdf.format(date));
                        dateArray.add(pParam.getdateforpage().toString());//added on 28-11-09
                        dateArray.add("CBO_AS_OF_DATE");
                        dateArray.add("DATE");
                        dateArray.add("1");
                        dateArray.add("1");
                        dateArray.add(null);
                        dateArray.add("AS_OF_DATE");
                        timeDimMap.put("AS_OF_DATE", dateArray);
                        periodTypeArray.add("MONTH");
                        periodTypeArray.add("CBO_PRG_PERIOD_TYPE");
                        periodTypeArray.add("AGGREGATION");
                        periodTypeArray.add("2");
                        periodTypeArray.add("2");
                        periodTypeArray.add("MONTH");
                        periodTypeArray.add("PRG_PERIOD_TYPE");
                        timeDimMap.put("PRG_PERIOD_TYPE", periodTypeArray);
                        compareArray.add("LAST PERIOD");
                        compareArray.add("CBO_PRG_COMPARE");
                        compareArray.add("COMPARE");
                        compareArray.add("3");
                        compareArray.add("1001");
                        compareArray.add("LAST PERIOD");
                        compareArray.add("PRG_COMPARE");
                        timeDimMap.put("PRG_COMPARE", compareArray);
                        timeDetails.add("Day");
                        timeDetails.add("PRG_STD");
                        //timeDetails.add(sdf.format(date));
                        timeDetails.add(pParam.getdateforpage().toString());//added on 28-11-09
                        timeDetails.add("Month");
                        timeDetails.add("Last Period");
                    } else if (minTimeLevel.equals("4")) {
                        weekArray.add(null);
                        weekArray.add("CBO_AS_OF_WEEK");
                        weekArray.add("WEEK");
                        weekArray.add("1");
                        weekArray.add("1");
                        weekArray.add(null);
                        weekArray.add("AS_OF_WEEK");
                        timeDimMap.put("AS_OF_WEEK", weekArray);
                        asofWeekArray.add(null);
                        asofWeekArray.add("CBO_AS_OF_WEEK1");
                        asofWeekArray.add("COMPAREWEEK");
                        asofWeekArray.add("2");
                        asofWeekArray.add("2");
                        asofWeekArray.add(null);
                        asofWeekArray.add("AS_OF_WEEK1");
                        timeDimMap.put("AS_OF_WEEK1", asofWeekArray);
                        timeDetails.add("WEEK");
                        timeDetails.add("PRG_WEEK_CMP");
                        timeDetails.add(null);
                        timeDetails.add(null);
                    } else if (minTimeLevel.equals("3")) {
                        monthArray.add(null);
                        monthArray.add("CBO_AS_OF_MONTH");
                        monthArray.add("MONTH");
                        monthArray.add("1");
                        monthArray.add("1");
                        monthArray.add(null);
                        monthArray.add("AS_OF_MONTH");
                        timeDimMap.put("AS_OF_MONTH", monthArray);
                        periodTypeArray.add("MONTH");
                        periodTypeArray.add("CBO_PRG_PERIOD_TYPE");
                        periodTypeArray.add("AGGREGATION");
                        periodTypeArray.add("2");
                        periodTypeArray.add("2");
                        periodTypeArray.add("MONTH");
                        periodTypeArray.add("PRG_PERIOD_TYPE");
                        timeDimMap.put("PRG_PERIOD_TYPE", periodTypeArray);
                        compareArray.add("LAST PERIOD");
                        compareArray.add("CBO_PRG_COMPARE");
                        compareArray.add("COMPARE");
                        compareArray.add("3");
                        compareArray.add("1001");
                        compareArray.add("LAST PERIOD");
                        compareArray.add("PRG_COMPARE");
                        timeDimMap.put("PRG_COMPARE", compareArray);
                        timeDetails.add("Month");
                        timeDetails.add("PRG_STD");
                        timeDetails.add(null);
                        timeDetails.add("Month");
                        timeDetails.add("Last Period");
                    } else if (minTimeLevel.equals("2")) {
                        qtrArray.add(null);
                        qtrArray.add("CBO_AS_OF_QUARTER");
                        qtrArray.add("QUARTER");
                        qtrArray.add("1");
                        qtrArray.add("1");
                        qtrArray.add(null);
                        qtrArray.add("AS_OF_QUARTER");
                        timeDimMap.put("AS_OF_QUARTER", qtrArray);
                        asofQtrArray.add(null);
                        asofQtrArray.add("CBO_AS_OF_QUARTER1");
                        asofQtrArray.add("COMPAREQUARTER");
                        asofQtrArray.add("2");
                        asofQtrArray.add("2");
                        asofQtrArray.add(null);
                        asofQtrArray.add("AS_OF_QUARTER1");
                        timeDimMap.put("AS_OF_QUARTER1", asofQtrArray);
                        timeDetails.add("QUARTER");
                        timeDetails.add("PRG_QUARTER_CMP");
                        timeDetails.add(null);
                        timeDetails.add(null);
                    } else if (minTimeLevel.equals("1")) {
                        yearArray.add(null);
                        yearArray.add("CBO_AS_OF_YEAR");
                        yearArray.add("YEAR");
                        yearArray.add("1");
                        yearArray.add("1");
                        yearArray.add(null);
                        yearArray.add("AS_OF_YEAR");
                        timeDimMap.put("AS_OF_YEAR", yearArray);
                        asofYrArray.add(null);
                        asofYrArray.add("CBO_AS_OF_YEAR1");
                        asofYrArray.add("COMPAREYEAR");
                        asofYrArray.add("2");
                        asofYrArray.add("2");
                        asofYrArray.add(null);
                        asofYrArray.add("AS_OF_YEAR1");
                        timeDimMap.put("AS_OF_YEAR1", asofYrArray);
                        timeDetails.add("YEAR");
                        timeDetails.add("PRG_YEAR_CMP");
                        timeDetails.add(null);
                        timeDetails.add(null);
                    }
                    ParametersMap.put("TimeDimHashMap", timeDimMap);
                    ParametersMap.put("TimeDetailstList", timeDetails);
                }
                container.setParametersHashMap(ParametersMap);
            }
            return null;
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    public ActionForward buildGraphs(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        PbReportViewerBD reportViewBD = new PbReportViewerBD();
        HttpSession session = request.getSession(false);
        HashMap map = new HashMap();
        Container container = null;
        String customReportId = "";
        String result = "";
        HashMap GraphHashMap = null;
        String graphChange = null;
        String grpId = null;
        String grpType = null;
        String grpSize = null;
        String grpColumns = null;
        String grpViewBys = null;
        String grpIds = null;
        //graph details code starts from here
        String grpTitle = null;
        String grpLegend = null;
        String grpLegendLoc = null;
        String measNamePosition = null;
        String sym1 = "#";
        String sym2 = "#";
        String grpshowX = null;
        String grpshowY = null;
        String grplyaxislabel = null;
        String grpryaxislabel = null;
        String grpdrill = null;
        String grpbcolor = null;
        String grpfcolor = null;
        String grpdata = null;
        //graph details related code end here
        String grpColumnsNames = null;
        ArrayList allGraphColumns = null;
        PrintWriter out = response.getWriter();
        HashMap ParametersHashMap = null;
        HashMap TableHashMap = null;
        HashMap ReportHashMap = null;
        HashMap GraphClassesHashMap = null;
        HashMap GraphSizesDtlsHashMap = null;
        String leftgrpColumns = null;
        String rightgrpColumns = null;
        if (session != null) {
            try {
                customReportId = request.getParameter("REPORTID");
                map = (HashMap) session.getAttribute("PROGENTABLES");
                container = (Container) map.get(customReportId);
                graphChange = request.getParameter("graphChange");
                grpId = request.getParameter("gid");
                grpType = request.getParameter("grptypid");
                grpSize = request.getParameter("grpsizeid");
                grpColumns = request.getParameter("grpColumns");
                grpViewBys = request.getParameter("grpViewBys");
                grpIds = request.getParameter("grpIds");
                //graph details code starts from here
                grpTitle = request.getParameter("grpTitle");
                grpLegend = request.getParameter("grpLegend");
                grpLegendLoc = request.getParameter("grpLegendLoc");
                measNamePosition = request.getParameter("measNamePosition");
                grpshowX = request.getParameter("showX");
                grpshowY = request.getParameter("showY");
                grplyaxislabel = request.getParameter("lyaxisLabel");
                grpryaxislabel = request.getParameter("ryaxisLabel");
                grpdrill = request.getParameter("Drill");
                grpbcolor = request.getParameter("bcolor");
                grpbcolor = sym1 + grpbcolor;
                grpfcolor = request.getParameter("fcolor");
                grpfcolor = sym2 + grpfcolor;
                grpdata = request.getParameter("Data");
                //graph details related code end here
                grpColumnsNames = request.getParameter("grpColumnsNames");//newly added on 15-10-2009 by santhosh.kumar@progenbusiness.com
                leftgrpColumns = request.getParameter("leftColumns");
                rightgrpColumns = request.getParameter("rightColumns");
                ParametersHashMap = container.getParametersHashMap();
                TableHashMap = container.getTableHashMap();
                ReportHashMap = container.getReportHashMap();
                GraphHashMap = container.getGraphHashMap();
                GraphClassesHashMap = (HashMap) session.getAttribute("GraphClassesHashMap");
                GraphSizesDtlsHashMap = (HashMap) session.getAttribute("GraphSizesDtlsHashMap");
                //added by santhosh.kumar@progenbusiness.com on 03/12/2009 fro setting userId and request object
                reportViewBD.setUserId(String.valueOf(session.getAttribute("USERID")));
                reportViewBD.setBizRoles(String.valueOf(ParametersHashMap.get("UserFolderIds")));
                if (GraphHashMap != null) {
                    if (GraphHashMap.get("AllGraphColumns") != null) {
                        allGraphColumns = (ArrayList) GraphHashMap.get("AllGraphColumns");
                    }
                    if (allGraphColumns == null) {
                        allGraphColumns = new ArrayList();
                    }
                    if (graphChange != null) {
                        if (graphChange.equalsIgnoreCase("default")) {
                            if (grpId != null && grpType != null) {
                                if (!("".equalsIgnoreCase(grpId)) && !("".equalsIgnoreCase(grpType))) {
                                    GraphHashMap = reportViewBD.setDefaults(grpId, grpType, GraphHashMap, ParametersHashMap, TableHashMap, GraphSizesDtlsHashMap, GraphClassesHashMap, ReportHashMap);
                                }
                            }
                        } else if (graphChange.equalsIgnoreCase("GrpSize")) {
                            if (grpId != null && grpSize != null) {
                                if (!("".equalsIgnoreCase(grpId)) && !("".equalsIgnoreCase(grpSize))) {
                                    GraphHashMap = reportViewBD.changeGraphSize(GraphHashMap, grpSize, grpId, ParametersHashMap, TableHashMap, GraphSizesDtlsHashMap);
                                }
                            }
                        } else if (graphChange.equalsIgnoreCase("GrpColumns")) {
                            if (grpId != null && grpColumns != null) {
                                if (!("".equalsIgnoreCase(grpId)) && !("".equalsIgnoreCase(grpColumns))) {

                                    GraphHashMap = reportViewBD.changeGraphColumns(GraphHashMap, grpColumns, grpId, ParametersHashMap, TableHashMap, grpColumns);
                                    String[] graphCols = grpColumns.split(",");
                                    for (int i = 0; i < graphCols.length; i++) {
                                        if (!allGraphColumns.contains(graphCols[i])) {
                                            allGraphColumns.add(graphCols[i]);
                                        }
                                    }
                                    GraphHashMap.put("AllGraphColumns", allGraphColumns);

                                }
                            }
                        } else if (graphChange.equalsIgnoreCase("GrpType")) {
                            if (grpId != null && grpType != null) {
                                if (!("".equalsIgnoreCase(grpId)) && !("".equalsIgnoreCase(grpType))) {

                                    GraphHashMap = reportViewBD.changeGraphType(GraphHashMap, grpType, grpId, ParametersHashMap, TableHashMap, GraphClassesHashMap);
                                }
                            }
                        } else if (graphChange.equalsIgnoreCase("GrpViewBys")) {
                            if (grpId != null && grpViewBys != null) {
                                if (!("".equalsIgnoreCase(grpId)) && !("".equalsIgnoreCase(grpViewBys))) {
                                    GraphHashMap = reportViewBD.changeViewBys(GraphHashMap, grpViewBys, grpId);

                                }
                            }
                        } else if (graphChange.equalsIgnoreCase("DeleteGraph")) {
                            if (grpId != null && grpIds != null) {
                                if (!("".equalsIgnoreCase(grpId) && ("".equalsIgnoreCase(grpIds)))) {

                                    String[] tempGraphIds = grpIds.split(",");
//                                    String temp = "";
                                    StringBuilder temp = new StringBuilder();
                                    if (tempGraphIds.length <= 1) {
                                        GraphHashMap.remove(grpId);
                                        grpIds = null;
                                        GraphHashMap.put("graphIds", grpIds);
                                    } else {
                                        for (int i = 0; i < tempGraphIds.length; i++) {
                                            if (tempGraphIds[i].equalsIgnoreCase(grpId)) {
                                            } else {
//                                                 temp += "," + tempGraphIds[i];
                                                temp.append(",").append(tempGraphIds[i]);
                                            }
                                        }
//                                        if (!(temp.equalsIgnoreCase(""))) {
//                                            temp = temp.substring(1);
//                                        }
                                        if (temp.length() > 0) {
                                            temp = new StringBuilder(temp.substring(1));
                                        }
                                        grpIds = temp.toString();

                                        GraphHashMap.remove(grpId);
                                        GraphHashMap.put("graphIds", temp.toString());
                                    }
                                }
                            }
                        }/*
                         * else if
                         * (graphChange.equalsIgnoreCase("GraphDetails")) { if
                         * (grpId != null && grpTitle != null) { GraphHashMap =
                         * reportViewBD.changeGraphTitle(grpId, grpTitle,
                         * GraphHashMap);
                         *
                         * }
                         * }
                         */ else if (graphChange.equalsIgnoreCase("GraphDetails")) {
                            if (grpId != null && grpTitle != null) {
                                GraphHashMap = reportViewBD.changeGraphDetails(grpId, grpTitle, grpLegend, grpLegendLoc, grpshowX, grpshowY, grplyaxislabel, grpryaxislabel, grpdrill, grpbcolor, grpfcolor, grpdata, GraphHashMap);
                            }
                        } else if (graphChange.equalsIgnoreCase("changeDualAxisColumns")) {
                            if (grpId != null && grpColumns != null && leftgrpColumns != null && rightgrpColumns != null) {
                                if (!("".equalsIgnoreCase(grpId)) && !("".equalsIgnoreCase(grpColumns))) {
                                    GraphHashMap = reportViewBD.changeDualAxisColumns(GraphHashMap, grpId, ParametersHashMap, TableHashMap, leftgrpColumns, rightgrpColumns);
                                    String[] graphCols = grpColumns.split(",");
                                    for (int i = 0; i < graphCols.length; i++) {
                                        if (!allGraphColumns.contains(graphCols[i])) {
                                            allGraphColumns.add(graphCols[i]);
                                        }
                                    }
                                    GraphHashMap.put("AllGraphColumns", allGraphColumns);
                                }
                            }
                        } else if (graphChange.equalsIgnoreCase("All")) {
                        }

                    }
                    container.setGraphHashMap(GraphHashMap);
                    result = reportViewBD.buildGraph(container, request, response, grpIds);

                    out.print(result);
                }
                return null;
            } catch (Exception e) {
                logger.error("Exception: ", e);
                return mapping.findForward("exceptionPage");
            }
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    public ActionForward dispParams(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        ReportTemplateDAO reportDAO = new ReportTemplateDAO();
        String params = request.getParameter("params");
        String customReportId = request.getParameter("REPORTID");
        HttpSession session = request.getSession(false);
        if (session != null) {
            HashMap map = new HashMap();
            Container container = null;
            map = (HashMap) session.getAttribute("PROGENTABLES");
            container = (Container) map.get(customReportId);
            try {
                HashMap ParametersHashMap = container.getParametersHashMap();

                String result = reportDAO.dispParameters(params, ParametersHashMap);
                PrintWriter out = response.getWriter();
                out.print(result);
                return null;
            } catch (IOException e) {
                logger.error("Exception: ", e);
                return mapping.findForward("exceptionPage");
            }

        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    public ActionForward dispTable(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        PbReportViewerBD reportViewBD = new PbReportViewerBD();

        String result = "";
        HttpSession session = request.getSession(false);
        if (session != null) {
            String customReportId = request.getParameter("REPORTID");
            HashMap map = new HashMap();
            Container container = null;
            map = (HashMap) session.getAttribute("PROGENTABLES");
            container = (Container) map.get(customReportId);

            try {
                HashMap ParametersHashMap = container.getParametersHashMap();//(HashMap) session.getAttribute("ParametersHashMap");
                HashMap TableHashMap = container.getTableHashMap();//(HashMap) session.getAttribute("TableHashMap");
                HashMap GraphHashMap = container.getGraphHashMap();//(HashMap) session.getAttribute("GraphHashMap");
                reportViewBD.setReportId(customReportId);
                result = reportViewBD.buildTable(ParametersHashMap, TableHashMap, GraphHashMap, request.getContextPath());
                PrintWriter out = response.getWriter();
                out.print(result);
                return null;
            } catch (IOException e) {
                logger.error("Exception: ", e);
                return mapping.findForward("exceptionPage");
            }
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    public ActionForward refreshGraphs(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        String result = "";
        HttpSession session = request.getSession(false);
        HashMap ParametersHashMap = null;
        PbReportViewerBD reportViewBD = new PbReportViewerBD();
        if (session != null) {
            String customReportId = request.getParameter("REPORTID");
            HashMap map = new HashMap();
            Container container = null;
            map = (HashMap) session.getAttribute("PROGENTABLES");
            container = (Container) map.get(customReportId);
            try {
                HashMap GraphHashMap = container.getGraphHashMap();//(HashMap) session.getAttribute("GraphHashMap");
                ParametersHashMap = container.getParametersHashMap();
                String grpIds = "";
                if (GraphHashMap.get("graphIds") != null) {
                    grpIds = (String) GraphHashMap.get("graphIds");
                }
                //added by santhosh.kumar@progenbusiness.com on 03/12/2009 fro setting userId and request object
                reportViewBD.setUserId(String.valueOf(session.getAttribute("USERID")));
                reportViewBD.setBizRoles(String.valueOf(ParametersHashMap.get("UserFolderIds")));
                ///added bu susheela on 11feb10
                reportViewBD.setReportId(customReportId);
                result = reportViewBD.buildGraph(container, request, response, grpIds);
                PrintWriter out = response.getWriter();
                out.print(result);
                return null;
            } catch (IOException e) {
                logger.error("Exception: ", e);
                return mapping.findForward("exceptionPage");
            }
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    public ActionForward saveCustomReport(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        HashMap parametersMap = null;
        HashMap TableHashMap = null;
        HashMap reportMap = null;
        HashMap GraphHashMap = null;
        HashMap paramDefaultValuesHashMap = null;//added by bharathi reddy
        String reportName = null;
        String reportDesc = null;
        String UserFolderIds = null;
        ReportTemplateBD BD = new ReportTemplateBD();
        String reportId = "";
        if (session != null) {
            String customReportId = request.getParameter("REPORTID");
            HashMap map = new HashMap();
            Container container = null;
            map = (HashMap) session.getAttribute("PROGENTABLES");
            container = (Container) map.get(customReportId);
            parametersMap = container.getParametersHashMap();//(HashMap) session.getAttribute("ParametersHashMap");
            TableHashMap = container.getTableHashMap();//(HashMap) session.getAttribute("TableHashMap");
            reportMap = container.getReportHashMap();//(HashMap) session.getAttribute("ReportHashMap");
            GraphHashMap = container.getGraphHashMap();//(HashMap) session.getAttribute("GraphHashMap");
            //paramDefaultValuesHashMap = container.getParamDefaultValuesHashMap();//added by bharathi reddy
            reportName = container.getReportName();//String.valueOf(reportMap.get("ReportName"));
            reportDesc = container.getReportDesc();//String.valueOf(reportMap.get("ReportDesc"));
            UserFolderIds = String.valueOf(parametersMap.get("UserFolderIds"));
            reportId = BD.saveReport(container, reportName, reportDesc, Integer.parseInt(customReportId), null);
            map.remove(customReportId);
            request.setAttribute("REPORTID", reportId);
            request.setAttribute("ReportType", "R");
            request.setAttribute("UserFolderIds", String.valueOf(parametersMap.get("UserFolderIds")));

            return mapping.findForward("reportAssignment");
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    public ActionForward getUserDims(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {

        HttpSession session = request.getSession(false);
        String customReportId = request.getParameter("REPORTID");
        String PbUserId = "";
        if (session != null) {
            String foldersIds = request.getParameter("foldersIds");
            PbUserId = String.valueOf(session.getAttribute("USERID"));
            HashMap map = new HashMap();
            Container container = null;
            map = (HashMap) session.getAttribute("PROGENTABLES");
            container = (Container) map.get(customReportId);
            HashMap ParametersHashMap = container.getParametersHashMap();
            ParametersHashMap.put("UserFolderIds", foldersIds);
            ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
            String result = reportTemplateDAO.getUserDims(foldersIds, PbUserId);
            PrintWriter out = response.getWriter();
            out.print(result);
            session.setAttribute("ParametersHashMap", ParametersHashMap);

            return null;
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    //for any operations in graphs section during report viewer other than graph columns changes
    public ActionForward graphChanges(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        HashMap map = null;
        ReportTemplateBD reportTemplateBD = new ReportTemplateBD();
        Container container = null;
        HashMap GraphHashMap = null;
        HashMap singleGraphDetails = null;
        String grpType = null;
        String grpSize = null;
        String grpId = null;
        String REPORTID = null;
        String TableId = null;
        String graphChange = null;
        String presCollist = null;
        String swapBy = null;
        String rowValues = null;
        String showLegends = null;
        String showGT = null;
        String graphLegendLoc = null;
        String nbrFormat = null;
        String graphSymbol = null;
        String measureNamePosition = " ";
        String showlyAxis = "";
        String showryAxis = "";
        String showxAxis = "";
        String graphGridLines = null;
        HashMap GraphClassesHashMap = null;
        HashMap GraphSizesDtlsHashMap = null;
        String grpIds = null;
        String graphName = "";
        String graphDisplayRows = "";
        String startindex = null;
        String endindex = null;
        //
        String showMinMaxRange = null;
        String targetRange = null;
        String startValue = null;
        String endValue = null;
        boolean isShowLabels = false;
        boolean isGraphLocalDrill = false;
        int targetPerDay;
        double dailyTarget = 0.0;
        String stackedType = "";
        boolean stackedFlag = false;
        String yaxiscaliration = null;
        String measureFormat = null;
        String measureValueRounding = null;
        String axisLabelPosition = null;
        String calibration = null;
        String firstChartType = null;
        String secondChartType = null;
        String rgbColorCode = null;
        String[] rgbColorArr = null;
        String displayCols = null;
        String yaxisstart = "";
        String yaxisend = "";
        String yaxiscalibration = "";
        String xaxisstart = "";
        String xaxisend = "";
        String xaxiscalibration = "";
        String y2axisstart = "";
        String y2axisend = "";
        String y2axiscalibration = "";
        boolean istransposeData = false;
        String yAxisRounding = "";
        String xAxisRounding = "";
        String y2AxisRounding = "";
        String targetValue = "";
        String tickdisplay = ""; //krk
        boolean isAdhocEnabled = false;
        boolean colorGrouping = false;
        String labeldir = "";
        String legendsPerRow = "";
        String graphdisp = "";
        String graphtype1 = "";
        String graphtype2 = "";
        String targetcolor = "";
        String drilltype = "";
        String datebyInterval = "";
        String targetType = "Standard";
        boolean appendXaxis = false;
        boolean appendLegend = false;
        boolean supriseZeroValues = false;
        boolean tooltipXaxis = true;
        String Flag = "";
        String viewbyLabels = "";
        String isOthersFlag = "";
        String viewOthers = "";
        if (session != null) {
            if (session.getAttribute("PROGENTABLES") != null) {
                map = (HashMap) session.getAttribute("PROGENTABLES");
                grpId = request.getParameter("gid");
                grpType = request.getParameter("grptypid");
                grpSize = request.getParameter("grpsizeid");
                REPORTID = request.getParameter("REPORTID");
                TableId = request.getParameter("TableId");
                graphChange = request.getParameter("graphChange");
                rowValues = request.getParameter("rowValues");
                showLegends = request.getParameter("showLegends");
                showGT = request.getParameter("showGT");
                graphSymbol = request.getParameter("graphSymbol");
                measureNamePosition = request.getParameter("measureNamePosition");
                showlyAxis = request.getParameter("showlyAxis");
                showryAxis = request.getParameter("showryAxis");
                showxAxis = request.getParameter("showxAxis");
                swapBy = request.getParameter("swapBy");
                grpIds = request.getParameter("grpIds");
                graphName = request.getParameter("graphName");
                container = (Container) map.get(REPORTID);
                showMinMaxRange = request.getParameter("showMinMaxRange");
                targetRange = request.getParameter("targetRange");
                startValue = request.getParameter("startValue");
                endValue = request.getParameter("endValue");
                stackedType = request.getParameter("absStacked");
                //added by swati
                measureFormat = request.getParameter("measureFormat");
                measureValueRounding = request.getParameter("measureRound");
                axisLabelPosition = request.getParameter("axisLabelPosition");
                calibration = request.getParameter("calibration");
                yAxisRounding = request.getParameter("yAxisRounding");
                xAxisRounding = request.getParameter("xAxisRounding");
                y2AxisRounding = request.getParameter("y2AxisRounding");
                targetValue = request.getParameter("targetValue");
                tickdisplay = request.getParameter("tickdisplay"); //krk
                labeldir = request.getParameter("labelDir");
                graphdisp = request.getParameter("graphDisp");
                legendsPerRow = request.getParameter("legendsPerRow");
                graphtype1 = request.getParameter("graphType1");
                graphtype2 = request.getParameter("graphType2");
                targetcolor = request.getParameter("targetColorCode");
                drilltype = request.getParameter("drilltype");
                datebyInterval = request.getParameter("datebyInterval");
                targetType = request.getParameter("targetType");
                String ischeckedLA = (request.getParameter("ischeckedLA"));
                String ischeckedRA = (request.getParameter("ischeckedRA"));
                String ischeckedXA = (request.getParameter("ischeckedXA"));
                String ischeckedYA = (request.getParameter("ischeckedYA"));
                Flag = (request.getParameter("flag"));
                viewbyLabels = (request.getParameter("viewbyLabels"));
                viewOthers = (request.getParameter("ischeckedothers"));
                container.setisOthersRequired(Boolean.valueOf(viewOthers));
                isOthersFlag = (request.getParameter("flagothers"));

                if (request.getParameter("showLabels") != null) {
                    isShowLabels = Boolean.valueOf(request.getParameter("showLabels"));
                }
                if (request.getParameter("showLocaldrill") != null) {
                    isGraphLocalDrill = Boolean.valueOf(request.getParameter("showLocaldrill"));
                }
                if (request.getParameter("yaxiscallibrationid") != null) {
                    yaxiscaliration = request.getParameter("yaxiscallibrationid");
                }
                if (request.getParameter("transposeData") != null) {
                    istransposeData = Boolean.valueOf(request.getParameter("transposeData"));
                }
                if (request.getParameter("yaxisstart") != null) {
                    yaxisstart = request.getParameter("yaxisstart");
                }
                if (request.getParameter("yaxisend") != null) {
                    yaxisend = request.getParameter("yaxisend");
                }
                if (request.getParameter("yaxiscalibration") != null) {
                    yaxiscalibration = request.getParameter("yaxiscalibration");
                }
                if (request.getParameter("xaxisstart") != null) {
                    xaxisstart = request.getParameter("xaxisstart");
                }
                if (request.getParameter("xaxisend") != null) {
                    xaxisend = request.getParameter("xaxisend");
                }
                if (request.getParameter("xaxiscalibration") != null) {
                    xaxiscalibration = request.getParameter("xaxiscalibration");
                }
                if (request.getParameter("y2axisstart") != null) {
                    y2axisstart = request.getParameter("y2axisstart");
                }
                if (request.getParameter("y2axisend") != null) {
                    y2axisend = request.getParameter("y2axisend");
                }
                if (request.getParameter("y2axiscalibration") != null) {
                    y2axiscalibration = request.getParameter("y2axiscalibration");
                }
                if (request.getParameter("y2axiscalibration") != null) {
                    y2axiscalibration = request.getParameter("y2axiscalibration");
                }
                if (request.getParameter("AdhocDrill") != null) {
                    String temp = request.getParameter("AdhocDrill");
                    isAdhocEnabled = Boolean.parseBoolean(request.getParameter("AdhocDrill"));
                }
                if (request.getParameter("colorGrouping") != null) {
                    colorGrouping = Boolean.valueOf(request.getParameter("colorGrouping"));
                }
                if (request.getParameter("appendXaxis") != null) {
                    appendXaxis = Boolean.valueOf(request.getParameter("appendXaxis"));
                }
                if (request.getParameter("appendLegend") != null) {
                    appendLegend = Boolean.valueOf(request.getParameter("appendLegend"));
                }
                if (request.getParameter("zeroValues") != null) {
                    supriseZeroValues = Boolean.valueOf(request.getParameter("zeroValues"));
                }
                if (request.getParameter("tooltipx") == null) {
                    tooltipXaxis = false;

                }
                firstChartType = request.getParameter("firstChartType");
                secondChartType = request.getParameter("secondChartType");
                rgbColorCode = request.getParameter("rgbColorCode");
                if (!(rgbColorCode == null || rgbColorCode == "")) {
                    rgbColorArr = rgbColorCode.replace("rgb(", "").replace(")", "").split(",");
                }
                displayCols = request.getParameter("graphDisplayCols");
//                stackedFlag =Boolean.parseBoolean(request.getParameter("stackedFlag"));
                GraphHashMap = container.getGraphHashMap();
                GraphProperty graphProperty = null;
                GraphClassesHashMap = (HashMap) session.getAttribute("GraphClassesHashMap");
                GraphSizesDtlsHashMap = (HashMap) session.getAttribute("GraphSizesDtlsHashMap");
                request.setAttribute("tabId", REPORTID);
                // to get jfree chart type
                String selectedgraphtype = request.getParameter("selectedgraphtype");
                container.setSlectedGraphType(grpId, selectedgraphtype);
                JqplotGraphProperty graphproperty = new JqplotGraphProperty();
                if (selectedgraphtype != null && !selectedgraphtype.equalsIgnoreCase("jq")) {
                    graphproperty = new JqplotGraphProperty();
                    String graphType = "";
                    String graphid = "";
                    graphproperty.setGraphId(grpId);
                    graphproperty.setGraphTypename(graphType);
                    graphproperty.setGraphTypeId(graphid);
                    graphproperty.setSlectedGraphType(grpId, selectedgraphtype);
                    graphproperty.setReportId(REPORTID);
                    GraphHashMap.put("jqgraphproperty" + grpId, graphproperty);
                }
                try {
                    if (GraphHashMap != null && graphChange != null && grpId != null && !"".equalsIgnoreCase(grpId)) {
                        singleGraphDetails = (HashMap) GraphHashMap.get(grpId);
                        if (singleGraphDetails != null) {
                            if (graphChange.equalsIgnoreCase("GrpType") && grpType != null && !"".equalsIgnoreCase(grpType)) {
                                singleGraphDetails.put("graphTypeName", grpType);
                                singleGraphDetails.put("graphClassName", String.valueOf(GraphClassesHashMap.get(grpType)));

                                if (singleGraphDetails != null && singleGraphDetails.get("GraphProperty") != null) {
                                    graphProperty = (GraphProperty) singleGraphDetails.get("GraphProperty");
                                } else {
                                    graphProperty = new GraphProperty();
                                }

                                if (singleGraphDetails != null && singleGraphDetails.get("graphTypeName").equals("OverlaidArea")) {
                                    graphProperty.setLabelsDisplayed(false);
                                }

                            } else if (graphChange.equalsIgnoreCase("GrpSize") && grpSize != null && !"".equalsIgnoreCase(grpSize)) {
                                singleGraphDetails.put("graphSize", grpSize);
                                ArrayList alist = (ArrayList) GraphSizesDtlsHashMap.get(grpSize);
                                singleGraphDetails.put("graphWidth", String.valueOf(alist.get(0)));
                                singleGraphDetails.put("graphHeight", String.valueOf(alist.get(1)));

                            } else if (graphChange.equalsIgnoreCase("GrpCols")) {
                                if (TableId != null && presCollist != null) {
                                    if (!("".equalsIgnoreCase(grpId) && "".equalsIgnoreCase(TableId) && "".equalsIgnoreCase(presCollist))) {
                                    }
                                }
                            } else if (graphChange.equalsIgnoreCase("SwapGraph") && swapBy != null) {
                                singleGraphDetails.put("SwapColumn", swapBy);
                            } else if (graphChange.equalsIgnoreCase("graphSymbol") && graphSymbol != null) {
                                singleGraphDetails.put("graphSymbol", graphSymbol);
                            } else if (graphChange.equalsIgnoreCase("measureNamePosition") && measureNamePosition != null) {
                                singleGraphDetails.put("measureNamePosition", measureNamePosition);
                            } else if (graphChange.equalsIgnoreCase("showlyAxis") && showlyAxis != null) {
                                singleGraphDetails.put("showlyAxis", showlyAxis);
                            } else if (graphChange.equalsIgnoreCase("showryAxis") && showryAxis != null) {
                                singleGraphDetails.put("showryAxis", showryAxis);
                            } else if (graphChange.equalsIgnoreCase("showxAxis") && showxAxis != null) {
                                singleGraphDetails.put("showxAxis", showxAxis);
                            } else if (graphChange.equalsIgnoreCase("absStacked") && stackedType != null) {
                                singleGraphDetails.put("absStacked", stackedType);
                                singleGraphDetails.put("stackedFlag", true);
                            } else if (graphChange.equalsIgnoreCase("RowValues") && swapBy != null) {
                                String[] rowValuesList = request.getParameterValues(rowValues);
                                ArrayList alist = new ArrayList();
                                if (rowValuesList != null) {
                                    for (String temp : rowValuesList) {
                                        alist.add(temp);
                                    }
                                }
                                singleGraphDetails.put("RowValuesList", alist);
                            } else if (graphChange.equalsIgnoreCase("showLegends")) {
                                singleGraphDetails.put("graphLegend", showLegends);
                            } else if (graphChange.equalsIgnoreCase("showGT")) {
                                singleGraphDetails.put("showGT", showGT);
                            } else if (graphChange.equalsIgnoreCase("graphProperties")) {
                                showLegends = request.getParameter("showLegends");
                                showGT = request.getParameter("showGT");
                                graphLegendLoc = request.getParameter("graphLegendLoc");
                                nbrFormat = request.getParameter("nbrFormat");
                                swapBy = request.getParameter("SwapColumn");
                                graphSymbol = request.getParameter("graphSymbol");
                                measureNamePosition = request.getParameter("measureNamePosition");
                                showlyAxis = request.getParameter("showlyAxis");
                                showryAxis = request.getParameter("showryAxis");
                                showxAxis = request.getParameter("showxAxis");
                                graphGridLines = request.getParameter("graphGridLines");
                                grpSize = request.getParameter("grpSize");
                                graphDisplayRows = request.getParameter("graphDisplayRows");
                                targetRange = request.getParameter("targetRange");
                                String[] colorSeries = new String[10];
                                String[] jqcolorSeries = new String[10];
                                String paramName = "";
                                String jqcolor = "";
                                for (int i = 0; i < 10; i++) {
                                    paramName = "colorSelect" + i;
                                    if (request.getParameter(paramName) != null && !request.getParameter(paramName).equalsIgnoreCase("null") && !request.getParameter(paramName).equalsIgnoreCase("")) {
                                        colorSeries[i] = request.getParameter(paramName);
                                    }
                                }
                                ProGenJqPlotProperties properties = new ProGenJqPlotProperties();
                                jqcolorSeries = request.getParameterValues("jqcolorCodeseries");
//                                graphProperty.setColorSeries(colorSeries);
                                if (targetRange.equalsIgnoreCase("Discrete")) {
                                    startValue = request.getParameter("startValue1");
                                } else {
                                    startValue = request.getParameter("startValue2");
                                }
                                if (startValue.equalsIgnoreCase("")) {
                                    startValue = "0";
                                }
                                targetPerDay = container.getNoOfDays();
                                if (container.getNoOfDays() != 0) {
                                    dailyTarget = Double.parseDouble(startValue) / container.getNoOfDays();
                                } else {
                                    dailyTarget = Double.parseDouble(startValue);
                                }

                                endValue = request.getParameter("endValue");
                                if (endValue.equalsIgnoreCase("")) {
                                    endValue = "0";
                                }
                                showMinMaxRange = request.getParameter("showMinMaxRange");
                                //.println("graphGridLines in vieweraction is : " + graphGridLines);
                                showLegends = (showLegends != null && !"".equalsIgnoreCase(showLegends)) ? showLegends : "N";
                                graphGridLines = (graphGridLines != null && !"".equalsIgnoreCase(graphGridLines)) ? graphGridLines : "N";
                                showGT = (showGT != null && !"".equalsIgnoreCase(showGT)) ? showGT : "N";
                                nbrFormat = (nbrFormat != null) ? nbrFormat : " ";
                                graphLegendLoc = (graphLegendLoc != null) ? graphLegendLoc : "Bottom";
                                swapBy = (swapBy != null) ? swapBy : "true";
                                graphSymbol = (graphSymbol != null) ? graphSymbol : " ";
                                grpSize = (grpSize != null) ? grpSize : "Medium";
                                ArrayList alist = (ArrayList) GraphSizesDtlsHashMap.get(grpSize);
                                graphDisplayRows = graphDisplayRows != null ? graphDisplayRows : "";
                                stackedType = request.getParameter("absStacked");
                                if (stackedType == null || stackedType.equalsIgnoreCase("")) {
                                    stackedType = "absStacked";
                                }
                                //added by k
                                startindex = graphDisplayRows == null ? singleGraphDetails.get("startindex").toString() : "0";
                                endindex = graphDisplayRows == null ? singleGraphDetails.get("endindex").toString() : graphDisplayRows;
                                showMinMaxRange = (showMinMaxRange != null && !"".equalsIgnoreCase(showMinMaxRange)) ? showMinMaxRange : "N";
                                isShowLabels = isShowLabels ? isShowLabels : false;
                                measureFormat = (measureFormat != null && !"".equalsIgnoreCase(measureFormat)) ? measureFormat : "";
                                measureValueRounding = (measureValueRounding != null) ? measureValueRounding : "";
                                axisLabelPosition = (axisLabelPosition != null) ? axisLabelPosition : "";
                                calibration = (calibration != null && !"".equalsIgnoreCase(calibration)) ? calibration : "";
                                firstChartType = (firstChartType != null && !"".equalsIgnoreCase(firstChartType)) ? firstChartType : "";
                                secondChartType = (secondChartType != null && !"".equalsIgnoreCase(secondChartType)) ? secondChartType : "";
                                istransposeData = istransposeData ? istransposeData : false;
                                colorGrouping = colorGrouping ? colorGrouping : false;
                                singleGraphDetails.put("graphLegend", showLegends);
                                singleGraphDetails.put("graphGridLines", graphGridLines);
                                singleGraphDetails.put("showGT", showGT);
                                singleGraphDetails.put("nbrFormat", nbrFormat);
                                singleGraphDetails.put("graphLegendLoc", graphLegendLoc);
                                //singleGraphDetails.put("graphSymbol", graphSymbol);
                                singleGraphDetails.put("graphSize", grpSize);
                                singleGraphDetails.put("graphWidth", String.valueOf(alist.get(0)));
                                singleGraphDetails.put("graphHeight", String.valueOf(alist.get(1)));
                                singleGraphDetails.put("graphDisplayRows", graphDisplayRows);
                                singleGraphDetails.put("targetRange", targetRange);
                                singleGraphDetails.put("startValue", startValue);
                                singleGraphDetails.put("endValue", endValue);
                                singleGraphDetails.put("SwapColumn", swapBy);
                                singleGraphDetails.put("graphSymbol", graphSymbol);
                                singleGraphDetails.put("measureNamePosition", measureNamePosition);
                                singleGraphDetails.put("showlyAxis", showlyAxis);
                                singleGraphDetails.put("showryAxis", showryAxis);
                                singleGraphDetails.put("showxAxis", showxAxis);
                                singleGraphDetails.put("showMinMaxRange", showMinMaxRange);
                                //added by k
                                singleGraphDetails.put("startindex", startindex);
                                singleGraphDetails.put("endindex", endindex);
                                singleGraphDetails.put("showLabels", isShowLabels);
                                singleGraphDetails.put("GraphLocalDrill", isGraphLocalDrill);
                                singleGraphDetails.put("y-axiscalibration", yaxiscaliration);
                                singleGraphDetails.put("GraphdisplayCols", displayCols);
                                singleGraphDetails.put("stackedType", stackedType);
                                singleGraphDetails.put("istranspose", istransposeData);
                                singleGraphDetails.put("yaxisstart", yaxisstart);
                                singleGraphDetails.put("yaxisend", yaxisend);
                                singleGraphDetails.put("yaxisinterval", yaxiscalibration);
                                singleGraphDetails.put("xaxisstart", xaxisstart);
                                singleGraphDetails.put("xaxisend", xaxisend);
                                singleGraphDetails.put("xaxisinterval", xaxiscalibration);
                                singleGraphDetails.put("y2axisstart", y2axisstart);
                                singleGraphDetails.put("y2axisend", y2axisend);
                                singleGraphDetails.put("y2axisinterval", y2axiscalibration);
                                singleGraphDetails.put("yAxisRounding", yAxisRounding);
                                singleGraphDetails.put("xAxisRounding", xAxisRounding);
                                singleGraphDetails.put("y2AxisRounding", y2AxisRounding);
                                singleGraphDetails.put("targetValue", targetValue);
                                singleGraphDetails.put("tickdisplay", tickdisplay); //krk
                                singleGraphDetails.put("isAdhocEnabled", isAdhocEnabled);
                                singleGraphDetails.put("colorGrouping", colorGrouping);
                                singleGraphDetails.put("labeldir", labeldir);
                                singleGraphDetails.put("legendsPerRow", legendsPerRow);
                                singleGraphDetails.put("graphDisplay", graphdisp);
                                singleGraphDetails.put("graphtype1", graphtype1);
                                singleGraphDetails.put("graphtype2", graphtype2);
                                singleGraphDetails.put("targetcolor", targetcolor);
                                singleGraphDetails.put("drilltype", drilltype);
                                singleGraphDetails.put("datebyInterval", datebyInterval);
                                singleGraphDetails.put("targetType", targetType);
                                singleGraphDetails.put("appendXaxis", appendXaxis);
                                singleGraphDetails.put("legendAppend", appendLegend);
                                singleGraphDetails.put("tooltipXaxis", tooltipXaxis);
                                singleGraphDetails.put("zeroValues", supriseZeroValues);
                                singleGraphDetails.put(" Flag", Flag);
                                singleGraphDetails.put("ischeckedLAxis", ischeckedLA);
                                singleGraphDetails.put("ischeckedRAxis", ischeckedRA);
                                singleGraphDetails.put("ischeckedXAxishide", ischeckedXA);
                                singleGraphDetails.put("ischeckedYAxishide", ischeckedYA);
                                singleGraphDetails.put("Flagg", Flag);
                                singleGraphDetails.put("viewbyLabels", viewbyLabels);
                                singleGraphDetails.put("isShowOthers", viewOthers);
                                singleGraphDetails.put("OtherFlag", isOthersFlag);
                                if (selectedgraphtype != null && selectedgraphtype.equalsIgnoreCase("jq")) {
                                    singleGraphDetails.put("colorSeries", jqcolorSeries);
                                } else {
                                    singleGraphDetails.put("colorSeries", colorSeries);
                                }
                                // singleGraphDetails.put("jqcolorSeries",jqcolorSeries);
                                if (stackedType.equalsIgnoreCase("absStacked")) {
                                    singleGraphDetails.put("stackedFlag", true);
                                } else {
                                    singleGraphDetails.put("stackedFlag", stackedFlag);
                                }
                                //added by swati
                                singleGraphDetails.put("measureFormat", measureFormat);
                                singleGraphDetails.put("measureValueRounding", measureValueRounding);
                                singleGraphDetails.put("axisLabelPosition", axisLabelPosition);
                                singleGraphDetails.put("calibration", calibration);
                                singleGraphDetails.put("firstChartType", firstChartType);
                                singleGraphDetails.put("secondChartType", secondChartType);
                                singleGraphDetails.put("rgbColorArr", rgbColorArr);
                                //GraphProperty graphProperty = null;
                                if (singleGraphDetails != null && singleGraphDetails.get("GraphProperty") != null) {
                                    graphProperty = (GraphProperty) singleGraphDetails.get("GraphProperty");
                                } else {
                                    graphProperty = new GraphProperty();
                                }
                                if (singleGraphDetails != null && singleGraphDetails.get("graphTypeName").equals("OverlaidArea")) {
                                    graphProperty.setLabelsDisplayed(false);
                                } else {
                                    graphProperty.setLabelsDisplayed(isShowLabels);
                                }
                                graphProperty.setMeasureFormat(measureFormat);
                                graphProperty.setMeasureValueRounding(measureValueRounding);
                                graphProperty.settransposeData(istransposeData);
                                graphProperty.setColorSeries(colorSeries);
                                graphProperty.setNumberFormat(nbrFormat);
                                graphProperty.setGraphGridLines(graphGridLines);
                                if (swapBy.equalsIgnoreCase("")) {
                                    graphProperty.setSwapGraphColumns("true");
                                }
                                if (graphSymbol.equalsIgnoreCase("")) {
                                    graphProperty.setSymbol(graphSymbol);
                                }
                                graphProperty.setMeasurePosition(measureNamePosition);
                                if (showMinMaxRange.equalsIgnoreCase("Y")) {
                                    graphProperty.setMinMaxRange(true);
                                }
                                graphProperty.setShowlyAxis(showlyAxis);
                                graphProperty.setShowryAxis(showryAxis);
                                graphProperty.setShowxAxis(showxAxis);
                                graphProperty.setSwapGraphColumns("true");
                                graphProperty.setSymbol(graphSymbol);
                                if (showMinMaxRange.equalsIgnoreCase("Y")) {
                                    graphProperty.setMinMaxRange(true);
                                }
                                graphProperty.setTargetPerDay(dailyTarget);
                                graphProperty.setTargetValueType(targetRange);
                                if (targetRange.equalsIgnoreCase("Discrete")) {
//                                       graphProperty.setStartValue(graphProperty.getTargetPerDay()*container.getNoOfDays());
                                    graphProperty.setStartValue(Double.parseDouble(startValue));
                                } else {
                                    graphProperty.setStartValue(Double.parseDouble(startValue));
                                }
                                graphProperty.setEndValue(Double.parseDouble(endValue));
                                graphProperty.setAxisLabelPosition(axisLabelPosition);
                                graphProperty.setCalibration(calibration);
                                graphProperty.setFirstChartType(firstChartType);
                                graphProperty.setSecondChartType(secondChartType);
                                graphProperty.setRgbColorArr(rgbColorArr);
                                graphProperty.setGraphDisplayRows(graphDisplayRows);
                                singleGraphDetails.put("GraphProperty", graphProperty);
                                graphProperty.setStackedType(stackedType);
                                if (stackedType.equalsIgnoreCase("absStacked")) {
                                    graphProperty.setStackedFlag(true);
                                } else {
                                    graphProperty.setStackedFlag(false);
                                }
                            } else if (graphChange.equalsIgnoreCase("DeleteGraph")) {
                                String[] tempGraphIds = GraphHashMap.get("graphIds").toString().split(",");
//                                String temp = "";
                                StringBuilder temp = new StringBuilder();
                                if (tempGraphIds.length <= 1) {
                                    GraphHashMap.remove(grpId);
                                    temp = null;
                                    GraphHashMap.put("graphIds", temp.toString());
                                } else {
                                    for (int i = 0; i < tempGraphIds.length; i++) {
                                        if (tempGraphIds[i].equalsIgnoreCase(grpId)) {
                                        } else {
//                                            temp += "," + tempGraphIds[i];
                                            temp.append(",").append(tempGraphIds[i]);
                                        }
                                    }
                                    if (temp.length() > 0) {
                                        temp = new StringBuilder(temp.substring(1));
                                    }
                                    GraphHashMap.remove(grpId);
                                    GraphHashMap.put("graphIds", temp.toString());
                                    if (temp.length() == 0) {
                                        GraphHashMap.put("isGraphsExists", "false");
                                    } else {
                                        GraphHashMap.put("isGraphsExists", "true");
                                    }
                                }
                                session.setAttribute("updateShowTable", "GM");
                            } else if (graphChange.equalsIgnoreCase("updateGraphTitle")) {//updateGraphTitle
                                singleGraphDetails.put("graphName", graphName);
                            }
                        } else {//means adding new graph
                            if (graphChange.equalsIgnoreCase("AddGraph")) {
                                GraphHashMap = reportTemplateBD.addGraphs(request);
                                //code to check if more than one graph exists then modify all graph sizes to medium/small and no one graph to be large
                                String[] graphIds = GraphHashMap.get("graphIds").toString().split(",");
                                ArrayList sizeDtls = (ArrayList) GraphSizesDtlsHashMap.get("Medium");
                                if (graphIds.length > 1) {
                                    for (int i = 0; i < graphIds.length; i++) {
                                        HashMap singleGraphdetails = (HashMap) GraphHashMap.get(graphIds[i]);
                                        singleGraphdetails.put("graphSize", "Medium");
                                        singleGraphdetails.put("graphWidth", String.valueOf(sizeDtls.get(0)));
                                        singleGraphdetails.put("graphHeight", String.valueOf(sizeDtls.get(1)));
                                    }
                                }
                            }
                        }
                    } else {
                    }
                } catch (NumberFormatException exp) {
                    logger.error("Exception: ", exp);
                }
            }
            //return null;
            session.setAttribute("isGraphThere", "isGraphThere");
            session.removeAttribute("isGraphThere");
            return mapping.findForward("graphDisplay");
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    //for add/edit of graph columns in report viewer
    public ActionForward graphColumnChanges(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        HashMap map = null;
        PbReportCollection collect = null;
        Container container = null;
        HashMap GraphHashMap = null;
        HashMap singleGraphDetails = null;
        String grpId = null;
        String grpIds = null;
        String REPORTID = null;
        String graphChange = null;
        // added by santhosh.kumar@progenbusiness.com on 01/12/2009 for changing graph columns at run time
        String grpColumns = null;
        String leftgrpColumns = null;
        String rightgrpColumns = null;
        ArrayList reportQryElementIds = null;
        ArrayList reportQryAggregations = null;
        ArrayList reportQryColNames = null;
        HashMap ReportHashMap = null;
        String[] pieChartColumns = null;
        String[] barChartColumnNames = null;
        String[] barChartColumnTitles = null;
        String[] viewByElementIds = null;
        String[] viewByNames = null;
        String[] PrevpieChartColumns = null;
        String[] PrevbarChartColumnNames = null;
        String[] PrevbarChartColumnTitles = null;
        String[] PrevviewByElementIds = null;
        String[] PrevviewByNames = null;
        HashMap DisplayNamesMap = null;
        HashMap changedisHashMap = new HashMap();
        ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
        //variables defined for the purpose of changing  dual axis graph columns
        String[] axis = null;
        String[] barChartColumnNames1 = null;
        String[] barChartColumnTitles1 = null;
        String[] barChartColumnNames2 = null;
        String[] barChartColumnTitles2 = null;
        String[] leftgraphCols = null;
        String[] rightgraphCols = null;
        String[] graphcolarr = null;
        String elemNames = "";
        String graphcol = "";
        if (session != null) {
            if (session.getAttribute("PROGENTABLES") != null) {
                map = (HashMap) session.getAttribute("PROGENTABLES");
                grpId = request.getParameter("gid");
                grpIds = request.getParameter("grpIds");
                changedisHashMap.put("grpIds", grpIds);
                REPORTID = request.getParameter("REPORTID");
                graphChange = request.getParameter("graphChange");
                grpColumns = request.getParameter("grpColumns");
                changedisHashMap.put("GraphColumns", grpColumns);
                leftgrpColumns = request.getParameter("leftColumns");
                rightgrpColumns = request.getParameter("rightColumns");
                elemNames = request.getParameter("elemNames");
                container = (Container) map.get(REPORTID);
                GraphHashMap = container.getGraphHashMap();
                ReportHashMap = container.getReportHashMap();
                ArrayList originalColumns = container.getOriginalColumns();
                LinkedHashMap grphMeasMap;
                try {
                    if (GraphHashMap != null && ReportHashMap != null && graphChange != null && grpId != null) {
                        if (!container.isReportCrosstab()) {
                            reportQryElementIds = (ArrayList) ReportHashMap.get("reportQryElementIds");
                            reportQryAggregations = (ArrayList) ReportHashMap.get("reportQryAggregations");
                            if (graphChange.equalsIgnoreCase("GrpColumns") && grpColumns != null) {
                                graphcolarr = grpColumns.split(",");
                                String[] grpColumnsArray = new String[graphcolarr.length];
                                if (graphcolarr != null) {
                                    for (int i = 0; i < graphcolarr.length; i++) {
                                        if (graphcolarr[i].contains("-")) {
                                            graphcol = graphcolarr[i].substring(0, graphcolarr[i].lastIndexOf("-")).trim();
                                            grpColumnsArray[i] = graphcol;
                                        } else {
                                            grpColumnsArray = graphcolarr;
                                        }
                                    }
                                }
                                if (reportQryElementIds != null) {
                                    for (int i = 0; i < grpColumnsArray.length; i++) {
                                        if (!reportQryElementIds.contains(grpColumnsArray[i])) {
                                            reportQryElementIds.add(grpColumnsArray[i]);
                                            originalColumns.add("A_" + grpColumnsArray[i]);
                                        }
                                    }
                                } else {
                                    reportQryElementIds = new ArrayList();
                                    originalColumns = new ArrayList();
                                    for (int i = 0; i < grpColumnsArray.length; i++) {
                                        reportQryElementIds.add(grpColumnsArray[i]);
                                        originalColumns.add("A_" + grpColumnsArray[i]);
                                    }
                                }
                                container.setOriginalColumns(originalColumns);
                                reportQryAggregations = reportTemplateDAO.getReportQryAggregations(reportQryElementIds);
                                reportQryColNames = reportTemplateDAO.getReportQryColNames();
                                ReportHashMap.put("reportQryElementIds", reportQryElementIds);
                                ReportHashMap.put("reportQryAggregations", reportQryAggregations);
                                ReportHashMap.put("reportQryColNames", reportQryColNames);
                                DisplayNamesMap = (HashMap) ReportHashMap.get("DisplayNamesMap");
                                if (DisplayNamesMap == null) {
                                    DisplayNamesMap = new HashMap();
                                }
                                for (int k = 0; k < reportQryElementIds.size(); k++) {
                                    if (DisplayNamesMap.get(String.valueOf(reportQryElementIds.get(k))) == null) {
                                        DisplayNamesMap.put(String.valueOf(reportQryElementIds.get(k)), String.valueOf(reportQryColNames.get(k)));
                                    }
                                }
                                singleGraphDetails = (HashMap) GraphHashMap.get(grpId);
                                if (singleGraphDetails != null) {
                                    PrevbarChartColumnNames = (String[]) singleGraphDetails.get("barChartColumnNames");
                                    PrevbarChartColumnTitles = (String[]) singleGraphDetails.get("barChartColumnTitles");
                                    PrevviewByElementIds = (String[]) singleGraphDetails.get("viewByElementIds");
                                    PrevviewByNames = (String[]) singleGraphDetails.get("viewByNames");
                                    PrevpieChartColumns = (String[]) singleGraphDetails.get("pieChartColumns");
                                    collect = container.getReportCollect();
                                    if (PrevviewByElementIds == null || PrevviewByElementIds.equals("null")) {
                                        viewByElementIds = new String[collect.reportRowViewbyValues.size()];
                                        viewByNames = new String[collect.reportRowViewbyValues.size()];
                                        for (int r = 0; r < collect.reportRowViewbyValues.size(); r++) {
                                            viewByElementIds[r] = collect.reportRowViewbyValues.get(r).toString();
                                            viewByNames[r] = collect.getParameterDispName(collect.reportRowViewbyValues.get(r).toString());
                                        }
                                    } else {
                                        viewByElementIds = PrevviewByElementIds;
                                        viewByNames = PrevviewByNames;
                                    }
                                    barChartColumnNames = new String[viewByElementIds.length + grpColumnsArray.length];
                                    barChartColumnTitles = new String[viewByElementIds.length + grpColumnsArray.length];
                                    grphMeasMap = (LinkedHashMap) singleGraphDetails.get("graphMeasures");
                                    grphMeasMap = new LinkedHashMap<String, String>();
                                    for (int i = 0; i < viewByElementIds.length; i++) {
                                        barChartColumnNames[i] = viewByElementIds[i];
                                        barChartColumnTitles[i] = viewByNames[i];
                                    }
                                    for (int j = viewByElementIds.length; j < barChartColumnNames.length; j++) {
                                        barChartColumnNames[j] = "A_" + grpColumnsArray[j - viewByElementIds.length];
                                        if (DisplayNamesMap.get(grpColumnsArray[j - viewByElementIds.length]) != null) {
                                            barChartColumnTitles[j] = String.valueOf(DisplayNamesMap.get(grpColumnsArray[j - viewByElementIds.length]));
                                        } else {
                                            barChartColumnTitles[j] = "A_" + grpColumnsArray[j - viewByElementIds.length];
                                        }
                                        grphMeasMap.put("A_" + grpColumnsArray[j - viewByElementIds.length], barChartColumnTitles[j]);
                                    }
                                    pieChartColumns = barChartColumnNames;
                                    singleGraphDetails.put("barChartColumnNames", barChartColumnNames);
                                    singleGraphDetails.put("barChartColumnTitles", barChartColumnTitles);
                                    singleGraphDetails.put("pieChartColumns", pieChartColumns);
                                    singleGraphDetails.put("graphMeasures", grphMeasMap);
                                    changedisHashMap.put("graphMeasures", grphMeasMap);
                                }
                            } else if (graphChange.equalsIgnoreCase("changeDualAxisColumns") && grpColumns != null && leftgrpColumns != null && rightgrpColumns != null) {
                                graphcolarr = grpColumns.split(",");
                                String[] grpColumnsArray = new String[graphcolarr.length];
                                if (graphcolarr != null) {
                                    for (int i = 0; i < graphcolarr.length; i++) {
                                        if (graphcolarr[i].contains("-")) {
                                            graphcol = graphcolarr[i].substring(0, graphcolarr[i].lastIndexOf("-")).trim();
                                            grpColumnsArray[i] = graphcol;
                                        } else {
                                            grpColumnsArray = graphcolarr;
                                        }
                                    }
                                }
//                            grpColumnsArray = grpColumns.split(",");
                                leftgraphCols = leftgrpColumns.split(",");
                                rightgraphCols = rightgrpColumns.split(",");
                                for (int i = 0; i < grpColumnsArray.length; i++) {
                                    if (!reportQryElementIds.contains(grpColumnsArray[i])) {
                                        reportQryElementIds.add(grpColumnsArray[i]);
                                        originalColumns.add("A_" + grpColumnsArray[i]);
                                    }
                                }
                                container.setOriginalColumns(originalColumns);
                                reportQryAggregations = reportTemplateDAO.getReportQryAggregations(reportQryElementIds);
                                reportQryColNames = reportTemplateDAO.getReportQryColNames();
                                ReportHashMap.put("reportQryElementIds", reportQryElementIds);
                                ReportHashMap.put("reportQryAggregations", reportQryAggregations);
                                ReportHashMap.put("reportQryColNames", reportQryColNames);
                                DisplayNamesMap = (HashMap) ReportHashMap.get("DisplayNamesMap");
                                if (DisplayNamesMap == null) {
                                    DisplayNamesMap = new HashMap();
                                }
                                for (int k = 0; k < reportQryElementIds.size(); k++) {
                                    if (DisplayNamesMap.get(String.valueOf(reportQryElementIds.get(k))) == null) {
                                        DisplayNamesMap.put(String.valueOf(reportQryElementIds.get(k)), String.valueOf(reportQryColNames.get(k)));
                                    }
                                }
                                singleGraphDetails = (HashMap) GraphHashMap.get(grpId);
                                if (singleGraphDetails != null) {
                                    PrevbarChartColumnNames = (String[]) singleGraphDetails.get("barChartColumnNames");
                                    PrevbarChartColumnTitles = (String[]) singleGraphDetails.get("barChartColumnTitles");
                                    PrevviewByElementIds = (String[]) singleGraphDetails.get("viewByElementIds");
                                    PrevpieChartColumns = (String[]) singleGraphDetails.get("pieChartColumns");
                                    grphMeasMap = (LinkedHashMap) singleGraphDetails.get("graphMeasures");
                                    grphMeasMap = new LinkedHashMap<String, String>();
                                    viewByElementIds = PrevviewByElementIds;
                                    barChartColumnNames = new String[viewByElementIds.length + leftgraphCols.length + rightgraphCols.length];
                                    pieChartColumns = new String[barChartColumnNames.length];
                                    barChartColumnTitles = new String[barChartColumnNames.length];
                                    axis = new String[barChartColumnNames.length];
                                    barChartColumnNames1 = new String[viewByElementIds.length + leftgraphCols.length];
                                    barChartColumnTitles1 = new String[barChartColumnNames1.length];
                                    barChartColumnNames2 = new String[viewByElementIds.length + rightgraphCols.length];
                                    barChartColumnTitles2 = new String[barChartColumnNames2.length];
                                    for (int i = 0; i < viewByElementIds.length; i++) {
                                        barChartColumnNames[i] = viewByElementIds[i];
                                        barChartColumnTitles[i] = PrevbarChartColumnTitles[i];
                                        axis[i] = "0";
                                        barChartColumnNames1[i] = viewByElementIds[i];
                                        barChartColumnNames2[i] = viewByElementIds[i];
                                        barChartColumnTitles1[i] = PrevbarChartColumnTitles[i];
                                        barChartColumnTitles2[i] = PrevbarChartColumnTitles[i];
                                    }
                                    for (int i = viewByElementIds.length; i < (barChartColumnNames1.length); i++) {
                                        barChartColumnNames[i] = "A_" + leftgraphCols[i - viewByElementIds.length];
                                        if (DisplayNamesMap.get(leftgraphCols[i - viewByElementIds.length]) != null) {
                                            barChartColumnTitles[i] = String.valueOf(DisplayNamesMap.get(leftgraphCols[i - viewByElementIds.length]));
                                        } else {
                                            barChartColumnTitles[i] = "A_" + leftgraphCols[i - viewByElementIds.length];
                                        }
                                        axis[i] = "0";
                                        barChartColumnNames1[i] = barChartColumnNames[i];
                                        barChartColumnTitles1[i] = barChartColumnTitles[i];
                                        grphMeasMap.put("A_" + leftgraphCols[i - viewByElementIds.length], barChartColumnTitles[i]);
                                    }
                                    for (int i = barChartColumnNames1.length; i < (barChartColumnNames.length); i++) {
                                        barChartColumnNames[i] = "A_" + rightgraphCols[i - barChartColumnNames1.length];
                                        if (DisplayNamesMap.get(rightgraphCols[i - barChartColumnNames1.length]) != null) {
                                            barChartColumnTitles[i] = String.valueOf(DisplayNamesMap.get(rightgraphCols[i - barChartColumnNames1.length]));
                                        } else {
                                            barChartColumnTitles[i] = "A_" + rightgraphCols[i - barChartColumnNames1.length];
                                        }
                                        axis[i] = "1";
                                        barChartColumnNames2[i - barChartColumnNames1.length + viewByElementIds.length] = barChartColumnNames[i];
                                        barChartColumnTitles2[i - barChartColumnNames1.length + viewByElementIds.length] = barChartColumnTitles[i];
                                        grphMeasMap.put("A_" + rightgraphCols[i - barChartColumnNames1.length], barChartColumnTitles[i]);
                                    }
                                    pieChartColumns = barChartColumnNames;
                                    singleGraphDetails.put("barChartColumnNames", barChartColumnNames);
                                    singleGraphDetails.put("barChartColumnTitles", barChartColumnTitles);
                                    singleGraphDetails.put("pieChartColumns", pieChartColumns);
                                    singleGraphDetails.put("axis", axis);
                                    singleGraphDetails.put("barChartColumnNames1", barChartColumnNames1);
                                    singleGraphDetails.put("barChartColumnTitles1", barChartColumnTitles1);
                                    singleGraphDetails.put("barChartColumnNames2", barChartColumnNames2);
                                    singleGraphDetails.put("barChartColumnTitles2", barChartColumnTitles2);
                                    singleGraphDetails.put("graphMeasures", grphMeasMap);
                                }
                            }
                        } else {
                            singleGraphDetails = (HashMap) GraphHashMap.get(grpId);
                            graphcolarr = grpColumns.split(",");
                            String[] grpColumnsArray = new String[graphcolarr.length];
                            String[] elemName;
                            elemName = elemNames.split(",");
                            container.setGraphCrossTabMeas(elemNames);
                            if (graphcolarr != null) {
                                for (int i = 0; i < graphcolarr.length; i++) {
                                    if (graphcolarr[i].contains("-")) {
                                        graphcol = graphcolarr[i].substring(0, graphcolarr[i].lastIndexOf("-")).trim();
                                        grpColumnsArray[i] = graphcol;
                                    } else {
                                        grpColumnsArray = graphcolarr;
                                    }

                                }
                            }
//                            grpColumnsArray = grpColumns.split(",");
                            int whichMeasure = container.getDisplayColumns().indexOf(grpColumnsArray[0]);
                            container.getGrpIdElementIdMap().put(grpId, grpColumnsArray[0]);
                            container.getCrossTabGraphColMap().removeAll(grpId);
                            ArrayList LabelStr = (ArrayList) container.getDisplayLabels().get(whichMeasure);
                            container.getCrossTabGraphColMap().put(grpId, (String) container.getDisplayColumns().get(whichMeasure));
                            container.getCrossTabGraphColMap().put(grpId, LabelStr.get(LabelStr.size() - 1).toString());
                        }
                    } else {
                    }
                    singleGraphDetails.put("tablecols", "nottablecols");
                    container.setChangeGraphColumns(changedisHashMap);
                } catch (Exception exp) {
                    logger.error("Exception: ", exp);
                }
            }
            return null;
            //return mapping.findForward("graphDisplay");
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    //for any changes in report table during report viewer
    public ActionForward tableMeasureChanges(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        logger.info("Enter Method");
        HttpSession session = request.getSession(false);
        ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
        PbReportViewerBD repViewerBD = new PbReportViewerBD();
        HashMap map = null;
        Container container = null;
        String REPORTID = null;
        String tableMsrs = null;
        boolean qryReq = false;
        PrintWriter out = response.getWriter();
        // added by santhosh.kumar@progenbusiness.com on 01/12/2009 for changing graph columns at run time
//        ArrayList reportQryElementIds = null;
//        ArrayList reportQryAggregations = null;
//        ArrayList reportQryColNames = null;
//        HashMap ReportHashMap = null;
//        String[] grpColumnsArray = null;
//        HashMap DisplayNamesMap = null;
//        ArrayList displayColumns = null;
//        ArrayList displayLabels = null;
//        ArrayList originalColumns = null;
//        ArrayList links = null;
//        ArrayList prevlinks = null;
//        ArrayList signs = null;
//        int viewByCount = 1;
//        ArrayList prevdisplayColumns = null;
//        ArrayList prevdisplayLabels = null;
//        HashMap TableProperties = null;
//        HashMap TableHashMap = null;
//        HashMap columnProperties = null;
//        ArrayList Measures = null;
//        ArrayList MeasuresNames = null;
//        ArrayList prevdisplayColumns = null;
//        ArrayList prevdisplayLabels = null;
//        HashMap TableProperties = null;
//        HashMap TableHashMap = null;
//        HashMap columnProperties = null;
//        ArrayList Measures = null;
//        ArrayList MeasuresNames = null;
        if (session != null && session.getAttribute("PROGENTABLES") != null) {
            map = (HashMap) session.getAttribute("PROGENTABLES");
            REPORTID = request.getParameter("REPORTID");
            container = (Container) map.get(REPORTID);
            String crossCols = request.getParameter("crossCols");
            String summCols = request.getParameter("summCols");
            String isSummarized = request.getParameter("isSummerized");
            String elmntInformation = container.getElementIdvalue();
            ArrayList<String> dependentmsrIds = new ArrayList<String>();
            ArrayList<String> AutohidemsrIds = new ArrayList<String>();
            PbDb pbdb = new PbDb();
            PbReturnObject retobj = null;
            tableMsrs = request.getParameter("tableMsrs");
            if (crossCols != null && !crossCols.isEmpty()) {
                tableMsrs = crossCols;
            }
            String[] hidMsrArr = tableMsrs.split(",");
            for(String data:hidMsrArr){
                    if(!data.equalsIgnoreCase(elmntInformation)){
                        container.setElementIdvalue("");
                        container.setONClickInformation("");
                    }else{
                        container.setElementIdvalue(elmntInformation);
                        container.setONClickInformation("Progen");
                    }
                  }
            if (!container.IsTimedasboard()) {
                for (int v = 0; v < hidMsrArr.length; v++) {
                    if (!RTMeasureElement.isRunTimeMeasure(hidMsrArr[v])) {
                        String qry = "select reffered_elements from prg_user_all_info_details where element_id='" + hidMsrArr[v] + "' and user_col_type='SUMMARIZED'";
                        try {
                            retobj = pbdb.executeSelectSQL(qry);
                        } catch (SQLException ex) {
                            logger.error("Exception:", ex);
                        }
                        if (retobj != null && retobj.getRowCount() > 0) {
                            for (int c = 0; c < retobj.getRowCount(); c++) {
                                String data = retobj.getFieldValueString(c, 0);

                                if (data != null && data != "") {
                                    tableMsrs += "," + data;
                                }
                                dependentmsrIds.addAll(Arrays.asList(data.split(",")));
                            }
                        }
                    }
                }
            }
//            }
//                    dependentmsrIds.removeAll(Arrays.asList(null,""));
            List<String> sList = new ArrayList(Arrays.asList(hidMsrArr));
            for (int i = 0; i < dependentmsrIds.size(); i++) {
                if (sList.contains((String) dependentmsrIds.get(i))) {
                } else {
                    if (!AutohidemsrIds.contains((String) dependentmsrIds.get(i))) {
                        AutohidemsrIds.add(dependentmsrIds.get(i));
                    }
                }
            }
            if (AutohidemsrIds != null && AutohidemsrIds.size() > 0) {
                container.getReportCollect().getHideMeasures().addAll(AutohidemsrIds);
            }
//            container.getReportCollect().setHideMeasures(AutohidemsrIds);
            qryReq = repViewerBD.tableMeasureChanges(container, tableMsrs);
//            PbReportCollection collect = container.getReportCollect();
            if (summCols != null && !summCols.equalsIgnoreCase("null") && summCols.equalsIgnoreCase("") && summCols == "") {
                isSummarized = "false";
                container.setSummarizedMeasuresEnabled(false);
            }
            if (isSummarized != null && Boolean.parseBoolean(isSummarized) && summCols != "") {
                ArrayList<String> summerizedQryEIds = new ArrayList<String>();
                ArrayList<String> summerizedReportQryAggregations = new ArrayList<String>();
                ArrayList<String> summerizedReportQryColNames = new ArrayList<String>();
                ArrayList<String> summerizedReportQryColTypes = new ArrayList<String>();
                HashMap<String, ArrayList<String>> summerizedTableHashMap = new HashMap<String, ArrayList<String>>();
                String[] qryeIds = summCols.split(",");
                for (String msrs : qryeIds) {
                    summerizedQryEIds.add(msrs);
                }
                summerizedReportQryAggregations = reportTemplateDAO.getReportQryAggregations(summerizedQryEIds);
                summerizedReportQryColNames = reportTemplateDAO.getReportQryColNames();
                summerizedReportQryColTypes = reportTemplateDAO.getReportQryColTypes();
                summerizedTableHashMap.put("summerizedQryeIds", summerizedQryEIds);
                summerizedTableHashMap.put("summerizedQryAggregations", summerizedReportQryAggregations);
                summerizedTableHashMap.put("summerizedQryColNames", summerizedReportQryColNames);
                summerizedTableHashMap.put("summerizedQryColTypes", summerizedReportQryColTypes);
                container.setSummerizedTableHashMap(summerizedTableHashMap);
            }
//                ReportHashMap = container.getReportHashMap();
//                TableHashMap = container.getTableHashMap();
//                Measures = (ArrayList) TableHashMap.get("Measures");
//                MeasuresNames = (ArrayList) TableHashMap.get("MeasuresNames");
//                grpColumnsArray = tableMsrs.split(",");
//                reportQryElementIds = (ArrayList) ReportHashMap.get("reportQryElementIds");
//                reportQryAggregations = (ArrayList) ReportHashMap.get("reportQryAggregations");
//                TableProperties = (TableHashMap.get("TableProperties") == null) ? new HashMap() : (HashMap) TableHashMap.get("TableProperties");
//
//                if ( ! container.isReportCrosstab() )
//                {
//                    for (int i = 0; i < grpColumnsArray.length; i++)
//                       if (!reportQryElementIds.contains(grpColumnsArray[i]))
//                            //if (!grpColumnsArray[i].contains("_percentwise"))
//                            if ( ! RTMeasureElement.isRunTimeMeasure(grpColumnsArray[i]) )
//                                reportQryElementIds.add(grpColumnsArray[i]);
//
//                    reportQryAggregations = reportTemplateDAO.getReportQryAggregations(reportQryElementIds);
//                    reportQryColNames = reportTemplateDAO.getReportQryColNames();
//                    ReportHashMap.put("reportQryElementIds", reportQryElementIds);
//                    ReportHashMap.put("reportQryAggregations", reportQryAggregations);
//                    ReportHashMap.put("reportQryColNames", reportQryColNames);
//
//                    displayColumns = container.getDisplayColumns();
//                    displayLabels = container.getDisplayLabels();
//                    originalColumns = container.getOriginalColumns();
//                    signs = container.getSigns();
//                    links = container.getLinks();
//                    prevlinks = (ArrayList) container.getLinks().clone();
//                    prevdisplayColumns = (ArrayList) container.getDisplayColumns().clone();
//                    prevdisplayLabels = (ArrayList) container.getDisplayLabels().clone();
//                    viewByCount = Integer.parseInt(container.getViewByCount());
//    //                //.println("measures first are : "+Measures);
//                    //try {
//                        // if (ReportHashMap != null && displayColumns != null && originalColumns != null) {
//
//
//                    displayColumns = new ArrayList();
//                    displayLabels = new ArrayList();
//                    //links = (ArrayList) prevlinks.clone();
//                    signs = new ArrayList();
//
//                    for (int k = 0; k < viewByCount; k++) {
//                        if (!displayColumns.contains(String.valueOf(prevdisplayColumns.get(k)))) {
//                            displayColumns.add(String.valueOf(prevdisplayColumns.get(k)));
//                            displayLabels.add(String.valueOf(prevdisplayLabels.get(k)));
//                        }
//                    }
//                    DisplayNamesMap = (HashMap) ReportHashMap.get("DisplayNamesMap");
//                    if (DisplayNamesMap == null) {
//                        DisplayNamesMap = new HashMap();
//                    }
//                    for (int k = 0; k < reportQryElementIds.size(); k++) {
//                        if (DisplayNamesMap.get(String.valueOf(reportQryElementIds.get(k))) == null) {
//                            DisplayNamesMap.put(String.valueOf(reportQryElementIds.get(k)), String.valueOf(reportQryColNames.get(k)));
//                        }
//                    }
//                    for (int k = 0; k < grpColumnsArray.length; k++) {
//                        if (!displayColumns.contains("A_" + grpColumnsArray[k])) {
//                            displayColumns.add("A_" + grpColumnsArray[k]);
//                            if (DisplayNamesMap.get(grpColumnsArray[k]) != null) {
//                                displayLabels.add(String.valueOf(DisplayNamesMap.get(grpColumnsArray[k])));
//                            } else {
//                                displayLabels.add("A_" + grpColumnsArray[k]);
//                            }
//                        }
//                        if (!originalColumns.contains("A_" + grpColumnsArray[k])) {
//                            originalColumns.add("A_" + grpColumnsArray[k]);
//                        }
//                    }
//
//                    ReportHashMap.put("DisplayNamesMap", DisplayNamesMap);
//                    container.setOriginalColumns(originalColumns);
//                    container.setDisplayColumns(displayColumns);
//                    container.setDisplayLabels(displayLabels);
//
//                    for (int k = 0; k < displayColumns.size(); k++) {
//                        if (String.valueOf(displayColumns.get(k)).toUpperCase().contains("CHANGE")) {
//                            if (!signs.contains(String.valueOf(displayColumns.get(k)))) {
//                                signs.add(String.valueOf(displayColumns.get(k)));
//                            }
//                        }
//                    }
//
//                    for (int k = links.size(); k < originalColumns.size(); k++) {
//                        links.add(" ");
//                    }
//
//                    container.setLinks(links);
//                    container.setSigns(signs);
//
//                    if (container.getGrandTotalReq()) {
//                        TableProperties.put("ShowTotalValues", "Y");//indicates show Total 0
//                    } else {
//                        TableProperties.put("ShowTotalValues", "N");//indicates show Total 0
//                    }
//                    if (container.getNetTotalReq()) {
//                        TableProperties.put("ShowSubTotalValues", "Y");//indicates show sub Total 1
//                    } else {
//                        TableProperties.put("ShowSubTotalValues", "N");//indicates show sub Total 1
//                    }
//
//                    if (container.getAvgTotalReq()) {
//                        TableProperties.put("ShowAvgValues", "Y");//indicates show avg Total 2
//                    } else {
//                        TableProperties.put("ShowAvgValues", "N");//indicates show avg Total 2
//                    }
//
//                    if (container.getOverAllMaxValueReq()) {
//                        TableProperties.put("ShowOvrAllMaxValues", "Y");//indicates show  over all max 3
//                    } else {
//                        TableProperties.put("ShowOvrAllMaxValues", "N");//indicates show  over all max 3
//                    }
//
//                    if (container.getOverAllMinValueReq()) {
//                        TableProperties.put("ShowOvrAllMinValues", "Y");//indicates show over all min 4
//                    } else {
//                        TableProperties.put("ShowOvrAllMinValues", "N");//indicates show over all min 4
//                    }
//
//                    if (container.getCatMaxValueReq()) {
//                        TableProperties.put("ShowCatMaxValues", "Y");//indicates show cat max 5
//                    } else {
//                        TableProperties.put("ShowCatMaxValues", "N");//indicates show cat max 5
//                    }
//
//                    if (container.getCatMinValueReq()) {
//                        TableProperties.put("ShowCatMinValues", "Y");//indicates show cat min 6
//                    } else {
//                        TableProperties.put("ShowCatMinValues", "N");//indicates show cat min 6
//                    }
//
//                    if (container.getTableSymbols() != null) {
//                        TableProperties.put("ColumnSymbols", container.getTableSymbols());
//                    } else {
//                        TableProperties.put("ColumnSymbols", " ");
//                    }
//                    if (container.getDefaultSortedColumn() != null) {
//                        TableProperties.put("DefaultSortedColumn", container.getDefaultSortedColumn());
//                    } else {
//                        TableProperties.put("DefaultSortedColumn", " ");
//                    }
//
//
//                    columnProperties = container.getColumnProperties();
//                    //if (columnProperties == null) {
//                    //will reset the ColumnProperties in TableHashMap
//                    columnProperties = new HashMap();
//                    //}
////                        //.println("measures before are : "+Measures);
//                    for (int i = viewByCount; i < displayColumns.size(); i++) {
//                        String disCol = String.valueOf(displayColumns.get(i));
//                        String disLabel = String.valueOf(displayLabels.get(i));
//                        if (disCol.lastIndexOf("_percentwise") == -1) {
//                            if (i == viewByCount) {
//                                Measures.clear();
//                                MeasuresNames.clear();
//                            }
//                            //Measures.add(disCol.replace("A_", ""));
//                            Measures.add(disCol);
//                            MeasuresNames.add(disLabel);
//                        } else {
//                            //Measures.add(disCol.replace("A_", ""));
//                            Measures.add(disCol);
//                            MeasuresNames.add(disLabel);
//                        }
//                    }
//                    columnProperties = this.resetColumnProperties(Measures, container);
////                        //.println("TableHashMap0000000======" + TableHashMap);
//                }
//                else
//                {
//                    reportQryElementIds.clear();
////                    reportQryColNames.clear();
////                    reportQryAggregations.clear();
//                    for (int i = 0; i < grpColumnsArray.length; i++)
//                            if (!grpColumnsArray[i].contains("_percentwise"))
//                                reportQryElementIds.add(grpColumnsArray[i]);
//
//                    reportQryAggregations = reportTemplateDAO.getReportQryAggregations(reportQryElementIds);
//                    reportQryColNames = reportTemplateDAO.getReportQryColNames();
//                    ReportHashMap.put("reportQryElementIds", reportQryElementIds);
//                    ReportHashMap.put("reportQryAggregations", reportQryAggregations);
//                    ReportHashMap.put("reportQryColNames", reportQryColNames);
//
//                    Measures.clear();
//                    MeasuresNames.clear();
//                    for ( int i=0; i<reportQryElementIds.size(); i++ )
//                    {
//                        Measures.add("A_"+reportQryElementIds.get(i));
//                        MeasuresNames.add(reportQryColNames.get(i));
//                    }
//
//                    //set Column Properties
//                    columnProperties = this.resetColumnProperties(Measures, container);
//
//                }
//
//                TableHashMap.put("Measures", Measures);
//                TableHashMap.put("MeasuresNames", MeasuresNames);
//                TableProperties.put("ColumnProperties", columnProperties);
//                TableHashMap.put("TableProperties", TableProperties);
//                container.setTableHashMap(TableHashMap);
//                container.setReportHashMap(ReportHashMap);
//                container.setColumnProperties(columnProperties);
            out.print(qryReq);
//            ProgenLog.log(ProgenLog.FINE, this, "tableMeasureChanges", "Exit Method");
            logger.info("Exit Method");
            return null;
        } else {
            return mapping.findForward("sessionExpired");
        }

    }

    //for any changes in report table measures and only applicable for reports other than cross tab
    public ActionForward tableChanges(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {

        HttpSession session = request.getSession(false);
        HashMap map = null;
        Container container = null;
        HashMap TableHashMap = null;
        String REPORTID = null;
        String tableChange = "";
        HashMap NFMap = null;
        String colName = null;
        String disColName = null;
        String l1 = null;
        String l2 = null;
        //String max = null;
        //String min = null;
        String[] colorCodes = null;
        String[] operators = null;
        String[] sValues = null;
        String[] eValues = null;
        ArrayList<String> colorCodesLst;
        ArrayList<String> operatorsLst;
        ArrayList<String> stValuesLst;
        ArrayList<String> endValuesLst;
        String nbrSymbol = null;
        HashMap TableProperties = null;
        ArrayList originalColumns = null;
        ArrayList displayColumns = null;
        ArrayList displayLabels = null;
        ArrayList links = null;
        ArrayList prevlinks = null;
        int viewByCount = 0;
        ArrayList dataTypes = null;
        ArrayList displayTypes = null;
        HashMap ColumnsVisibility = null;
        ArrayList alignments = null;
        PrintWriter pWriter = response.getWriter();
        String PercentColumn = "_percentwise";
        String DisplayPercentColumn = " (% wise)";
        ColorGroup colorGroup = null;
        ColorCode colorCode = null;
        boolean isGradientBased = false;
        boolean rowWisecolr = false;
        boolean fireQuery;
        ArrayList<String> percntCol = new ArrayList<String>();
        ArrayList<String> targetValues = new ArrayList<String>();
        ArrayList<String> goalPercent = new ArrayList<String>();
        ArrayList<String> currentValues = new ArrayList<String>();
        ArrayList<String> indivPerval = new ArrayList<String>();
        String statusval = null;
        String adhocstatus = null;
        String scriptAlign = null;
        String measureAlign = null;
        String removeComparision = null;
        if (session != null) {
            colName = request.getParameter("colName");
            removeComparision = request.getParameter("removeComparision");
            l1 = request.getParameter("l1");
            l2 = request.getParameter("l2");
            disColName = request.getParameter("disColName");
            String targetVal[] = request.getParameterValues("targetVal");
            String percntValues[] = request.getParameterValues("formName");
            String goal[] = request.getParameterValues("goalValue");
            String[] timeIdiviper = request.getParameterValues("formperent");
            String[] curvalues = request.getParameterValues("goalTimeIndividual");
            nbrSymbol = request.getParameter("nbrSymbol");
            if (session.getAttribute("PROGENTABLES") != null) {
                map = (HashMap) session.getAttribute("PROGENTABLES");
                REPORTID = request.getParameter("reportid");
                tableChange = request.getParameter("tableChange");
                container = (Container) map.get(REPORTID);
                 //Added by Ram 20Apr2016 for apply color for all parameters
                boolean isAllParameter = Boolean.parseBoolean(request.getParameter("isAllParameter"));
                boolean isAcrossCurrentData=Boolean.parseBoolean(request.getParameter("isAcrossCurrentData"));
                Container.setColorAppyForAllParameters(isAllParameter);
                Container.setColorAppyAcrossCurrentData(isAcrossCurrentData);
//                cg.getContainer(container);
                
                TableHashMap = container.getTableHashMap();
                request.setAttribute("tabId", REPORTID);
                if (container.isReportCrosstab()) {
                    if (colName != null) {
                        colName = colName.replace("A_", "");
                    }
                    //Faiz Ansari
                    if (request.getParameter("seprator") != null && request.getParameter("seprator") != "") {
                        container.separator = request.getParameter("seprator");
                        //End!!!
                        l1 = container.separator.substring(0, 1);
                        if (container.separator.length() > 1) {
                            l2 = container.separator.substring(1, 2);
                        }
                    }
                    container.crossalign("l1", l1);
                    container.crossalign("l2", l2);
                }
                try {
                    if (TableHashMap != null && tableChange != null) {
                        if (tableChange.equalsIgnoreCase("applycolor")) {
                            colorCodes = request.getParameterValues("colorCodes");
                            operators = request.getParameterValues("operators");
                            sValues = request.getParameterValues("sValues");
                            eValues = request.getParameterValues("eValues");
                            if (request.getParameter("gradientBased") != null) {
                                isGradientBased = Boolean.parseBoolean(request.getParameter("gradientBased"));
                            }
                            String isAvgBased = request.getParameterValues("isAvgbased")[0];
                            String isMinMaxBased = request.getParameterValues("isMinMaxbased")[0];
                            String isPercentBased = request.getParameterValues("isPercentbased")[0];
                            if (isAvgBased != null && isAvgBased.equalsIgnoreCase("true")) {
                                colorCodes = request.getParameterValues("AvgcolorCodes");
                                if (colorCodes[0].isEmpty()) {
                                    colorCodes[0] = "#e0bedb";
                                }
                                operators = request.getParameterValues("0operatorsForAvg");
                                sValues = request.getParameterValues("sAvgValues0");
                                eValues = request.getParameterValues("0AvgeValues");
                            } else if (isPercentBased != null && isPercentBased.equalsIgnoreCase("true")) {
                                colorCodes = request.getParameterValues("PercentcolorCodes");
                                if (colorCodes[0].isEmpty()) {
                                    colorCodes[0] = "#e0bedb";
                            }
                                operators = request.getParameterValues("0operatorsForPercent");
                                sValues = request.getParameterValues("sPercentValues0");
                                eValues = request.getParameterValues("0PercenteValues");
                            }

                            colorCodesLst = new ArrayList<String>();
                            operatorsLst = new ArrayList<String>();
                            stValuesLst = new ArrayList<String>();
                            endValuesLst = new ArrayList<String>();
                            if (colorCodes != null) {
                                colorCodesLst.addAll(Arrays.asList(colorCodes));
                            }
                            if (operators != null) {
                                operatorsLst.addAll(Arrays.asList(operators));
                            }
                            if (sValues != null) {
                                stValuesLst.addAll(Arrays.asList(sValues));
                            }
                            if (eValues != null) {
                                endValuesLst.addAll(Arrays.asList(eValues));
                            }

                            Iterable<String> operatorLstConverted = Iterables.transform(operatorsLst, MathOperator.convertOperatorString());

                            operatorsLst = new ArrayList<String>();
                            for (String operator : operatorLstConverted) {
                                operatorsLst.add(operator);
                            }
                            List<String> rowViewbys = new ArrayList<String>();
                            rowViewbys = container.getReportCollect().getViewByValues();
                            ArrayList<String> a1 = container.getReportCollect().reportRowViewbyValues;
                            StringBuffer ViewbyColumnBf = new StringBuffer();
                            for (int c = 0; c < a1.size(); c++) {
                                ViewbyColumnBf.append(a1.get(c));
                            }
                            String ViewbyColumn = ViewbyColumnBf.toString();
                            colorGroup = container.getColorGroup();
                            ReportParameter repParam = (ReportParameter) container.getReportParameter().clone();
                            String measure = "";
                            if (container.isReportCrosstab()) {
                                int originalMeasIndex = this.findMeasureIndexInCT(container, colName);
                                originalMeasIndex = originalMeasIndex - (container.getViewByCount());
                                ArrayList measureList = container.getTableDisplayMeasures();
                                if (originalMeasIndex == -1) {
                                    measure = container.getDisplayColumns().get(0);
                                } else {
                                    measure = (String) measureList.get(originalMeasIndex);
                                }
                            }
                            container.getReportCollect().setElemntId(measure);
                            if (container.isReportCrosstab() && ((isAvgBased != null && isAvgBased.equalsIgnoreCase("true")) || isMinMaxBased != null && isMinMaxBased.equalsIgnoreCase("true"))) {
                                colName = ((PbReturnObject) container.getRetObj()).crosstabMeasureId.get(colName);
                            }
                            //added by Dinanath
                            List<String> prevmes = colorGroup.getEleId();
                            ArrayList<String> allMes = new ArrayList<>(prevmes.size());
                            allMes.addAll(prevmes);
                            mes = allMes;
                            if (!mes.contains(colName)) {
                                mes.add(colName);
                            }
                            //commented by Dinaanth
//                            container.getReportCollect().setGlobalValues(mes);
//                            colorGroup.setEleId(mes);
                            //added by Dinanath;
                            container.getReportCollect().setGlobalValues(mes);
                            colorGroup.setEleId(container.getReportCollect().getGlobalValues());
                            //end of code by Dinanath
                            colorCode = colorGroup.createColorCode(colName, repParam, measure, ViewbyColumn);//,origMeasId);
                            colorCode.setGradientBased(isGradientBased);
                            if (!rowViewbys.isEmpty()) {
                                rowWisecolr = true;
                                colorGroup.setRowWiseColor(rowWisecolr);
                                colorCode.setRowWiseColor(rowWisecolr);
                                colorGroup.setRowViewByValues(rowViewbys);
                            }
//                              colorGroup.setViewByColumnValues(ViewbyColumn);
                            colorCode.setViewByColumnValues(ViewbyColumn);
                            ArrayList<ColorCodeRule> colorCodeRuleLst = new ArrayList();
                            if (isMinMaxBased != null && isMinMaxBased.equalsIgnoreCase("true")) {
                                colorCode.setMinMaxBased(true);
                                colorGroup.setMinMaxBased(true);
                                colorCodeRuleLst = ColorCodeBuilder.buildMinMaxColorCode(colorCodesLst, operatorsLst, stValuesLst, endValuesLst, container.getNoOfDays(), ViewbyColumn);
                            } else if (isAvgBased == null || isAvgBased.equalsIgnoreCase("true")) {
                                colorCode.setIsAvgBased(true);
                                colorGroup.setIsAvgBased(false);
                                colorCodeRuleLst = ColorCodeBuilder.buildAvgColorCode(colorCodesLst, operatorsLst, stValuesLst, endValuesLst, container.getNoOfDays(), ViewbyColumn);
                            } else if (isPercentBased == null || isPercentBased.equalsIgnoreCase("true")) {
                                colorCode.setIsPercentBased(true);
                                colorGroup.setIsPercentBased(false);
                                colorCodeRuleLst = ColorCodeBuilder.buildPercentColorCode(colorCodesLst, operatorsLst, stValuesLst, endValuesLst, container.getNoOfDays(), ViewbyColumn);
                            } else {
                                colorGroup.setIsAvgBased(false);
                                colorGroup.setMinMaxBased(false);
                                colorGroup.setIsPercentBased(false);
                                colorCodeRuleLst = ColorCodeBuilder.buildColorCode(colorCodesLst, operatorsLst, stValuesLst, endValuesLst, container.getNoOfDays(), ViewbyColumn, false);
                            }
//                            colorCode.setisAvgbased
                            colorCode.setColorCodeRule(colorCodeRuleLst);
                            colorGroup.update(repParam, container.getNoOfDays());
                            container.setColorGroup(colorGroup);
                            container.getReportParameter().addObserver(colorGroup);
                        } else if (tableChange.equalsIgnoreCase("numberformat")) {
                            if (TableHashMap.get("NFMap") == null) {
                                NFMap = new HashMap();
                            } else {
                                NFMap = (HashMap) TableHashMap.get("NFMap");
                            }
                            NFMap.put(colName, nbrSymbol);
                            TableHashMap.put("NFMap", NFMap);
                        } else if (tableChange.equalsIgnoreCase("tableProperties")) {
                            String outStatus = "norefresh";
                            String GrandTotalReq = request.getParameter("GrandTotalReq") == null ? "N" : "Y";
                            String NetTotalReq = request.getParameter("NetTotalReq") == null ? "N" : "Y";
                            String AvgTotalReq = request.getParameter("AvgTotalReq") == null ? "N" : "Y";
                            String OverAllMaxValueReq = request.getParameter("OverAllMaxValueReq") == null ? "N" : "Y";
                            String OverAllMinValueReq = request.getParameter("OverAllMinValueReq") == null ? "N" : "Y";
                            String CatMaxValueReq = request.getParameter("CatMaxValueReq") == null ? "N" : "Y";
                            String CatMinValueReq = request.getParameter("CatMinValueReq") == null ? "N" : "Y";
                            String TableSymbols = request.getParameter("TableSymbols");
                            String CatAvgReq = request.getParameter("categoryAvg");
                            String grandtotalZero = request.getParameter("grandTotalZero") == null ? "N" : "Y";//added by sruthi for hidden measure
                            String CrosstabGrandTotalDisplay = request.getParameter("CrosstabGrandTotalDisplayed");
                            String CrosstabSubTotalDisplay = request.getParameter("CrosstabSubTotalDisplayed");
                            String CrosstabMeasurePosition = request.getParameter("MeasurePos");
                            String WrapSingleViewBy = request.getParameter("WrapToSingleViewBy");
                            String TransposeViewBy = request.getParameter("TransposeViewBy");
                            String CrosstabWrapHeader = request.getParameter("WrapCrosstabHeader");
                            String RowCountReq = request.getParameter("rowCount") == null ? "N" : "Y";
                            String displayStTimePeriod = request.getParameter("displayStTimePeriod");
                            String adhocDrill = request.getParameter("enableAdhocDrill");
                            // String selectedvalue=request.getParameter("selectedvalue");
                            String msrDrill = request.getParameter("enableMsrDrill");
                            String parameterDrill = request.getParameter("enableParameterDrill");
                            String treeTableDisplay = request.getParameter("treeTableDisplay");
                            String drillvalues = request.getParameter("DrillViewBy");
                            String pagesPerSlide = request.getParameter("pagesPerSlide");
                            String customTot = request.getParameter("AddCustomTotal");
                            String serialnum = request.getParameter("serialnum");
                            String renameTotal = request.getParameter("renameTotal");
                            String rowRenameTotal = request.getParameter("rowGTRename");
                            String summarizedMeasure = request.getParameter("summarizedMeasure");
                            //added by Dinanath showing trendIcon
                            String showIconTrend = request.getParameter("showIconTrend");
//                            String isSplitBy=request.getParameter("splitByCheckBox");
//                            String splitBy=request.getParameter("splitBy");
                            String reSetColor = request.getParameter("reSetColor") == null ? "N" : "Y";
                            container.setReSetColor(reSetColor);
                            // Added by Mohit Gupta for GT and SubTotal BG color
                            String grandTotalBGColor = request.getParameter("GTcolor");
                            String subTotalBGColor = request.getParameter("SubTotalColor");
                            String headerBgColor = request.getParameter("headerBGColor");
                            if (grandTotalBGColor != null && grandTotalBGColor != "") {
                                container.setGrandTotalBGColor(grandTotalBGColor);
                            }
                            if (subTotalBGColor != null && subTotalBGColor != "") {
                                container.setSubTotalBGColor(subTotalBGColor);
                            }
                            if (headerBgColor != null && headerBgColor != "") {
                                container.setHeaderBgColor(headerBgColor);
                            }
                            if (NetTotalReq != null && NetTotalReq.equalsIgnoreCase("Y")) {
                                container.getReportCollect().showTableSubTotals = true;
                                container.setNetTotalReq(container.getReportCollect().showTableSubTotals);
                                HashMap hmapColumns = (HashMap) container.getColumnProperties();
                                for (int i = 0; i < hmapColumns.size(); i++) {
                                    HashSet hset = new HashSet();
                                    hset.addAll(hmapColumns.keySet());
                                    Iterator paramEleIter = hset.iterator();
                                    while (paramEleIter.hasNext()) {
                                        String paramElement = (String) paramEleIter.next();
                                        ArrayList alist = new ArrayList();
                                        alist = (ArrayList) hmapColumns.get(paramElement);
                                        alist.set(1, NetTotalReq);
                                        alist.set(0, GrandTotalReq);
                                    }
                                }
                            }
                            //added by sruthi for hidden measure
                            if (grandtotalZero != null && grandtotalZero.equalsIgnoreCase("Y")) {
                                DataFacade facade = new DataFacade(container);
                                HashMap TableHashMap1 = null;
                                HashMap sumerizedgt = null;
                                String columnDisplayName = null;
                                ArrayList<String> msrlist1 = new ArrayList<String>();
                                BigDecimal value = null;
                                BigDecimal value1 = null;
                                ArrayList<String> measList = new ArrayList<String>();
                                ArrayList<String> prevhide = new ArrayList<String>();
                                prevhide = container.getReportCollect().getHideMeasures();
                                TableHashMap1 = container.getTableHashMap();
                                measList = (ArrayList) TableHashMap1.get("Measures");
                                sumerizedgt = container.getSummerizedGt();
                                for (String measure : measList) {
                                    columnDisplayName = container.getMeasureName(measure);
                                    value1 = (BigDecimal) sumerizedgt.get(measure);
                                    value = facade.getColumnGrandTotalValue(measure);
                                    if (!prevhide.contains(measure.replace("A_", ""))) {
                                        if (value1 != null) {
                                            if (value1.compareTo(BigDecimal.ZERO) == 0) {
                                                prevhide.add(measure.replace("A_", ""));
                                                msrlist1.add(measure.replace("A_", ""));
                                                container.sethidegtzero1(msrlist1);
                                                value1 = null;
                                            }
                                        } else {
                                            if (value.compareTo(BigDecimal.ZERO) == 0) {
                                                prevhide.add(measure.replace("A_", ""));
                                                msrlist1.add(measure.replace("A_", ""));
                                                container.sethidegtzero1(msrlist1);
                                                value = null;
                                            }
                                        }
                                    }
                                }
                                container.getReportCollect().setHideMeasures(prevhide);
                            } else if (grandtotalZero != null && grandtotalZero.equalsIgnoreCase("N")) {
                                ArrayList<String> hidenmsrlist = new ArrayList<String>();
                                ArrayList<String> hidenmsrlist1 = new ArrayList<String>();
                                ArrayList<String> prevhide = new ArrayList<String>();
                                prevhide = container.getReportCollect().getHideMeasures();
                                hidenmsrlist = container.gethidegtzero1();
                                if (hidenmsrlist != null) {
                                    for (String list1 : hidenmsrlist) {
                                        if (prevhide.contains(list1)) {
                                            prevhide.remove(list1);
                                        }
                                    }
                                }
                                container.getReportCollect().setHideMeasures(prevhide);
                            }//ended by sruthi
                            container.setPagesPerSlide(pagesPerSlide);
                            if (renameTotal != null && renameTotal.equals("true")) {
                                container.setRenameTotal(true);
                                container.setoriginalTotalName(request.getParameter("originalTotalName"));
                                container.setRenamedTotalName(request.getParameter("RenamedTotalName"));
                                container.addRenameDetails(request.getParameter("originalTotalName"), request.getParameter("RenamedTotalName"));
                            } else {
                                container.setRenameTotal(false);
                                container.setoriginalTotalName("none");
                                container.setRenamedTotalName("none");
                            }
                            if (rowRenameTotal != null && rowRenameTotal.equals("true")) {
                                container.setRowGTRenameTotal(true);
                                container.setOriginalRowTotalName(request.getParameter("originalRowTotalName"));
                                container.setRowRenamedTotalName(request.getParameter("RowRenamedTotalName"));
                            } else {
                                container.setRowGTRenameTotal(false);
                                container.setOriginalRowTotalName("none");
                                container.setRowRenamedTotalName("none");
                            }

                            if (serialnum != null && serialnum.equals("true")) {
                                container.setSerialNumDisplay(true);
                            } else {
                                container.setSerialNumDisplay(false);
                            }
                            if (parameterDrill != null && parameterDrill.equals("true")) {
                                container.setParameterDrill(true);
                            } else {
                                container.setParameterDrill(false);
                            }
                            if (displayStTimePeriod != null && displayStTimePeriod.equals("true")) {
                                container.setStTimePeriod(true);
                            } else {
                                container.setStTimePeriod(false);
                            }
                            if (treeTableDisplay != null && treeTableDisplay.equals("true")) {
                                container.setTreeTableDisplay(true);
                            } else {
                                container.setTreeTableDisplay(false);
                            }
                            if (drillvalues != null && drillvalues.equals("true")) {
                                container.setdrillvalues(true);
                            } else {
                                container.setdrillvalues(false);
                            }

                            if (adhocDrill != null) {
                                container.setAdhocDrillType(adhocDrill);
                            }
                            //if(selectedvalue!=null){
                            //  container.setAvgcalculationtype(selectedvalue);
//                            }
                            if (msrDrill != null) {
                                container.setMeasureDrillType(msrDrill);
                            }
                            if (WrapSingleViewBy != null && WrapSingleViewBy.equals("true")) {
                                container.setRowViewDisplayMode(ContainerConstants.TABLE_ROWVIEW_DISPLAY_WRAPPED);
                            } else {
                                container.setRowViewDisplayMode(ContainerConstants.TABLE_ROWVIEW_DISPLAY_UNWRAPPED);
                            }
                            if (TransposeViewBy != null && TransposeViewBy.equals("true")) {
                                container.setTransposeTable(true);
                            } else {
                                container.setTransposeTable(false);
                            }

                            if (CrosstabWrapHeader != null && CrosstabWrapHeader.equals("true")) {
                                container.wrapHeadersInCrosstab(true);
                            } else {
                                container.wrapHeadersInCrosstab(false);
                            }

                            if (container.isReportCrosstab()) {
                                boolean gtPosUpdated = false;
                                boolean stPosUpdated = false;
                                boolean isMsrPosUpdated = false;
                                int measurePosition = 0;

                                if (CrosstabGrandTotalDisplay != null) {
                                    if ("First".equalsIgnoreCase(CrosstabGrandTotalDisplay)) {
                                        gtPosUpdated = container.setCrosstabGrandTotalDisplayPosition(ContainerConstants.CROSSTAB_GRANDTOTAL_FIRST);
                                    } else if ("Last".equalsIgnoreCase(CrosstabGrandTotalDisplay)) {
                                        gtPosUpdated = container.setCrosstabGrandTotalDisplayPosition(ContainerConstants.CROSSTAB_GRANDTOTAL_LAST);
                                    } else if ("None".equalsIgnoreCase(CrosstabGrandTotalDisplay)) {
                                        gtPosUpdated = container.setCrosstabGrandTotalDisplayPosition(ContainerConstants.CROSSTAB_GRANDTOTAL_NONE);
                                    }
                                }
                                if (CrosstabSubTotalDisplay != null) {
                                    if ("Before".equalsIgnoreCase(CrosstabSubTotalDisplay)) {
                                        stPosUpdated = container.setCrosstabSubTotalDisplayPosition(ContainerConstants.CROSSTAB_SUBTOTAL_BEFORE);
                                    } else if ("After".equalsIgnoreCase(CrosstabSubTotalDisplay)) {
                                        stPosUpdated = container.setCrosstabSubTotalDisplayPosition(ContainerConstants.CROSSTAB_SUBTOTAL_AFTER);
                                    } else if ("AllFirst".equalsIgnoreCase(CrosstabSubTotalDisplay)) {
                                        stPosUpdated = container.setCrosstabSubTotalDisplayPosition(ContainerConstants.CROSSTAB_SUBTOTAL_FIRST);
                                    } else if ("AllLast".equalsIgnoreCase(CrosstabSubTotalDisplay)) {
                                        stPosUpdated = container.setCrosstabSubTotalDisplayPosition(ContainerConstants.CROSSTAB_SUBTOTAL_LAST);
                                    } else if ("None".equalsIgnoreCase(CrosstabSubTotalDisplay)) {
                                        stPosUpdated = container.setCrosstabSubTotalDisplayPosition(ContainerConstants.CROSSTAB_SUBTOTAL_NONE);
                                    }
                                }
                                if (customTot != null && !customTot.equalsIgnoreCase("null") && customTot.equalsIgnoreCase("true")) {
                                }
                                if (!CrosstabMeasurePosition.equals("") && CrosstabMeasurePosition != null) {
                                    measurePosition = Integer.parseInt(CrosstabMeasurePosition);
                                    isMsrPosUpdated = container.setMeasurePosition(measurePosition);
                                    // 
                                }
                                fireQuery = gtPosUpdated || stPosUpdated || isMsrPosUpdated;
                                // We will fir equery only if positions are changed

                                if (fireQuery) {
                                    PbReportViewerBD repViewerBD = new PbReportViewerBD();
                                    repViewerBD.fireCrosstabReportQuery(container, session.getAttribute("USERID").toString());
                                    outStatus = "refresh";
                                }
                            }
                            if (showIconTrend != null && showIconTrend.equalsIgnoreCase("true")) {
                                container.setToShowTrendIcon(true);
//                                container.setoriginalTotalName(request.getParameter("originalTotalName"));
//                                container.setRenamedTotalName(request.getParameter("RenamedTotalName"));
//                                container.addRenameDetails(request.getParameter("originalTotalName"), request.getParameter("RenamedTotalName"));
                            } else {
                                container.setToShowTrendIcon(false);
//                                container.setoriginalTotalName("none");
//                                container.setRenamedTotalName("none");
                            }
                            container.setGrandTotalReq(Boolean.parseBoolean(request.getParameter("GrandTotalReq")));
                            container.setNetTotalReq(Boolean.parseBoolean(request.getParameter("NetTotalReq")));
                            container.setAvgTotalReq(Boolean.parseBoolean(request.getParameter("AvgTotalReq")));
                            container.setCatAvgTotalReq(Boolean.parseBoolean(request.getParameter("categoryAvg")));
                            container.setOverAllMaxValueReq(Boolean.parseBoolean(request.getParameter("OverAllMaxValueReq")));
                            container.setOverAllMinValueReq(Boolean.parseBoolean(request.getParameter("OverAllMinValueReq")));
                            container.setCatMaxValueReq(Boolean.parseBoolean(request.getParameter("CatMaxValueReq")));
                            container.setCatMinValueReq(Boolean.parseBoolean(request.getParameter("CatMinValueReq")));
//                          container.setTableSymbols(request.getParameter("TableSymbols"));
                            container.setRowGrandTotalReq(Boolean.parseBoolean(request.getParameter("RowGrandTotalReq")));
                            container.setRowNetTotalReq(Boolean.parseBoolean(request.getParameter("RowNetTotalReq")));
                      //      container.setSearchReq(Boolean.parseBoolean(request.getParameter("SearchReq")));
                            container.setSearchReq(Boolean.parseBoolean("true"));
                            container.setRowCountReq(Boolean.parseBoolean(request.getParameter("rowCount")));
                            container.setMeasDrill(Boolean.parseBoolean(request.getParameter("enableDrillMeasure")));
                            container.setIsCustTotEnabled(Boolean.parseBoolean(request.getParameter("AddCustomTotal")));
                            container.setSummarizedMeasuresEnabled(Boolean.parseBoolean(request.getParameter("summarizedMeasure")));
                            container.setisMaskZeros(Boolean.parseBoolean(request.getParameter("maskZero")));
                            container.setHideMsrHeading(Boolean.parseBoolean(request.getParameter("HideMsrHdng")));
                            container.setGrandTotalZero(Boolean.parseBoolean(request.getParameter("grandTotalZero")));//added by sruthi
                            if (Boolean.parseBoolean(request.getParameter("AddCustomTotal"))) {
                                container.setCustTotName(request.getParameter("CustomTotalname").toString());
                                container.setMappedTo(request.getParameter("mapCustomTot").toString());
                            }
                            String drillAcross = request.getParameter("drillAcrossViewBy");
                            if (drillAcross != null && "true".equalsIgnoreCase(drillAcross)) {
                                container.setDrillAcrossSupported(true);
                                container.getReportCollect().drillAcrossSupported = true;
                                if (container.getViewByCount() > 1) {
                                    container.setAdhocDrillType("drillside");
                                }
                            } else {
                                container.setDrillAcrossSupported(false);
                            }
                            if (TableHashMap.get("TableProperties") != null) {
                                TableProperties = (HashMap) TableHashMap.get("TableProperties");
                            } else {
                                TableProperties = new HashMap();
                            }
                            TableProperties.put("ShowTotalValues", GrandTotalReq);//indicates show Total 0
                            TableProperties.put("ShowSubTotalValues", NetTotalReq);//indicates show sub Total 1
                            TableProperties.put("ShowAvgValues", AvgTotalReq);//indicates show avg Total 2
                            TableProperties.put("ShowOvrAllMaxValues", OverAllMaxValueReq);//indicates show  over all max 3
                            TableProperties.put("ShowOvrAllMinValues", OverAllMinValueReq);//indicates show over all min 4
                            TableProperties.put("ShowCatMaxValues", CatMaxValueReq);//indicates show cat max 5
                            TableProperties.put("ShowCatMinValues", CatMinValueReq);//indicates show cat min 6
                            TableProperties.put("DefaultSortedColumn", container.getDefaultSortedColumn());
                            TableProperties.put("ColumnSymbols", TableSymbols);
                            TableProperties.put("RowCount", RowCountReq);
                            TableProperties.put("ShowcatAvg", CatAvgReq);
                            TableProperties.put("Separator", request.getParameter("seprator"));
                            ArrayList<String> measLst = container.getTableDisplayMeasures();
                            PbReportViewerBD repViewerBD = new PbReportViewerBD();
                            container.setColumnProperties(repViewerBD.resetColumnProperties(measLst, container));

                            TableHashMap.put("TableProperties", TableProperties);
                            PrintWriter out = response.getWriter();
                            out.print("refresh");
                        } else if (tableChange.equalsIgnoreCase("PercentColumnwithAbsolute")) {
                             container.setPercentWise(tableChange);
                            container.setPercentWiseStatus(false);
                            container.setIsPercentColumnwithAbsolute(colName, "true");//by Nazneen
                            PbReportViewerBD repViewerBD = new PbReportViewerBD();
                            String percentStatus = repViewerBD.addRunTimeColumn(container, RTMeasureElement.PERCENT_COLUMN, colName);
                            StringBuilder strbldr = new StringBuilder();
                            BigDecimal grandTotal = container.getRetObj().getColumnGrandTotalValue(colName);
                            strbldr.append("{ DimViewByNames:[");
                            strbldr.append("\"").append(percentStatus).append("\"").append(",").append("\"").append(NumberFormatter.getModifiedNumber(grandTotal, "")).append("\"").append("] }");

                            pWriter.print(strbldr.toString());
                        } else if (tableChange.equalsIgnoreCase("PercentSubtotalColumnwithAbsolute")) {
                             container.setPercentWise(tableChange);
                            container.setIsPercentColumnwithAbsolute(colName, "true");//by Nazneen
                            PbReportViewerBD repViewerBD = new PbReportViewerBD();
                            String percentStatus = repViewerBD.addRunTimeColumn(container, RTMeasureElement.PERCENT_ON_SUBTOTAL_COLUMN, colName);
                            StringBuilder strbldr = new StringBuilder();
                            BigDecimal grandTotal = container.getRetObj().getColumnGrandTotalValue(colName);
                            strbldr.append("{ DimViewByNames:[");
                            strbldr.append("\"").append(percentStatus).append("\"").append(",").append("\"").append(NumberFormatter.getModifiedNumber(grandTotal, "")).append("\"").append("] }");

                            pWriter.print(strbldr.toString());
//                            pWriter.print(percentStatus);
                        } else if (tableChange.equalsIgnoreCase("PercentColumn")) {
                             container.setPercentWise(tableChange);
                            PbReportViewerBD repViewerBD = new PbReportViewerBD();
                            ArrayList Measures = (ArrayList) ((ArrayList) container.getTableHashMap().get("Measures"));//.clone();
                            ArrayList MeasuresName = (ArrayList) ((ArrayList) container.getTableHashMap().get("MeasuresNames"));//.clone();
                            int whichMeasure = repViewerBD.findMeasureIndexInCT(container, colName);
                            int measIndex = whichMeasure - container.getViewByCount();

                            String msrId = (String) Measures.get(measIndex);
                            String msrIdName = (String) MeasuresName.get(measIndex);
                            container.setPercentWiseTableName(msrIdName);
                            container.setPercentWiseTable(msrId);
//                            String measures = "";
                            StringBuilder measures = new StringBuilder(300);
                            String percentStatus = repViewerBD.addRunTimeColumn(container, RTMeasureElement.PERCENT_COLUMN, colName);
                            //if (!container.isReportCrosstab())
                            if (!container.isReportCrosstab()) {
                                ArrayList<String> measLst = container.getTableDisplayMeasures();
                                measLst.remove(colName);
                                for (String measure : measLst) {
//                                    measures = measures + "," + measure.replace("A_", "");
                                    measures.append(",").append(measure.replace("A_", ""));
                                }

                                if (measures.length() > 0) {
                                    measures = new StringBuilder(measures.substring(1));
                                }

                                repViewerBD.tableMeasureChanges(container, measures.toString());
                                // repViewerBD.hideMeasure(container, colName);
                            } else {
                                repViewerBD.hideMeasure(container, colName);
                                container.setPercentWiseStatus(true);
                            }
                            StringBuilder strbldr = new StringBuilder();

                            BigDecimal grandTotal = container.getRetObj().getColumnGrandTotalValue(colName);
                            strbldr.append("{ DimViewByNames:[");
                            strbldr.append("\"").append(percentStatus).append("\"").append(",").append("\"").append(NumberFormatter.getModifidNumber(grandTotal)).append("\"").append("] }");

                            pWriter.print(strbldr.toString());
                        } else if (tableChange.equalsIgnoreCase("PercentSubtotalColumn")) {
                             container.setPercentWise(tableChange);
                            PbReportViewerBD repViewerBD = new PbReportViewerBD();
                            String percentStatus = repViewerBD.addRunTimeColumn(container, RTMeasureElement.PERCENT_ON_SUBTOTAL_COLUMN, colName);

                            if (!container.isReportCrosstab()) {
                                repViewerBD.hideMeasure(container, colName);
                            } else {
                                repViewerBD.hideMeasure(container, colName);
                            }

                            StringBuilder strbldr = new StringBuilder();

                            BigDecimal grandTotal = container.getRetObj().getColumnGrandTotalValue(colName);
                            strbldr.append("{ DimViewByNames:[");
                            strbldr.append("\"").append(percentStatus).append("\"").append(",").append("\"").append(NumberFormatter.getModifidNumber(grandTotal)).append("\"").append("] }");

                            pWriter.print(strbldr.toString());
                        } else if (tableChange.equalsIgnoreCase("columnProperties")) {
                            displayColumns = container.getDisplayColumns();

                            if (container.isReportCrosstab()) {
                                if (TableHashMap.get("NFMap") == null) {
                                    NFMap = new HashMap();
                                } else {
                                    NFMap = (HashMap) TableHashMap.get("NFMap");
                                }
                                int measCount = container.getReportMeasureCount();//.size();
                                int whichMeasure = this.findMeasureIndexInCT(container, colName);
                                int size = displayColumns.size();
//                                   int originalMeasIndex = repBD.findMeasureIndexInCT(container,columnName);
                                HashMap ColumnProperties = null;
                                HashMap<String, String> customdata = null;
                                HashMap<String, String> crosstabMeasureId = ((PbReturnObject) container.getRetObj()).crosstabMeasureId;
                                Set crosseleid = new HashSet();
                                String GrandTotalReq = (request.getParameter("GrandTotalReq") == null) ? "N" : "Y";
                                String NetTotalReq = request.getParameter("NetTotalReq") == null ? "N" : "Y";
                                String AvgTotalReq = request.getParameter("AvgTotalReq") == null ? "N" : "Y";
                                String CatAvgTotalReq = request.getParameter("categoryAvg") == null ? "N" : "Y";
                                String OverAllMaxValueReq = request.getParameter("OverAllMaxValueReq") == null ? "N" : "Y";
                                String OverAllMinValueReq = request.getParameter("OverAllMinValueReq") == null ? "N" : "Y";
                                String CatMaxValueReq = request.getParameter("CatMaxValueReq") == null ? "N" : "Y";
                                String CatMinValueReq = request.getParameter("CatMinValueReq") == null ? "N" : "Y";
                                String columnSymbol = request.getParameter("columnSymbol") == null ? " " : request.getParameter("columnSymbol");
                                String NbrFormat = request.getParameter("NbrFormat") == null ? " " : request.getParameter("NbrFormat");
                                container.setSymbol(colName, columnSymbol);
                                container.setNo_format(colName, NbrFormat);
                                String showIndicators = request.getParameter("Indicator") == null ? "N" : "Y";
                                String RowCountReq = request.getParameter("rowCount") == null ? "N" : "Y";
                                String colIndicator = request.getParameter("colIndicator") == null ? "None " : request.getParameter("colIndicator");
                                String timeconversion = request.getParameter("timeconversion") == null ? "N" : "Y";
                                String subTotalDeviation = request.getParameter("subTotalDeviation") == null ? "N" : "Y";
                                String gtCTAvgType = request.getParameter("gtCTAvgType") == null ? " " : request.getParameter("gtCTAvgType");
                                String gtCTcolAvgType = request.getParameter("gtCTcolAvgType") == null ? " " : request.getParameter("gtCTcolAvgType");
                                String numberformate = request.getParameter("NumberHeader") == null ? "N" : "Y"; //added by sruthi for numberformate in crosstab
                                String customHeader = request.getParameter("CustomHeader") == null ? "" : request.getParameter("CustomHeader");
                                PbReportViewerBD repbd = new PbReportViewerBD();
                                String measureType = request.getParameter("measureType");
                                String averagecalculationType = request.getParameter("averagecalculationType");
                                if (averagecalculationType != null) {
                                    container.setaveragecalculationtype(colName, averagecalculationType);
                                    crosseleid = crosstabMeasureId.keySet();
                                    String ctabvalue = crosstabMeasureId.get(colName);
                                    Iterator iteratoreleid = crosseleid.iterator();
                                    while (iteratoreleid.hasNext()) {
                                        String eleidkeys = iteratoreleid.next().toString();
                                        String eleid = crosstabMeasureId.get(eleidkeys);
                                        if (eleid.equalsIgnoreCase(ctabvalue)) {
                                            container.setcrosscolmap1(eleid, averagecalculationType);
                                        }
                                    }
                                }
                                //.println("NbrFormat==" + NbrFormat);
                                TableHashMap = container.getTableHashMap();
                                TableProperties = (HashMap) TableHashMap.get("TableProperties");
                                ColumnProperties = (container.getColumnProperties() == null) ? new HashMap() : container.getColumnProperties();
                                customdata = (container.getCustomHeader() == null) ? new HashMap<String, String>() : container.getCustomHeader(); //added by sruthi for custom header
                                String dateoptions = request.getParameter("dateoption");
                                String dateSubStringValues = "";
                                String substrvalue1 = request.getParameter("substrvalue1");
                                String substrvalue2 = request.getParameter("substrvalue2");
                                if (substrvalue1 != "" & substrvalue2 != "") {
                                    dateSubStringValues = "";
                                    dateSubStringValues = dateSubStringValues + request.getParameter("substrvalue1") + "," + request.getParameter("substrvalue2");
                                }
                                container.setDateandTimeOptions(colName, dateoptions);
                                container.setDateSubStringValues(colName, dateSubStringValues);
                                String dateformat = request.getParameter("dateformat");
                                container.setDateFormatt(colName, dateformat);
                                ArrayList singleColProp = new ArrayList();
                                singleColProp.add(GrandTotalReq);//show total 0
                                singleColProp.add(NetTotalReq);//show sub total 1
                                singleColProp.add(AvgTotalReq);//show avg 2
                                singleColProp.add(OverAllMaxValueReq);//show over all max 3
                                singleColProp.add(OverAllMinValueReq);//over all min 4
                                singleColProp.add(CatMaxValueReq);//cat max 5
                                singleColProp.add(CatMinValueReq);//cat min 6
                                singleColProp.add(columnSymbol);//column synbol 7
                                container.setTableSymbols(columnSymbol);
                                singleColProp.add(RowCountReq);//RowCountReq 8
                                singleColProp.add(numberformate);//added by sruthi for numberformat
                                singleColProp.add(colIndicator);//column synbol 7
                                singleColProp.add(CatAvgTotalReq);//ctegory Average 9
                                if (colIndicator.equalsIgnoreCase("Simple Indicator")) {
                                    container.setIndicatorEnabled(colName, "Y");
                                } else {
                                    container.setIndicatorEnabled(colName, "N");
                                }
                                if (colIndicator.equalsIgnoreCase("Script Indicator")) {
                                    container.addscriptIndicator(colName, "Y");
                                    container.getReportCollect().scriptIndicators.put(colName, "Y");
                                    singleColProp.add(colIndicator);
                                } else {
                                    container.getReportCollect().scriptIndicators.put(colName, "N");
                                }
                                singleColProp.add(timeconversion);
                                //start of code by Nazneen for sub total deviation
                                singleColProp.add(subTotalDeviation);
                                singleColProp.add(gtCTAvgType);
                                singleColProp.add(gtCTcolAvgType);
                                container.settimeConversion(colName, timeconversion);
                                container.setSubTotalDeviation(colName, subTotalDeviation);
                                container.setCTGtAggType(colName, gtCTAvgType);
                                container.setCTcolGtAggType(colName, gtCTcolAvgType);
                                // ColumnProperties.put(colName, singleColProp);
                                if (crosstabMeasureId != null && crosstabMeasureId.containsKey(colName)) {
                                    customdata.put(crosstabMeasureId.get(colName), customHeader);
                                } else {
                                    customdata.put(colName, customHeader);
                                }

                                // }
                                container.setCustomHeader(customdata);//ended by sruthi
                                if (crosstabMeasureId != null && crosstabMeasureId.containsKey(colName)) {
                                    ColumnProperties.put(crosstabMeasureId.get(colName), singleColProp);
                                } else {
                                    ColumnProperties.put(colName, singleColProp);
                                }
//                                container.setIndicatorEnabled(colName, showIndicators);
                                //        TableProperties.put("ColumnProperties", ColumnProperties);
                                container.setColumnProperties(ColumnProperties);
                                whichMeasure = whichMeasure - (container.getViewByCount());
                                ArrayList measureList = container.getTableDisplayMeasures();
                                String measure = (String) measureList.get(whichMeasure);
                                if (crosstabMeasureId != null && crosstabMeasureId.containsKey(colName)) {
                                    NFMap.put(crosstabMeasureId.get(colName), NbrFormat);//added by sruthi for numberformate in crosstab
                                } else {
                                    NFMap.put(colName, NbrFormat);
                                }
                                //   NFMap.put(measure, nbrSymbol);

//                                    for (int i = whichMeasure; i < size;) {
//                                        ArrayList measurelist = (ArrayList) TableHashMap.get("Measures");
//                                        String measure = (String) measurelist.get(whichMeasure - 1);
//                                        colName = (String) displayColumns.get(i);
//                                        NFMap.put(colName, nbrSymbol);
//                                        NFMap.put(measure, nbrSymbol);
//                                        i += measCount;
//                                    }
                                TableHashMap.put("NFMap", NFMap);
                            } else {

                                HashMap ColumnProperties = null;
                                HashMap<String, String> customdata = null;
                                String GrandTotalReq = (request.getParameter("GrandTotalReq") == null) ? "N" : "Y";
                                String NetTotalReq = request.getParameter("NetTotalReq") == null ? "N" : "Y";
                                String AvgTotalReq = request.getParameter("AvgTotalReq") == null ? "N" : "Y";
                                String CatAvgTotalReq = request.getParameter("categoryAvg") == null ? "N" : "Y";
                                String OverAllMaxValueReq = request.getParameter("OverAllMaxValueReq") == null ? "N" : "Y";
                                String OverAllMinValueReq = request.getParameter("OverAllMinValueReq") == null ? "N" : "Y";
                                String CatMaxValueReq = request.getParameter("CatMaxValueReq") == null ? "N" : "Y";
                                String CatMinValueReq = request.getParameter("CatMinValueReq") == null ? "N" : "Y";
                                String columnSymbol = request.getParameter("columnSymbol") == null ? " " : request.getParameter("columnSymbol");
                                String NbrFormat = request.getParameter("NbrFormat") == null ? " " : request.getParameter("NbrFormat");
                                container.setSymbol(colName, columnSymbol);
                                container.setNo_format(colName, NbrFormat);
                                String showIndicators = request.getParameter("Indicator") == null ? "N" : "Y";
                                String RowCountReq = request.getParameter("rowCount") == null ? "N" : "Y";
                                String colIndicator = request.getParameter("colIndicator") == null ? "None " : request.getParameter("colIndicator");
                                String timeconversion = request.getParameter("timeconversion") == null ? "N" : "Y";
                                String subTotalDeviation = request.getParameter("subTotalDeviation") == null ? "N" : "Y";
                                String gtCTAvgType = request.getParameter("gtCTAvgType") == null ? " " : request.getParameter("gtCTAvgType");
                                String gtCTcolAvgType = request.getParameter("gtCTcolAvgType") == null ? " " : request.getParameter("gtCTcolAvgType");
                                PbReportViewerBD repbd = new PbReportViewerBD();
                                String measureType = request.getParameter("measureType");
                                String averagecalculationType = request.getParameter("averagecalculationType");
                                String numberformate = request.getParameter("NumberHeader") == null ? "N" : "y";  //added by sruthi for numberformat
                                String customHeader = request.getParameter("CustomHeader") == null ? "" : request.getParameter("CustomHeader");//added by sruthi for custom header
                                //.println("NbrFormat==" + NbrFormat);
                                TableHashMap = container.getTableHashMap();
                                TableProperties = (HashMap) TableHashMap.get("TableProperties");
                                ColumnProperties = (container.getColumnProperties() == null) ? new HashMap() : container.getColumnProperties();
                                customdata = (container.getCustomHeader() == null) ? new HashMap<String, String>() : container.getCustomHeader();//added by sruthi for custom header

                                String dateoptions = request.getParameter("dateoption");
                                String dateSubStringValues = "";
                                String substrvalue1 = request.getParameter("substrvalue1");
                                String substrvalue2 = request.getParameter("substrvalue2");
                                if (substrvalue1 != "" & substrvalue2 != "") {
                                    dateSubStringValues = "";
                                    dateSubStringValues = dateSubStringValues + request.getParameter("substrvalue1") + "," + request.getParameter("substrvalue2");
                                }
                                container.setDateandTimeOptions(colName, dateoptions);
                                container.setDateSubStringValues(colName, dateSubStringValues);
                                String dateformat = request.getParameter("dateformat");
                                container.setDateFormatt(colName, dateformat);
                                ArrayList singleColProp = new ArrayList();
                                singleColProp.add(GrandTotalReq);//show total 0
                                singleColProp.add(NetTotalReq);//show sub total 1
                                singleColProp.add(AvgTotalReq);//show avg 2
                                singleColProp.add(OverAllMaxValueReq);//show over all max 3
                                singleColProp.add(OverAllMinValueReq);//over all min 4
                                singleColProp.add(CatMaxValueReq);//cat max 5
                                singleColProp.add(CatMinValueReq);//cat min 6
                                singleColProp.add(columnSymbol);//column synbol 7
                                container.setTableSymbols(columnSymbol);
                                singleColProp.add(RowCountReq);//RowCountReq 8
                                singleColProp.add(numberformate);//added by sruthi for numberformat
                                singleColProp.add(colIndicator);//column synbol 7
                                singleColProp.add(CatAvgTotalReq);//ctegory Average 9

                                if (colIndicator.equalsIgnoreCase("Simple Indicator")) {
                                    container.setIndicatorEnabled(colName, "Y");
                                } else {
                                    container.setIndicatorEnabled(colName, "N");
                                }
                                if (colIndicator.equalsIgnoreCase("Script Indicator")) {
                                    container.addscriptIndicator(colName, "Y");
                                    container.getReportCollect().scriptIndicators.put(colName, "Y");
                                    singleColProp.add(colIndicator);
                                } else {
                                    container.getReportCollect().scriptIndicators.put(colName, "N");
                                }
                                singleColProp.add(timeconversion);//10
                                container.settimeConversion(colName, timeconversion);
                                singleColProp.add(subTotalDeviation);// subtotal deviation 11
                                singleColProp.add(gtCTAvgType);// gtCTAvgType 12
                                singleColProp.add(gtCTcolAvgType);
//                                 if(customHeader.equalsIgnoreCase("")||customHeader==null)
//                                {
//                                     customdata.put(colName,null);
//                                 }else
                                customdata.put(colName, customHeader);//added by sruthi for custom header
                                container.setCustomHeader(customdata);//ended by sruthi
                                container.setSubTotalDeviation(colName, subTotalDeviation);
                                ColumnProperties.put(colName, singleColProp);
//                                container.setIndicatorEnabled(colName, showIndicators);
                                //        TableProperties.put("ColumnProperties", ColumnProperties);
                                container.setColumnProperties(ColumnProperties);
                                if (measureType != null) {
                                    container.setMeasureType(colName, measureType);
                                }
                                if (averagecalculationType != null) {
                                    container.setaveragecalculationtype(colName, averagecalculationType);
                                    container.setcrosscolmap1(colName, averagecalculationType);
                                }

                                NFMap = (TableHashMap.get("NFMap") == null) ? new HashMap() : (HashMap) TableHashMap.get("NFMap");
                                NFMap.put(colName, NbrFormat);
                                TableHashMap.put("NFMap", NFMap);
                                TableHashMap.put("TableProperties", TableProperties);
                            }
                        } else if (tableChange.equalsIgnoreCase(RTMeasureElement.RANK_COLUMN)
                                || tableChange.equalsIgnoreCase(RTMeasureElement.RUNNING_TOTAL_COLUMN)
                                || tableChange.equalsIgnoreCase(RTMeasureElement.DEVIATION_FROM_MEAN)
                                || tableChange.equalsIgnoreCase(RTMeasureElement.GOAL_SEEK)
                                || tableChange.equalsIgnoreCase(RTMeasureElement.QTDRANK_COLUMN)
                                || tableChange.equalsIgnoreCase(RTMeasureElement.YTDRANK_COLUMN)
                                || tableChange.equalsIgnoreCase(RTMeasureElement.PMTDRANK_COLUMN)
                                || tableChange.equalsIgnoreCase(RTMeasureElement.PQTDRANK_COLUMN)
                                || tableChange.equalsIgnoreCase(RTMeasureElement.PYTDRANK_COLUMN)
                                || tableChange.equalsIgnoreCase(RTMeasureElement.RANK_ST)) {//added by NAzneen for Rank on ST
                            PbReportViewerBD repViewerBD = new PbReportViewerBD();
                            String status = repViewerBD.addRunTimeColumn(container, tableChange, colName);
                            HashMap<String, String> goalMap = new HashMap<String, String>();
                            if(targetVal!=null)
                            targetValues.addAll(Arrays.asList(targetVal));

                            container.getReportCollect().getGoalseek().put(colName, targetValues);
                            container.getReportCollect().getGoalSeekBasicandAdhoc().put("Basic", container.getReportCollect().getGoalseek());
                            pWriter.print(status);
                        } else if (tableChange.equalsIgnoreCase("RankColumnWithPrior")) {
                            PbReportViewerBD repViewerBD = new PbReportViewerBD();
                            String status = repViewerBD.addRunTimeColumnWithPrior(container, RTMeasureElement.RANK_COLUMN, colName);
                            pWriter.print(status);
                        } else if (tableChange.equalsIgnoreCase("RowWisePercent")) {
                            if (container.isDynamicRowsDisplayedInCrosstab()) {
                                container.setCrosstabDynamicRowDisplay(false);
                            } else {
                                if (container.getCrosstabGrandTotalDisplayPosition().equals(ContainerConstants.CROSSTAB_GRANDTOTAL_NONE)) {
                                    pWriter.print("AddGT");
                                } else {
                                    container.setCrosstabDynamicRowDisplay(true);
                                }
                            }
                        } else if (tableChange.equalsIgnoreCase("resetRuntimeColumn")) {
                            PbReportViewerBD repViewerBD = new PbReportViewerBD();
                            repViewerBD.removeMeasureColumn(container, colName);
                            repViewerBD.unhideMeasure(container, RTMeasureElement.getOriginalColumn(colName));
                            if(removeComparision!=null && removeComparision.equalsIgnoreCase("true")){
                                String element_id = colName;
                                element_id = element_id.replace("_percentwise", "").replace("_rank", "").replace("_wf", "").replace("_wtrg", "").replace("_rt", "").replace("_pwst", "").replace("_excel", "").replace("_excel_target", "").replace("_deviation_mean", "").replace("_gl", "").replace("_userGl", "").replace("_timeBased", "").replace("_changedPer", "").replace("_glPer", "").replace("_MTD", "").replace("_QTD", "").replace("_YTD", "").replace("_PMTD", "").replace("_PQTD", "").replace("_PYTD", "")
                                .replace("_MOMPer", "").replace("_QOQPer", "").replace("_YOYPer", "").replace("_MOYMPer", "").replace("_QOYQPer", "").replace("_MOM", "").replace("_QOQ", "").replace("_YOY", "").replace("_MOYM", "").replace("_QOYQ", "").replace("_PYtdrank", "").replace("_PQtdrank", "").replace("_PMtdrank", "").replace("_Qtdrank", "").replace("_Ytdrank", "").replace("_PYMTD", "").replace("_PYQTD", "")
                                        .replace("_WTD", "").replace("_PWTD", "").replace("_PYWTD", "").replace("_WOWPer", "").replace("_WOYWPer", "").replace("_WOW", "").replace("_WOYW", "");
                                ColorHelper signHelper = new ColorHelper();
                                signHelper = container.getSignForMeasure(element_id);
                                String dependentMeasure = signHelper.getDependentMeasure();
                                if(dependentMeasure!=null&& !dependentMeasure.isEmpty()&& colName.equalsIgnoreCase(dependentMeasure)){
                                    container.setSignForMeasure(element_id, null);
                                    container.setrtMeasureCompareWith(element_id,"reset");
                                }
                            }

                        } else if (tableChange.equalsIgnoreCase("renameMeasure")) {
                            PbReportViewerBD repViewerBD = new PbReportViewerBD();
                            repViewerBD.updateTableMeasureName(container, colName, disColName);
//                            HashMap<String,String> isrenamed= new HashMap();
//                            isrenamed.put(colName,"true");
                            container.setisrenamed(colName, disColName);

                        } else if (tableChange.equalsIgnoreCase("scriptAlign")) {
                            scriptAlign = request.getParameter("textAlign");
                            container.setAlignment(colName, scriptAlign);
                            PbReportViewerBD repViewerBD = new PbReportViewerBD();
                            if (!container.isReportCrosstab()) {
                                repViewerBD.updateScriptAlign(container, colName, disColName, scriptAlign);
                            } else {

                                ArrayList Measures = (ArrayList) ((ArrayList) container.getTableHashMap().get("Measures"));//.clone();
                                int whichMeasure = repViewerBD.findMeasureIndexInCT(container, colName);
                                int measIndex = whichMeasure - container.getViewByCount();
                                String msrId = (String) Measures.get(measIndex);
                                repViewerBD.updateScriptAlign(container, msrId, disColName, scriptAlign);
//                                                 //String disColName = (String) MeasuresNames.get(measIndex);
//                                                    ArrayList displayColumns1 = container.getDisplayColumns();
//                                                    int size = displayColumns1.size();
//                                                    int measCount = container.getReportMeasureCount();
//                                                    for (int i = whichMeasure; i < size;) {
//                                                        colName = (String) displayColumns1.get(i);
//                                                        repViewerBD.updateScriptAlign(container, colName, disColName,scriptAlign);
//                                                        i += measCount;
//
//                                                    }
                            }
                        } else if (tableChange.equalsIgnoreCase("measureAlign")) {
                            measureAlign = request.getParameter("measureAlign");
                            PbReportViewerBD repViewerBD = new PbReportViewerBD();
                            if (!container.isReportCrosstab()) {
                                repViewerBD.updateMeasureAlign(container, colName, disColName, measureAlign);
                            } else {
                                ArrayList Measures = (ArrayList) ((ArrayList) container.getTableHashMap().get("Measures"));//.clone();
                                int whichMeasure = repViewerBD.findMeasureIndexInCT(container, colName);
                                int measIndex = whichMeasure - container.getViewByCount();
                                String msrId = (String) Measures.get(measIndex);
                                repViewerBD.updateMeasureAlign(container, msrId, disColName, measureAlign);
//                                                    int whichMeasure = repViewerBD.findMeasureIndexInCT(container, colName);
//                                                    ArrayList displayColumns1 = container.getDisplayColumns();
//                                                    int size = displayColumns1.size();
//                                                    int measCount = container.getReportMeasureCount();
//                                                    for (int i = whichMeasure; i < size;) {
//                                                        colName = (String) displayColumns1.get(i);
//                                                        repViewerBD.updateMeasureAlign(container, colName, disColName,measureAlign);
//                                                        i += measCount;
//
//                                                    }
                            }
                            //added by anitha for MTD,QTD,YTD on measures in AO report
                        }else if(tableChange.equalsIgnoreCase(RTMeasureElement.MONTH_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.QTR_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.YEAR_JOIN)
                                ||tableChange.equalsIgnoreCase(RTMeasureElement.PMONTH_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.PQTR_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.PYEAR_JOIN)
                                ||tableChange.equalsIgnoreCase(RTMeasureElement.MOM_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.QOQ_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.YOY_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.MOYM_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.QOYQ_JOIN)
                                ||tableChange.equalsIgnoreCase(RTMeasureElement.MOMPER_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.QOQPER_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.YOYPER_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.MOYMPER_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.QOYQPER_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.PYMONTH_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.PYQTR_JOIN)
                                ||tableChange.equalsIgnoreCase(RTMeasureElement.WEEK_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.PWEEK_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.PYWEEK_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.WOW_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.WOYW_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.WOWPER_JOIN)||tableChange.equalsIgnoreCase(RTMeasureElement.WOYWPER_JOIN)){
                            String joinType = "";
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.MONTH_JOIN))
                                joinType = RTMeasureElement.MONTH_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.QTR_JOIN))
                                joinType = RTMeasureElement.QTR_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.YEAR_JOIN))
                                joinType = RTMeasureElement.YEAR_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.PMONTH_JOIN))
                                joinType = RTMeasureElement.PMONTH_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.PQTR_JOIN))
                                joinType = RTMeasureElement.PQTR_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.PYEAR_JOIN))
                                joinType = RTMeasureElement.PYEAR_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.PYEAR_JOIN))
                                joinType = RTMeasureElement.PYEAR_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.MOM_JOIN))
                                joinType = RTMeasureElement.MOM_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.QOQ_JOIN))
                                joinType = RTMeasureElement.QOQ_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.YOY_JOIN))
                                joinType = RTMeasureElement.YOY_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.MOYM_JOIN))
                                joinType = RTMeasureElement.MOYM_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.QOYQ_JOIN))
                                joinType = RTMeasureElement.QOYQ_JOIN;
                             if(tableChange.equalsIgnoreCase(RTMeasureElement.MOMPER_JOIN))
                                joinType = RTMeasureElement.MOMPER_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.QOQPER_JOIN))
                                joinType = RTMeasureElement.QOQPER_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.YOYPER_JOIN))
                                joinType = RTMeasureElement.YOYPER_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.MOYMPER_JOIN))
                                joinType = RTMeasureElement.MOYMPER_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.QOYQPER_JOIN))
                                joinType = RTMeasureElement.QOYQPER_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.PYMONTH_JOIN))
                                joinType = RTMeasureElement.PYMONTH_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.PYQTR_JOIN))
                                joinType = RTMeasureElement.PYQTR_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.WEEK_JOIN))joinType = RTMeasureElement.WEEK_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.PWEEK_JOIN))joinType = RTMeasureElement.PWEEK_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.PYWEEK_JOIN))joinType = RTMeasureElement.PYWEEK_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.WOW_JOIN))joinType = RTMeasureElement.WOW_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.WOYW_JOIN))joinType = RTMeasureElement.WOYW_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.WOWPER_JOIN))joinType = RTMeasureElement.WOWPER_JOIN;
                            if(tableChange.equalsIgnoreCase(RTMeasureElement.WOYWPER_JOIN))joinType = RTMeasureElement.WOYWPER_JOIN;
                            PbReportViewerBD repViewerBD = new PbReportViewerBD();
                            String status = repViewerBD.addRunTimeColumn(container, joinType, colName);
                            pWriter.print(status);
                        }
                        //end of code by anitha for MTD,QTD,YTD on measures in AO report

                        if (request.getParameter("goaluserPer") != null) {
                            if (container.getDisplayColumns().contains(colName.concat("_userGl"))) {
                                container.getDisplayColumns().remove(colName.concat("_userGl"));
                                container.getDisplayColumns().remove(colName.concat("_glPer"));
                                container.getDisplayLabels().remove(disColName.concat("(User Goal Seek)"));
                                container.getDisplayLabels().remove(disColName.concat("(User Goal%)"));
                            }

                            String goaluser = request.getParameter("goaluserPer");
                            container.getRetObj().resetViewSequence();

                            percntCol.addAll(Arrays.asList(percntValues));
                            goalPercent.addAll(Arrays.asList(goal));
//                             if(percntCol!=null){
//                                 float sum=0;
//                                 for(int i=0;i<percntCol.size();i++){
//                                     sum=sum+Float.parseFloat(percntCol.get(i));
//                                 }
//                                 if(sum<=100.0){
//                                 sum=100-sum;
//                                 if(sum!=0.0){
//                                 Float val=(float)Float.valueOf(percntCol.get(percntCol.size()-1))+sum;
//                                // Float value=(float)Math.round(val*100)/100;
//                                         percntCol.set(percntCol.size()-1,val.toString());
//                                 }
//                                 }
//
//                             }

                            ArrayList<BigDecimal> existingPer = new ArrayList<BigDecimal>();
                            ArrayList<String> userPercent = new ArrayList<String>();
                            ProgenDataSet dataset = container.getRetObj();
                            BigDecimal grandTotal = container.getRetObj().getColumnGrandTotalValue(colName);
                            for (int i = 0; i < dataset.getViewSequence().size(); i++) {
                                //existingPer.add((dataset.getFieldValueBigDecimal(i, colName.concat("__percentwise")).multiply(new BigDecimal(100))).divide(grandTotal));
                                existingPer.add((dataset.getFieldValueRuntimeMeasure(i, colName.concat("_percentwise"))));
                                userPercent.add((NumberFormatter.getModifidNumber(existingPer.get(i))).toString());
                            }
                            if (percntCol.containsAll(userPercent)) {
                                ArrayList<String> usePer = new ArrayList<String>();
                                for (int i = 0; i < dataset.getViewSequence().size(); i++) {
                                    usePer.add(existingPer.get(i).toString());
                                }
                                container.getReportCollect().getPercentColValues().put(colName, usePer);

                            } else {
                                container.getReportCollect().getPercentColValues().put(colName, percntCol);
                            }

                            PbReportViewerBD repViewerBD = new PbReportViewerBD();

                            container.getReportCollect().getGoalSeekBasicandAdhoc().put("Adhoc", container.getReportCollect().getPercentColValues());

                            container.getReportCollect().getGoalandPercent().put(colName, goalPercent);
                            adhocstatus = repViewerBD.addRunTimeColumn(container, goaluser, colName);

                            // pWriter.print(status);
                        }
                        if (tableChange.equalsIgnoreCase(RTMeasureElement.GOAL_SEEK_USER)) {
                            if (container.getDisplayColumns().contains(colName.concat("_userGl"))) {
                                container.getDisplayColumns().remove(colName.concat("_userGl"));
                                container.getDisplayColumns().remove(colName.concat("_glPer"));
                                container.getDisplayLabels().remove(disColName.concat("(User Goal Seek)"));
                                container.getDisplayLabels().remove(disColName.concat("(User Goal%)"));
                            }
                            PbReportViewerBD repViewerBD = new PbReportViewerBD();
                            adhocstatus = repViewerBD.addRunTimeColumn(container, tableChange, colName);
                            pWriter.print(adhocstatus);
                        }
                        if (request.getParameter("percentValue") != null) {
                            if (container.getDisplayColumns().contains(colName.concat("_timeBased"))) {
                                container.getDisplayColumns().remove(colName.concat("_timeBased"));
                                container.getDisplayColumns().remove(colName.concat("_changedPer"));
                                container.getDisplayLabels().remove(disColName.concat("(Goal Changed%)"));
                                container.getDisplayLabels().remove(disColName.concat("(Goal Seek)"));
                            }
                            //indivPerval.clear();
                            container.getRetObj().resetViewSequence();
                            currentValues.addAll(Arrays.asList(curvalues));
                            indivPerval.addAll(Arrays.asList(timeIdiviper));
                            String percentColValue = request.getParameter("percentValue");
                            PbReportViewerBD repViewerBD = new PbReportViewerBD();
                            statusval = repViewerBD.addRunTimeColumn(container, percentColValue, colName);
                            container.getReportCollect().getMeasurValues().put(colName, currentValues);
                            container.getReportCollect().getGoalSeekTimeIndvidual().put("IndvMeasvalues", container.getReportCollect().getMeasurValues());
                            //pWriter.print(status);
                        }
                        if (tableChange.equalsIgnoreCase(RTMeasureElement.GOAL_TIME_BASE)) {
                            if (container.getDisplayColumns().contains(colName.concat("_timeBased"))) {
                                container.getDisplayColumns().remove(colName.concat("_timeBased"));
                                container.getDisplayColumns().remove(colName.concat("_changedPer"));
                                container.getDisplayLabels().remove(disColName.concat("(Goal Changed%)"));
                                container.getDisplayLabels().remove(disColName.concat("(Goal Seek)"));
                            }
                            PbReportViewerBD repViewerBD = new PbReportViewerBD();
                            statusval = repViewerBD.addRunTimeColumn(container, tableChange, colName);
                            container.getReportCollect().getTimeBaseInvidualper().put(colName, indivPerval);
                            container.getReportCollect().getGoalSeekTimeIndvidual().put("IndvPercentvals", container.getReportCollect().getTimeBaseInvidualper());
                            pWriter.print(statusval);
                        }
                    }
                } catch (IOException exp) {
                    logger.error("Exception: ", exp);
                } catch (NumberFormatException exp) {
                    logger.error("Exception: ", exp);
                }
            }
            // session.setAttribute("colName",colName);
            request.setAttribute("tabId", REPORTID);
            return null;
        } else {
            return mapping.findForward("sessionExpired");
        }
    }
//sandeep

    public ActionForward kpitableChanges(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {

        String colAction = request.getParameter("sourceValue");
        String ReportId = request.getParameter("tabId");
        String sortColumn = request.getParameter("sortColumn");
//        String sort = request.getParameter("sort");
        String assenddessnd = request.getParameter("sort");
        String noofrows = request.getParameter("noofcol");
        String fontsize = request.getParameter("fontsize");
        String textalign = request.getParameter("textalign");
        String fontstyle = request.getParameter("fontstyle");
        String colname = request.getParameter("msrname");
        String colorCode = request.getParameter("colorCode");
        String flag = request.getParameter("isformatchanged");
        String colflag = request.getParameter("iscolorapplied");
        String textvalue = request.getParameter("value");
        Container container = Container.getContainerFromSession(request, ReportId);
        HashMap<String, String> formats = new HashMap<String, String>();
        if (textvalue != null && !textvalue.equalsIgnoreCase("")) {
            if (container.getRowText().keySet().contains(colname)) {
                container.getRowText().remove(colname);
            }
            container.setRowText(colname, textvalue);
        }
        if (colflag != null && colflag.equalsIgnoreCase("true")) {
            container.setrowcolorForkpi(colname, colorCode);
        }
        if (flag != null && flag.equalsIgnoreCase("true")) {
            container.isformatchanged = true;
            formats.put("fontsize", fontsize);
            formats.put("textalign", textalign);
            formats.put("fontstyle", fontstyle);
            container.setFontFormatsType(colname, formats);
            //container.formatsMap.put(colname,formats);
        }
        String sort = null;
        if (assenddessnd != null && assenddessnd.equalsIgnoreCase("Sort Ascend")) {
            sort = "0";
        } else if (assenddessnd != null && assenddessnd.equalsIgnoreCase("Sort Descend")) {
            sort = "1";
        }
        Vector PresShownCols = new Vector();
        // Container container = Container.getContainerFromSession(request, ReportId);
        int topbottomCount;
        ArrayList<Integer> rowSequence;
        String sortType = "";
        int topBottomRowCount;
        boolean refreshGraph = true;
        ArrayList<String> sortCols = null;
        ArrayList<String> sortColsubT = null;
        char[] sortTypes = null;//ArrayList sortTypes = null;
        char[] sortDataTypes = null;
        ProgenDataSet retObj = container.getRetObj();
        sortCols = container.getSortColumns();
        sortTypes = container.getSortTypes();

        int rowCount = retObj.getViewSequence().size();//getRowCount();
        String pagesPerSlide = container.getPagesPerSlide();
        if (sort != null) {
            if (sortType != null && sortType.equalsIgnoreCase("SUBTOTALSORT")) {
                container.setSubTotalSort(true);
                container.setSortColumnForSubTot(sortColumn, sort);
                sortCols = container.getExplicitSortColumns();
                sortTypes = container.getExplicitSortTypes();
                sortDataTypes = container.getColumnDataTypes(sortCols);
                ArrayList<Integer> sortedrowSequence = retObj.getViewSequence();
                rowSequence = retObj.sortDataSetForSubTotal(sortCols, sortTypes, sortDataTypes, container);//dataTypes, container.getOriginalColumns());
                //if(rowSequence.size()!=sortedrowSequence.size()){
                //    rowSequence = sortedrowSequence;
                //}
            } else {
                //container.setSortType(sort);
                container.setIskpidasboard(true);
                container.setSortColumn(sortColumn, sort);
                sortCols = container.getSortColumns();
                sortTypes = container.getSortTypes();
                sortDataTypes = container.getSortDataTypes();
                //srchObj = retObj.sort(sortCols, sortTypes, sortDataTypes);
                //srchObj = retObj.sort(sortCols, sortTypes, container.getDataTypes());//commented by santhosh.kumar@progenbusiness.com for the purpose of percent of column on 08-02-2010
                //srchObj = retObj.sortModified(sortCols, sortTypes, container.getDataTypes(), container.getOriginalColumns());
                //container.setSortRetObj(srchObj);
                //retObj = null;
                //retObj = srchObj;
                rowSequence = retObj.sortDataSet(sortCols, sortTypes, sortDataTypes);//dataTypes, container.getOriginalColumns());
            }
            retObj.setViewSequence(rowSequence);
            rowCount = rowSequence.size();
            //container.resetTopBottom();
            refreshGraph = true;
            container.setkpiTopBottomColumn(Integer.parseInt(noofrows));
        } //<Top5/Bottom5>
        if (colAction != null && colAction.equalsIgnoreCase("rounding")) {
            String colName = request.getParameter("columnName");
            if (request.getParameter("precision") != null) {
                int precision = Integer.parseInt(request.getParameter("precision"));
                if (!container.isReportCrosstab()) {
                    container.setRoundPrecisionForMeasure(colName, precision);
                } else {
                    HashMap summarizedmMesMap = container.getSummerizedTableHashMap();
                    if (container.isSummarizedMeasuresEnabled() && container.getSummerizedTableHashMap() != null && ((List<String>) summarizedmMesMap.get("summerizedQryeIds")) != null && ((List<String>) summarizedmMesMap.get("summerizedQryeIds")).contains(colName.replace("A_", ""))) {
                        container.setRoundPrecisionForMeasure(colName, precision);
                    } else {
                        PbReportViewerBD reportViewerBD = new PbReportViewerBD();
                        int whichMeasure = reportViewerBD.findMeasureIndexInCT(container, colName);
                        ArrayList displayColumns = container.getDisplayColumns();
                        int size = displayColumns.size();
                        int measCount = container.getReportMeasureCount();
                        HashMap<String, String> crosstabMeasureId = ((PbReturnObject) container.getRetObj()).crosstabMeasureId;
                        for (int i = whichMeasure; i < size;) {
                            colName = (String) displayColumns.get(i);
                            if (container.isReportCrosstab() && crosstabMeasureId != null && !crosstabMeasureId.isEmpty()) {
                                container.setRoundPrecisionForMeasure(crosstabMeasureId.get(colName), precision);
                            }
                            if (container.isSummarizedMeasuresEnabled() && container.getSummerizedTableHashMap() != null && ((List<String>) summarizedmMesMap.get("summerizedQryeIds")) != null && ((List<String>) summarizedmMesMap.get("summerizedQryeIds")).contains(colName.replace("A_", ""))) {
                            } else {
                                container.setRoundPrecisionForMeasure(colName, precision);
                            }
                            i += measCount;
                        }
                    }
                }
            }
        }
        PrintWriter out = response.getWriter();
        PbReportViewerBD KPIDashboardBD = new PbReportViewerBD();
        StringBuilder result = KPIDashboardBD.DisplayKpiDashBoard(container);
        out.print(result.toString());
        return null;
    }

    private int findMeasureIndexInCT(Container container, String colName) {
        ArrayList displayColumns = container.getDisplayColumns();
        int index = displayColumns.lastIndexOf(colName);
        int measCount = container.getReportMeasureCount();//.size();
        int viewByCount = (container.getViewByCount());

        index = index - viewByCount;
        //find out which measure numberformat is to be added
        //the measure will be repeated in a Crosstab for each column (dimension)
        //user can click the measure under any of the columns
        //so we find the measure index and from the begining we add numberformat column for each of the col dimension element
        int whichMeasure = (index % measCount) + viewByCount;
        return whichMeasure;
    }

    //This action is used to delete the snapshot from the database
    public ActionForward deleteSnapshot(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
        PrintWriter out = response.getWriter();
        String snapshotid = request.getParameter("snapshotid");

        SnapshotDesigner deletesnap = new SnapshotDesigner();
        String status = deletesnap.deleteSnapshot(snapshotid);
        out.print(status);
        return null;
    }

    //this is used tp store as new report or overwriting existing report based on the changes done by user/
    public ActionForward saveAsNewReport(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        ServletContext context = this.getServlet().getServletContext();
        boolean isCompanyValid = Boolean.parseBoolean(context.getInitParameter("isCompanyValid"));
        PbReportViewerBD reportViewBD = new PbReportViewerBD();
        ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
        PbReportViewerDAO reprtViewerDAO = new PbReportViewerDAO();
        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
        List<String> createDateAndUser = null;
        HashMap parametersMap = null;
        String reportName = "";
        String reportDesc = "";
        String NewReportId = "";
        String ReportId = null;
        String showGraphTable = null;
        boolean overWriteExistingReport = false;
        String date = null;
        String Gtregion = request.getParameter("Gtregion");
        PbReportCollection collect = null;
        String cacheAO = "false";
        String isGraph = "false";
        String ComparisonDate = "No";
        String oldReportName = "";
        String bizzRoleId = "";
        String bizzRoleName = "";
        if (session != null) {
            if (request.getParameter("overWriteExistingReport") != null) {
                date = request.getParameter("Date");
                overWriteExistingReport = Boolean.parseBoolean(request.getParameter("overWriteExistingReport"));
                reportTemplateDAO.setOverWriteExistingReport(overWriteExistingReport);
            }
            ReportId = request.getParameter("REPORTID");
            ComparisonDate = request.getParameter("istoggledate");
            if (ReportId == null) {
                ReportId = (String) request.getAttribute("reportId");
            }
            //older report id
            //.println("ReportId overwrite is : " + ReportId);
            String qry = "select REP_TIME_ID from PRG_AR_REPORT_TIME where REPORT_ID = " + ReportId;
            PbDb pbdb = new PbDb();
            LinkedHashMap modulesList = new LinkedHashMap();
            PbReturnObject roleIdResult1 = new PbReturnObject();
            PbReturnObject roleIdResult2 = new PbReturnObject();
            int value = 0;
//                        try {
//                            PbReturnObject roleIdResult =  pbdb.execSelectSQL(qry);
//                            if(roleIdResult!=null && roleIdResult.getRowCount()>0){
//                            for(int k=0;k<roleIdResult.getRowCount();k++){
//                               value = roleIdResult.getFieldValueInt(k, "REP_TIME_ID");
//                               String finalqry1 = "select COLUMN_TYPE, DEFAULT_VALUE from PRG_AR_REPORT_TIME_DETAIL where REP_TIME_ID = "+value;
//                               String finalqry2 = "select DEFAULT_DATE from PRG_AR_REPORT_TIME_DETAIL where REP_TIME_ID = "+value;
//                               roleIdResult1 = pbdb.execSelectSQL(finalqry1);
//                               roleIdResult2 = pbdb.execSelectSQL(finalqry2);
//                               for (int i = 0; i < roleIdResult1.getRowCount(); i++) {
//                modulesList.put(roleIdResult1.getFieldValueString(i, "COLUMN_TYPE"), roleIdResult1.getFieldValueString(i, "DEFAULT_VALUE")+"#"+roleIdResult2.getFieldValueDate(i, "DEFAULT_DATE"));
//                               }
//                            }
//                            }
//                        } catch (SQLException ex) {
//                            logger.error("Exception:",ex);
//                        }
            HashMap map = new HashMap();
            Container container = null;
            map = (HashMap) session.getAttribute("PROGENTABLES");
            container = (Container) map.get(ReportId);
            parametersMap = container.getParametersHashMap();
            reportName = request.getParameter("newReportName");
            reportDesc = request.getParameter("REPORTDESC");
            cacheAO = request.getParameter("cacheAO");
            isGraph = request.getParameter("isGraph");
            if (request.getParameter("oldReportName") != null && !request.getParameter("oldReportName").isEmpty()) {
                oldReportName = request.getParameter("oldReportName");
            }
            if (request.getParameter("isKPIDashboard") != null && request.getParameter("isKPIDashboard").toString().equalsIgnoreCase("true")) {
                container.setDbrdName(reportName);
                container.setReportDesc(reportDesc);
            }
            showGraphTable = request.getParameter("showGraphTable");
            boolean quickRefreshEnable = container.isQuickRefreshEnabled();
            ArrayList timeDetails = (ArrayList) parametersMap.get("TimeDetailstList");
            HashMap timeDimHashMap = (HashMap) parametersMap.get("TimeDimHashMap");
            if (timeDetails.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                String date2 = "";
                String simdate = timeDetails.get(2).toString().trim();
                date2 = reportViewBD.parseDate(simdate);
                modulesList.put("AS_OF_DATE", timeDetails.get(3) + "#" + date2);
                modulesList.put("PRG_COMPARE", timeDetails.get(4) + "#" + null);
                modulesList.put("PRG_PERIOD_TYPE", timeDetails.get(3) + "#" + null);
            } else if (timeDetails.get(1).toString().equalsIgnoreCase("PRG_DATE_RANGE")) {
                String date1 = "";
                String date2 = "";
                String cpmdate1 = "";
                String cpmdate2 = "";
                String AsDate1 = timeDetails.get(2).toString().trim();
                String AsDate2 = timeDetails.get(3).toString().trim();
                String CmpAsDate1 = timeDetails.get(4).toString().trim();
                String CmpAsDate2 = timeDetails.get(5).toString().trim();
                date1 = reportViewBD.parseDate(AsDate1);
                date2 = reportViewBD.parseDate(AsDate2);
                cpmdate1 = reportViewBD.parseDate(CmpAsDate1);
                cpmdate2 = reportViewBD.parseDate(CmpAsDate2);
                modulesList.put("AS_OF_DATE1", timeDetails.get(2) + "#" + date1);
                modulesList.put("AS_OF_DATE2", timeDetails.get(3) + "#" + date2);
                modulesList.put("CMP_AS_OF_DATE1", timeDetails.get(4) + "#" + cpmdate1);
                modulesList.put("CMP_AS_OF_DATE2", timeDetails.get(5) + "#" + cpmdate2);
            }

            container.setCurrentTimeDetails(modulesList);

            if (showGraphTable != null && !showGraphTable.equalsIgnoreCase("")) {
                //.println("RVA---" + showGraphTable);
                reportViewBD.setShowGraphTable(showGraphTable);
            }
            if (reportDesc == null) {
                reportDesc = "";
            }
            ArrayList resetParamlist = new ArrayList();
            ArrayList advanceParamlist = new ArrayList();
            String selectedParams = "";
            ReportTemplateDAO rdao = new ReportTemplateDAO();
            collect = container.getReportCollect();
            if (overWriteExistingReport) {//call method to delete older report details
                //.println(" in if of overWriteExistingReport ");
                NewReportId = ReportId;
//                PbReportCollection collect = container.getReportCollect();

                if (collect.isCheckOverWrite()) {
                    String targetPath = (String) session.getAttribute("oldAdvHtmlFileProps");
                    String fileName = "/backUP_" + ReportId + ".txt";
                    String filePath = targetPath + fileName;
                    PbReportCollection bkpCollect = container.getReportCollect();
                    PbReportViewerBD pbrepbd = new PbReportViewerBD();
                    pbrepbd.writeBackUpFile(bkpCollect, filePath);
                    PbReportViewerDAO dao = new PbReportViewerDAO();
                    dao.writeInsertQueries(filePath, ReportId);
                }

                //.println("NewReportId in if is : " + NewReportId);
                createDateAndUser = reportTemplateDAO.getCreatedDateForOverwriteReport(ReportId);
//                
                resetParamlist = reportViewBD.getParamdetails(ReportId);
                selectedParams = rdao.getSelectedParamDetails(ReportId);
                advanceParamlist = reprtViewerDAO.getDependentViewByidsandReps(ReportId);
//                 if(quickRefreshEnable){
//                     reportViewBD.insertQuickRefreshOption(ReportId, quickRefreshEnable, container,userId);
////                 String folderPath=container.getReportCollect().getReportAdvHtmlFileProps()+"/Reports";
////                 String filePath=folderPath+"/Report_"+ReportId+".txt";
////                 ReportTemplateBD bd=new ReportTemplateBD();
////                 bd.writeBackUpFile(container, filePath);
//                 }

                if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                    boolean flag = reportTemplateDAO.DeleteReportwhenOverwriteRep(Integer.parseInt(ReportId));
                } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                    boolean flag = reportTemplateDAO.DeleteReportwhenOverwriteRep(Integer.parseInt(ReportId));
                    map.remove(ReportId);
                } else {
                    boolean flag = reportTemplateDAO.DeleteReport(Integer.parseInt(ReportId));
                    map.remove(ReportId);
                }
//                map.remove(ReportId);
            } else {

                request.setAttribute("saveAsnew", "true");
                String tabSeqName;
                if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                    tabSeqName = "IDENT_CURRENT('PRG_AR_REPORT_MASTER')";
                    NewReportId = "-1";
                } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                    tabSeqName = "LAST_INSERT_ID(REPORT_ID) from PRG_AR_REPORT_MASTER";
                    NewReportId = "-1";
                } else {
                    tabSeqName = "PRG_AR_REPORT_MASTER_SEQ";
                    NewReportId = String.valueOf(reportTemplateDAO.getSequence(tabSeqName));
                }
                container.setSaveAsNewRepFlag(true);
            }
            reportViewBD.setOverWriteExistingReport(overWriteExistingReport);
            String localPath = (String) session.getAttribute("reportAdvHtmlFileProps");
            container.getReportCollect().setReportAdvHtmlFileProps(localPath);
            //start of code by Nazneen for caching AO
            if (cacheAO == null || cacheAO.equalsIgnoreCase("") || cacheAO.equalsIgnoreCase("null")) {
                cacheAO = "false";
            }
            if (cacheAO.equalsIgnoreCase("true")) {
//                reportViewBD.createAOForReports(collect,NewReportId);
                container.isAOEnable = true;
            } else {
                container.isAOEnable = false;
            }
            //end of code by Nazneen for caching AO

            NewReportId = reportViewBD.saveReport(container, reportName, reportDesc, Integer.parseInt(NewReportId), date, userId, createDateAndUser, Gtregion);
// if(quickRefreshEnable){
//                     reportViewBD.insertQuickRefreshOption(ReportId, quickRefreshEnable, container,userId);
////                 String folderPath=container.getReportCollect().getReportAdvHtmlFileProps()+"/Reports";
////                 String filePath=folderPath+"/Report_"+ReportId+".txt";
////                 ReportTemplateBD bd=new ReportTemplateBD();
////                 bd.writeBackUpFile(container, filePath);
//                 }
            // for updating all reportId references  after overwriting and saving as new report
            reprtViewerDAO.resetReportReferences(Integer.parseInt(NewReportId), Integer.parseInt(ReportId));
            if (!overWriteExistingReport) {
                reportViewBD.updatefactFilter(ReportId, NewReportId);
                reportViewBD.updateAdavanceParameterDeatils(ReportId, NewReportId);
                reportViewBD.updateRepParameterDeatils(ReportId, NewReportId, container);

            } else {
                if (selectedParams != null && !selectedParams.isEmpty()) {
                    boolean result = rdao.saveSelectedParamDetails(ReportId, selectedParams);
                    container.setSelectedParameterIds(selectedParams);
                }
                if (resetParamlist != null && !resetParamlist.isEmpty()) {
                    ArrayList<String> paramIds = (ArrayList<String>) resetParamlist.get(0);
                    HashMap paramsandtypeHashmap = (HashMap) resetParamlist.get(1);
                    String[] params;
                    Object[] Ids = paramIds.toArray();
                    params = Arrays.copyOf(Ids, Ids.length, String[].class);
                    PbReportViewerDAO dao = new PbReportViewerDAO();
                    dao.updateRepParams(ReportId, params, paramsandtypeHashmap, container);

                }
                if (advanceParamlist != null && !advanceParamlist.isEmpty()) {
                    HashMap viewbysandConditions = (HashMap) advanceParamlist.get(0);
                    HashMap viewbyRepHashMap = (HashMap) advanceParamlist.get(1);
                    String[] ViewbyIds = null, conditions = null, CheckViewbyIdArr = null, checkReportIdArr = null, checkReportIdArr1 = null, uncheckViewbyIdArr = null;

                    if (viewbysandConditions != null && !viewbysandConditions.isEmpty()) {
                        Object[] viewbyid = viewbysandConditions.keySet().toArray();
                        ViewbyIds = Arrays.copyOf(viewbyid, viewbyid.length, String[].class);
                        Object[] conds = viewbysandConditions.values().toArray();
                        conditions = Arrays.copyOf(conds, conds.length, String[].class);
                    }
                    if (viewbyRepHashMap != null && !viewbyRepHashMap.isEmpty()) {
                        Object[] checkviewby = viewbyRepHashMap.keySet().toArray();
                        CheckViewbyIdArr = Arrays.copyOf(checkviewby, checkviewby.length, String[].class);
                        Object[] viewbyrep = viewbyRepHashMap.values().toArray();
                        checkReportIdArr = Arrays.copyOf(viewbyrep, viewbyrep.length, String[].class);
                    }
                    PbReportViewerDAO savedao = new PbReportViewerDAO();
                    savedao.saveAdvanceParameterOptions(ReportId, ViewbyIds, conditions, CheckViewbyIdArr, checkReportIdArr, checkReportIdArr1, uncheckViewbyIdArr);
                }
            }

            //.println("NewReportId in repviewer overwrite report is : " + NewReportId);
            request.setAttribute("REPORTID", NewReportId);
//            if(NewReportId != null && !NewReportId.isEmpty()){
//                session.setAttribute("REPORTID", NewReportId);
//            }
            request.setAttribute("ReportType", "R");
            request.setAttribute("userFolderId", String.valueOf(parametersMap.get("userFolderId")));
            request.setAttribute("SourcePage", "viewer");
            request.setAttribute("OLDREPORTID", ReportId);
            request.setAttribute("ReportName", reportName);
            String users = (String) session.getAttribute("USERID");

            String autometicDate = request.getParameter("autometicDate");
            String default_tab = request.getParameter("defaulttab");
           if(default_tab !=null && default_tab.equalsIgnoreCase("Graph")){
                String AOQueryUpdate = "insert into AO_AGG_MASTER(AO_AGG_MASTER_ID,AO_NAME,AO_COLUMN_NAME,MULTIPLE_NO,DIVISION_NO,PLACE_VALUE,COMPANY_ID,ROLE_ID,MENU_ID) select AO_AGG_MASTER_ID,'&' AO_NAME ,AO_COLUMN_NAME,MULTIPLE_NO,DIVISION_NO,PLACE_VALUE,COMPANY_ID,ROLE_ID,MENU_ID from AO_AGG_MASTER where AO_NAME='&'";
               Object[] obj1 = new Object[2];
               obj1[0] = "R_GO_"+NewReportId;
               obj1[1] = "R_GO_"+ReportId;
               String finalQueryUpdate=pbdb.buildQuery(AOQueryUpdate, obj1);
//               System.out.println("*****************************************AO_AGG_MASTER*******"+finalQueryUpdate);
               pbdb.execUpdateSQL(finalQueryUpdate);
             
             String AOQueryUpdate2 = "insert into AO_AGG_DETAILS(AO_AGG_DETAILS_ID,AO_AGG_MASTER_ID,AO_NAME,AO_AGG_NUMBER,COMPANY_ID,ROLE_ID,MENU_ID,IS_TIME_AGG,NEW_AO_NAME) select AO_AGG_DETAILS_ID,AO_AGG_MASTER_ID,'&' AO_NAME,AO_AGG_NUMBER,COMPANY_ID,ROLE_ID,MENU_ID,IS_TIME_AGG,NEW_AO_NAME from AO_AGG_DETAILS where AO_NAME = '&'";
              Object[] obj2 = new Object[2];
               obj2[0] = "R_GO_"+NewReportId;
               obj2[1] = "R_GO_"+ReportId;
               String finalQueryUpdate1=pbdb.buildQuery(AOQueryUpdate2, obj2);
//               System.out.println("*****************************************AO_AGG_DETAILS*******"+finalQueryUpdate1);
               pbdb.execUpdateSQL(finalQueryUpdate1);
             String queryupdate = "UPDATE PRG_AR_REPORT_MASTER SET DEFAULT_TAB='Graph' where report_id ="+NewReportId;
		pbdb.execUpdateSQL(queryupdate);	
                 Object[] obj=new Object[3];
               obj[0]=","+"graph,"+"icons";
               obj[1]="Notshowall";
               obj[2]=NewReportId;
             String queryupdate1= "UPDATE PRG_AR_REPORT_MASTER SET SHOW_ICONS='&',SHOW_ALL='&' where report_id ='&'";
             String finalQuery=pbdb.buildQuery(queryupdate1, obj);
//             System.out.println(".........................................Save as dashboard query................"+finalQuery);
            pbdb.execUpdateSQL(finalQuery);
            }
            String query = "update PRG_AR_REPORT_TIME set AUTOMETIC_DATE='" + autometicDate + "' where report_id=" + NewReportId;
            pbdb.execUpdateSQL(query);

            String reportId1 = NewReportId;
            String finalUsers1 = users;
            String fileLocation = "";
            if (session != null) {
                fileLocation = reprtViewerDAO.getFilePath(session);
            } else {
                fileLocation = "/usr/local/cache";
            }
            if (finalUsers1.equalsIgnoreCase("")) {
                finalUsers1 = (String) session.getAttribute("USERID");
            }
            if (container != null) {
                bizzRoleId = container.getReportCollect().reportBizRoles[0];
                String getRoleName = "select folder_name from PRG_USER_FOLDER where folder_id=" + bizzRoleId;
                PbReturnObject ro = pbdb.executeSelectSQL(getRoleName);
                if (ro != null && ro.getRowCount() > 0) {
                    bizzRoleName = ro.getFieldValueString(0, 0);
                }
//         bizzRoleName = collect.getReportBizRoleName(bizzRoleId);
            }
            if (isGraph == null || isGraph.equalsIgnoreCase("") || isGraph.equalsIgnoreCase("null")) {
                isGraph = "false";
            }
            if(isGraph.equalsIgnoreCase("true")){
               reprtViewerDAO.saveGraphJson(NewReportId,reportName,ReportId,oldReportName,bizzRoleName,fileLocation,userId,bizzRoleId);
                Connection conn = null;

                String objectQuery = "";
//       if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
//            objectQuery = "select * into R_GO_"+NewReportId+" from R_GO_"+ReportId+"";
//            }
//       else if(ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)){
//      objectQuery = "create table R_GO_"+NewReportId+" select * from R_GO_"+ReportId+" ";
//       }
//       else{
//        objectQuery = "create table R_GO_"+NewReportId+" as select * from R_GO_"+ReportId+" ";
//       }
                objectQuery = "create view R_GO_" + NewReportId + " as select * from R_GO_" + ReportId + " ";
                try {
                    conn = ProgenConnection.getInstance().getConnectionForElement(collect.reportQryElementIds.get(0).toString().replace("A_", ""));
                    String objectQuery1 = objectQuery.replaceAll("null[*]0", "0");
//            String objectQuery1=objectQuery.replaceAll("\"NULL*0\"", "0").replaceAll("\"null*0\"", "0");
                    pbdb.execUpdateSQL(objectQuery1, conn);
                } catch (Exception ex) {
                    logger.error("Exception:", ex);
                }
            }
            String finalUserIds1[] = finalUsers1.split(",");
            ReportTemplateDAO templateDAO = new ReportTemplateDAO();
            templateDAO.assignReportToUsers(reportId1, finalUserIds1);
            reportTemplateDAO.saveComparisonDate(ReportId, ComparisonDate);//  added by krishan
            //added by Dinanath

            try {
            String qry2 = "select savepoint_id,savepoint_name, collect_filename,container_filename from prg_report_savepoint_details where user_id='&' and report_id='&' and is_enabled='&'";
            Object[] obj = new Object[3];
            obj[0] = userId;
            obj[1] = ReportId;
            obj[2] = "true";
            String finalqry = pbdb.buildQuery(qry2, obj);
            PbReturnObject result = pbdb.execSelectSQL(finalqry);
            String savepointId = "";
            String savepointName = "";
            String collectFileName = "";
            String containerFileName = "";
            if (result != null && result.rowCount > 0) {

                savepointId = result.getFieldValueString(0, 0);
                savepointName = result.getFieldValueString(0, 1);
                collectFileName = result.getFieldValueString(0, 2);
                containerFileName = result.getFieldValueString(0, 3);
            }

            if (savepointId != null && !savepointId.isEmpty()) {
                String usrSavepointName = null;
                HashMap map1 = new HashMap();
                Container container2 = null;
                map1 = (HashMap) session.getAttribute("PROGENTABLES");
                container2 = (Container) map1.get(ReportId);
                PbReportCollection collection2 = null;
                //for serializing object into file
                ProgenReportViewerDAO dao = null;
                PbReportCollection collect2 = container2.getReportCollect();
                ObjectOutputStream out = null;
                String filePath = null;
                FileOutputStream fileOut = null;
                String newFlag = "false";
                String overriteFlag = "false";
                String currenCollectSavepointPath = null;
                String collectfilename = null;
                String status1[] = null;
                String container_filename = null;
                String savepoint_id = null;
                String owriteSavepointName = null;
                boolean exceptionFlag = false;
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd hh-mm-ss");
                SimpleDateFormat formatter2db = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
                Date date2 = new Date();
                String createdDate = formatter.format(date2);
                createdDate = createdDate.replace(" ", "_");
//                String fileLocation = null;
                PbReportViewerDAO pbDao = new PbReportViewerDAO();
                if (session != null) {
                    fileLocation = pbDao.getFilePath(session);
                } else {
                    fileLocation = "/usr/local/cache";
                }
                try {
                    File tempFile = null;
                    filePath = fileLocation + File.separator + userId + File.separator + ReportId;
                    tempFile = new File(filePath);
                    if (tempFile.exists()) {
                    } else {
                        tempFile.mkdirs();
                    }
                collectfilename = collectFileName;
                container_filename = containerFileName;
                savepoint_id = savepointId;
                owriteSavepointName = savepointName;
                currenCollectSavepointPath = filePath + File.separator + collectfilename;
                fileOut = new FileOutputStream(currenCollectSavepointPath);
                out = new ObjectOutputStream(fileOut);
                out.writeObject(collect2);
                overriteFlag = "true";

                } catch (IOException i) {
                    logger.error("Exception:", i);
                    exceptionFlag = true;
                    overriteFlag = "false";
                } finally {
                    if (out != null && fileOut != null) {
                        try {
                            out.reset();
                            out.close();
                            fileOut.flush();
                            fileOut.close();
                        } catch (IOException ex) {
                            logger.error("Exception:", ex);
                        }
                    }
                }
                String currentContainerObjectPath = null;
                try {
                    FileOutputStream fileOut2 = null;
                    ObjectOutputStream out2 = null;
                    filePath = fileLocation + File.separator + userId + File.separator + ReportId;
                        currentContainerObjectPath = filePath + File.separator + container_filename;
                        fileOut2 = new FileOutputStream(currentContainerObjectPath);
                        out2 = new ObjectOutputStream(fileOut2);
                        out2.writeObject(container2);
                    out2.reset();
                    out2.close();
                    fileOut2.flush();
                    fileOut2.close();
//                    session.setAttribute("CONTAINER_OBJPATH_" + userId + "_" + ReportId, currentContainerObjectPath);
                } catch (IOException ex) {
                    logger.error("Exception:", ex);
                    exceptionFlag = true;
                    overriteFlag = "false";
                }
                createdDate = formatter2db.format(date2);
                String savepntname = null;

        if (overriteFlag.equalsIgnoreCase("true")) {
            dao = new ProgenReportViewerDAO();
            if (usrSavepointName != null && !usrSavepointName.isEmpty()) {
                savepntname = usrSavepointName;
            } else {
                savepntname = owriteSavepointName;
            }
            dao.updateCurrentLocalSavePointPath(userId, ReportId, savepntname, currenCollectSavepointPath, collectfilename, currentContainerObjectPath, container_filename, "true", createdDate, savepoint_id);
        }
            }//if retunrObject==null
        } catch (Exception e) {
            logger.error("Exception:", e);
        }
            //end of code by Dinanath
            return mapping.findForward("reportView");
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    //added by susheela start
    public ActionForward saveReportDrillForUser(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        String reportId = "";
        String userId = request.getParameter("userId");
        reportId = request.getParameter("reportId");
        String totalUrl = request.getParameter("totalUrl");
        String typeUrl = request.getParameter("typeUrl");
        if (totalUrl.length() > 0 && typeUrl.length() > 0) {
            totalUrl = totalUrl.substring(1);
            typeUrl = typeUrl.substring(1);
        }
        PbReportViewerDAO dao = new PbReportViewerDAO();
        dao.saveReportDrillForUser(userId, reportId, totalUrl, typeUrl);
        return null;
    }

    public ActionForward forwardToReport(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        return mapping.findForward("reportView");
    }

    public ActionForward testQuery(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        PbDb pbdb = new PbDb();
        String finalQuery = "";
        ArrayList list = new ArrayList();
        Connection con = null;
        BusinessGroupDAO businessgroupdao = new BusinessGroupDAO();
        PrintWriter out = response.getWriter();
        try {
            String tableName = request.getParameter("tableName");
            String colName = request.getParameter("colName");
            String connectionId = request.getParameter("connectionId");
            String colList = request.getParameter("colList");
            String orival = request.getParameter("orivalue");
            orival = orival.replace("~", "%");
            String colType = request.getParameter("colType");
            Connection conn = (Connection) businessgroupdao.getConnectionIdConnection(connectionId);
            finalQuery = "select distinct " + colName + " from " + tableName + " where " + colName + " like('" + orival + "')";
            PbReturnObject pbretobj = pbdb.execSelectSQL(finalQuery, conn);
            String cols = "";
            String existcolNames[] = colList.split(",");
            for (int i = 0; i < pbretobj.getRowCount(); i++) {
                int count = 0;
                for (int j = 0; j < existcolNames.length; j++) {
                    if (pbretobj.getFieldValueString(i, 0).equalsIgnoreCase(existcolNames[j])) {
                        count = 1;
                        break;
                    }
                }
                if (count == 0) {
                    //list.add(pbretobj.getFieldValueString(i, 0).trim());
                    cols += "," + pbretobj.getFieldValueString(i, 0).trim();
                }
                if (!cols.equalsIgnoreCase("")) {
                    cols = cols.substring(1);
                }
            }
            out.print(cols);
            return null;
        } catch (Exception ex) {
            logger.error("Exception: ", ex);
        }
        return null;
    }

    public ActionForward saveGrpAnalysisBy(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HashMap map = null;
        HashMap ParameterGroupAnalysisHashMap = null;
        Container container = null;
        HttpSession session = request.getSession(false);
//      PrintWriter out = response.getWriter();
        String elementId = request.getParameter("viewbyId");
        String REPORTID = request.getParameter("REPORTID");
        HashMap grpvals = new HashMap();
        String modifiedElementId = "A_" + elementId;
        Connection con = null;
        ResultSet rs = null;
        Statement st = null;
        if (session != null) {
            try {
                int tabRowCount = Integer.parseInt(request.getParameter("tabRowCount"));
                String groupName = request.getParameter("grpName").trim();
                //groupName = groupName.replace(" ", "_");
                groupName = groupName.replace("#", "_");
                groupName = groupName.replace("&", "_");
                groupName = groupName.replace("!", "_");
                groupName = groupName.replace("@", "_");
                groupName = groupName.replace("(", "_");
                groupName = groupName.replace(")", "_");
                groupName = groupName.replace("[", "_");
                groupName = groupName.replace("]", "_");
                groupName = groupName.replace("{", "_");
                groupName = groupName.replace("}", "_");
                String groupNameori = groupName;
                //groupName = groupName.toUpperCase();
                String groupDesc = request.getParameter("grpDesc");
                String dbNewColId = "";
                String parent[] = new String[tabRowCount];
                String child[] = new String[tabRowCount];
                String gParent[] = new String[tabRowCount];
                //request.getParameterValues("parent")
                for (int i = 0; i < tabRowCount; i++) {
                    parent[i] = request.getParameter("parent[" + i + "]");
                    child[i] = request.getParameter("keyValue[" + i + "]");
                }
                String totChildvaluesList = "";
                for (int k = 0; k < parent.length; k++) {
                    String childlist[] = child[k].split(",");
//                    String childvallist = "";
                    StringBuilder childvallist = new StringBuilder();
                    for (int j = 0; j < childlist.length; j++) {
//                        childvallist += ",'" + childlist[j].trim() + "'";
                        childvallist.append(",'").append(childlist[j].trim()).append("'");
                    }
                    if (childvallist.length() > 0) {
                        childvallist = new StringBuilder(childvallist.substring(1));
                        grpvals.put(parent[k], childvallist.toString());
                        totChildvaluesList += "," + childvallist;
                    }
                }
                if (!totChildvaluesList.equalsIgnoreCase("")) {
//                    totChildvaluesList = totChildvaluesList.substring(1);
//                    String tableName = request.getParameter("tableName");
//                    String colName = request.getParameter("colName");
//                    String connectionId = request.getParameter("connectionId");
//                    String otherssql = "select distinct " + colName + " from " + tableName + " where " + colName + " not in(" + totChildvaluesList + ")";
//                    con = new BusinessGroupDAO().getConnectionIdConnection(connectionId);
//                    st = con.createStatement();
//                    rs = st.executeQuery(otherssql);
//                    PbReturnObject otherspbro = new PbReturnObject(rs);
//                    String totOthersList = "";
//                    if (otherspbro.getRowCount() > 0 && otherspbro != null) {
//                        for (int j = 0; j < otherspbro.getRowCount(); j++) {
//                            totOthersList += ",'" + otherspbro.getFieldValueString(j, 0) + "'";
//                        }
//                        if (!totOthersList.equalsIgnoreCase("")) {
//                            totOthersList = totOthersList.substring(1);
//                            grpvals.put("Others", totOthersList);
//
//                        }
//                    }
                } else {
                    totChildvaluesList = totChildvaluesList.substring(1);
                    String tableName = request.getParameter("tableName");
                    String colName = request.getParameter("colName");
                    String connectionId = request.getParameter("connectionId");
                    String otherssql = "select distinct " + colName + " from " + tableName;
                    con = new BusinessGroupDAO().getConnectionIdConnection(connectionId);
                    st = con.createStatement();
                    rs = st.executeQuery(otherssql);
                    PbReturnObject otherspbro = new PbReturnObject(rs);
                    String totOthersList = "";
                    if (otherspbro.getRowCount() > 0 && otherspbro != null) {
                        for (int j = 0; j < otherspbro.getRowCount(); j++) {
                            totOthersList += ",'" + otherspbro.getFieldValueString(j, 0) + "'";
                        }
                        if (!totOthersList.equalsIgnoreCase("")) {
                            totOthersList = totOthersList.substring(1);
                            grpvals.put("Others", totOthersList);
                        }
                    }
                }
                if (session.getAttribute("PROGENTABLES") != null) {
                    map = (HashMap) session.getAttribute("PROGENTABLES");
                    if (map.get(REPORTID) != null) {
                        container = (Container) map.get(REPORTID);
                    } else {
                        container = new Container();
                    }
                } else {
                    container = new Container();
                }
                ParameterGroupAnalysisHashMap = (container.getParameterGroupAnalysisHashMap() == null) ? ParameterGroupAnalysisHashMap = new HashMap() : container.getParameterGroupAnalysisHashMap();
                ParameterGroupAnalysisHashMap.put(elementId, grpvals);
                ParameterGroupAnalysisHashMap.put(elementId + "_GroupName", groupName);

                container.setParameterGroupAnalysisHashMap(ParameterGroupAnalysisHashMap);
//                ReportTemplateDAO dao = new ReportTemplateDAO();
//                String groupingXML = dao.buildParameterGroupingXML(ParameterGroupAnalysisHashMap, elementId);
//                //.println("groupingXML===" + groupingXML);
  /*
                 * String updateSql = "UPDATE PRG_AR_REPORT_PARAM_DETAILS set
                 * PARAMETER_GROUPING=? where REPORT_ID=" + REPORTID + " and
                 * element_id=" + elementId; Connection connection =
                 * ProgenConnection.getInstance().getConnection();
                 * OraclePreparedStatement opstmt = null; opstmt =
                 * (OraclePreparedStatement)
                 * connection.prepareStatement(updateSql);
                 * opstmt.setStringForClob(1, groupingXML); int rows =
                 * opstmt.executeUpdate(); //.println("rows=====" + rows);
                 *
                 * opstmt.close(); opstmt = null; connection.close(); connection
                 * = null;
                 */

                //progen table related code
                //reportViewBD.updateProGenTable(container, modifiedElementId, groupName);
                //for graph related code
                //reportViewBD.updateProGenGraph(container);
            } catch (SQLException e) {
                logger.error("Exception: ", e);
            } finally {
                try {
                    if (rs != null) {
                        rs.close();
                    }
                    if (st != null) {
                        st.close();
                    }
                    if (con != null) {
                        con.close();
                    }
                } catch (SQLException se) {
                    logger.error("Exception: ", se);
                }
            }
            request.setAttribute("REPORTID", REPORTID);
            ActionRedirect redirect = new ActionRedirect(mapping.findForward("reportView"));
            redirect.addParameter("action", "grpByAnalysis");
            redirect.addParameter("REPORTID", REPORTID);
            return redirect;
            //return mapping.findForward("reportView");
            //return null;
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    //added by santhosh.k on 08-03-2010 and it is used when user clicks on cancel button in report designing page at the time of report assignment
    public ActionForward backToReportDesigner(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        PbReportViewerBD reportViewBD = new PbReportViewerBD();
        ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();

        String oldReportId = request.getParameter("REPORTID");
        String customReportId = null;
        HttpSession session = request.getSession(false);
        if (session != null) {
            try {
                customReportId = reportViewBD.backToReportDesigner(oldReportId, request, response, session);
                //code to delete data of previous report added by santhosh.k on 09-03-2010
                reportTemplateDAO.DeleteReport(Integer.parseInt(oldReportId));
            } catch (Exception exp) {
                logger.error("Exception: ", exp);
                return mapping.findForward("exceptionPage");
            }
            request.setAttribute("CustomReportId", customReportId);
            request.setAttribute("ReportId", customReportId);
            return mapping.findForward("reportDesigner");
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    public ActionForward saveBucketAnalysisBy(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
//        XMLOutputter serializer = null;
//        Document document = null;
        HttpSession session = request.getSession(false);
//        PrintWriter out = response.getWriter();
//        OraclePreparedStatement opstmt = null;
//        Connection con = ProgenConnection.getInstance().getConnection();
//        String[] pMasterChildTags = {"Report_Id", "Element_Id", "Measure_Name", "Bucket_Name", "Bucket_Desc", "No_Of_Buckets", "isNewViewBy", "isCrossTab", "isReplace", "replaceIndex"};
//        PbDb pbdb = new PbDb();
        if (session != null) {
//            SaveBucketsBD bucketBd = new SaveBucketsBD();
//            boolean status = bucketBd.insertBucket(request, response);
/*
             * String measureName = request.getParameter("measure"); String
             * bucketName1 = request.getParameter("bucket").replace("_", " ");
             * String bucketDesc1 = request.getParameter("bdesc").replace("_", "
             * "); String bucketName =
             * request.getParameter("bucket").toUpperCase(); String elementId =
             * request.getParameter("elementId"); bucketName =
             * bucketName.trim().replace(" ", "_"); String viewval =
             * request.getParameter("viewBy"); String isNewViewBy = ""; String
             * isCrossTab = ""; String isReplace = ""; String replaceIndex = "";
             * if (viewval.equalsIgnoreCase("new")) { isNewViewBy = "Y";
             * isCrossTab = "N"; isReplace = "N"; replaceIndex = "";
             *
             * } else if (viewval.equalsIgnoreCase("replace")) { isNewViewBy =
             * "N"; isCrossTab = "N"; isReplace = "Y"; replaceIndex =
             * request.getParameter("viewByRow"); } else { isNewViewBy = "N";
             * isCrossTab = "Y"; isReplace = "N"; replaceIndex = "";
             *
             * }
             *
             * String bucketDesc = request.getParameter("bdesc").toUpperCase();
             * int number = Integer.parseInt(request.getParameter("number"));
             * String reportId = request.getParameter("reportId"); String userId
             * = String.valueOf(session.getAttribute("USERID")); // String
             * existdelatesql="delete from prg_ar_report_buckets where
             * element_id="+elementId+" and Report_id="+reportId; String
             * existdelatesql = "delete from prg_ar_report_buckets where
             * Report_id=" + reportId; pbdb.execUpdateSQL(existdelatesql);
             * number); //.println("reportId--" + reportId);
             * userId); Element root = new Element("Prg_Bucket"); //code to add
             * metadata
             *
             * String MetaInfoChildValues[] = new String[10];
             * MetaInfoChildValues[0] = reportId; MetaInfoChildValues[1] =
             * elementId; MetaInfoChildValues[2] = measureName;
             * MetaInfoChildValues[3] = bucketName; MetaInfoChildValues[4] =
             * bucketDesc; MetaInfoChildValues[5] = String.valueOf(number);
             * MetaInfoChildValues[6] = isNewViewBy; MetaInfoChildValues[7] =
             * isCrossTab; MetaInfoChildValues[8] = isReplace;
             * MetaInfoChildValues[9] = replaceIndex;
             * Element pMasterEle = new Element("Meta_Data"); Element child =
             * for (int i = 0; i < pMasterChildTags.length; i++) { child = new
             * Element(pMasterChildTags[i]);
             * child.setText(MetaInfoChildValues[i]);
             * pMasterEle.addContent(child); } root.addContent(pMasterEle);
             * //end of code to add metadata
             *
             *
             * Element pMaster = new Element("Bucket_Details"); for (int i = 1;
             * i <= number; i++) { Element BucDetEle = new
             * Element("Bucket_Detail"); //
             * + request.getParameter("sl" + i).equals("")); if
             * ((request.getParameter("dv" + i) != null) &&
             * (request.getParameter("sl" + i) != null) &&
             * (request.getParameter("el" + i) != null) &&
             * (request.getParameter("dv" + i).equals("") != true) &&
             * (request.getParameter("sl" + i).equals("") != true) &&
             * (request.getParameter("el" + i).equals("") != true)) { String
             * displayValue = request.getParameter("dv" + i);
             *
             * double startLimit = Double.parseDouble(request.getParameter("sl"
             * + i));
             *
             * double endLimit = Double.parseDouble(request.getParameter("el" +
             * i)); //.println("displayValue===" + displayValue + "\t" +
             * startLimit + "\t" + endLimit);
             *
             * child = new Element("Display_Value");
             * child.setText(displayValue); BucDetEle.addContent(child); child =
             * new Element("startLimit");
             * child.setText(String.valueOf(startLimit));
             * BucDetEle.addContent(child); child = new Element("endLimit");
             * child.setText(String.valueOf(endLimit));
             * BucDetEle.addContent(child);
             *
             * }
             * pMaster.addContent(BucDetEle); } root.addContent(pMaster);
             * document = new Document(root); serializer = new XMLOutputter();
             * String query1 = "insert into prg_ar_report_buckets" + "
             * (bucket_ID,Report_id,user_id,element_id,bucket_details)" + "
             * values (PRG_AR_REPORT_BUCKETS_SEQ.nextval,?,?,?,?)"; opstmt =
             * (OraclePreparedStatement) con.prepareStatement(query1);
             * opstmt.setString(1, reportId); opstmt.setString(2, userId);
             * opstmt.setString(3, elementId); opstmt.setStringForClob(4,
             * serializer.outputString(document)); int rows =
             * opstmt.executeUpdate(); //.println("rows===" + rows);
             */
            return null;
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    public ActionForward getnewCustomId(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, Exception {
        PrintWriter out = response.getWriter();
        String eleId = "select max(element_id) from prg_user_all_info_details";
        PbDb pbdb = new PbDb();
        PbReturnObject pbro = pbdb.execSelectSQL(eleId);
        if (pbro.getRowCount() > 0) {
            out.println(pbro.getFieldValueInt(0, 0));
        } else {
            out.println("");
        }
        return null;
    }

    public ActionForward saveViewerCustomFormula(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, Exception {
//        CustomMeasureResourceBundle resBundle = new CustomMeasureResourceBundle();
        logger.info("Enter Method");
        PrintWriter out = response.getWriter();
        PbDb pbdb = new PbDb();
        String finalQuery = "";
        ArrayList list = new ArrayList();
        String elementId = "";
        String bussColId;
        boolean prePostFlag = false;
        try {
            String columnFormula = request.getParameter("txt2");
            columnFormula = columnFormula.replace("@", "+");
            columnFormula = columnFormula.replace("|_|", "%");
            columnFormula = columnFormula.replace("||chr(38)||", "&");
            String folderIds = request.getParameter("folderIds");
            String columnName = request.getParameter("columnName");
            String iscalculate = request.getParameter("iscalculate");
            String tArea = request.getParameter("tArea");
            String tArea1 = request.getParameter("tArea1");
            boolean fromEdit = Boolean.parseBoolean(request.getParameter("fromEdit"));
            String measElementIdString = request.getParameter("elementId");
            String aggrType = request.getParameter("aggrType");
            String prePostVal = request.getParameter("prePostVal");
            String reportId = request.getParameter("reportId");
            boolean graphflag=  Boolean.parseBoolean(request.getParameter("graph"));//added by sruthi for complex and hybrid mes in graph 4/2/2016
            Container container = Container.getContainerFromSession(request, reportId);
            String displayName = "";
            int measElementId = 0;
            if (measElementIdString != "") {
                measElementId = Integer.parseInt(request.getParameter("elementId"));
            }
            if (prePostVal.equalsIgnoreCase("pre")) {
                prePostFlag = true;
            }
            columnFormula = columnFormula.replace("'", "''");
//            String displayFormula = columnFormula.toUpperCase();
            String tempDisplayFormula = columnFormula.toUpperCase();
            String a = tArea1.trim();
            if (a.startsWith(",")) {
                a = a.substring(1);
            }
            String eleList2[] = a.split(",");
            String eleList1 = "";
            if (eleList2.length > 1) {
                for (int j = 0; j < eleList2.length - 1; j++) {
                    int count = 0;
                    for (int j1 = j + 1; j1 < eleList2.length; j1++) {
                        if (eleList2[j].equalsIgnoreCase(eleList2[j1])) {
                            count = 1;
                            break;
                        }
                    }
                    if (count == 0) {

                        eleList1 += "," + eleList2[j];
                    }
                    if (j == eleList2.length - 2) {

                        eleList1 += "," + eleList2[j + 1];
                    }
                }
                if (!eleList1.equalsIgnoreCase("")) {
                    if (eleList1.startsWith(",")) {
                        eleList1 = eleList1.substring(1);
                    }
                }
            } else {
                eleList1 = eleList2[0];
            }
            String eleList3[] = eleList1.split(",");
            String dependenteleids = "";
            for (int p = 0; p < eleList3.length; p++) {
                boolean check = tArea.contains(eleList3[p]);
                if (check == true) {
                    dependenteleids += "," + eleList3[p];
                }
                if (p == eleList3.length - 1) {
                    if (dependenteleids.startsWith(",")) {
                        dependenteleids = dependenteleids.substring(1);
                    }
                }
            }
            String aggType = "";
            String colType = "";
            // columnFormula=tArea.toUpperCase();
            columnFormula = columnFormula.toUpperCase();
            //rule 1 if formula doesn't have sum count avg etc. colType is Calculated
            if (columnFormula.indexOf("SUM(") >= 0 || columnFormula.indexOf("COUNT(") >= 0 || columnFormula.indexOf("COUNT(*") >= 0 || columnFormula.indexOf("AVG(") >= 0 || columnFormula.indexOf("MIN(") >= 0 || columnFormula.indexOf("MAX(") >= 0 || columnFormula.indexOf("POWER(") >= 0 || columnFormula.indexOf("SQRT(") >= 0 || columnFormula.indexOf("ROUND(") > 0 || columnFormula.indexOf("ABS(") >= 0) {
//                colType = "summarised";
                colType = "SUMMARIZED";
            } else {
                colType = "SUMMARIZED";
                //Making All formula's are made summarized by Force
                //colType = "calculated";
            }
//            commented by Nazneen
            if (columnFormula.indexOf("SUM(") >= 0) {
                aggType = "sum";
            } else if (columnFormula.indexOf("COUNT(") >= 0) {
                aggType = "count";
            } else if (columnFormula.indexOf("COUNT(*") >= 0) {
                aggType = "count(*)";
            } else if (columnFormula.indexOf("COUNT(DISTINCT") >= 0) {
                aggType = "count";
            } else if (columnFormula.indexOf("AVG(") >= 0) {
                aggType = "avg";
            } else if (columnFormula.indexOf("MIN(") >= 0) {
                aggType = "min";
            } else if (columnFormula.indexOf("MAX(") >= 0) {
                aggType = "max";
            } else if (columnFormula.indexOf("POWER(") >= 0) {
                aggType = "avg";
            } else if (columnFormula.indexOf("SQRT(") >= 0) {
                aggType = "min";
            } else if (columnFormula.indexOf("ABS(") >= 0) {
                aggType = "max";
            } else if (columnFormula.indexOf("ROUND(") >= 0) {
                aggType = "max";
            }
            if (columnFormula.indexOf("SUM(") >= 0 && columnFormula.indexOf("COUNT(") >= 0) {
                aggType = "avg";
            } else {
                aggType = "sum";
            }
            if (!aggrType.equalsIgnoreCase("default")) {
                aggType = aggrType;
            }
            String summarisationList[] = {"SUM", "AVG", "COUNT", "MAX", "MIN", "ROUND"};
            int bussTableId = 0;
            int subFolderTabId = 0;
            String bussTableName = "";
            String tableDispName = "";
            //added by nazneen for checking pre post condition
            if (prePostFlag) {
                String checkPrePostQuery = "SELECT user_col_type FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") ";
                PbReturnObject checkPrePostRO = pbdb.execSelectSQL(checkPrePostQuery);
                if (checkPrePostRO.getRowCount() > 0) {
                    for (int n = 0; n < checkPrePostRO.getRowCount(); n++) {
                        if (checkPrePostRO.getFieldValueString(n, 0).equalsIgnoreCase("SUMMARIZED") || checkPrePostRO.getFieldValueString(n, 0).equalsIgnoreCase("summarised") || checkPrePostRO.getFieldValueString(n, 0).equalsIgnoreCase("summarised")) {
                            prePostFlag = false;
                            break;
                        }
                    }
                }
            }
//            //added By Nazneen for Edit formula if measure name is renamed in reports
//            String getReportElementsQuery = "select A.COL_DISP_NAME,B.COL_NAME from PRG_AR_QUERY_DETAIL A,PRG_AR_REPORT_TABLE_DETAILS B "
//                    + " where a.QRY_COL_ID = b.QRY_COL_ID and b.REPORT_ID = "+reportId;
//            PbReturnObject reportEleRO = pbdb.execSelectSQL(getReportElementsQuery);
//            if(reportEleRO.getRowCount()> 0 ){
//                for (int m = 0; m < reportEleRO.getRowCount(); m++) {
//                     String colDispName = reportEleRO.getFieldValueString(m, 0).toUpperCase();
//                     String colName = reportEleRO.getFieldValueString(m, 1).toUpperCase();
//                      if(columnFormula.contains(colName)){
//                        columnFormula = columnFormula.replace(colDispName, colName);
//                       }
//                    }
//            }
         //   JsonGenerator json=new JsonGenerator();
            //added by sruthi for complex and hybrid mes in graph 4/2/2016
            boolean flage=false;
              boolean hybridflag=false;
            if(graphflag){
               if(!flage){
                     for(int j=0;j< eleList3.length;j++){
                         String query1="select USER_COL_TYPE from prg_user_all_info_details where ELEMENT_ID="+eleList3[j];
                            PbReturnObject pbro3 = pbdb.execSelectSQL(query1);
                            if(pbro3!=null && pbro3.getRowCount()>0){
                                String complexmes=pbro3.getFieldValueString(0,0);
                                if(complexmes.equalsIgnoreCase("COMPLEX"))
                                 hybridflag=true;
                                  else if(complexmes.equalsIgnoreCase("HYBRID"))
                                {
                                  out.print("");
                                    return null;
                                }
                            }
                     }
               }
            if (columnFormula.indexOf("SUM(") >= 0 || columnFormula.indexOf("COUNT(") >= 0 || columnFormula.indexOf("COUNT(*") >= 0 || columnFormula.indexOf("AVG(") >= 0 || columnFormula.indexOf("MIN(") >= 0 || columnFormula.indexOf("MAX(") >= 0 || columnFormula.indexOf("POWER(") >= 0 || columnFormula.indexOf("SQRT(") >= 0 || columnFormula.indexOf("ROUND(") > 0 || columnFormula.indexOf("ABS(") >= 0) {
               if(flage)
                colType = "COMPLEX";
               else if(hybridflag)
                  colType="HYBRID";

            }else{
                if(flage)
                colType = "COMPLEX";
               else if(hybridflag)
                  colType="HYBRID" ;

            }
            } //ended by sruthi
            ArrayList<String> listdata=new ArrayList<String>();
            HashMap<String,ArrayList<String>> elementids=new HashMap<String,ArrayList<String>>();
            if(graphflag){
            for(int j=0;j< eleList3.length;j++){
                 ArrayList<String> datalist=new ArrayList<String>();
                // if(eleList3.contains("_")){
                if(eleList3[j].contains("_")){
                    String splitdata[]=eleList3[j].split("_");
                    datalist.add(splitdata[0]);
                    flage=true;
                }else{
                  datalist.add(eleList3[j]); 
                }
                elementids.put(eleList3[j], datalist);
                // }
            }}
              if(graphflag){
            if(elementids!=null && !elementids.isEmpty()){
              //  if(flage){
                dependenteleids="";
                   for (int p = 0; p < elementids.size(); p++) {
                       ArrayList<String> value=elementids.get(eleList3[p]);
                boolean check = tArea.contains(value.get(0).toString());
                if (check == true) {
                    dependenteleids += "," + value.get(0).toString();
                    listdata.add(eleList3[p]);
                }
                if (p == eleList3.length - 1) {
                    if (dependenteleids.startsWith(",")) {
                        dependenteleids = dependenteleids.substring(1);
                    }
                }
            }
              //  }
            } }
            ArrayList<String> keys=new ArrayList<String>();
            Map<String, String> rev = new HashMap<String, String>();
            Map<String, String> timeDefinition = new HashMap<String, String>();
           ProgenTimeDefinition timeDefObj = ProgenTimeDefinition.getInstance(reportId, container,"");
         timeDefinition= timeDefObj.getTimeDefinition();
           if(graphflag){
         for(Map.Entry<String,String> entry : timeDefinition.entrySet())
              rev.put(entry.getValue(), entry.getKey());
            for(String data:rev.keySet()){
                if(columnFormula.contains(data.toUpperCase())){
                    String str = "("+data.toUpperCase()+")";
                columnFormula=columnFormula.replace(str.trim(), "_"+rev.get(data));
                 //   columnFormula. columnFormula.replace(onlyColName, actual_col_formula);
                }
            }}
            String displayFormula = columnFormula.toUpperCase();
            //rule 2 check if measures are from two different fact tables
            String checkDistFactsQry = " SELECT distinct BUSS_TABLE_ID,SUB_FOLDER_TAB_ID FROM PRG_USER_SUB_FOLDER_ELEMENTS  where element_id in(" + dependenteleids + ")";
            PbReturnObject checkDistFactsRO = pbdb.execSelectSQL(checkDistFactsQry);
            //Elements from a Single Fact
            if (!(checkDistFactsRO.getRowCount() > 1)) {
                String doubleExistQuery1 = " SELECT distinct BUSS_TABLE_ID,SUB_FOLDER_TAB_ID FROM PRG_USER_SUB_FOLDER_ELEMENTS  where element_id in(" + dependenteleids + ") AND BUSS_TABLE_ID!=0";
                PbReturnObject doubleExistQuerypbro1 = pbdb.execSelectSQL(doubleExistQuery1);
                if (doubleExistQuerypbro1.getRowCount() > 0) {
                    String nameQuery = "";
                    String nameQuery1 = "";
                    //changed by sruthi for complex and hybrid in graphs
//                    if(ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
//                        //filter with element_id
//                        nameQuery = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name)) DATALENGTH,BUSS_COL_ID,REF_DIM_TAB_ID,isnull(isnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
//                        //filter with element_id and user col type is 'calculated' or 'summarized' or 'summarised'
//                        nameQuery1 = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name)) DATALENGTH,BUSS_COL_ID,REF_DIM_TAB_ID,isnull(isnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") and user_col_type in('calculated','summarized','summarised') order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
//                    } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
//                        //filter with element_id
//                        nameQuery = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name)) LENGTH,BUSS_COL_ID,REF_DIM_TAB_ID,ifnull(ifnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
//                        //filter with element_id and user col type is 'calculated' or 'summarized' or 'summarised'
//                        nameQuery1 = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name) ) LENGTH,BUSS_COL_ID,REF_DIM_TAB_ID,ifnull(ifnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") and user_col_type in('calculated','summarized','summarised') order by LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
//                    } else {
//                        nameQuery = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name)) LENGTH,BUSS_COL_ID,REF_DIM_TAB_ID,NVL(NVL(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by length(nvl(USER_COL_DESC, user_col_name)) desc";
//                        nameQuery1 = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name)) LENGTH,BUSS_COL_ID,REF_DIM_TAB_ID,NVL(NVL(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") and user_col_type in('calculated','summarized','summarised') order by length(nvl(USER_COL_DESC, user_col_name)) desc";
//                    }
                    
                    PbReturnObject pbro = null;
                    PbReturnObject pbro1 =null;
                    String bussNamecolName = "";
                    String onlyColName = "";
//                    String formulaold = "";
                    String actual_col_formula = "";
                    int count = 0;
                    int count1 = 0;
                    //added by sruthi for complex and hybrid in graphs
                     PbReturnObject pbrograph=null;
                      PbReturnObject pbrograph1=null;
                    if(graphflag){
                   if(listdata!=null && !listdata.isEmpty()){
                          for(int mk=0;mk<listdata.size();mk++){
                               String elementarr="";
                              if(listdata.get(mk).contains("_")){
                                      String arr1[]=listdata.get(mk).split("_");
                                      elementarr=arr1[0];
                              }else
                                elementarr=eleList3[mk];
                          if(ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                              nameQuery = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name)) DATALENGTH,BUSS_COL_ID,REF_DIM_TAB_ID,isnull(isnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + elementarr + ") order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                              nameQuery1 = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name)) DATALENGTH,BUSS_COL_ID,REF_DIM_TAB_ID,isnull(isnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + elementarr + ") and user_col_type in('calculated','summarized','summarised') order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                          } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                        //filter with element_id
                        nameQuery = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name)) LENGTH,BUSS_COL_ID,REF_DIM_TAB_ID,ifnull(ifnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + elementarr + ") order by LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
                        //filter with element_id and user col type is 'calculated' or 'summarized' or 'summarised'
                        nameQuery1 = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name) ) LENGTH,BUSS_COL_ID,REF_DIM_TAB_ID,ifnull(ifnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" +elementarr + ") and user_col_type in('calculated','summarized','summarised') order by LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
                    } else {
                        nameQuery = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name)) LENGTH,BUSS_COL_ID,REF_DIM_TAB_ID,NVL(NVL(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + elementarr + ") order by length(nvl(USER_COL_DESC, user_col_name)) desc";
                        nameQuery1 = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name)) LENGTH,BUSS_COL_ID,REF_DIM_TAB_ID,NVL(NVL(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + elementarr + ") and user_col_type in('calculated','summarized','summarised') order by length(nvl(USER_COL_DESC, user_col_name)) desc";
                    }
                             pbrograph = pbdb.execSelectSQL(nameQuery);
                             pbrograph1 = pbdb.execSelectSQL(nameQuery1);
                             for (int n = 0; n < pbrograph.getRowCount(); n++) {
                                 bussNamecolName = pbrograph.getFieldValueString(n, 0) + "." + pbrograph.getFieldValueString(n, 1);
                        //  onlyColName = String.valueOf(pbro.getFieldValueInt(n, 2));
                        onlyColName = pbrograph.getFieldValueString(n, 3);
                        bussNamecolName = bussNamecolName.toUpperCase();
                        onlyColName = onlyColName.toUpperCase();
                        bussColId = pbrograph.getFieldValueString(n, 9);
                        actual_col_formula = pbrograph.getFieldValueString(n, 5);
                       String elementid=eleList3[n];
                        if (pbrograph.getFieldValueString(n, 4).equalsIgnoreCase("calculated") || pbrograph.getFieldValueString(n, 4).equalsIgnoreCase("summarized") || pbrograph.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
//                            colType = "SUMMARIZED";
                            String agg = pbrograph.getFieldValueString(n, 7);
                            String a1 = pbrograph.getFieldValueString(n, 7).toUpperCase() + "(" + onlyColName + ")";
                            String a2[] = new String[summarisationList.length];
                            if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
                                agg = "SUM";
                            }
                            if (agg.equalsIgnoreCase(" ") || agg.equalsIgnoreCase("null") || agg == null) {
                                agg = "";
                            }
                            String a3 = "";
                            if (prePostFlag) {
                                a3 = pbrograph.getFieldValueString(n, 1);
                            } else {
                                a3 = agg + "(" + pbrograph.getFieldValueString(n, 1) + ")";
                            }
                            if (pbrograph.getFieldValueString(n, 4).equalsIgnoreCase("SUMMARIZED") || pbrograph.getFieldValueString(n, 4).equalsIgnoreCase("summarised") || pbrograph.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                                columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                            } else {
                                columnFormula = columnFormula.replace(onlyColName, a3);
                            }
                            displayFormula = displayFormula.replace(onlyColName, a3);
                            if (!(pbrograph.getFieldValueString(n, 6).equalsIgnoreCase(""))) {
                                dependenteleids = dependenteleids + "," + pbrograph.getFieldValueString(n, 6);
                            }
                            count++;
                        } //NUMBER Column
                         else {
                            if (pbrograph1.getRowCount() == pbrograph.getRowCount()) {
                                if (pbrograph.getFieldValueString(n, 4).equalsIgnoreCase("SUMMARIZED") || pbrograph.getFieldValueString(n, 4).equalsIgnoreCase("summarised") || pbrograph.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                                    columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                                }
                            } else {
                                String agg = pbrograph.getFieldValueString(n, 7);
                                String a1 = pbrograph.getFieldValueString(n, 7).toUpperCase() + "(" + onlyColName + ")";
                                String a2[] = new String[summarisationList.length];
                                if (agg.contains("#")) {
                                    String result[] = agg.split("#");
                                    agg = result[0];
                                }
                                if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
                                    agg = "SUM";
                                }
                                if (agg.contains(" ") || agg.equalsIgnoreCase("null") || agg == null) {
                                    agg = "";
                                }
                                String a3 = "";
                                String a4="";
                                if (prePostFlag) {
                                    a3 = pbrograph.getFieldValueString(n, 1);
                                } else {
                                    a3 = agg + "(" + pbrograph.getFieldValueString(n, 1) + ")";
                                }
                                      if(listdata.get(mk).contains("_")){
                                          for(String data:rev.keySet()){
                                              if(listdata.get(mk).contains("_"+rev.get(data)))
                                                    onlyColName=onlyColName.toUpperCase().trim()+" _"+rev.get(data).trim();
                                          }

                                           if (prePostFlag) {
                                    a4 = listdata.get(mk);
                                } else {
                                    a4 = agg + "(" +listdata.get(mk) + ")";
                                }
                                      columnFormula = columnFormula.replaceAll(onlyColName.trim(), a4.trim());
                                      displayFormula = displayFormula.replace(onlyColName, a4);
                                      }else{
                                           if (pbrograph.getFieldValueString(n, 4).equalsIgnoreCase("SUMMARIZED") || pbrograph.getFieldValueString(n, 4).equalsIgnoreCase("summarised") || pbrograph.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                                    columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                                } else {
                                    columnFormula = columnFormula.replace(onlyColName, a3);
                                }
                                displayFormula = displayFormula.replace(onlyColName, a3);
                                }
                            }
                            count1++;
                        }
                             }
                            }
                        }
                    }else{//ended by sruthi
                           if(ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                        //filter with element_id
                        nameQuery = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name)) DATALENGTH,BUSS_COL_ID,REF_DIM_TAB_ID,isnull(isnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                        //filter with element_id and user col type is 'calculated' or 'summarized' or 'summarised'
                        nameQuery1 = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name)) DATALENGTH,BUSS_COL_ID,REF_DIM_TAB_ID,isnull(isnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") and user_col_type in('calculated','summarized','summarised') order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                    } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                        //filter with element_id
                        nameQuery = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name)) LENGTH,BUSS_COL_ID,REF_DIM_TAB_ID,ifnull(ifnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
                        //filter with element_id and user col type is 'calculated' or 'summarized' or 'summarised'
                        nameQuery1 = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name) ) LENGTH,BUSS_COL_ID,REF_DIM_TAB_ID,ifnull(ifnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") and user_col_type in('calculated','summarized','summarised') order by LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
                    } else {
                        nameQuery = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name)) LENGTH,BUSS_COL_ID,REF_DIM_TAB_ID,NVL(NVL(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by length(nvl(USER_COL_DESC, user_col_name)) desc";
                        nameQuery1 = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name)) LENGTH,BUSS_COL_ID,REF_DIM_TAB_ID,NVL(NVL(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") and user_col_type in('calculated','summarized','summarised') order by length(nvl(USER_COL_DESC, user_col_name)) desc";
                    }

                     pbro = pbdb.execSelectSQL(nameQuery);
                     pbro1 = pbdb.execSelectSQL(nameQuery1);
                    for (int n = 0; n < pbro.getRowCount(); n++) {
                        //buss_table_name.nvl(user_col_name.buss_col_name)
                        bussNamecolName = pbro.getFieldValueString(n, 0) + "." + pbro.getFieldValueString(n, 1);
                        //  onlyColName = String.valueOf(pbro.getFieldValueInt(n, 2));
                        onlyColName = pbro.getFieldValueString(n, 3);
                        bussNamecolName = bussNamecolName.toUpperCase();
                        onlyColName = onlyColName.toUpperCase();
                        bussColId = pbro.getFieldValueString(n, 9);
                        actual_col_formula = pbro.getFieldValueString(n, 5);
                       String elementid=eleList3[n];
//                          if (actual_col_formula == null||actual_col_formula.equalsIgnoreCase("null")||actual_col_formula=="")  {
                        if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("calculated") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarized") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
//                            colType = "SUMMARIZED";
                            String agg = pbro.getFieldValueString(n, 7);
                            String a1 = pbro.getFieldValueString(n, 7).toUpperCase() + "(" + onlyColName + ")";
                            String a2[] = new String[summarisationList.length];

//                            for (int m = 0; m < summarisationList.length; m++) {
//                                a2[m] = summarisationList[m].toUpperCase() + "(" + onlyColName + ")";
//                            }
//                            if (columnFormula.contains(a1)) {
//                                bussNamecolName = pbro.getFieldValueString(n, 0) + "." + pbro.getFieldValueString(n, 1);
//                            }
//                            else {
//                                    int testcount = 0;
//                                    for (int m = 0; m < a2.length; m++) {
//                                        if (columnFormula.contains(a2[m])) {
//                                            testcount = 1;
//                                        }
//                                    }
//                                    if (testcount == 0) {
                            if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
                                agg = "SUM";
                            }
                            if (agg.equalsIgnoreCase(" ") || agg.equalsIgnoreCase("null") || agg == null) {
                                agg = "";
                            }
                            String a3 = "";
                            if (prePostFlag) {
                                a3 = pbro.getFieldValueString(n, 1);
                            } else {
                                a3 = agg + "(" + pbro.getFieldValueString(n, 1) + ")";
                            }
//                                        if (bussColId.equals("0") && "".equals(pbro.getFieldValueString(n, 10))) {
//                                            bussNamecolName = "(" + pbro.getFieldValueString(n, 5) + ")";
//                                        }
//                                        else {
//                                            bussNamecolName = agg + "(" + pbro.getFieldValueString(n, 1) + ")";
//                                        }
//                                    }
//                                    else {
//                                        bussNamecolName = pbro.getFieldValueString(n, 1);
//                                    }
//                                }
                            if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("SUMMARIZED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                                columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                            } else {
                                columnFormula = columnFormula.replace(onlyColName, a3);
                            }
                            displayFormula = displayFormula.replace(onlyColName, a3);
                            if (!(pbro.getFieldValueString(n, 6).equalsIgnoreCase(""))) {
                                dependenteleids = dependenteleids + "," + pbro.getFieldValueString(n, 6);
                            }
                            count++;
                            //   if(count1>0){
                            //   colType="calculated";
                            //  }
                        } //NUMBER Column
                        else {
                            if (pbro1.getRowCount() == pbro.getRowCount()) {
                                if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("SUMMARIZED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                                    columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                                }
                                //commented by Nazneen
//                                columnFormula = columnFormula.replace(onlyColName, bussNamecolName);
                            } else {
                                String agg = pbro.getFieldValueString(n, 7);
                                String a1 = pbro.getFieldValueString(n, 7).toUpperCase() + "(" + onlyColName + ")";
                                String a2[] = new String[summarisationList.length];
//                                String a3 = pbro.getFieldValueString(n, 7).toUpperCase() + "(" + pbro.getFieldValueString(n, 1) + ")";
//                                for (int m = 0; m < summarisationList.length; m++) {
//                                    a2[m] = summarisationList[m].toUpperCase() + "(" + onlyColName + ")";
//                                }
//                                if (columnFormula.contains(a1)) {
//                                    //.println("==");
//                                    bussNamecolName = pbro.getFieldValueString(n, 0) + "." + pbro.getFieldValueString(n, 1);
//                                } else {
//                                    int testcount = 0;
//                                    for (int m = 0; m < a2.length; m++) {
//                                        if (columnFormula.contains(a2[m])) {
//                                            testcount = 1;
//                                        }
//                                    }
//                                    if (testcount == 0) {
//                                        String agg = pbro.getFieldValueString(n, 7);
//                                        if(agg.contains("#")){
//                                            String result[] = agg.split("#");
//                                            agg = result[0];
//                                        }
//                                        if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
//                                            agg = "SUM";
//                                        }
//                                        bussNamecolName = agg + "(" + pbro.getFieldValueString(n, 1) + ")";
//                                    } else {
//                                        bussNamecolName = pbro.getFieldValueString(n, 1);
//                                    }
//}
//                                columnFormula = columnFormula.replace(onlyColName, bussNamecolName);
//                                colType = "SUMMARIZED";
                                if (agg.contains("#")) {
                                    String result[] = agg.split("#");
                                    agg = result[0];
                                }
                                if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
                                    agg = "SUM";
                                }
                                if (agg.contains(" ") || agg.equalsIgnoreCase("null") || agg == null) {
                                    agg = "";
                                }
                                String a3 = "";
                                String a4="";
                                if (prePostFlag) {
                                    a3 = pbro.getFieldValueString(n, 1);
                                } else {
                                    a3 = agg + "(" + pbro.getFieldValueString(n, 1) + ")";
                                }
                                if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("SUMMARIZED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                                    columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                                } else {
                                    columnFormula = columnFormula.replace(onlyColName, a3);
                                }
                                displayFormula = displayFormula.replace(onlyColName, a3);
                                      
                            }
//                            colType = "SUMMARIZED";
                            //columnFormula = columnFormula.replace(onlyColName, bussNamecolName);
                            // if(count>0){
                            // colType="calculated";
                            // }
                            count1++;
                        }
//                        } else {
//                            columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
//  }

                    }}//ended by sruthi
                    bussTableId = checkDistFactsRO.getFieldValueInt(0, 0);
                    subFolderTabId = checkDistFactsRO.getFieldValueInt(0, 1);
                    //Changed by Nazneen
                    if (colType.equalsIgnoreCase("summarized")) {
                        bussTableName = "";
                    } else {
                         // bussTableName = pbro.getFieldValueString(0, 0);
                        if(graphflag)
                         bussTableName= pbrograph.getFieldValueString(0,0);
                        else
                        bussTableName = pbro.getFieldValueString(0, 0);
                      
                    }
                     // tableDispName = pbro.getFieldValueString(0, 11);
                     if(graphflag)
                         tableDispName= pbrograph.getFieldValueString(0, 11);
                     else
                    tableDispName = pbro.getFieldValueString(0, 11);
                } else {
                    //Business Table 0 case
                    String formulaold = "";
                    String nameQuery = "";
                    // columnFormula = tArea;
                    //  String nameQuery = " SELECT t.DISP_NAME,NVL(e.BUSS_COL_NAME,e.user_col_name),e.element_id   FROM PRG_USER_SUB_FOLDER_ELEMENTS e, " +
                    //              " PRG_USER_SUB_FOLDER_TABLES t   WHERE e.element_id in(" + dependenteleids + ") AND t.sub_folder_tab_id = e.sub_folder_tab_id";
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                        nameQuery = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name))   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by  DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                    } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                        nameQuery = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name))   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by  LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
                    } else {
                        nameQuery = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME),element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name))   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by  length(nvl(USER_COL_DESC, user_col_name)) desc";
                    }
                    PbReturnObject pbro = pbdb.execSelectSQL(nameQuery);
                    String bussNamecolName = "";
                    String onlyColName = "";
                    String actual_col_formula = "";
                    for (int n = 0; n < pbro.getRowCount(); n++) {
                        if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarized") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                            colType = "SUMMARIZED";
                        }
                        bussNamecolName = pbro.getFieldValueString(n, 1);
                        //  onlyColName = String.valueOf(pbro.getFieldValueInt(n, 2));
                        onlyColName = String.valueOf(pbro.getFieldValueString(n, 3));
                        bussNamecolName = bussNamecolName.toUpperCase();
                        String a1 = pbro.getFieldValueString(n, 7).toUpperCase() + "(" + onlyColName + ")";
//                        String a3 = pbro.getFieldValueString(n, 7).toUpperCase() + "(" + pbro.getFieldValueString(n, 1) + ")";
                        onlyColName = onlyColName.toUpperCase();
                        actual_col_formula = pbro.getFieldValueString(n, 5);
                        if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("calculated") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarized") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                            String nameQuery2 = "";
                            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                                nameQuery2 = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + pbro.getFieldValueInt(n, 2) + ")";
                            } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                                nameQuery2 = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + pbro.getFieldValueInt(n, 2) + ")";
                            } else {
                                nameQuery2 = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME),element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + pbro.getFieldValueInt(n, 2) + ")";
                            }
                            PbReturnObject pbro2 = pbdb.execSelectSQL(nameQuery2);
                            if (!(pbro2.getFieldValueString(0, 6).equalsIgnoreCase(""))) {
                                dependenteleids = dependenteleids + "," + pbro2.getFieldValueString(0, 6);
                            }
                            bussNamecolName = "(" + String.valueOf(pbro2.getFieldValueString(0, 5)) + ")";
                        }
                        //else{
//                        columnFormula = columnFormula.replace(onlyColName, bussNamecolName);
                        //  }

                        String agg = pbro.getFieldValueString(n, 7);
                        if (agg.contains("#")) {
                            String result[] = agg.split("#");
                            agg = result[0];
                        }
                        if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
                            agg = "SUM";
                        }
                        if (agg.equalsIgnoreCase(" ") || agg.equalsIgnoreCase("null") || agg == null) {
                            agg = "";
                        }
                        String a3 = "";
                        if (prePostFlag) {
                            a3 = pbro.getFieldValueString(n, 1);
                        } else {
                            a3 = agg + "(" + pbro.getFieldValueString(n, 1) + ")";
                        }
                        if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("SUMMARIZED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                            columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                        } else {
                            columnFormula = columnFormula.replace(onlyColName, a3);
                        }
                        displayFormula = displayFormula.replace(onlyColName, a3);
                    }
                }
            } //From multiple Facts
            else {
                String formulaold = "";
                subFolderTabId = checkDistFactsRO.getFieldValueInt(0, 1);
                String doubleExistQuery1 = " SELECT distinct BUSS_TABLE_ID,SUB_FOLDER_TAB_ID FROM PRG_USER_SUB_FOLDER_ELEMENTS  where element_id in(" + dependenteleids + ") AND BUSS_TABLE_ID!=0";
                PbReturnObject doubleExistQuerypbro1 = pbdb.execSelectSQL(doubleExistQuery1);
                if (doubleExistQuerypbro1.getRowCount() == checkDistFactsRO.getRowCount()) {
                    String nameQuery = "";
                    String nameQuery1 = "";
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                        nameQuery = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name))  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                        nameQuery1 = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name))  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") and user_col_type in('calculated','summarized','summarised') order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                    } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                        nameQuery = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name))  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
                        nameQuery1 = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name))  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") and user_col_type in('calculated','summarized','summarised') order by LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
                    } else {
                        nameQuery = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME),element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name))  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by length(nvl(USER_COL_DESC, user_col_name)) desc";
                        nameQuery1 = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME),element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name))  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") and user_col_type in('calculated','summarized','summarised') order by length(nvl(USER_COL_DESC, user_col_name)) desc";
                    }
                    PbReturnObject pbro = pbdb.execSelectSQL(nameQuery);
//                    PbReturnObject pbro1 = pbdb.execSelectSQL(nameQuery1);
                    String bussNamecolName = "";
                    String onlyColName = "";
                    String actual_col_formula = "";
                    for (int n = 0; n < pbro.getRowCount(); n++) {
//                        if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarized") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
//                            colType = "SUMMARIZED";
//                        }
                        bussNamecolName = pbro.getFieldValueString(n, 1);
                        //  onlyColName = String.valueOf(pbro.getFieldValueInt(n, 2));
                        onlyColName = String.valueOf(pbro.getFieldValueString(n, 3));
                        bussNamecolName = bussNamecolName.toUpperCase();
                        onlyColName = onlyColName.toUpperCase();
                        actual_col_formula = pbro.getFieldValueString(n, 5);
                        if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("calculated") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarized") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                            if (!(pbro.getFieldValueString(n, 6).equalsIgnoreCase(""))) {
                                dependenteleids = dependenteleids + "," + pbro.getFieldValueString(n, 6);
                            }
                            String a1 = "SUM(" + onlyColName + ")";
                            String a2[] = new String[summarisationList.length];
                            for (int m = 0; m < summarisationList.length; m++) {
                                a2[m] = summarisationList[m].toUpperCase() + "(" + onlyColName + ")";
                            }
                            if (columnFormula.contains(a1)) {
                                bussNamecolName = pbro.getFieldValueString(n, 1);
                                //}else{
                            } else {
                                int testcount = 0;
                                for (int m = 0; m < a2.length; m++) {
                                    if (columnFormula.contains(a2[m])) {
                                        testcount = 1;
                                    }
                                }
                                if (testcount == 0) {
                                    bussNamecolName = "SUM(" + pbro.getFieldValueString(n, 1) + ")";
                                } else {
                                    bussNamecolName = pbro.getFieldValueString(n, 1);
                                }
                            }
                            String agg = pbro.getFieldValueString(n, 7);

                            if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
                                agg = "SUM";
                            }
                            if (agg.contains(" ") || agg.equalsIgnoreCase("null") || agg == null) {
                                agg = "";
                            }
                            String a3 = "";
                            if (prePostFlag) {
                                a3 = pbro.getFieldValueString(n, 1);
                            } else {
                                a3 = agg + "(" + pbro.getFieldValueString(n, 1) + ")";
                            }
                            if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("SUMMARIZED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                                columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                            } else {
                                columnFormula = columnFormula.replace(onlyColName, a3);
                            }
                            displayFormula = displayFormula.replace(onlyColName, a3);
                        } else {
                            colType = "SUMMARIZED";
                            String a1 = pbro.getFieldValueString(n, 7).toUpperCase() + "(" + onlyColName + ")";
//                            String a3 = pbro.getFieldValueString(n, 7).toUpperCase() + "(" + pbro.getFieldValueString(n, 1) + ")";
                            String a2[] = new String[summarisationList.length];
                            for (int m = 0; m < summarisationList.length; m++) {
                                a2[m] = summarisationList[m].toUpperCase() + "(" + onlyColName + ")";
                            }
//                            if (columnFormula.contains(a1)) {
//                                bussNamecolName = pbro.getFieldValueString(n, 1);
//                            } else {
//
//
//                                int testcount = 0;
//                                for (int m = 0; m < a2.length; m++) {
//                                    if (columnFormula.contains(a2[m])) {
//                                        testcount = 1;
//                                    }
//                                }
//                                if (testcount == 0) {
//                                    String agg = pbro.getFieldValueString(n, 7);
//                                    if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
//                                        agg = "SUM";
//                                    }
//                                    bussNamecolName = agg + "(" + pbro.getFieldValueString(n, 1) + ")";
//                                } else {
//                                    bussNamecolName = pbro.getFieldValueString(n, 1);
//                                }
//
//
//
//                            }
                            String agg = pbro.getFieldValueString(n, 7);
                            if (agg.contains("#")) {
                                String result[] = agg.split("#");
                                agg = result[0];
                            }
                            if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
                                agg = "SUM";
                            }
                            if (agg.equalsIgnoreCase(" ") || agg.equalsIgnoreCase("null") || agg == null) {
                                agg = "";
                            }
                            String a3 = "";
                            if (prePostFlag) {
                                a3 = pbro.getFieldValueString(n, 1);
                            } else {
                                a3 = agg + "(" + pbro.getFieldValueString(n, 1) + ")";
                            }
//                        columnFormula = columnFormula.replace(onlyColName, bussNamecolName);
                            if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("SUMMARIZED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                                columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                            } else {
                                columnFormula = columnFormula.replace(onlyColName, a3);
                            }
                            displayFormula = displayFormula.replace(onlyColName, a3);
                        }
                    }
                } else {
                    //Business Table Id 0 for multi table Facts
                    String nameQuery = "";
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                        nameQuery = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name))   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                    }
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                        nameQuery = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name))   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
                    } else {
                        nameQuery = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME),element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name))   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by length(nvl(USER_COL_DESC, user_col_name)) desc";
                    }
                    PbReturnObject pbro = pbdb.execSelectSQL(nameQuery);
                    String bussNamecolName = "";
                    String onlyColName = "";
                    String actual_col_formula = "";
                    for (int n = 0; n < pbro.getRowCount(); n++) {
                        if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarized") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                            colType = "SUMMARIZED";
                        }
                        bussNamecolName = pbro.getFieldValueString(n, 1);
                        //  onlyColName = String.valueOf(pbro.getFieldValueInt(n, 2));
                        onlyColName = String.valueOf(pbro.getFieldValueString(n, 3));
                        bussNamecolName = bussNamecolName.toUpperCase();
                        onlyColName = onlyColName.toUpperCase();
                        actual_col_formula = pbro.getFieldValueString(n, 5);
//                        String a3 = pbro.getFieldValueString(n, 7).toUpperCase() + "(" + pbro.getFieldValueString(n, 1) + ")";
//                        if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("calculated") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarized") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
//                            formulaold = "(" + pbro.getFieldValueString(n, 5) + ")";
//                            columnFormula = columnFormula.replace(onlyColName, formulaold);
                        if (!(pbro.getFieldValueString(n, 6).equalsIgnoreCase(""))) {
                            dependenteleids = dependenteleids + "," + pbro.getFieldValueString(n, 6);
                        }
//                        } else {
//                            String a1 = pbro.getFieldValueString(n, 7).toUpperCase() + "(" + onlyColName + ")";
//                            String a2[] = new String[summarisationList.length];
//                            for (int m = 0; m < summarisationList.length; m++) {
//                                a2[m] = summarisationList[m].toUpperCase() + "(" + onlyColName + ")";
//                            }
//                            if (columnFormula.contains(a1)) {
//                                bussNamecolName = pbro.getFieldValueString(n, 1);
//                            } else {
//
//                                int testcount = 0;
//                                for (int m = 0; m < a2.length; m++) {
//                                    if (columnFormula.contains(a2[m])) {
//                                        testcount = 1;
//                                    }
//                                }
//                                if (testcount == 0) {
//                                    String agg = pbro.getFieldValueString(n, 7);
//                                    if(agg.contains("#")){
//                                       agg = agg.split("#")[0];
//                                    }
//                                    if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
//                                        agg = "SUM";
//                                    }
//                                    bussNamecolName = agg + "(" + pbro.getFieldValueString(n, 1) + ")";
//
//                                } else {
//                                    bussNamecolName = pbro.getFieldValueString(n, 1);
//                                }
//
//                                //.println("====y");
//
//                            }
//                            columnFormula = columnFormula.replace(onlyColName, bussNamecolName);
                        String agg = pbro.getFieldValueString(n, 7);
                        if (agg.contains("#")) {
                            String result[] = agg.split("#");
                            agg = result[0];
                        }
                        if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
                            agg = "SUM";
                        }
                        if (agg.contains(" ") || agg.equalsIgnoreCase("null") || agg == null) {
                            agg = "";
                        }
                        String a3 = "";
                        if (prePostFlag) {
                            a3 = pbro.getFieldValueString(n, 1);
                        } else {
                            a3 = agg + "(" + pbro.getFieldValueString(n, 1) + ")";
                        }
                        if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("SUMMARIZED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                            columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                        } else {
                            columnFormula = columnFormula.replace(onlyColName, a3);
                        }
                        displayFormula = displayFormula.replace(onlyColName, a3);
//                        }
                    }
                }
                bussTableId = checkDistFactsRO.getFieldValueInt(0, 0);
                subFolderTabId = checkDistFactsRO.getFieldValueInt(0, 1);
            }
            //   string folderIdQuery="SELECT  FOLDER_ID, FOLDER_NAME, ELEMENT_ID FROM PRG_USER_ALL_INFO_DETAILS where element_id in("++")";
            String folderId = folderIds.split(",")[0];
            String folderdets = "select distinct GRP_ID, FOLDER_ID, FOLDER_NAME,CONNECTION_ID from PRG_USER_ALL_INFO_DETAILS where FOLDER_ID=" + folderId;
            // String folderdets = "select distinct GRP_ID, FOLDER_ID, FOLDER_NAME,CONNECTION_ID from PRG_USER_ALL_INFO_DETAILS where FOLDER_ID in( select distinct folder_id from prg_user_all_info_details where element_id in ("+dependenteleids+")";
            PbReturnObject pbrofolderdet = pbdb.execSelectSQL(folderdets);
            String folderName = pbrofolderdet.getFieldValueString(0, 2);
            String connectionId = pbrofolderdet.getFieldValueString(0, 3);
            String grpId = String.valueOf(pbrofolderdet.getFieldValueInt(0, 0));
            columnFormula = columnFormula.toUpperCase();
            if (columnFormula.indexOf("SUM(") >= 0 || columnFormula.indexOf("COUNT(*") >= 0 || columnFormula.indexOf("AVG(") >= 0 || columnFormula.indexOf("MIN(") >= 0 || columnFormula.indexOf("MAX(") >= 0 || columnFormula.indexOf("POWER(") >= 0 || columnFormula.indexOf("SQRT(") >= 0 || columnFormula.indexOf("ROUND(") > 0 || columnFormula.indexOf("ABS(") >= 0) {
                colType = "SUMMARIZED";
                //added by sruthi for complex and hybrid mes in graph 4/2/2016 
                if(graphflag){
                    if(hybridflag){
                      colType ="HYBRID" ; 
                    }  else if(flage)
                          colType="COMPLEX";
                        else
                      colType = "SUMMARIZED";  
                  }//ended by sruthi
            } else {
                // Forced Summarized
                colType = "SUMMARIZED";
               //added by sruthi for complex and hybrid mes in graph 4/2/2016
                if(graphflag){
                    if(hybridflag){
                      colType ="HYBRID" ; 
                    }  else if(flage)
                        colType="COMPLEX";
                    else
                      colType = "SUMMARIZED";  
                  }//ended by sruthi
                //colType = "calculated";
            }
            String prePost = "N";
            if (prePostFlag) {
                prePost = "Y";
                columnFormula = aggType.toUpperCase() + "" + columnFormula;
                displayFormula = aggType.toUpperCase() + "" + displayFormula;
            }
            if (colType.equalsIgnoreCase("summarized")) {
                displayFormula = tempDisplayFormula;
            }
            String existFolderQuery = "SELECT Distinct SUB_FOLDER_ID, SUB_FOLDER_NAME, SUB_FOLDER_TYPE FROM PRG_USER_FOLDER_DETAIL where folder_id =" + folderId + " and SUB_FOLDER_TYPE='Facts'";
            PbReturnObject pbroext = pbdb.execSelectSQL(existFolderQuery);
            int subfolderId = 0;
            String subFolderName = "";
            String subFolderType = "";
            if (fromEdit == false) {
                if (pbroext.getRowCount() > 0) {
                    subfolderId = pbroext.getFieldValueInt(0, 0);
                    subFolderName = pbroext.getFieldValueString(0, 1);
                    subFolderType = pbroext.getFieldValueString(0, 2);
                }
            }
            String finalUserIds[] = dependenteleids.split(",");
            String dependenteleids1 = "";
            for (int j = 0; j < finalUserIds.length - 1; j++) {
                int count = 0;
                for (int j1 = j + 1; j1 < finalUserIds.length; j1++) {
                    if (finalUserIds[j].equalsIgnoreCase(finalUserIds[j1])) {
                        count = 1;
                        break;
                    }
                }
                if (count == 0) {
                    dependenteleids1 += "," + finalUserIds[j];
                }
                if (j == finalUserIds.length - 2) {
                    dependenteleids1 += "," + finalUserIds[j + 1];
                }
            }
            if (!dependenteleids1.equalsIgnoreCase("")) {
                dependenteleids1 = dependenteleids1.substring(1);
                dependenteleids = dependenteleids1;
            }
            columnName = columnName.trim();
            columnName = columnName.replace("#", "_");
            columnName = columnName.replace("&", "_");
            columnName = columnName.replace("!", "_");
            columnName = columnName.replace("@", "_");
            columnName = columnName.replace("(", "_");
            columnName = columnName.replace(")", "_");
            columnName = columnName.replace("[", "_");
            columnName = columnName.replace("]", "_");
            columnName = columnName.replace("{", "_");
            columnName = columnName.replace("}", "_");
            columnName = columnName.replace(" ", "_");
            columnName = columnName.replace("-", "_");
            columnName = columnName.replace("+", "_");
            columnName = columnName.replace("*", "_");
            columnName = columnName.replace("/", "_");
            String columnNamesList[] = new String[4];
            columnNamesList[0] = columnName;
            columnNamesList[1] = "Prior_" + columnName;
            columnNamesList[2] = "Change_" + columnName;
            columnNamesList[3] = "Change%_" + columnName;
            String columnDescList[] = new String[4];
            columnDescList[0] = columnName.replace("_", " ");
            columnDescList[1] = "Prior " + columnName.replace("_", " ");
            columnDescList[2] = "Change " + columnName.replace("_", " ");
            columnDescList[3] = "Change% " + columnName.replace("_", " ");
            String refEleTypes[] = new String[4];
            refEleTypes[0] = "1";
            refEleTypes[1] = "2";
            refEleTypes[2] = "3";
            refEleTypes[3] = "4";
            int ref_element_id = 0;
            int len = 1;
            if (iscalculate.equalsIgnoreCase("Y") || colType.equalsIgnoreCase("summarised") || colType.equalsIgnoreCase("summarized")) {
                len = 4;
            }else if(colType.equalsIgnoreCase("COMPLEX") || colType.equalsIgnoreCase("HYBRID")){//added by sruthi for complex and hybrid mes in graph 4/2/2016
               len=1; 
            }//ended by sruthi
            //if formula contains ' it should be replaced with ''
            columnFormula = columnFormula.replace("'", "''");
            //adding to subfolder element types
            String ref_elementId = "";
            PbReturnObject pbrofolderelement = null;
            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                String str = "select ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                pbrofolderelement = pbdb.execSelectSQL(str);
                ref_element_id = Integer.parseInt(String.valueOf(pbrofolderelement.getFieldValueInt(0, 0)));
                ref_element_id++;
            }
            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                //String str = "select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1";
                String str = "select MAX(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1";
                pbrofolderelement = pbdb.execSelectSQL(str);
                ref_element_id = Integer.parseInt(String.valueOf(pbrofolderelement.getFieldValueInt(0, 0)));
                ref_element_id++;
            }
            for (int k = 0; k < len; k++) {
                int last_element_Id = 0;
                String addSubFolderElements = getResourceBundle().getString("addSubFolderElements");
                String elementIdQuery = "";
                if (fromEdit == true) {
                    String updateSubFolderElemnets = getResourceBundle().getString("updateSubFolderElements");
// modified by Nazneen
////                    Object obj[] = new Object[8];
//                    Object obj[] = new Object[9];
//                    obj[0] = columnName;
//                    obj[1] = "E_" + measElementId;
//                    obj[2] = columnDescList[k];
//                    obj[3] = colType;
////                    obj[4] = aggType;
//                    obj[5] = dependenteleids;
//                    obj[6] = displayFormula;
//                    obj[7] = measElementId;
//                    obj[8] = refEleTypes[k];

                    Object obj[] = new Object[7];
//                    obj[0] = columnName;
//                    obj[1] = "E_" + measElementId;
                    obj[0] = columnDescList[k];
                    obj[1] = colType;
                    obj[2] = aggType;
                    obj[3] = dependenteleids;
                    obj[4] = displayFormula;
                    obj[5] = measElementId;
                    obj[6] = refEleTypes[k];
                    finalQuery = pbdb.buildQuery(updateSubFolderElemnets, obj);
                    list.add(finalQuery);
                } else {
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                        //                     String elementIdQuery = "select PRG_USER_SUB_FLDR_ELEMENTS_SEQ.nextval from dual";
                        Object obj1[] = new Object[14];
                        //                    obj1[0] = elementId;
                        obj1[0] = subfolderId;
                        obj1[1] = bussTableId;
                        obj1[2] = "0";
                        obj1[3] = columnName;
                        obj1[4] = columnNamesList[k];
                        obj1[5] = columnDescList[k];
                        obj1[6] = colType;
                        obj1[7] = subFolderTabId;
                        obj1[8] = ref_element_id;
                        obj1[9] = refEleTypes[k];
                        obj1[10] = aggType;
                        obj1[11] = "Y";
                        obj1[12] = dependenteleids;
                        obj1[13] = displayFormula;
                        finalQuery = pbdb.buildQuery(addSubFolderElements, obj1);
                        String updateQuery1 = "update PRG_USER_SUB_FOLDER_ELEMENTS set USER_COL_NAME='E_'+cast(IDENT_CURRENT('PRG_USER_SUB_FOLDER_ELEMENTS') as varchar(258)) where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                        list.add(finalQuery);
                        list.add(updateQuery1);
                    } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {

                        String queryId = "select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1";
                        pbrofolderelement = pbdb.execSelectSQL(queryId);
                        last_element_Id = pbrofolderelement.getFieldValueInt(0, 0);
                        last_element_Id = last_element_Id + 1 + k;
                        if (k == 0) {
                            ref_element_id = last_element_Id;
                        }
//                        String element_Id = String.valueOf(element_Id1+1);
                        Object obj1[] = new Object[14];
                        //obj1[0] = elementId;
                        obj1[0] = subfolderId;
                        obj1[1] = bussTableId;
                        obj1[2] = "0";
                        obj1[3] = columnName;
                        obj1[4] = columnNamesList[k];
                        obj1[5] = columnDescList[k];
                        obj1[6] = colType;
                        obj1[7] = subFolderTabId;
                        obj1[8] = ref_element_id;
                        //obj1[8] =element_Id1;
                        obj1[9] = refEleTypes[k];
                        obj1[10] = aggType;
                        obj1[11] = "Y";
                        obj1[12] = dependenteleids;
                        obj1[13] = displayFormula;
                        finalQuery = pbdb.buildQuery(addSubFolderElements, obj1);
                        //String updateQuery1 = "update PRG_USER_SUB_FOLDER_ELEMENTS set USER_COL_NAME='E_'+cast(IDENT_CURRENT('PRG_USER_SUB_FOLDER_ELEMENTS') as varchar(258)) where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                        String updateQuery1 = "update PRG_USER_SUB_FOLDER_ELEMENTS set USER_COL_NAME=concat('E_','" + last_element_Id + "') where ELEMENT_ID='" + last_element_Id + "'";
                        list.add(finalQuery);
                        list.add(updateQuery1);
                    } else {
                        elementIdQuery = "select PRG_USER_SUB_FLDR_ELEMENTS_SEQ.nextval from dual";
                        pbrofolderelement = pbdb.execSelectSQL(elementIdQuery);
                        elementId = String.valueOf(pbrofolderelement.getFieldValueInt(0, 0));
                        if (k == 0) {
                            ref_elementId = elementId;
                        }
                        Object obj1[] = new Object[16];
                        obj1[0] = elementId;
                        obj1[1] = subfolderId;
                        obj1[2] = bussTableId;
                        obj1[3] = "0";
                        obj1[4] = columnName;
                        obj1[5] = "E_" + elementId;
                        obj1[6] = columnDescList[k];
                        obj1[7] = colType;
                        obj1[8] = subFolderTabId;
                        obj1[9] = elementId;
                        obj1[10] = refEleTypes[k];
                        obj1[11] = aggType;
                        obj1[12] = "";
                        obj1[13] = "Y";
                        obj1[14] = dependenteleids;
                        obj1[15] = displayFormula;
                        finalQuery = pbdb.buildQuery(addSubFolderElements, obj1);
                        list.add(finalQuery);
                    }
                }
                if (fromEdit == true) {
                    String updateUserAllInfoDets = getResourceBundle().getString("updateUserAllInfoDetails");
                    // modified by Nazneen
////                    Object object[] = new Object[9];
//                    Object object[] = new Object[10];
//                    object[0] = columnName;
//                    object[1] = "E_" + measElementId;
//                    object[2] = columnDescList[k];
//                    object[3] = colType;
//                    object[4] = aggType;
//                    object[5] = columnFormula;
//                    object[6] = dependenteleids;
//                    object[7] = displayFormula;
//                    object[8] = measElementId;
//                    object[9] = refEleTypes[k];
                    Object object[] = new Object[9];
//                    object[0] = columnName;
//                    object[1] = "E_" + measElementId;
                    object[0] = columnDescList[k];
                    object[1] = colType;
                    object[2] = aggType;
                    object[3] = columnFormula;
                    object[4] = dependenteleids;
                    object[5] = displayFormula;
                    object[6] = prePost;
                    object[7] = measElementId;
                    object[8] = refEleTypes[k];
                    finalQuery = pbdb.buildQuery(updateUserAllInfoDets, object);
                    list.add(finalQuery);
                } else {
                    //adding to user all Info
                    String addUserAllInfoDets = getResourceBundle().getString("addUserAllInfoDets");
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                        Object obj2[] = new Object[34];
                        obj2[0] = grpId;
                        obj2[1] = folderId;
                        obj2[2] = folderName;
                        obj2[3] = subfolderId;
                        obj2[4] = subFolderName;//"Formula";
                        obj2[5] = subFolderType;//"Formula";
                        obj2[6] = subFolderTabId;
                        obj2[7] = "N";
                        obj2[8] = "Y";
                        obj2[9] = "N";
                        obj2[10] = "0";
                        obj2[11] = "0";
                        obj2[12] = "0";
                        obj2[13] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                        obj2[14] = bussTableId;
                        obj2[15] = "0";
                        obj2[16] = columnName;
                        obj2[17] = columnNamesList[k];
                        obj2[18] = columnDescList[k];
                        obj2[19] = colType;
//                        obj2[20] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                        obj2[20] = ref_element_id;
                        obj2[21] = refEleTypes[k];
                        obj2[22] = "0";
                        obj2[23] = bussTableName;
                        obj2[24] = connectionId;
                        obj2[25] = aggType;
                        obj2[26] = columnFormula;
                        obj2[27] = dependenteleids;
                        obj2[28] = displayFormula;
                        obj2[29] = "Y";
                        obj2[30] = displayName;
                        //added by Nazneen
                        obj2[31] = tableDispName;
                        obj2[32] = tableDispName;
                        obj2[33] = prePost;
                        finalQuery = pbdb.buildQuery(addUserAllInfoDets, obj2);
                        String finalQuery1 = "update prg_user_all_info_details set USER_COL_NAME='E_'+cast(IDENT_CURRENT('PRG_USER_SUB_FOLDER_ELEMENTS') as varchar(258)) where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                        //.println("finalQuery---" + finalQuery);
                        list.add(finalQuery);
                        list.add(finalQuery1);

                    } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                        //String queryId="select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1";
                        //pbrofolderelement = pbdb.execSelectSQL(queryId);
                        //String element_Id = String.valueOf(pbrofolderelement.getFieldValueInt(0, 0));
//                        int element_Id1 = pbrofolderelement.getFieldValueInt(0, 0);
//                        String element_Id = String.valueOf(element_Id1+1);
                        Object obj2[] = new Object[34];
                        obj2[0] = grpId;
                        obj2[1] = folderId;
                        obj2[2] = folderName;
                        obj2[3] = subfolderId;
                        obj2[4] = subFolderName;//"Formula";
                        obj2[5] = subFolderType;//"Formula";
                        obj2[6] = subFolderTabId;
                        obj2[7] = "N";
                        obj2[8] = "Y";
                        obj2[9] = "N";
                        obj2[10] = "0";
                        obj2[11] = "0";
                        obj2[12] = "0";
                        //obj2[13] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                        obj2[13] = last_element_Id;
                        obj2[14] = bussTableId;
                        obj2[15] = "0";
                        obj2[16] = columnName;
                        obj2[17] = columnNamesList[k];
                        obj2[18] = columnDescList[k];
                        obj2[19] = colType;
//                        obj2[20] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                        obj2[20] = ref_element_id;
                        obj2[21] = refEleTypes[k];
                        obj2[22] = "0";
                        obj2[23] = bussTableName;
                        obj2[24] = connectionId;
                        obj2[25] = aggType;
                        obj2[26] = columnFormula;
                        obj2[27] = dependenteleids;
                        obj2[28] = displayFormula;
                        obj2[29] = "Y";
                        obj2[30] = displayName;
                        //added by Nazneen
                        obj2[31] = tableDispName;
                        obj2[32] = tableDispName;
                        obj2[33] = prePost;
                        finalQuery = pbdb.buildQuery(addUserAllInfoDets, obj2);
                        //String finalQuery1 = "update prg_user_all_info_details set USER_COL_NAME='E_'+cast(IDENT_CURRENT('PRG_USER_SUB_FOLDER_ELEMENTS') as varchar(258)) where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                        String finalQuery1 = "update prg_user_all_info_details set USER_COL_NAME=concat('E_','" + last_element_Id + "')where ELEMENT_ID='" + last_element_Id + "'";
                        list.add(finalQuery);
                        list.add(finalQuery1);
                    } else {
                        Object obj2[] = new Object[36];
                        obj2[0] = grpId;
                        obj2[1] = folderId;
                        obj2[2] = folderName;
                        obj2[3] = subfolderId;
                        obj2[4] = subFolderName;//"Formula";
                        obj2[5] = subFolderType;//"Formula";
                        obj2[6] = subFolderTabId;
                        obj2[7] = "N";
                        obj2[8] = "Y";
                        obj2[9] = "N";
//                        obj2[10] = "";
                        obj2[10] = displayName;
                        obj2[11] = "0";
                        obj2[12] = "0";
                        obj2[13] = "0";
                        obj2[14] = "";
                        obj2[15] = elementId;
                        obj2[16] = bussTableId;
                        obj2[17] = "0";
                        obj2[18] = columnName;
                        obj2[19] = "E_" + elementId;
                        obj2[20] = columnDescList[k];
                        obj2[21] = colType;
                        obj2[22] = ref_elementId;
                        obj2[23] = refEleTypes[k];
                        obj2[24] = "0";
                        obj2[25] = "";
                        obj2[26] = "";
                        obj2[27] = bussTableName;
                        obj2[28] = connectionId;
                        obj2[29] = aggType;
                        obj2[30] = columnFormula;
                        obj2[31] = dependenteleids;
                        obj2[32] = displayFormula;
                        //added by Nazneen
                        obj2[33] = tableDispName;
                        obj2[34] = tableDispName;
                        obj2[35] = prePost;
                        finalQuery = pbdb.buildQuery(addUserAllInfoDets, obj2);
                        list.add(finalQuery);
                    }
                }
            }

            boolean check = pbdb.executeMultiple(list);
            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                String getRefElId = getResourceBundle().getString("getRefElId");
                String queryId = "select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1";
                PbReturnObject pbro = pbdb.execSelectSQL(queryId);
                String lastElementId = String.valueOf(pbro.getFieldValueInt(0, 0));
                Object obj2[] = new Object[1];
                obj2[0] = lastElementId;
                String finalqueryt = pbdb.buildQuery(getRefElId, obj2);
                PbReturnObject refElIdObject = pbdb.execSelectSQL(finalqueryt);
                ref_elementId = refElIdObject.getFieldValueString(0, 0);
//                    //.println("ref_elementId\t" + ref_elementId);
            }
            if (check) {
                if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                    String getRefElId = getResourceBundle().getString("getRefElId");
                    PbReturnObject refElIdObject = pbdb.execSelectSQL(getRefElId);
                    ref_elementId = refElIdObject.getFieldValueString(0, 0);
//                    //.println("ref_elementId\t" + ref_elementId);
                }
                if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                    String getRefElId = getResourceBundle().getString("getRefElId");
                    String queryId = "select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1";
                    PbReturnObject pbro = pbdb.execSelectSQL(queryId);
                    String lastElementId = String.valueOf(pbro.getFieldValueInt(0, 0));
                    Object obj2[] = new Object[1];
                    obj2[0] = lastElementId;
                    String finalqueryt = pbdb.buildQuery(getRefElId, obj2);
                    PbReturnObject refElIdObject = pbdb.execSelectSQL(finalqueryt);
                    ref_elementId = refElIdObject.getFieldValueString(0, 0);
//                    //.println("ref_elementId\t" + ref_elementId);
                }
            }
            if (fromEdit) {
                PbReturnObject queryRefEleId = null;
                String queryGetRefEleId = "select REF_ELEMENT_ID from PRG_USER_ALL_INFO_DETAILS WHERE ELEMENT_ID = " + measElementId;
                queryRefEleId = pbdb.execSelectSQL(queryGetRefEleId);
                if (queryRefEleId.getRowCount() > 0) {
                    ref_elementId = queryRefEleId.getFieldValueString(0, 0);
                }
            }
            ArrayList list1 = new ArrayList();
            PbReturnObject queryPrior = null;
            PbReturnObject queryPrior1 = null;
//            String query = "";
            StringBuilder query = new StringBuilder();
            String eleId = "";
            String actual_formula = "";
            String prior_reff_elements = "";
            String change_reff_elements = "";
            String reffered_ele = "";
//            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
            String updatePrior = "update PRG_USER_ALL_INFO_DETAILS set actual_col_formula = '&', reffered_elements = '&' where ref_element_id=& and ref_element_type =2";
            String updateChangeChangePer = "update PRG_USER_ALL_INFO_DETAILS set reffered_elements = '&' where ref_element_id=& and ref_element_type in(3,4)";
            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                query.append("select A.ELEMENT_ID,A.USER_COL_NAME,A.REFFERED_ELEMENTS,B.REF_ELEMENT_ID,B.prior_ELEMENT_ID,B.prior_USER_COL_NAME,B.prior_REFFERED_ELEMENTS " + " from (SELECT ELEMENT_ID ELEMENT_ID,USER_COL_NAME USER_COL_NAME,REFFERED_ELEMENTS REFFERED_ELEMENTS,REF_ELEMENT_ID REF_ELEMENT_ID,null  prior_ELEMENT_ID," + " null prior_USER_COL_NAME,null prior_REFFERED_ELEMENTS FROM PRG_USER_ALL_INFO_DETAILS WHERE ref_element_id IN(").append(dependenteleids).append(") AND ref_element_type  =1) A ," + " (SELECT null ELEMENT_ID,null USER_COL_NAME,null REFFERED_ELEMENTS,REF_ELEMENT_ID REF_ELEMENT_ID,element_id prior_ELEMENT_ID,USER_COL_NAME prior_USER_COL_NAME," + " REFFERED_ELEMENTS prior_REFFERED_ELEMENTS FROM PRG_USER_ALL_INFO_DETAILS WHERE ref_element_id IN(").append(dependenteleids).append(") AND ref_element_type  =2) B "
                        + " where A.REF_ELEMENT_ID = B.REF_ELEMENT_ID ORDER BY DATALENGTH(isnull(A.USER_COL_NAME, A.user_col_name)) DESC ");
            } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                query.append("select A.ELEMENT_ID,A.USER_COL_NAME,A.REFFERED_ELEMENTS,B.REF_ELEMENT_ID,B.prior_ELEMENT_ID,B.prior_USER_COL_NAME,B.prior_REFFERED_ELEMENTS " + " from (SELECT ELEMENT_ID ELEMENT_ID,USER_COL_NAME USER_COL_NAME,REFFERED_ELEMENTS REFFERED_ELEMENTS,REF_ELEMENT_ID REF_ELEMENT_ID,null  prior_ELEMENT_ID," + " null prior_USER_COL_NAME,null prior_REFFERED_ELEMENTS FROM PRG_USER_ALL_INFO_DETAILS WHERE ref_element_id IN(").append(dependenteleids).append(") AND ref_element_type  =1) A ," + " (SELECT null ELEMENT_ID,null USER_COL_NAME,null REFFERED_ELEMENTS,REF_ELEMENT_ID REF_ELEMENT_ID,element_id prior_ELEMENT_ID,USER_COL_NAME prior_USER_COL_NAME," + " REFFERED_ELEMENTS prior_REFFERED_ELEMENTS FROM PRG_USER_ALL_INFO_DETAILS WHERE ref_element_id IN(").append(dependenteleids).append(") AND ref_element_type  =2) B "
                        + " where A.REF_ELEMENT_ID = B.REF_ELEMENT_ID ORDER BY LENGTH(ifnull(A.USER_COL_NAME, A.user_col_name)) DESC ");
            } else {
                query.append("select A.ELEMENT_ID,A.USER_COL_NAME,A.REFFERED_ELEMENTS,B.REF_ELEMENT_ID,B.prior_ELEMENT_ID,B.prior_USER_COL_NAME,B.prior_REFFERED_ELEMENTS " + " from (SELECT ELEMENT_ID ELEMENT_ID,USER_COL_NAME USER_COL_NAME,REFFERED_ELEMENTS REFFERED_ELEMENTS,REF_ELEMENT_ID REF_ELEMENT_ID,null  prior_ELEMENT_ID," + " null prior_USER_COL_NAME,null prior_REFFERED_ELEMENTS FROM PRG_USER_ALL_INFO_DETAILS WHERE ref_element_id IN(").append(dependenteleids).append(") AND ref_element_type  =1) A ," + " (SELECT null ELEMENT_ID,null USER_COL_NAME,null REFFERED_ELEMENTS,REF_ELEMENT_ID REF_ELEMENT_ID,element_id prior_ELEMENT_ID,USER_COL_NAME prior_USER_COL_NAME," + " REFFERED_ELEMENTS prior_REFFERED_ELEMENTS FROM PRG_USER_ALL_INFO_DETAILS WHERE ref_element_id IN(").append(dependenteleids).append(") AND ref_element_type  =2) B "
                        + " where A.REF_ELEMENT_ID = B.REF_ELEMENT_ID ORDER BY length(nvl(A.USER_COL_NAME, A.user_col_name)) DESC ");
            }
            queryPrior = pbdb.execSelectSQL(query.toString());
            if (queryPrior.getRowCount() > 0) {
                query.append("select element_id,actual_col_formula,reffered_elements from prg_user_all_info_details where ref_element_id=" + ref_elementId + " and ref_element_type=2");
                queryPrior1 = pbdb.execSelectSQL(query.toString());
                eleId = queryPrior1.getFieldValueString(0, 0);
                actual_formula = queryPrior1.getFieldValueString(0, 1);
                reffered_ele = queryPrior1.getFieldValueString(0, 2);
                for (int i = 0; i < queryPrior.rowCount; i++) {
                    if (actual_formula.contains(queryPrior.getFieldValueString(i, 1))) {
                        actual_formula = actual_formula.replace(queryPrior.getFieldValueString(i, 1), queryPrior.getFieldValueString(i, 5));
                    }
//                        if(!queryPrior.getFieldValueString(i,6).contains("")){
//                            prior_reff_elements=prior_reff_elements+","+queryPrior.getFieldValueString(i,4)+","+queryPrior.getFieldValueString(i,6);
//                        }
//                        else {
                    prior_reff_elements = prior_reff_elements + "," + queryPrior.getFieldValueString(i, 4);
//                        }
                }
                prior_reff_elements = prior_reff_elements.substring(1);
                change_reff_elements = reffered_ele + "," + prior_reff_elements;
                //update for prior
                Object obj3[] = new Object[3];
                obj3[0] = actual_formula;
                obj3[1] = prior_reff_elements;
                obj3[2] = ref_elementId;
                finalQuery = pbdb.buildQuery(updatePrior, obj3);
                list1.add(finalQuery);
                //update for change and change%
                Object obj4[] = new Object[2];
                obj4[0] = change_reff_elements;
                obj4[1] = ref_elementId;
                finalQuery = pbdb.buildQuery(updateChangeChangePer, obj4);
                list1.add(finalQuery);
                pbdb.executeMultiple(list1);
            }
//            }
            if (!fromEdit) {
                out.print(ref_elementId);
            } else {
                out.print(measElementId);
            }
        } catch (NumberFormatException ex) {
            out.print("");
            logger.error("Exception:", ex);
        } catch (SQLException ex) {
            out.print("");
            logger.error("Exception:", ex);
        }
        logger.info("Exit Method");
        return null;
    }

    public ActionForward createTimeBasedFormula(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        PrintWriter out = null;
        try {
            out = response.getWriter();
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        String aggregationTypeChangeVal = request.getParameter("aggType");
        String type = request.getParameter("TypeDropDown");
        String level = request.getParameter("level");
        String elementId = request.getParameter("elementId");
        PbReportViewerDAO reptDAO = new PbReportViewerDAO();
//        PbReturnObject retObj = reptDAO.getReferredElementsofMeasure(elementId);
//        String aggregationType = retObj.getFieldValueString(0, "AGGREGATION_TYPE");
        StringBuilder aggregationStringBuilder = new StringBuilder();
        aggregationStringBuilder.append(aggregationTypeChangeVal).append("#");
        if ("Trailing".equalsIgnoreCase(type)) {
            String trailingPeriod = request.getParameter("trailingPeriod");
            if ("Period".equalsIgnoreCase(level)) {
                aggregationStringBuilder.append("TPERIODS").append(",,").append(trailingPeriod);
            }
            if ("Year".equalsIgnoreCase(level)) {
                aggregationStringBuilder.append("TYEARS").append(",,").append(trailingPeriod);
            }
            if ("Quarter".equalsIgnoreCase(level)) {
                aggregationStringBuilder.append("TQTRS").append(",,").append(trailingPeriod);
            }
            if ("Month".equalsIgnoreCase(level)) {
                aggregationStringBuilder.append("TMONTHS").append(",,").append(trailingPeriod);
            }
            if ("Day".equalsIgnoreCase(level)) {
                aggregationStringBuilder.append("TDAYS").append(",,").append(trailingPeriod);
            }
        }
        if ("Rolling".equalsIgnoreCase(type)) {
            String RollingStartVal = request.getParameter("RollingStartVal");
            String RollingEndVal = request.getParameter("RollingEndVal");
            if ("Day".equalsIgnoreCase(level)) {
                aggregationStringBuilder.append("RDAYS").append("").append(RollingStartVal).append(",").append(RollingEndVal);
            }
        }
        if ("Discrete".equalsIgnoreCase(type)) {
            StringBuilder dateSB = new StringBuilder();
            int rowCount = Integer.parseInt(request.getParameter("rowCount"));
            StringBuilder discreteSB = new StringBuilder();
            //String date = request.getParameter("datepickerDiscrete");
            if ("year".equalsIgnoreCase(level)) {
                aggregationStringBuilder.append("YDIS").append("");
                for (int i = 2; i < rowCount; i++) {
                    // discreteSB.append(",").append(request.getParameter("selectDiscreteYear"+i));
                    String quarterVal = request.getParameter("selectDiscreteYear" + i);
                    String date = getFormatedDate(quarterVal);
//                    String quarterArry[] = quarterVal.split("-");
//                    String val = quarterArry[1] + "/" + quarterArry[0] + "/" + quarterArry[2];
                    discreteSB.append(",").append(date);
                }
                discreteSB.replace(0, 1, "");
                aggregationStringBuilder.append(discreteSB.toString());

            }
            if ("Quarter".equalsIgnoreCase(level)) {

                aggregationStringBuilder.append("QDIS").append("");
                for (int i = 2; i < rowCount; i++) {
                    String quarterVal = request.getParameter("selectDiscreteQuarter" + i);
                    String date = getFormatedDate(quarterVal);
//                    String quarterArry[] = quarterVal.split("-");
//                    String val = quarterArry[1] + "/" + quarterArry[0] + "/" + quarterArry[2];
                    discreteSB.append(",").append(date);
                }
                discreteSB.replace(0, 1, "");
                aggregationStringBuilder.append(discreteSB.toString());
            }
            if ("Month".equalsIgnoreCase(level)) {
                aggregationStringBuilder.append("MDIS").append("");
                for (int i = 2; i < rowCount; i++) {
                    String quarterVal = request.getParameter("selectDiscreteMonth" + i);
                    String date = getFormatedDate(quarterVal);
//                    String quarterArry[] = quarterVal.split("-");
//                    String val = quarterArry[1] + "/" + quarterArry[0] + "/" + quarterArry[2];
                    discreteSB.append(",").append(date);
                }
                discreteSB.replace(0, 1, "");
                aggregationStringBuilder.append(discreteSB.toString());
            }
            if ("Day".equalsIgnoreCase(level)) {
                aggregationStringBuilder.append("DIS").append("");
                for (int i = 2; i < rowCount; i++) {
                    discreteSB.append(",").append(request.getParameter("datepickerDiscrete" + i));
                }
                discreteSB.replace(0, 1, "");
                aggregationStringBuilder.append(discreteSB.toString());
            }
            dateSB.replace(0, 1, "");
            aggregationStringBuilder.append(dateSB.toString());
        }
        if ("Range".equalsIgnoreCase(type)) {
            String startDate = request.getParameter("datepicker2");
            String endDate = request.getParameter("datepicker3");
            if ("year".equalsIgnoreCase(level)) {
                String str1 = request.getParameter("selectYear1");
                String year1 = getFormatedDate(str1);
//                String strarry[] = str1.split("-");
//                String val1 = strarry[1] + "/" + strarry[0] + "/" + strarry[2];
                String str2 = request.getParameter("selectYear2");
                String year2 = getFormatedDate(str2);
//                String strarry1[] = str2.split("-");
//                String val2 = strarry1[1] + "/" + strarry1[0] + "/" + strarry1[2];
                aggregationStringBuilder.append("YRANGE").append("").append(year1).append(",").append(year2);
            }
            if ("Quarter".equalsIgnoreCase(level)) {
                String str1 = request.getParameter("selectQuarter1");
                String date1 = getFormatedDate(str1);
                String str2 = request.getParameter("selectQuarter2");
                String date2 = getFormatedDate(str2);
                aggregationStringBuilder.append("QRANGE").append("").append(date1).append(",").append(date2);
            }
            if ("Month".equalsIgnoreCase(level)) {
                String str1 = request.getParameter("selectMonth1");
                String date1 = getFormatedDate(str1);
                String str2 = request.getParameter("selectMonth2");
                String date2 = getFormatedDate(str2);
                aggregationStringBuilder.append("MRANGE").append("").append(str1).append(",").append(str2);
            }
            if ("Day".equalsIgnoreCase(level)) {
                aggregationStringBuilder.append("DRANGE").append("").append(startDate).append(",").append(endDate);
            }
        }
        out.print(aggregationStringBuilder.toString());
        return null;
    }
    //handling next and previous in Graphs

    public String getFormatedDate(String dateString) {
        DateFormat dateformat = new SimpleDateFormat("dd-MMM-yy");
        Date date = null;
        try {
            date = dateformat.parse(dateString);
        } catch (ParseException ex) {
            logger.error("Exception:", ex);
        }
        String dd = dateformat.format(date);
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        String newDateStr = (calendar.get(Calendar.MONTH) + 1) + "/" + calendar.get(Calendar.DATE) + "/" + calendar.get(Calendar.YEAR);
        return newDateStr;
    }

    public ActionForward changeGraphDataset(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        HashMap map = null;
        Container container = null;
        HashMap GraphHashMap = null;
        HashMap singleGraphDetails = null;
        String grpId = null;
        String REPORTID = null;
        int sindex = 0;
        int eindex = 10;
        String navigate = "";
        String recordset = "";
        String rowcount = "";
        if (session != null) {
            if (session.getAttribute("PROGENTABLES") != null) {
                map = (HashMap) session.getAttribute("PROGENTABLES");
                //added by k
                grpId = request.getParameter("graphId");
                REPORTID = request.getParameter("REPORTID");
                container = (Container) map.get(REPORTID);
                GraphHashMap = container.getGraphHashMap();
                request.setAttribute("tabId", REPORTID);
                try {
                    if (GraphHashMap != null && grpId != null && !"".equalsIgnoreCase(grpId)) {
                        singleGraphDetails = (HashMap) GraphHashMap.get(grpId);
                        if (singleGraphDetails != null) {
                            navigate = String.valueOf(request.getParameter("selecttype"));
                            recordset = String.valueOf(request.getParameter("recordset"));
                            if (!navigate.equalsIgnoreCase("Transpose")) {
                                if (recordset.equalsIgnoreCase("previous")) {
                                    if (!navigate.equalsIgnoreCase("firstrecord")) {
                                        if (!String.valueOf(singleGraphDetails.get("startindex")).equalsIgnoreCase("") && !String.valueOf(singleGraphDetails.get("endindex")).equalsIgnoreCase("null")) {
                                            sindex = Integer.parseInt(String.valueOf(singleGraphDetails.get("startindex")));
                                            eindex = Integer.parseInt(String.valueOf(singleGraphDetails.get("endindex")));
                                            if (sindex != 0 && eindex != 10) {

                                                if (String.valueOf(singleGraphDetails.get("graphDisplayRows")) != null && !String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("") && !String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("null")) {
                                                    eindex = sindex;
                                                    rowcount = String.valueOf(singleGraphDetails.get("graphDisplayRows"));
                                                    sindex = sindex - (Integer.parseInt(String.valueOf(singleGraphDetails.get("graphDisplayRows"))));
                                                } else {
                                                    eindex = sindex;
                                                    sindex = sindex - 10;
                                                }
                                            } else {
                                                if (String.valueOf(singleGraphDetails.get("graphDisplayRows")) != null && !String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("") && !String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("null")) {
                                                    sindex = 0;
                                                    rowcount = String.valueOf(singleGraphDetails.get("graphDisplayRows"));
                                                    eindex = (Integer.parseInt(String.valueOf(singleGraphDetails.get("graphDisplayRows"))));
                                                } else {
                                                    sindex = 0;
                                                    eindex = 10;
                                                }
                                            }
                                        } else {
                                            if (String.valueOf(singleGraphDetails.get("graphDisplayRows")) != null && !String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("") && !String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("null")) {
                                                sindex = 0;
                                                rowcount = String.valueOf(singleGraphDetails.get("graphDisplayRows"));
                                                eindex = (Integer.parseInt(String.valueOf(singleGraphDetails.get("graphDisplayRows"))));
                                            } else {
                                                sindex = 0;
                                                eindex = 10;
                                            }
                                        }
                                    } else {
                                        if (String.valueOf(singleGraphDetails.get("graphDisplayRows")) != null && !String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("") && !String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("null")) {
                                            sindex = 0;
                                            rowcount = String.valueOf(singleGraphDetails.get("graphDisplayRows"));
                                            eindex = (Integer.parseInt(String.valueOf(singleGraphDetails.get("graphDisplayRows"))));
                                        } else {
                                            sindex = 0;
                                            eindex = 10;
                                        }
                                    }
                                } else {
                                    if (!navigate.equalsIgnoreCase("lastrecord")) {
                                        if (!String.valueOf(singleGraphDetails.get("startindex")).equalsIgnoreCase("") && !String.valueOf(singleGraphDetails.get("endindex")).equalsIgnoreCase("null")) {
                                            sindex = Integer.parseInt(String.valueOf(singleGraphDetails.get("startindex")));
                                            eindex = Integer.parseInt(String.valueOf(singleGraphDetails.get("endindex")));
                                            if (String.valueOf(singleGraphDetails.get("graphDisplayRows")) != null && !String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("") && !String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("null")) {
                                                sindex = eindex;
                                                rowcount = String.valueOf(singleGraphDetails.get("graphDisplayRows"));
                                                eindex = eindex + (Integer.parseInt(String.valueOf(singleGraphDetails.get("graphDisplayRows"))));
                                            } else {
                                                sindex = eindex;
                                                eindex = eindex + 10;
                                            }
                                        } else {
                                            if (String.valueOf(singleGraphDetails.get("graphDisplayRows")) != null && !String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("") && !String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("null")) {
                                                sindex = 0;
                                                rowcount = String.valueOf(singleGraphDetails.get("graphDisplayRows"));
                                                eindex = (Integer.parseInt(String.valueOf(singleGraphDetails.get("graphDisplayRows"))));
                                            } else {
                                                sindex = 0;
                                                eindex = 10;
                                            }
                                        }
                                    } else {
                                        if (String.valueOf(singleGraphDetails.get("graphDisplayRows")) != null && !String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("") && !String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("null")) {

                                            sindex = (container.getDisplayedSet().size()) - (Integer.parseInt(String.valueOf(singleGraphDetails.get("graphDisplayRows"))));
                                            eindex = container.getDisplayedSet().size();
                                        } else {
                                            sindex = (container.getDisplayedSet().size()) - 10;
                                            eindex = container.getDisplayedSet().size();
                                        }
                                    }
                                }
                                if (sindex < 0 || eindex < 0) {
                                    if (String.valueOf(singleGraphDetails.get("graphDisplayRows")) != null && !String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("") && !String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("null")) {
                                        if (String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("All")) {
                                            sindex = 0;
                                            eindex = container.getDisplayedSet().size();
                                        } else {
                                            sindex = 0;
                                            eindex = Integer.parseInt(String.valueOf(singleGraphDetails.get("graphDisplayRows")));
                                        }
                                    } else {
                                        sindex = 0;
                                        eindex = 10;
                                    }
                                }
                                if (String.valueOf(singleGraphDetails.get("graphDisplayRows")) != null && !String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("") && !String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("null")) {
                                    if (String.valueOf(singleGraphDetails.get("graphDisplayRows")).equalsIgnoreCase("All")) {
                                        sindex = 0;
                                    } else {
                                        sindex = (container.getDisplayedSet().size() <= sindex) ? (container.getDisplayedSet().size()) - Integer.parseInt(String.valueOf(singleGraphDetails.get("graphDisplayRows"))) : sindex;
                                    }
                                } else {

                                    sindex = (container.getDisplayedSet().size() <= sindex) ? (container.getDisplayedSet().size()) - 10 : sindex;
                                }
                                if (container.getDisplayedSet().size() < 10) {
                                    sindex = 0;
                                    eindex = container.getDisplayedSet().size();
                                }
                                eindex = (container.getDisplayedSet().size() <= eindex) ? container.getDisplayedSet().size() : eindex;
                                singleGraphDetails.put("startindex", sindex);
                                singleGraphDetails.put("endindex", eindex);
                                String[] ketset = (String[]) GraphHashMap.keySet().toArray(new String[0]);
                                for (int i = 0; i < ketset.length; i++) {
                                    if (ketset[i].equalsIgnoreCase(grpId)) {
                                        GraphHashMap.put(grpId, singleGraphDetails);
                                    }
                                }
                                container.setGraphHashMap(GraphHashMap);
                                map.put(REPORTID, container);
                                session.setAttribute("PROGENTABLES", map);
                            }//nottranspose
                            else {
                                if (String.valueOf(singleGraphDetails.get("SwapColumn")).equalsIgnoreCase("true")) {
                                    singleGraphDetails.put("SwapColumn", false);
                                } else {
                                    singleGraphDetails.put("SwapColumn", true);
                                }
                                String[] ketset = (String[]) GraphHashMap.keySet().toArray(new String[0]);
                                for (int i = 0; i < ketset.length; i++) {
                                    if (ketset[i].equalsIgnoreCase(grpId)) {
                                        GraphHashMap.put(grpId, singleGraphDetails);
                                    }
                                }
                                container.setGraphHashMap(GraphHashMap);
                                map.put(REPORTID, container);
                                session.setAttribute("PROGENTABLES", map);
                            }
                        }
                    } else {
                    }
                } catch (NumberFormatException exp) {
                    logger.error("Exception: ", exp);
                }
            }
            return mapping.findForward("graphDisplay");
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    public ActionForward getParamFilterMbrs(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
        PbReportViewerDAO reportViewerDAO = new PbReportViewerDAO();
        HttpSession session = request.getSession(false);
        String Type = null;
        String dimElementId = null;
        String staticDimValue = null;
        String reportId = request.getParameter("reportId");
        String mbrs = request.getParameter("mbrs");
        if (mbrs != null) {
            mbrs = mbrs.replace("%20", " ").replace("%26", "&").replace("'''", ",").replace("%3A", ":").replace("%2F", "/").replace("%3F", "?").replace("%40", "@");
            mbrs = mbrs.replace("%23", "#").replace("%24", "$").replace("%25", "%").replace("%5E", "^").replace("%60", "`").replace("%3C", "<").replace("%3E", ">").replace("%2C", ",");
        }
        String paramFilterName = request.getParameter("paramFilterName");
        if (paramFilterName != null) {
            paramFilterName = URLDecoder.decode(paramFilterName, "UTF-8");
        }
        String dimBussTabId = request.getParameter("dimBussTabId");
        String measEleId = request.getParameter("measEleId");
        String dimTabColName = request.getParameter("dimTabColName");
        dimElementId = request.getParameter("dimElementId");
        String dimType = request.getParameter("dimType");
        staticDimValue = request.getParameter("staticDimValue");
        String dimCalOperator = request.getParameter("dimCalOperator");
        String selectedParam = request.getParameter("selectedParam");
        Container container = null;
//        paramFilterName = paramFilterName.replace("|__|", "&");
//        paramFilterName = paramFilterName.replace("_||_", "+");
        Type = request.getParameter("Type");
        ArrayList<String> conditions = new ArrayList<String>();
        ArrayList<String> mIds = new ArrayList<String>();
        ArrayList<String> measurecond = new ArrayList<String>();
        ArrayList<String> mValues = new ArrayList<String>();
        ArrayList<String> endVals = new ArrayList<String>();
//        ArrayList<String> cmpMsrName=new ArrayList<String>();
//        ArrayList<String> endcmpMsrName=new ArrayList<String>();
//        String factFormula = "";
        StringBuilder factFormula = new StringBuilder();
        if (Type != null && Type.equalsIgnoreCase("facts")) {
            String[] cond = request.getParameterValues("Cond");
            String[] measureIds = request.getParameterValues("mName");
            String[] measureCon = request.getParameterValues("mCond");
            String[] measureValues = request.getParameterValues("mValues");
            String[] endValues = request.getParameterValues("eValues");
            String folderId = request.getParameter("folderId");
            String subfolderId = request.getParameter("subfolderId");
            //start of code by Nazneen for comparision Measures
            String[] cmpMsrName = request.getParameterValues("cmpMsrName");
            String checkCmpMsrids = request.getParameter("checkCmpMsrids");
            String progenTime = request.getParameter("ProgenTime");
            String[] endcmpMsrName = request.getParameterValues("endcmpMsrName");
            ReportTemplateDAO dao = new ReportTemplateDAO();
            String busdeatils = dao.getBussTabledetails(measEleId);
            String[] arr = busdeatils.split(",");
            String busTableId = arr[0];
            String busTableName = arr[1];
            String[] cmpMsrIds = checkCmpMsrids.split(",");
            ArrayList msrId = new ArrayList();
            msrId.addAll(Arrays.asList(cmpMsrIds));
            if (cmpMsrIds.length != 0 && !checkCmpMsrids.equals("")) {
                PbDb pbDb = new PbDb();
                PbReturnObject pbRetObj;
                PbReturnObject retObj;
                String measDbTable = null;
                String measDbCol = null;
                try {
                    String getDbTablColQry = getResourceBundle().getString("getDBTableColumn");
                    Object[] qryBind = new Object[1];
                    qryBind[0] = measEleId.replace("A_", "");
                    String id = measEleId.replace("A_", ""); //element_id in where clause
                    getDbTablColQry = pbDb.buildQuery(getDbTablColQry, qryBind);
                    pbRetObj = pbDb.execSelectSQL(getDbTablColQry);
                    String qry1 = "SELECT USER_COL_TYPE,ACTUAL_COL_FORMULA FROM PRG_USER_ALL_INFO_DETAILS  WHERE ELEMENT_ID= " + id;
                    PbReturnObject retObj1 = pbDb.execSelectSQL(qry1);
                    String colType = retObj1.getFieldValueString(0, 0);
                    String actualFrom = retObj1.getFieldValueString(0, 1);
                    if (actualFrom.startsWith("'")) {
                        if (actualFrom.endsWith("'")) {
                            actualFrom = actualFrom.substring(1, actualFrom.length() - 1);
                        }
                    }
                    if (pbRetObj.getRowCount() > 0) {
                        measDbTable = pbRetObj.getFieldValueString(0, 0);
                        if (pbRetObj.getFieldValueString(0, 2).equalsIgnoreCase("calculated")) {
                            measDbCol = pbRetObj.getFieldValueString(0, 3);
                        } else {
                            measDbCol = pbRetObj.getFieldValueString(0, 1);
                        }
                    }
                    factFormula.append("case when ");
                    for (int i = 0; i < measureIds.length; i++) {
                        if (i != 0) {
                            factFormula.append(" " + cond[i] + " ");
                        }
                        if (measureIds[i].equalsIgnoreCase("@PROGENTIME@@ST_DATE") || measureIds[i].equalsIgnoreCase("@PROGENTIME@@ED_DATE")) {
                            factFormula.append(measureIds[i]);
                        } else {
                            factFormula.append(dao.getBuscolName(measureIds[i]));
                        }
                        factFormula.append(" " + measureCon[i] + " ");
                        if (msrId.contains(String.valueOf(i))) {
                            if (cmpMsrName[i].equalsIgnoreCase("@PROGENTIME@@ST_DATE") || cmpMsrName[i].equalsIgnoreCase("@PROGENTIME@@ED_DATE")) {
                                factFormula.append(cmpMsrName[i] + " ");
                            } else {
                                factFormula.append(dao.getBuscolName(cmpMsrName[i]) + " ");
                            }
                            if (measureCon[i].equalsIgnoreCase("between")) {
                                if (endcmpMsrName[i].equalsIgnoreCase("@PROGENTIME@@ST_DATE") || endcmpMsrName[i].equalsIgnoreCase("@PROGENTIME@@ED_DATE")) {
                                    factFormula.append(" and " + endcmpMsrName[i] + " ");
                                } else {
                                    factFormula.append(" and " + dao.getBuscolName(endcmpMsrName[i]) + " ");
                                }
                            }
                        } else {
//                            String msrVals = "";
                            StringBuilder msrVals = new StringBuilder();
                            if (measureValues[i].contains(",")) {
                                String[] val = measureValues[i].split(",");
                                StringBuffer str = new StringBuffer();
                                for (int v = 0; v < val.length; v++) {
                                    val[v] = "''" + val[v] + "''";
                                    str.append(",").append(val[v]);
                                }
                                msrVals.append(" (" + str.substring(1) + ") ");
                            } else {
                                if (measureValues != null && measureValues.length > 0 && !measureValues[i].equalsIgnoreCase("")) // msrVals =" ("+"''" + measureValues[i] + "''"+") ";
                                {
                                    msrVals.append(" (" + "''" + measureValues[i] + "''" + ") ");
                                }
                            }
                            factFormula.append(msrVals);
                            if (measureCon[i].equalsIgnoreCase("between")) {
                                String endmsrVals = "";
                                if (endValues[i].contains(",")) {
                                    String[] val = endValues[i].split(",");
                                    StringBuffer str = new StringBuffer();
                                    for (int v = 0; v < val.length; v++) {
                                        val[v] = "''" + val[v] + "''";
                                        str.append(",").append(val[v]);
                                    }
                                    endmsrVals = " (" + str.substring(1) + ") ";
                                } else {
                                    endmsrVals = " (" + "''" + endValues[i] + "''" + ") ";
                                }
                                factFormula.append(" and " + endmsrVals);
                                //  factFormula += " and " +"("+ "''" + eValues[i] + "''"+") ";
                            }
                        }
                    }
                    if (colType.equalsIgnoreCase("calculated")) {
                        factFormula.append("then " + actualFrom.replace("'", "''") + " else null end");
                    } else {
                        factFormula.append("then " + measDbTable + "." + measDbCol + " else null end");
                    }
//                 factFormula += " then " + dao.getBuscolName(measureIds[i]) + " else null end ";
                } catch (SQLException ex) {
                    logger.error("Exception: ", ex);
                }
            }
            //end of code by Nazneen
            ReportTemplateDAO dao1 = new ReportTemplateDAO();
            String busdeatils1 = dao1.getBussTableNameandId(folderId, subfolderId);
            String[] arr1 = busdeatils1.split(",");
            dimBussTabId = arr1[0];
            dimTabColName = arr1[1];
            conditions.addAll(Arrays.asList(cond));
            mIds.addAll(Arrays.asList(measureIds));
            measurecond.addAll(Arrays.asList(measureCon));
            mValues.addAll(Arrays.asList(measureValues));
            endVals.addAll(Arrays.asList(endValues));
        }
        if ((Type != null && Type.equalsIgnoreCase("ConversionFormula")) || (Type != null && Type.equalsIgnoreCase("dimCalculation"))) {
            ReportTemplateDAO dao = new ReportTemplateDAO();
            String busdeatils;
            if (Type.equalsIgnoreCase("dimCalculation")) {
                busdeatils = dao.getBussTabledetails(selectedParam);
            } else {
                busdeatils = dao.getBussTabledetails(measEleId);
            }
            String[] arr = busdeatils.split(",");
            dimBussTabId = arr[0];
            dimTabColName = arr[1] + "." + arr[2];
        }
        //String insertUserAllInfoDets = getResourceBundle().getString("insertUserAllInfo");
        String newEleId = reportViewerDAO.insertParameterizedFormula(mbrs, paramFilterName, measEleId, dimBussTabId, dimElementId, dimTabColName, dimType, Type, conditions, mIds, measurecond, mValues, endVals, staticDimValue, dimCalOperator, factFormula.toString());
        if (session.getAttribute("PROGENTABLES") != null) {
            HashMap map = (HashMap) session.getAttribute("PROGENTABLES");
            if (map.get(reportId) != null) {
                container = (Container) map.get(reportId);
            }
        }
//        String newMeasLst = "";
        StringBuilder newMeasLst = new StringBuilder();
        if (container != null) {
            ArrayList<String> origColLst = container.getDisplayColumns();
            int viewCount = (container.getViewByCount());
            for (int i = viewCount; i < origColLst.size(); i++) {
                String meas = origColLst.get(i);
//                newMeasLst = newMeasLst + "," + meas.replace("A_", "");
                newMeasLst.append(",").append(meas.replace("A_", ""));
                if (measEleId.equals(meas)) {
//                    newMeasLst = newMeasLst + "," + newEleId; //add new measure adjacent to chosen measure for Parameter Filter
                    newMeasLst.append(",").append(newEleId);
                }
            }
            newMeasLst = new StringBuilder(newMeasLst.substring(1));
        }
        PrintWriter out;
        try {
            out = response.getWriter();
            out.print(newMeasLst);
        } catch (IOException ex) {
            logger.error("Cannot find Print writer: ", ex);
        }
        return null;
    }

    public ActionForward createSegment(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        String reportId = request.getParameter("reportId");
        String segName = request.getParameter("segName");
        Container container = Container.getContainerFromSession(request, reportId);
        if (container == null) {
            return mapping.findForward("sessionExpired");
        }
        String parameter = request.getParameter("segmentNames");
        String[] bucketNames = parameter.split(",");
        parameter = request.getParameter("upperLimit");
        String[] bucketUpperLimits = parameter.split(",");
        parameter = request.getParameter("lowerLimit");
        String[] bucketLowerLimits = parameter.split(",");
        String measureId = request.getParameter("measureId");
        ArrayList<String> bucketLst = new ArrayList<String>();
        ArrayList<Double> upperLmt = new ArrayList<Double>();
        ArrayList<Double> lowerLmt = new ArrayList<Double>();
        for (String bucketName : bucketNames) {
            bucketLst.add(bucketName);
        }
        for (String limit : bucketUpperLimits) {
            upperLmt.add(Double.parseDouble(limit));
        }
        for (String limit : bucketLowerLimits) {
            lowerLmt.add(Double.parseDouble(limit));
        }
        PbReportViewerBD reportViewerBd = new PbReportViewerBD();
        String dimension = container.getDisplayColumns().get(0);
        Segment segment = reportViewerBd.createDimensionSegment(SegmentType.MEASURE_BASED, "Dummy", dimension, measureId, segName);
        SegmentParameters segParams = new SegmentParameters(SegmentType.MEASURE_BASED);
        for (int index = 0; index < bucketLst.size(); index++) {
            SegmentBucket bucket = segParams.createBucketDefinition(bucketLst.get(index), lowerLmt.get(index), upperLmt.get(index));
            segment.addSegmentBucket(bucket);
        }
        reportViewerBd.addDimensionSegmentToContainer(container, segment);
        return null;
    }

    public ActionForward createSegmentByValue(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
//        HashMap map = null;
//        HashMap ParameterGroupAnalysisHashMap = null;
        Container container = null;
        HttpSession session = request.getSession(false);
        String dimEleId = request.getParameter("viewbyId");
        String REPORTID = request.getParameter("REPORTID");
        String segParmVal = request.getParameter("segParmVal");
//        added by Nazneen
        String elementId = request.getParameter("elementId");
        String isDimSeg = request.getParameter("isDimSeg");
        container = Container.getContainerFromSession(request, REPORTID);
        if (container == null) {
            return mapping.findForward("sessionExpired");
        }
        HashMap groupvals = new HashMap();
        ArrayList<String> childValues = new ArrayList<String>();
        String modifiedDimEleId = "A_" + dimEleId;
        if (session != null) {
            try {
                int tabRowCount = Integer.parseInt(request.getParameter("tabRowCount"));
//                String groupName = request.getParameter("grpName").trim();
//                //groupName = groupName.replace(" ", "_");
//                groupName = groupName.replace("#", "_");
//                groupName = groupName.replace("&", "_");
//                groupName = groupName.replace("!", "_");
//                groupName = groupName.replace("@", "_");
//                groupName = groupName.replace("(", "_");
//                groupName = groupName.replace(")", "_");
//                groupName = groupName.replace("[", "_");
//                groupName = groupName.replace("]", "_");
//                groupName = groupName.replace("{", "_");
//                groupName = groupName.replace("}", "_");
//                String groupNameori = groupName;
//                //groupName = groupName.toUpperCase();
//                String groupDesc = request.getParameter("grpDesc");
                // String dbNewColId = "";
                String parent[] = new String[tabRowCount];
                String child[] = new String[tabRowCount];
                String gParent[] = new String[tabRowCount];
                for (int i = 0; i < tabRowCount; i++) {
                    parent[i] = request.getParameter("parent[" + i + "]");
                    child[i] = request.getParameter("keyValue[" + i + "]").replaceAll("&gt;", ">").replaceAll("&lt;", "<");
                }
                ArrayList<String> bucketNameLst = new ArrayList<String>();
                ArrayList<String> LmtList = new ArrayList<String>();
                for (String bucketName : parent) {
                    bucketNameLst.add(bucketName);
                }
                for (String limit : child) {
                    LmtList.add(limit);
                }
//                modified by Nazneen on Feb14 for Dimension Segment(Grouping)
                if (isDimSeg != null && elementId != null && !isDimSeg.equalsIgnoreCase("null") && !elementId.equalsIgnoreCase("null") && !isDimSeg.equalsIgnoreCase("") && !elementId.equalsIgnoreCase("")) {
                    if (isDimSeg.equalsIgnoreCase("false")) {
                        PbReportViewerBD reportViewerBd = new PbReportViewerBD();
                        Segment segment = reportViewerBd.createDimensionSegment(SegmentType.VALUE_BASED, "Dummy", modifiedDimEleId, "", segParmVal);
                        SegmentParameters segParams = new SegmentParameters(SegmentType.VALUE_BASED);
                        List<String> bucketMembers;
                        for (int index = 0; index < bucketNameLst.size(); index++) {
                            String members = LmtList.get(index);
                            bucketMembers = Arrays.asList(members.split(";"));
                            SegmentBucket bucket = segParams.createBucketDefinition(bucketNameLst.get(index), bucketMembers);
                            segment.addSegmentBucket(bucket);
                        }
                        reportViewerBd.addDimensionSegmentToContainer(container, segment);
                        //reportViewerBd.addSegmentationByValueToDimension(container, REPORTID, bucketNameLst, LmtList);
                    } //                start of code by Nazneen on Feb14 for Dimension Segment From Viewer(Grouping)
                    else if (isDimSeg.equalsIgnoreCase("true")) {
                        PbReportViewerDAO reportViewerDAO = new PbReportViewerDAO();
                        boolean flag = false;
                        flag = reportViewerDAO.createDimensionSegmentForViewer(REPORTID, elementId, segParmVal, parent, child, session);
//                         reportViewerDAO.readFormulaFromFile("123",session);
                        PrintWriter out;
                        try {
                            out = response.getWriter();
                            out.print(flag);
                        } catch (IOException ex) {
                            logger.error("Cannot find Print writer: ", ex);
                        }
                    } else {
                        return null;
                    }
                } else {
                    return null;
                }
//              end of code by Nazneen on Feb14 for Dimension Segment(Grouping)
            } catch (NumberFormatException ex) {
                logger.error("Exception: ", ex);
            }
        }
        return null;
    }

    public ActionForward getMeasureSegmentDialog(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        Container container = null;
        PrintWriter out = response.getWriter();
        PbReportViewerBD repViewerBd = new PbReportViewerBD();
        String reportId = request.getParameter("reportId");
        String disColumnName = request.getParameter("disColumnName");
        String measure = request.getParameter("measure");
        container = Container.getContainerFromSession(request, reportId);
        String st = repViewerBd.getDimSegDefinitionDialogJSON(reportId, measure, container);
        out.print(st);
        return null;
    }

    public ActionForward getValueSegmentDialog(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        Container container = null;
        String reportId = request.getParameter("reportId");
        PrintWriter out = response.getWriter();
        container = Container.getContainerFromSession(request, reportId);
        PbReportViewerBD repViewerBd = new PbReportViewerBD();
        String st = repViewerBd.getValueDimSegDefinitionDialogJSON(reportId, container);
        out.print(st);
        return null;
    }

    public ActionForward getSegmentValues(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        Container container = null;
        StringBuilder segmentDialog = new StringBuilder();
        PrintWriter out = response.getWriter();
        String reportId = request.getParameter("reportId");
        container = Container.getContainerFromSession(request, reportId);
        Segment segment = null;
        String dimension = container.getDisplayColumns().get(1);//pass dimension as argument?
        segment = container.getDimensionSegment(dimension);
        //Segment segment = dimensionSegment.getSegment();
        // String segmentDialog = dimensionSegment.getSegmentDefinitionJSON(segment, container);
        if (segment instanceof MeasureBasedSegment) {
            String measureId = ((MeasureBasedSegment) segment).getMeasureElementId();
            String measurename = "";
            ArrayList measureIdsList = container.getTableDisplayMeasures();
            ArrayList measurenamesList = container.getReportMeasureNames();
            for (int i = 0; i < measureIdsList.size(); i++) {
                if (measureId.equals(measureIdsList.get(i))) {
                    measurename = measurenamesList.get(i).toString();
                }
            }
            segmentDialog.append("{" + "\"segmentMeasureId\"" + ":").append("\"" + measureId + "\"").append("," + "\"segmentMeasureName\"" + ":").append("\"" + measurename + "\"").append(",").append("\"SegmentType\"").append(":").append("\"MeasureBasedSegment\"").append("}");
        } else {
            String dimensionId = ((ValueBasedSegment) segment).getDimension();//.getDimensionElementId();
            String dimElemtId = dimensionId.substring(2);
            String dimensionName = "";
            ArrayList ViewByIds = container.getViewByElementIds();
            ArrayList viewByColNames = container.getViewByColNames();
            for (int i = 0; i < ViewByIds.size(); i++) {
                if (dimElemtId.equals(ViewByIds.get(i))) {
                    dimensionName = viewByColNames.get(i).toString();
                }
            }
            segmentDialog.append("{" + "\"segmentDimensionId\"" + ":").append("\"" + dimElemtId + "\"").append("," + "\"segmentDimensionName\"" + ":").append("\"" + dimensionName + "\"").append(",").append("\"SegmentType\"").append(":").append("\"ValueBasedSegment\"").append("}");
        }
        out.print(segmentDialog.toString());
        return null;
    }
//modified by Dinanath as on 29mar16
    public ActionForward getColorRulesForMeasure(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        String columnName = request.getParameter("colmnname");
        String disColumnName = request.getParameter("dispcolmname");
        String reportid = request.getParameter("reportid");
        HashMap map = (HashMap) session.getAttribute("PROGENTABLES");
        Container container = (Container) map.get(reportid);
        ReportParameter repParam = container.getReportParameter();
        PrintWriter out = response.getWriter();
        String crossTabMeasureId = "";
        ColorGroup colorGroup = container.getColorGroup();
        if (container.isReportCrosstab()) {
            int originalMeasIndex = this.findMeasureIndexInCT(container, columnName.replace("A_",""));
            originalMeasIndex = originalMeasIndex - (container.getViewByCount());
            ArrayList measureList = container.getTableDisplayMeasures();
            if (originalMeasIndex == -1) {
                crossTabMeasureId = container.getDisplayColumns().get(0);
            } else {
                crossTabMeasureId = (String) measureList.get(originalMeasIndex);
            }
        }
        String ColorCodeViewby = "";
        if (!container.getColorGroup().getViewByColumnValues().isEmpty()) {
            ColorCodeViewby = container.getColorGroup().getViewByColumnValues().toString();
        }
        ArrayList<String> a1 = container.getReportCollect().reportRowViewbyValues;
        StringBuffer ViewbyColumnBf = new StringBuffer();
        for (int c = 0; c < a1.size(); c++) {
            ViewbyColumnBf.append(a1.get(c));
        }
        String ViewbyColumn = ViewbyColumnBf.toString();
        String colorData = "";
        if ((container.isReportCrosstab()) && (colorGroup.isIsAvgBased() || colorGroup.isMinMaxBased())) {
            String actualMsrs = ((PbReturnObject) container.getRetObj()).crosstabMeasureId.get(columnName.replace("A_",""));
            if (!colorGroup.isMinMaxBased()) {
                if(Container.isColorAppyForAllParameters()) //By Ram for apply color for all parameter.
                    colorData = colorGroup.getColorRuleJSON(columnName, repParam, crossTabMeasureId);
                else
                colorData = colorGroup.getColorRuleJSON(actualMsrs, repParam, crossTabMeasureId, ViewbyColumn);
            } else {

                ColorCode clrcode1 = new ColorCode(actualMsrs, repParam, crossTabMeasureId);
                colorData = clrcode1.getMinMaxColorCodeJSON();
            }
        } else {
            if(Container.isColorAppyForAllParameters())    //By Ram for apply color for all parameter.
            colorData = colorGroup.getColorRuleJSON(columnName, repParam, crossTabMeasureId);
            else
            colorData = colorGroup.getColorRuleJSON(columnName, repParam, crossTabMeasureId, ViewbyColumn);
        }
        out.print(colorData);
        return null;
    }

    public ActionForward changeTableDisplayStyle(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        String reportid = request.getParameter("reportid");
        HashMap map = (HashMap) session.getAttribute("PROGENTABLES");
        Container container = (Container) map.get(reportid);
        PrintWriter out = null;
        try {
            out = response.getWriter();
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        if (container != null) {
            if (ContainerConstants.PROGEN_TABLE_DISPLAY.equalsIgnoreCase(container.getTableDisplayMode())) {
                container.setTableDisplayMode(ContainerConstants.EXCEL_DISPLAY);
            } else {
                container.setTableDisplayMode(ContainerConstants.PROGEN_TABLE_DISPLAY);
            }
            out.print("Success");
        }
        return null;
    }

    public ActionForward changeTheme(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        String theme = request.getParameter("theme");
        session.setAttribute("theme", theme);
        return null;
    }

    public ActionForward findDuplicate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        PrintWriter out = null;
        String reportId = request.getParameter("reportId");
        String dimId = request.getParameter("elementId");
        try {
            Container container = Container.getContainerFromSession(request, reportId);
            PbReportViewerBD repViewBd = new PbReportViewerBD();
            out = response.getWriter();
            boolean duplicateExists = repViewBd.filterDuplicatesOnlyForDimension(container, dimId);
            if (duplicateExists) {
                out.print("success");
            } else {
                out.print("fail");
            }
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward getMeasuresInContainer(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
        Container container = null;
        PrintWriter out = response.getWriter();
        String ReportId = request.getParameter("reportId");
        container = Container.getContainerFromSession(request, ReportId);
        StringBuilder jsonMeasure = new StringBuilder();
        StringBuilder MeasureIdsSB = new StringBuilder();
        StringBuilder MeasureNamesSB = new StringBuilder();
        StringBuilder MeasIndexSB = new StringBuilder();
        String rtMeasures = request.getParameter("addRTMeasures");
        boolean addRTMeasures = true;
        if (rtMeasures != null && "N".equalsIgnoreCase(rtMeasures)) {
            addRTMeasures = false;
        }
        ArrayList<String> MeasureIds = container.getTableDisplayMeasures();
        ArrayList<String> MeasureNames = container.getReportMeasureNames();
        jsonMeasure.append("{");
        for (int i = 0; i < MeasureIds.size(); i++) {
            String measId = MeasureIds.get(i);
            if (RTMeasureElement.isRunTimeMeasure(measId) && !addRTMeasures) {
                continue;
            }
            MeasureIdsSB.append("," + "\"").append(MeasureIds.get(i)).append("\"");
            MeasureNamesSB.append("," + "\"").append(MeasureNames.get(i)).append("\"");
            MeasIndexSB.append(",").append(i);
        }
        MeasureIdsSB.replace(0, 1, "");
        jsonMeasure.append("\"Measures\":[").append(MeasureIdsSB.toString()).append("]");
        jsonMeasure.append(",");
        MeasureNamesSB.replace(0, 1, "");
        jsonMeasure.append("\"MeasureNames\":[" + MeasureNamesSB.toString() + "]");
        jsonMeasure.append(",");
        MeasIndexSB.replace(0, 1, "");
        jsonMeasure.append("\"MeasureIndex\":[" + MeasIndexSB.toString() + "]");
        jsonMeasure.append("}");
        out.print(jsonMeasure);
        return null;

    }

    public ActionForward isNewTargetMeasure(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
        PrintWriter out = response.getWriter();
        String elementId = request.getParameter("elementId");
        String reportId = request.getParameter("reportId");
        String targetElementId = elementId + RTMeasureElement.EXCELTARGETCOLUMN.getColumnType();
        Container container = null;
        container = Container.getContainerFromSession(request, reportId);
        if (container.getDisplayColumns().contains(targetElementId)) {
            out.println("N");
        }
        return null;
    }

    public ActionForward getCorrelation(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        String mainMeasure = request.getParameter("columnName");
        String reportId = request.getParameter("reportId");
        String correlationMeasure = request.getParameter("correlationColName");
        PrintWriter out;
        try {
            out = response.getWriter();
            Container container = Container.getContainerFromSession(request, reportId);
            DataFacade facade = new DataFacade(container);
            ArrayList<BigDecimal> correlationData1 = facade.retrieveMeasureData(mainMeasure);
            ArrayList<BigDecimal> correlationData2 = facade.retrieveMeasureData(correlationMeasure);
            double correlationValue = StatUtil.STAT_HELPER.Correlation(correlationData1, correlationData2);
            out.print(correlationValue);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward getFormulaForMeasure(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        String elementId = request.getParameter("elementId");
        String prePostVal = "pre";
        StringBuilder formulaData = new StringBuilder();
        PbReportViewerDAO viewerDAO = new PbReportViewerDAO();
        String formulaString = viewerDAO.getFormulaForMeasure(elementId);
        String[] formulaVal = formulaString.split(",,");
        String formula = formulaVal[0];
        String bussColName = formulaVal[1];
        String aggType = formulaVal[2];
        String actualColFormula = formulaVal[3];
        String userColType = formulaVal[4];
        String prePost = formulaVal[5];
        int sumCount = 0;
        int avgCount = 0;
        int minCount = 0;
        int maxCount = 0;
        int countCount = 0;
        int countDistCount = 0;
        String[] sumC = actualColFormula.split("SUM");
        String[] avgC = actualColFormula.split("AVG");
        String[] minC = actualColFormula.split("MIN");
        String[] maxC = actualColFormula.split("MAX");
        String[] countC = actualColFormula.split("COUNT");
        String[] countDisC = actualColFormula.split("COUNTDISTINCT");
        sumCount = sumC.length;
        avgCount = avgC.length;
        minCount = minC.length;
        maxCount = maxC.length;
        countCount = countC.length;
        countDistCount = countDisC.length;
        int totalCount = sumCount + avgCount + minCount + maxCount + countCount + countDistCount;
        if (totalCount > 7) {
            prePostVal = "post";
        }
        //added by nazneen
        prePostVal = "post";
        if (prePost.equalsIgnoreCase("Y")) {
            prePostVal = "pre";
        }
//        if (formula.indexOf("SUM(") >= 0 || formula.indexOf("COUNT(") >= 0 || formula.indexOf("COUNTDISTINCT(") >= 0 || formula.indexOf("AVG(") >= 0 || formula.indexOf("MIN(") >= 0 || formula.indexOf("MAX(") >= 0 ) {
//        }
        String ctxPath = request.getContextPath();
        formulaData.append(formula).append(",").append(ctxPath).append(",").append(bussColName).append(",").append(aggType).append(",").append(prePostVal).append(",").append(userColType);
        PrintWriter out = null;
        try {
            out = response.getWriter();
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        out.print(formulaData);
        return null;
    }

    public ActionForward portletGraphColumnChanges(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        HashMap map = null;
        Container container = null;
        HashMap GraphHashMap = null;
        HashMap singleGraphDetails = null;
        String grpId = null;
        String grpIds = null;
        String REPORTID = null;
        String graphChange = null;
        // added by santhosh.kumar@progenbusiness.com on 01/12/2009 for changing graph columns at run time
        String grpColumns = null;
        String leftgrpColumns = null;
        String rightgrpColumns = null;
        ArrayList reportQryElementIds = null;
        ArrayList reportQryAggregations = null;
        ArrayList reportQryColNames = null;
        HashMap ReportHashMap = null;
        String[] grpColumnsArray = null;
        String[] pieChartColumns = null;
        String[] barChartColumnNames = null;
        String[] barChartColumnTitles = null;
        String[] viewByElementIds = null;
        String[] viewByNames = null;
        String[] PrevpieChartColumns = null;
        String[] PrevbarChartColumnNames = null;
        String[] PrevbarChartColumnTitles = null;
        String[] PrevviewByElementIds = null;
        String[] PrevviewByNames = null;
        HashMap DisplayNamesMap = null;
        ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
        //variables defined for the purpose of changing  dual axis graph columns
        String[] axis = null;
        String[] barChartColumnNames1 = null;
        String[] barChartColumnTitles1 = null;
        String[] barChartColumnNames2 = null;
        String[] barChartColumnTitles2 = null;
        String[] leftgraphCols = null;
        String[] rightgraphCols = null;
        if (session != null) {
            if (session.getAttribute("PROGENTABLES") != null) {
                map = (HashMap) session.getAttribute("PROGENTABLES");
                grpId = request.getParameter("gid");
                grpIds = request.getParameter("grpIds");
                REPORTID = request.getParameter("REPORTID");
                graphChange = request.getParameter("graphChange");
                grpColumns = request.getParameter("grpColumns");
                leftgrpColumns = request.getParameter("leftColumns");
                rightgrpColumns = request.getParameter("rightColumns");
                container = (Container) map.get(REPORTID);
                GraphHashMap = container.getGraphHashMap();
                ReportHashMap = container.getReportHashMap();
                ArrayList originalColumns = container.getOriginalColumns();
                LinkedHashMap grphMeasMap;
                try {
                    if (GraphHashMap != null && ReportHashMap != null && graphChange != null && grpId != null) {
                        reportQryElementIds = (ArrayList) ReportHashMap.get("reportQryElementIds");
                        reportQryAggregations = (ArrayList) ReportHashMap.get("reportQryAggregations");

                        if (graphChange.equalsIgnoreCase("GrpColumns") && grpColumns != null) {
                            grpColumnsArray = grpColumns.split(",");
                            if (reportQryElementIds != null) {
                                for (int i = 0; i < grpColumnsArray.length; i++) {
                                    if (!reportQryElementIds.contains(grpColumnsArray[i])) {
                                        reportQryElementIds.add(grpColumnsArray[i]);
                                        originalColumns.add("A_" + grpColumnsArray[i]);
                                    }
                                }
                            } else {
                                reportQryElementIds = new ArrayList();
                                originalColumns = new ArrayList();
                                for (int i = 0; i < grpColumnsArray.length; i++) {
                                    reportQryElementIds.add(grpColumnsArray[i]);
                                    originalColumns.add("A_" + grpColumnsArray[i]);
                                }
                            }
                            container.setOriginalColumns(originalColumns);
                            reportQryAggregations = reportTemplateDAO.getReportQryAggregations(reportQryElementIds);
                            reportQryColNames = reportTemplateDAO.getReportQryColNames();
                            ReportHashMap.put("reportQryElementIds", reportQryElementIds);
                            ReportHashMap.put("reportQryAggregations", reportQryAggregations);
                            ReportHashMap.put("reportQryColNames", reportQryColNames);
                            DisplayNamesMap = (HashMap) ReportHashMap.get("DisplayNamesMap");
                            if (DisplayNamesMap == null) {
                                DisplayNamesMap = new HashMap();
                            }
                            for (int k = 0; k < reportQryElementIds.size(); k++) {
                                if (DisplayNamesMap.get(String.valueOf(reportQryElementIds.get(k))) == null) {
                                    DisplayNamesMap.put(String.valueOf(reportQryElementIds.get(k)), String.valueOf(reportQryColNames.get(k)));
                                }
                            }
                            singleGraphDetails = (HashMap) GraphHashMap.get(grpId);
                            if (singleGraphDetails != null) {
                                PrevbarChartColumnNames = (String[]) singleGraphDetails.get("barChartColumnNames");
                                PrevbarChartColumnTitles = (String[]) singleGraphDetails.get("barChartColumnTitles");
                                PrevviewByElementIds = (String[]) singleGraphDetails.get("viewByElementIds");
                                PrevviewByNames = (String[]) singleGraphDetails.get("viewByNames");
                                PrevpieChartColumns = (String[]) singleGraphDetails.get("pieChartColumns");
                                viewByElementIds = PrevviewByElementIds;
                                viewByNames = PrevviewByNames;
                                barChartColumnNames = new String[viewByElementIds.length + grpColumnsArray.length];
                                barChartColumnTitles = new String[viewByElementIds.length + grpColumnsArray.length];
                                grphMeasMap = (LinkedHashMap) singleGraphDetails.get("graphMeasures");
                                grphMeasMap = new LinkedHashMap<String, String>();
                                for (int i = 0; i < viewByElementIds.length; i++) {
                                    barChartColumnNames[i] = viewByElementIds[i];
                                    barChartColumnTitles[i] = viewByNames[i];
                                }
                                for (int j = viewByElementIds.length; j < barChartColumnNames.length; j++) {
                                    barChartColumnNames[j] = "A_" + grpColumnsArray[j - viewByElementIds.length];
                                    if (DisplayNamesMap.get(grpColumnsArray[j - viewByElementIds.length]) != null) {
                                        barChartColumnTitles[j] = String.valueOf(DisplayNamesMap.get(grpColumnsArray[j - viewByElementIds.length]));
                                    } else {
                                        barChartColumnTitles[j] = "A_" + grpColumnsArray[j - viewByElementIds.length];
                                    }
                                    grphMeasMap.put("A_" + grpColumnsArray[j - viewByElementIds.length], barChartColumnTitles[j]);
                                }
                                pieChartColumns = barChartColumnNames;
                                singleGraphDetails.put("barChartColumnNames", barChartColumnNames);
                                singleGraphDetails.put("barChartColumnTitles", barChartColumnTitles);
                                singleGraphDetails.put("pieChartColumns", pieChartColumns);
                                singleGraphDetails.put("graphMeasures", grphMeasMap);
                            }
                        } else if (graphChange.equalsIgnoreCase("changeDualAxisColumns") && grpColumns != null && leftgrpColumns != null && rightgrpColumns != null) {
                            grpColumnsArray = grpColumns.split(",");
                            leftgraphCols = leftgrpColumns.split(",");
                            rightgraphCols = rightgrpColumns.split(",");
                            for (int i = 0; i < grpColumnsArray.length; i++) {
                                if (!reportQryElementIds.contains(grpColumnsArray[i])) {
                                    reportQryElementIds.add(grpColumnsArray[i]);
                                    originalColumns.add("A_" + grpColumnsArray[i]);
                                }
                            }
                            container.setOriginalColumns(originalColumns);
                            reportQryAggregations = reportTemplateDAO.getReportQryAggregations(reportQryElementIds);
                            reportQryColNames = reportTemplateDAO.getReportQryColNames();
                            ReportHashMap.put("reportQryElementIds", reportQryElementIds);
                            ReportHashMap.put("reportQryAggregations", reportQryAggregations);
                            ReportHashMap.put("reportQryColNames", reportQryColNames);
                            DisplayNamesMap = (HashMap) ReportHashMap.get("DisplayNamesMap");
                            if (DisplayNamesMap == null) {
                                DisplayNamesMap = new HashMap();
                            }
                            for (int k = 0; k < reportQryElementIds.size(); k++) {
                                if (DisplayNamesMap.get(String.valueOf(reportQryElementIds.get(k))) == null) {
                                    DisplayNamesMap.put(String.valueOf(reportQryElementIds.get(k)), String.valueOf(reportQryColNames.get(k)));
                                }
                            }
                            singleGraphDetails = (HashMap) GraphHashMap.get(grpId);
                            if (singleGraphDetails != null) {
                                PrevbarChartColumnNames = (String[]) singleGraphDetails.get("barChartColumnNames");
                                PrevbarChartColumnTitles = (String[]) singleGraphDetails.get("barChartColumnTitles");
                                PrevviewByElementIds = (String[]) singleGraphDetails.get("viewByElementIds");
                                PrevpieChartColumns = (String[]) singleGraphDetails.get("pieChartColumns");
                                grphMeasMap = (LinkedHashMap) singleGraphDetails.get("graphMeasures");
                                grphMeasMap = new LinkedHashMap<String, String>();
                                viewByElementIds = PrevviewByElementIds;
                                barChartColumnNames = new String[viewByElementIds.length + leftgraphCols.length + rightgraphCols.length];
                                pieChartColumns = new String[barChartColumnNames.length];
                                barChartColumnTitles = new String[barChartColumnNames.length];
                                axis = new String[barChartColumnNames.length];
                                barChartColumnNames1 = new String[viewByElementIds.length + leftgraphCols.length];
                                barChartColumnTitles1 = new String[barChartColumnNames1.length];
                                barChartColumnNames2 = new String[viewByElementIds.length + rightgraphCols.length];
                                barChartColumnTitles2 = new String[barChartColumnNames2.length];
                                for (int i = 0; i < viewByElementIds.length; i++) {
                                    barChartColumnNames[i] = viewByElementIds[i];
                                    barChartColumnTitles[i] = PrevbarChartColumnTitles[i];
                                    axis[i] = "0";
                                    barChartColumnNames1[i] = viewByElementIds[i];
                                    barChartColumnNames2[i] = viewByElementIds[i];
                                    barChartColumnTitles1[i] = PrevbarChartColumnTitles[i];
                                    barChartColumnTitles2[i] = PrevbarChartColumnTitles[i];
                                }
                                for (int i = viewByElementIds.length; i < (barChartColumnNames1.length); i++) {
                                    barChartColumnNames[i] = "A_" + leftgraphCols[i - viewByElementIds.length];
                                    if (DisplayNamesMap.get(leftgraphCols[i - viewByElementIds.length]) != null) {
                                        barChartColumnTitles[i] = String.valueOf(DisplayNamesMap.get(leftgraphCols[i - viewByElementIds.length]));
                                    } else {
                                        barChartColumnTitles[i] = "A_" + leftgraphCols[i - viewByElementIds.length];
                                    }
                                    axis[i] = "0";
                                    barChartColumnNames1[i] = barChartColumnNames[i];
                                    barChartColumnTitles1[i] = barChartColumnTitles[i];
                                    grphMeasMap.put("A_" + leftgraphCols[i - viewByElementIds.length], barChartColumnTitles[i]);
                                }
                                for (int i = barChartColumnNames1.length; i < (barChartColumnNames.length); i++) {
                                    barChartColumnNames[i] = "A_" + rightgraphCols[i - barChartColumnNames1.length];
                                    if (DisplayNamesMap.get(rightgraphCols[i - barChartColumnNames1.length]) != null) {
                                        barChartColumnTitles[i] = String.valueOf(DisplayNamesMap.get(rightgraphCols[i - barChartColumnNames1.length]));
                                    } else {
                                        barChartColumnTitles[i] = "A_" + rightgraphCols[i - barChartColumnNames1.length];
                                    }
                                    axis[i] = "1";
                                    barChartColumnNames2[i - barChartColumnNames1.length + viewByElementIds.length] = barChartColumnNames[i];
                                    barChartColumnTitles2[i - barChartColumnNames1.length + viewByElementIds.length] = barChartColumnTitles[i];
                                    grphMeasMap.put("A_" + rightgraphCols[i - barChartColumnNames1.length], barChartColumnTitles[i]);
                                }
                                pieChartColumns = barChartColumnNames;
                                singleGraphDetails.put("barChartColumnNames", barChartColumnNames);
                                singleGraphDetails.put("barChartColumnTitles", barChartColumnTitles);
                                singleGraphDetails.put("pieChartColumns", pieChartColumns);
                                singleGraphDetails.put("axis", axis);
                                singleGraphDetails.put("barChartColumnNames1", barChartColumnNames1);
                                singleGraphDetails.put("barChartColumnTitles1", barChartColumnTitles1);
                                singleGraphDetails.put("barChartColumnNames2", barChartColumnNames2);
                                singleGraphDetails.put("barChartColumnTitles2", barChartColumnTitles2);
                                singleGraphDetails.put("graphMeasures", grphMeasMap);
                            }
                        }
                    } else {
                    }
                } catch (Exception exp) {
                    logger.error("Exception: ", exp);
                }
            }
            return null;
            //return mapping.findForward("graphDisplay");
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    public ActionForward getRefferedElementsofMeasure(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        PrintWriter out = null;
        try {
            HttpSession session = request.getSession(false);
            session.setAttribute("from", "viewer");
            String reportId = request.getParameter("reportId");
            out = response.getWriter();
            String measElementId = request.getParameter("elementId");
            PbReportViewerDAO reportDAO = new PbReportViewerDAO();
            Container container = null;
            container = Container.getContainerFromSession(request, reportId);
            PbReturnObject retObj = reportDAO.getReferredElementsofMeasure(measElementId);
            String refferedElementsString = retObj.getFieldValueString(0, "REFFERED_ELEMENTS");
            if (refferedElementsString.equalsIgnoreCase("")) {
                out.print("empty");
            } else {
                String[] referredElemtIds = refferedElementsString.split(",");
                ArrayList<String> referredElemtsLabel = new ArrayList<String>();
                StringBuilder json = new StringBuilder();
                StringBuilder measureIds = new StringBuilder();
                StringBuilder measureLabels = new StringBuilder();
                ReportTemplateDAO rptDao = new ReportTemplateDAO();
                json.append("{").append("MeasureIds:[");
                for (String ElementId : referredElemtIds) {
                    if (container.getMeasureName(ElementId) == null) {
                        Map<String, String> elementNameMap = rptDao.getElementsNames(ElementId);
                        referredElemtsLabel.add(elementNameMap.get(ElementId));
                    } else {
                        referredElemtsLabel.add(container.getMeasureName(ElementId));
                    }
                }
                for (int i = 0; i < referredElemtIds.length; i++) {
                    measureIds.append(",\"").append(referredElemtIds[i]).append("\"");
                    measureLabels.append(",\"").append(referredElemtsLabel.get(i)).append("\"");
                }
                measureIds.replace(0, 1, "");
                measureLabels.replace(0, 1, "");
                json.append(measureIds).append("],");
                json.append("MeasureLabels:[");
                json.append(measureLabels).append("]").append("}");
                out.println(json.toString());
            }
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        } finally {
            out.close();
        }
        return null;
    }

    public ActionForward resetColorRulesForMeasure(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
        HttpSession session = request.getSession(false);
        String columnName = request.getParameter("colmnname");
        String disColumnName = request.getParameter("dispcolmname");
        String reportid = request.getParameter("reportid");
        HashMap map = (HashMap) session.getAttribute("PROGENTABLES");
        Container container = (Container) map.get(reportid);
        ReportParameter repParam = container.getReportParameter();
        PrintWriter out = response.getWriter();
        String crossTabMeasureId = "";
        ColorGroup colorGroup = container.getColorGroup();
        if (container.isReportCrosstab()) {
            int originalMeasIndex = this.findMeasureIndexInCT(container, columnName);
            originalMeasIndex = originalMeasIndex - (container.getViewByCount());
            ArrayList measureList = container.getTableDisplayMeasures();
            crossTabMeasureId = (String) measureList.get(originalMeasIndex);
        }
        if ((container.isReportCrosstab()) && (colorGroup.isIsAvgBased() || colorGroup.isMinMaxBased())) {
            String actualMsrs = ((PbReturnObject) container.getRetObj()).crosstabMeasureId.get(columnName);
            columnName = actualMsrs;

        }
        colorGroup.resetColorForMeasure(columnName, repParam, crossTabMeasureId);
        return null;
    }

    public ActionForward saveTimeBasedFormula(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        logger.info("Enter Method");
        PrintWriter out = null;
        try {
            out = response.getWriter();
            PbDb pbdb = new PbDb();
            String finalQuery = "";
            ArrayList list = new ArrayList();
            String elementId = "";
            String bussColId;
            String actual_col_formula = "";
            String disp_name = "";
            String table_disp_name = "";
            String table_tooltip_name = "";
            String ref_dim_tab_id = null;
            String ref_dim_element_id = null;
            String folderIds = request.getParameter("folderIds");
            String columnName = request.getParameter("columnName");
            String iscalculate = request.getParameter("iscalculate");
            String tArea = request.getParameter("tArea");
            String tArea1 = request.getParameter("tArea1");
            String aggType = request.getParameter("aggVal");
            boolean fromEdit = Boolean.parseBoolean(request.getParameter("fromEdit"));
            String measElementIdString = request.getParameter("elementId");
            int measElementId = 0;
            if (measElementIdString != "") {
                measElementId = Integer.parseInt(request.getParameter("elementId"));
            }
            String dependentElementIds = tArea1;
            if (dependentElementIds.startsWith(",")) {
                dependentElementIds = dependentElementIds.substring(1);
            }
            int bussTableId = 0;
            int subFolderTabId = 0;
            String bussTableName = "";
            String reffered_elements = measElementIdString;
            String checkDistFactsQry = " SELECT distinct BUSS_TABLE_ID,SUB_FOLDER_TAB_ID FROM PRG_USER_SUB_FOLDER_ELEMENTS  where element_id in(" + dependentElementIds + ")";
            PbReturnObject checkDistFactsRO = pbdb.execSelectSQL(checkDistFactsQry);
            //Elements from a Single Fact
            if (!(checkDistFactsRO.getRowCount() > 1)) {
                String doubleExistQuery1 = " SELECT distinct BUSS_TABLE_ID,SUB_FOLDER_TAB_ID FROM PRG_USER_SUB_FOLDER_ELEMENTS  where element_id in(" + dependentElementIds + ") AND BUSS_TABLE_ID!=0";
                PbReturnObject doubleExistQuerypbro1 = pbdb.execSelectSQL(doubleExistQuery1);
                if (doubleExistQuerypbro1.getRowCount() > 0) {
                    String nameQuery = "";
                    String nameQuery1 = "";
                    String nameQuery2 = "";
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
//                        nameQuery = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID,BUSS_COL_NAME  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependentElementIds + ") order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
//                        nameQuery1 = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID,BUSS_COL_NAME   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependentElementIds + ") and user_col_type in('calculated','summarized','summarised') order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                        nameQuery = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID,BUSS_COL_NAME,DISP_NAME,isnull(isnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP_NAME,isnull(isnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP,REFFERED_ELEMENTS,ref_dim_tab_id,ref_dim_element_id  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependentElementIds + ") order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                        nameQuery1 = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID,BUSS_COL_NAME,DISP_NAME,isnull(isnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP_NAME,isnull(isnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP,REFFERED_ELEMENTS,ref_dim_tab_id,ref_dim_element_id   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependentElementIds + ") and user_col_type in('calculated','summarized','summarised') order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                        nameQuery2 = "select BUSS_COL_NAME from prg_user_all_info_details where element_id=" + dependentElementIds;
                    } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                        nameQuery = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID,BUSS_COL_NAME,DISP_NAME,ifnull(ifnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP_NAME,ifnull(ifnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP,REFFERED_ELEMENTS,ref_dim_tab_id,ref_dim_element_id  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependentElementIds + ") order by LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
                        nameQuery1 = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID,BUSS_COL_NAME,DISP_NAME,ifnull(ifnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP_NAME,ifnull(ifnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP,REFFERED_ELEMENTS,ref_dim_tab_id,ref_dim_element_id   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependentElementIds + ") and user_col_type in('calculated','summarized','summarised') order by LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
                        nameQuery2 = "select BUSS_COL_NAME from prg_user_all_info_details where element_id=" + dependentElementIds;
                    } else {
//                        nameQuery = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME),element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID,BUSS_COL_NAME   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependentElementIds + ") order by length(nvl(USER_COL_DESC, user_col_name)) desc";
//                        nameQuery1 = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME),element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID,BUSS_COL_NAME    FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependentElementIds + ") and user_col_type in('calculated','summarized','summarised') order by length(nvl(USER_COL_DESC, user_col_name)) desc";
                        nameQuery = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME),element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID,BUSS_COL_NAME,DISP_NAME,nvl(nvl(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP_NAME,nvl(nvl(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP,REFFERED_ELEMENTS,ref_dim_tab_id,ref_dim_element_id   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependentElementIds + ") order by length(nvl(USER_COL_DESC, user_col_name)) desc";
                        nameQuery1 = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME),element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID,BUSS_COL_NAME,DISP_NAME,nvl(nvl(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP_NAME,nvl(nvl(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP,REFFERED_ELEMENTS,ref_dim_tab_id,ref_dim_element_id    FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependentElementIds + ") and user_col_type in('calculated','summarized','summarised') order by length(nvl(USER_COL_DESC, user_col_name)) desc";
                        nameQuery2 = "select BUSS_COL_NAME from prg_user_all_info_details where element_id=" + dependentElementIds;
                    }
                    PbReturnObject pbro = pbdb.execSelectSQL(nameQuery);
                    PbReturnObject pbro1 = pbdb.execSelectSQL(nameQuery1);
                    PbReturnObject pbro2 = pbdb.execSelectSQL(nameQuery2);
                    String bussNamecolName = "";
                    String onlyColName = "";
                    String formulaold = "";
                    int count = 0;
                    int count1 = 0;
                    for (int n = 0; n < pbro.getRowCount(); n++) {
                        //buss_table_name.nvl(user_col_name.buss_col_name)
                        bussNamecolName = pbro.getFieldValueString(n, 0) + "." + pbro.getFieldValueString(n, 1);
                        //  onlyColName = String.valueOf(pbro.getFieldValueInt(n, 2));
                        onlyColName = pbro.getFieldValueString(n, 3);
                        bussNamecolName = bussNamecolName.toUpperCase();
                        onlyColName = onlyColName.toUpperCase();
                        bussColId = pbro.getFieldValueString(n, 9);
//                        if (!pbro.getFieldValueString(n, 4).equalsIgnoreCase("calculated")) {
//                            actual_col_formula = pbro.getFieldValueString(n, 0) + "." + pbro.getFieldValueString(n, "BUSS_COL_NAME");
//                        } else {
//                            actual_col_formula = pbro.getFieldValueString(n, 5);
//                        }
                        if (!pbro.getFieldValueString(n, 4).equalsIgnoreCase("calculated")) {
                            actual_col_formula = pbro.getFieldValueString(n, 0) + "." + pbro2.getFieldValueString(n, 0);

                        } else {
                            actual_col_formula = pbro.getFieldValueString(n, 5);
                            actual_col_formula = actual_col_formula.replace("'", "''");
                        }
                        bussTableId = checkDistFactsRO.getFieldValueInt(0, 0);
                        subFolderTabId = checkDistFactsRO.getFieldValueInt(0, 1);
                        bussTableName = pbro.getFieldValueString(0, 0);
                        disp_name = pbro.getFieldValueString(0, 12);
                        table_disp_name = pbro.getFieldValueString(0, 13);
                        table_tooltip_name = pbro.getFieldValueString(0, 14);
                        if (!(pbro.getFieldValueString(0, 15).equalsIgnoreCase("") || pbro.getFieldValueString(0, 15).equalsIgnoreCase("null") || pbro.getFieldValueString(0, 15) == null)) {
                            reffered_elements = reffered_elements + "," + pbro.getFieldValueString(0, 15);
                        }
//                        reffered_elements = dependentElementIds+","+pbro.getFieldValueString(0, 15);
                        if (!(pbro.getFieldValueString(0, 16).equalsIgnoreCase("") || pbro.getFieldValueString(0, 16).equalsIgnoreCase("null") || pbro.getFieldValueString(0, 16) == null)) {
                            ref_dim_tab_id = pbro.getFieldValueString(0, 16);
                        }
                        if (!(pbro.getFieldValueString(0, 17).equalsIgnoreCase("") || pbro.getFieldValueString(0, 17).equalsIgnoreCase("null") || pbro.getFieldValueString(0, 17) == null)) {
                            ref_dim_element_id = pbro.getFieldValueString(0, 17);
                        }
                    }
                }
            }
            String folderId = folderIds.split(",")[0];
            String folderdets = "select distinct GRP_ID, FOLDER_ID, FOLDER_NAME,CONNECTION_ID from PRG_USER_ALL_INFO_DETAILS where FOLDER_ID=" + folderId;
            // String folderdets = "select distinct GRP_ID, FOLDER_ID, FOLDER_NAME,CONNECTION_ID from PRG_USER_ALL_INFO_DETAILS where FOLDER_ID in( select distinct folder_id from prg_user_all_info_details where element_id in ("+dependenteleids+")";
            PbReturnObject pbrofolderdet = pbdb.execSelectSQL(folderdets);
            String folderName = pbrofolderdet.getFieldValueString(0, 2);
            String connectionId = pbrofolderdet.getFieldValueString(0, 3);
            String grpId = String.valueOf(pbrofolderdet.getFieldValueInt(0, 0));
            String existFolderQuery = "SELECT Distinct SUB_FOLDER_ID, SUB_FOLDER_NAME, SUB_FOLDER_TYPE FROM PRG_USER_FOLDER_DETAIL where folder_id =" + folderId + " and SUB_FOLDER_TYPE='Facts'";
            PbReturnObject pbroext = pbdb.execSelectSQL(existFolderQuery);
            int subfolderId = 0;
            String subFolderName = "";
            String subFolderType = "";
            if (fromEdit == false) {
                if (pbroext.getRowCount() > 0) {
                    subfolderId = pbroext.getFieldValueInt(0, 0);
                    subFolderName = pbroext.getFieldValueString(0, 1);
                    subFolderType = pbroext.getFieldValueString(0, 2);
                }
            }
            columnName = columnName.trim();
            columnName = columnName.replace("#", "_");
            columnName = columnName.replace("&", "_");
            columnName = columnName.replace("!", "_");
            columnName = columnName.replace("@", "_");
            columnName = columnName.replace("(", "_");
            columnName = columnName.replace(")", "_");
            columnName = columnName.replace("[", "_");
            columnName = columnName.replace("]", "_");
            columnName = columnName.replace("{", "_");
            columnName = columnName.replace("}", "_");
            columnName = columnName.replace(" ", "_");
            columnName = columnName.replace("-", "_");
            columnName = columnName.replace("+", "_");
            columnName = columnName.replace("*", "_");
            columnName = columnName.replace("/", "_");
            String columnNamesList[] = new String[4];
            columnNamesList[0] = columnName;
            columnNamesList[1] = "Prior_" + columnName;
            columnNamesList[2] = "Change_" + columnName;
            columnNamesList[3] = "Change%_" + columnName;
            String columnDescList[] = new String[4];
            columnDescList[0] = columnName.replace("_", " ");
            columnDescList[1] = "Prior " + columnName.replace("_", " ");
            columnDescList[2] = "Change " + columnName.replace("_", " ");
            columnDescList[3] = "Change% " + columnName.replace("_", " ");
            int len = 1;
            if (iscalculate.equalsIgnoreCase("Y")) {
                len = 4;
            }
            //if formula contains ' it should be replaced with ''
            //adding to subfolder element types
            String ref_elementId = "";
            if (!aggType.contains(",,")) {
                for (int k = 0; k < len; k++) {
                    String addSubFolderElements = getResourceBundle().getString("addSubFolderElements");
                    String elementIdQuery = "";
                    PbReturnObject pbrofolderelement = null;
                    if (fromEdit == true) {
                        String updateSubFolderElemnets = getResourceBundle().getString("updateSubFolderElements");
                        Object obj[] = new Object[8];
                        obj[0] = columnName;
                        obj[1] = "E_" + measElementId;
                        obj[2] = columnDescList[k];
                        obj[3] = "TIMECALUCULATED";
                        obj[5] = dependentElementIds;
                        obj[6] = actual_col_formula;
                        obj[7] = measElementId;
                        finalQuery = pbdb.buildQuery(updateSubFolderElemnets, obj);
                        list.add(finalQuery);
                    } else {
                        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                            //                     String elementIdQuery = "select PRG_USER_SUB_FLDR_ELEMENTS_SEQ.nextval from dual";
                            Object obj1[] = new Object[14];
                            //                    obj1[0] = elementId;
                            obj1[0] = subfolderId;
                            obj1[1] = bussTableId;
                            obj1[2] = "0";
                            obj1[3] = columnName;
                            obj1[4] = columnNamesList[k];
                            obj1[5] = columnDescList[k];
                            obj1[6] = "TIMECALUCULATED";
                            obj1[7] = subFolderTabId;
                            obj1[8] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            obj1[9] = "1";
                            obj1[10] = aggType;
                            obj1[11] = "Y";
                            obj1[12] = dependentElementIds;
                            obj1[13] = actual_col_formula;
                            finalQuery = pbdb.buildQuery(addSubFolderElements, obj1);
                            String updateQuery1 = "update PRG_USER_SUB_FOLDER_ELEMENTS set USER_COL_NAME='E_'+cast(IDENT_CURRENT('PRG_USER_SUB_FOLDER_ELEMENTS') as varchar(258)) where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            String updateQuery = "update PRG_USER_SUB_FOLDER_ELEMENTS set REF_ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS') where  ELEMENT_ID = ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            list.add(finalQuery);
                            list.add(updateQuery);
                            list.add(updateQuery1);
                        } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                            //                     String elementIdQuery = "select PRG_USER_SUB_FLDR_ELEMENTS_SEQ.nextval from dual";
//                        String queryId="select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1";
//                        pbrofolderelement = pbdb.execSelectSQL(queryId);
                            // String element_Id = String.valueOf(pbrofolderelement.getFieldValueInt(0, 0));
//                        int element_Id1 = pbrofolderelement.getFieldValueInt(0, 0);
//                        String element_Id = String.valueOf(element_Id1+1);
                            Object obj1[] = new Object[14];
                            //                    obj1[0] = elementId;
                            obj1[0] = subfolderId;
                            obj1[1] = bussTableId;
                            obj1[2] = "0";
                            obj1[3] = columnName;
                            obj1[4] = columnNamesList[k];
                            obj1[5] = columnDescList[k];
                            obj1[6] = "TIMECALUCULATED";
                            obj1[7] = subFolderTabId;
                            //obj1[8] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            obj1[8] = "select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1";
                            obj1[9] = "1";
                            obj1[10] = aggType;
                            obj1[11] = "Y";
                            obj1[12] = dependentElementIds;
                            obj1[13] = actual_col_formula;
                            finalQuery = pbdb.buildQuery(addSubFolderElements, obj1);
                            //String updateQuery1 = "update PRG_USER_SUB_FOLDER_ELEMENTS set USER_COL_NAME='E_'+cast(IDENT_CURRENT('PRG_USER_SUB_FOLDER_ELEMENTS') as varchar(258)) where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            //String updateQuery = "update PRG_USER_SUB_FOLDER_ELEMENTS set REF_ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS') where  ELEMENT_ID = ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            String updateQuery1 = "update PRG_USER_SUB_FOLDER_ELEMENTS set USER_COL_NAME=concat('E_',cast('select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1' as char)) where ELEMENT_ID='select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1'";
                            String updateQuery = "update PRG_USER_SUB_FOLDER_ELEMENTS set REF_ELEMENT_ID='select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1' where ELEMENT_ID='select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1'";
                            list.add(finalQuery);
                            list.add(updateQuery);
                            list.add(updateQuery1);
                        } else {
                            elementIdQuery = "select PRG_USER_SUB_FLDR_ELEMENTS_SEQ.nextval from dual";
                            pbrofolderelement = pbdb.execSelectSQL(elementIdQuery);
                            elementId = String.valueOf(pbrofolderelement.getFieldValueInt(0, 0));
                            if (k == 0) {
                                ref_elementId = elementId;
                            }
                            Object obj1[] = new Object[16];
                            obj1[0] = elementId;
                            obj1[1] = subfolderId;
                            obj1[2] = bussTableId;
                            obj1[3] = "0";
                            obj1[4] = columnName;
                            obj1[5] = "E_" + elementId;
                            obj1[6] = columnDescList[k];
                            obj1[7] = "TIMECALUCULATED";
                            obj1[8] = subFolderTabId;
                            obj1[9] = elementId;
                            obj1[10] = "1";
                            obj1[12] = "";
                            obj1[13] = "";
                            obj1[14] = dependentElementIds;
                            obj1[15] = actual_col_formula;
                            finalQuery = pbdb.buildQuery(addSubFolderElements, obj1);
                            list.add(finalQuery);
                        }
                    }
                    if (fromEdit == true) {
                        String updateUserAllInfoDets = getResourceBundle().getString("updateUserAllInfoDetails");
                        Object object[] = new Object[9];
                        object[0] = columnName;
                        object[1] = columnNamesList[k];
                        object[2] = "E_" + measElementId;
                        object[3] = "TIMECALUCULATED";
                        object[4] = aggType;
                        object[5] = actual_col_formula;
                        object[6] = dependentElementIds;
                        object[7] = actual_col_formula;
                        object[8] = measElementId;
                        finalQuery = pbdb.buildQuery(updateUserAllInfoDets, object);
                        list.add(finalQuery);
                    } else {
                        //adding to user all Info
                        String addUserAllInfoDets = getResourceBundle().getString("addUserAllInfoDets");
                        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                            Object obj2[] = new Object[33];
                            obj2[0] = grpId;
                            obj2[1] = folderId;
                            obj2[2] = folderName;
                            obj2[3] = subfolderId;
                            obj2[4] = subFolderName;//"Formula";
                            obj2[5] = subFolderType;//"Formula";
                            obj2[6] = subFolderTabId;
                            obj2[7] = "N";
                            obj2[8] = "Y";
                            obj2[9] = "N";
                            obj2[10] = "0";
                            obj2[11] = "0";
                            obj2[12] = "0";
                            obj2[13] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            obj2[14] = bussTableId;
                            obj2[15] = "0";
                            obj2[16] = columnName;
                            obj2[17] = columnNamesList[k];
                            obj2[18] = columnDescList[k];
                            obj2[19] = "TIMECALUCULATED";
                            obj2[20] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            obj2[21] = "1";
                            obj2[22] = "0";
                            obj2[23] = bussTableName;
                            obj2[24] = connectionId;
                            obj2[25] = aggType;
                            obj2[26] = actual_col_formula;
                            obj2[27] = dependentElementIds;
                            obj2[28] = actual_col_formula;
                            obj2[29] = "Y";
                            obj2[30] = disp_name;
                            obj2[31] = table_disp_name;
                            obj2[32] = table_tooltip_name;
                            finalQuery = pbdb.buildQuery(addUserAllInfoDets, obj2);
                            String updateQuery1 = "update PRG_USER_ALL_INFO_DETAILS set USER_COL_NAME='E_'+cast(IDENT_CURRENT('PRG_USER_SUB_FOLDER_ELEMENTS') as varchar(258)) where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            String updateQuery2 = "update PRG_USER_ALL_INFO_DETAILS set ref_dim_tab_id =" + ref_dim_tab_id + " where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            String updateQuery3 = "update PRG_USER_ALL_INFO_DETAILS set ref_dim_tab_id =" + ref_dim_element_id + " where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            list.add(finalQuery);
                            list.add(updateQuery1);
                            list.add(updateQuery2);
                            list.add(updateQuery3);
                        } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
//                        String queryId="select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1";
//                        pbrofolderelement = pbdb.execSelectSQL(queryId);
                            //String element_Id = String.valueOf(pbrofolderelement.getFieldValueInt(0, 0));
//                        int element_Id1 = pbrofolderelement.getFieldValueInt(0, 0);
//                        String element_Id = String.valueOf(element_Id1+1);
                            Object obj1[] = new Object[14];
                            Object obj2[] = new Object[33];
                            obj2[0] = grpId;
                            obj2[1] = folderId;
                            obj2[2] = folderName;
                            obj2[3] = subfolderId;
                            obj2[4] = subFolderName;//"Formula";
                            obj2[5] = subFolderType;//"Formula";
                            obj2[6] = subFolderTabId;
                            obj2[7] = "N";
                            obj2[8] = "Y";
                            obj2[9] = "N";
                            obj2[10] = "0";
                            obj2[11] = "0";
                            obj2[12] = "0";
                            //obj2[13] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            obj2[13] = "(select cast(LAST_INSERT_ID(ELEMENT_ID) as decimal) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1)";
                            obj2[14] = bussTableId;
                            obj2[15] = "0";
                            obj2[16] = columnName;
                            obj2[17] = columnNamesList[k];
                            obj2[18] = columnDescList[k];
                            obj2[19] = "TIMECALUCULATED";
                            //obj2[20] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            obj2[20] = "(select cast(LAST_INSERT_ID(ELEMENT_ID) as decimal) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1)";
                            obj2[21] = "1";
                            obj2[22] = "0";
                            obj2[23] = bussTableName;
                            obj2[24] = connectionId;
                            obj2[25] = aggType;
                            obj2[26] = actual_col_formula;
                            obj2[27] = dependentElementIds;
                            obj2[28] = actual_col_formula;
                            obj2[29] = "Y";
                            obj2[30] = disp_name;
                            obj2[31] = table_disp_name;
                            obj2[32] = table_tooltip_name;
                            finalQuery = pbdb.buildQuery(addUserAllInfoDets, obj2);
                            //String updateQuery1 = "update PRG_USER_ALL_INFO_DETAILS set USER_COL_NAME='E_'+cast(IDENT_CURRENT('PRG_USER_SUB_FOLDER_ELEMENTS') as varchar(258)) where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            //String updateQuery2 = "update PRG_USER_ALL_INFO_DETAILS set ref_dim_tab_id ="+ref_dim_tab_id+" where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            //String updateQuery3 = "update PRG_USER_ALL_INFO_DETAILS set ref_dim_tab_id ="+ref_dim_element_id+" where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            String updateQuery1 = "update PRG_USER_SUB_FOLDER_ELEMENTS set USER_COL_NAME=concat('E_',cast('select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1' as char)) where ELEMENT_ID='select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1'";
                            String updateQuery2 = "update PRG_USER_ALL_INFO_DETAILS set ref_dim_tab_id =" + ref_dim_tab_id + " where ELEMENT_ID='select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1' desc limit 1";
                            String updateQuery3 = "update PRG_USER_ALL_INFO_DETAILS set ref_dim_tab_id =" + ref_dim_element_id + " where ELEMENT_ID='select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1' desc limit 1";
                            list.add(finalQuery);
                            list.add(updateQuery1);
                            list.add(updateQuery2);
                            list.add(updateQuery3);
                        } else {
                            Object obj2[] = new Object[37];
                            obj2[0] = grpId;
                            obj2[1] = folderId;
                            obj2[2] = folderName;
                            obj2[3] = subfolderId;
                            obj2[4] = subFolderName;//"Formula";
                            obj2[5] = subFolderType;//"Formula";
                            obj2[6] = subFolderTabId;
                            obj2[7] = "N";
                            obj2[8] = "Y";
                            obj2[9] = "N";
                            obj2[10] = "";
                            obj2[11] = "0";
                            obj2[12] = "0";
                            obj2[13] = "0";
                            obj2[14] = "";
                            obj2[15] = elementId;
                            obj2[16] = bussTableId;
                            obj2[17] = "0";
                            obj2[18] = columnName;
                            obj2[19] = "E_" + elementId;
                            obj2[20] = columnDescList[k];
                            obj2[21] = "TIMECALUCULATED";
                            obj2[22] = ref_elementId;
                            obj2[23] = "1";
                            obj2[24] = "0";
                            obj2[25] = "";
                            obj2[26] = "";
                            obj2[27] = bussTableName;
                            obj2[28] = connectionId;
                            obj2[29] = aggType;
                            obj2[30] = actual_col_formula;
                            obj2[31] = dependentElementIds;
                            obj2[32] = actual_col_formula;
                            obj2[33] = table_disp_name;
                            obj2[34] = table_tooltip_name;
                            obj2[35] = ref_dim_tab_id;
                            obj2[36] = ref_dim_element_id;
                            finalQuery = pbdb.buildQuery(addUserAllInfoDets, obj2);
                            list.add(finalQuery);
                        }
                    }
                }
            } else if (aggType.contains(",,")) {
                String sep[] = aggType.split(",,");
                aggType = sep[0];
                String detail = sep[1];
                String a[] = detail.split(" ");
                int no = Integer.parseInt(a[0]);
                String trailPeriod = a[1];
                String userColDesc = columnName.replace("_", " ");
                for (int l = 1; l <= no; l++) {
                    String addSubFolderElements = getResourceBundle().getString("addSubFolderElements");
                    String elementIdQuery = "";
                    PbReturnObject pbrofolderelement = null;
                    if (fromEdit == true) {
                        String updateSubFolderElemnets = getResourceBundle().getString("updateSubFolderElements");
                        Object obj[] = new Object[8];
                        obj[0] = columnName;
                        obj[1] = "E_" + measElementId;
                        obj[2] = userColDesc + " (Prev " + trailPeriod + "-" + l + ")";
                        obj[3] = "TIMECALUCULATED";
                        obj[5] = dependentElementIds;
                        obj[6] = actual_col_formula;
                        obj[7] = measElementId;
                        finalQuery = pbdb.buildQuery(updateSubFolderElemnets, obj);
                        list.add(finalQuery);
                    } else {
                        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                            //                     String elementIdQuery = "select PRG_USER_SUB_FLDR_ELEMENTS_SEQ.nextval from dual";
                            Object obj1[] = new Object[14];
                            //                    obj1[0] = elementId;
                            obj1[0] = subfolderId;
                            obj1[1] = bussTableId;
                            obj1[2] = "0";
                            obj1[3] = columnName;
                            obj1[4] = userColDesc + " (Prev " + trailPeriod + "-" + l + ")";
                            obj1[5] = userColDesc + " (Prev " + trailPeriod + "-" + l + ")";
                            obj1[6] = "TIMECALUCULATED";
                            obj1[7] = subFolderTabId;
                            obj1[8] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            obj1[9] = "1";
                            obj1[10] = aggType + "" + l;
                            obj1[11] = "Y";
                            obj1[12] = dependentElementIds;
                            obj1[13] = actual_col_formula;
                            finalQuery = pbdb.buildQuery(addSubFolderElements, obj1);
                            String updateQuery1 = "update PRG_USER_SUB_FOLDER_ELEMENTS set USER_COL_NAME='E_'+cast(IDENT_CURRENT('PRG_USER_SUB_FOLDER_ELEMENTS') as varchar(258)) where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            String updateQuery = "update PRG_USER_SUB_FOLDER_ELEMENTS set REF_ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS') where  ELEMENT_ID = ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            list.add(finalQuery);
                            list.add(updateQuery);
                            list.add(updateQuery1);
                        } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                            //String elementIdQuery = "select PRG_USER_SUB_FLDR_ELEMENTS_SEQ.nextval from dual";
                            String queryId = "select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1";
                            pbrofolderelement = pbdb.execSelectSQL(queryId);
                            // String element_Id = String.valueOf(pbrofolderelement.getFieldValueInt(0, 0));
                            int element_Id1 = pbrofolderelement.getFieldValueInt(0, 0);
//                        String element_Id = String.valueOf(element_Id1+1);
                            Object obj1[] = new Object[14];
                            //obj1[0] = elementId;
                            obj1[0] = subfolderId;
                            obj1[1] = bussTableId;
                            obj1[2] = "0";
                            obj1[3] = columnName;
                            obj1[4] = userColDesc + " (Prev " + trailPeriod + "-" + l + ")";
                            obj1[5] = userColDesc + " (Prev " + trailPeriod + "-" + l + ")";
                            obj1[6] = "TIMECALUCULATED";
                            obj1[7] = subFolderTabId;
                            //obj1[8] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            // obj1[8] = "select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1";
                            obj1[8] = element_Id1 + 1;
                            obj1[9] = "1";
                            obj1[10] = aggType + "" + l;
                            obj1[11] = "Y";
                            obj1[12] = dependentElementIds;
                            obj1[13] = actual_col_formula;
                            finalQuery = pbdb.buildQuery(addSubFolderElements, obj1);
                            //String updateQuery1 = "update PRG_USER_SUB_FOLDER_ELEMENTS set USER_COL_NAME='E_'+cast(IDENT_CURRENT('PRG_USER_SUB_FOLDER_ELEMENTS') as varchar(258)) where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            String updateQuery1 = "update PRG_USER_SUB_FOLDER_ELEMENTS set USER_COL_NAME=concat('E_',cast('select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1' as char)) where ELEMENT_ID='select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1'";
                            //String updateQuery = "update PRG_USER_SUB_FOLDER_ELEMENTS set REF_ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS') where  ELEMENT_ID = ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            String updateQuery = "update PRG_USER_SUB_FOLDER_ELEMENTS set REF_ELEMENT_ID=" + element_Id1 + " where ELEMENT_ID='select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1'";
                            list.add(finalQuery);
                            list.add(updateQuery);
                            list.add(updateQuery1);
                        } else {
                            elementIdQuery = "select PRG_USER_SUB_FLDR_ELEMENTS_SEQ.nextval from dual";
                            pbrofolderelement = pbdb.execSelectSQL(elementIdQuery);
                            elementId = String.valueOf(pbrofolderelement.getFieldValueInt(0, 0));
                            ref_elementId = elementId;
                            Object obj1[] = new Object[16];
                            obj1[0] = elementId;
                            obj1[1] = subfolderId;
                            obj1[2] = bussTableId;
                            obj1[3] = "0";
                            obj1[4] = columnName;
                            obj1[5] = "E_" + elementId;
                            obj1[6] = userColDesc + " (Prev " + trailPeriod + "-" + l + ")";
                            obj1[7] = "TIMECALUCULATED";
                            obj1[8] = subFolderTabId;
                            obj1[9] = elementId;
                            obj1[10] = "1";
                            obj1[12] = "";
                            obj1[13] = "";
                            obj1[14] = dependentElementIds;
                            obj1[15] = actual_col_formula;
                            finalQuery = pbdb.buildQuery(addSubFolderElements, obj1);
                            list.add(finalQuery);
                        }
                    }
                    if (fromEdit == true) {
                        String updateUserAllInfoDets = getResourceBundle().getString("updateUserAllInfoDetails");
                        Object object[] = new Object[9];
                        object[0] = columnName;
                        object[1] = userColDesc + " (Prev " + trailPeriod + "-" + l + ")";
                        object[2] = "E_" + measElementId;
                        object[3] = "TIMECALUCULATED";
                        object[4] = aggType + "" + l;
                        object[5] = actual_col_formula;
                        object[6] = dependentElementIds;
                        object[7] = actual_col_formula;
                        object[8] = measElementId;
                        finalQuery = pbdb.buildQuery(updateUserAllInfoDets, object);
                        list.add(finalQuery);
                    } else {
                        //adding to user all Info
                        String addUserAllInfoDets = getResourceBundle().getString("addUserAllInfoDets");
                        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
//                        String queryId="select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1";
//                        pbrofolderelement = pbdb.execSelectSQL(queryId);
                            // String element_Id = String.valueOf(pbrofolderelement.getFieldValueInt(0, 0));
//                        int element_Id1 = pbrofolderelement.getFieldValueInt(0, 0);
//                        String element_Id = String.valueOf(element_Id1+1);
                            Object obj2[] = new Object[33];
                            obj2[0] = grpId;
                            obj2[1] = folderId;
                            obj2[2] = folderName;
                            obj2[3] = subfolderId;
                            obj2[4] = subFolderName;//"Formula";
                            obj2[5] = subFolderType;//"Formula";
                            obj2[6] = subFolderTabId;
                            obj2[7] = "N";
                            obj2[8] = "Y";
                            obj2[9] = "N";
                            obj2[10] = "0";
                            obj2[11] = "0";
                            obj2[12] = "0";
                            //obj2[13] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            obj2[13] = "(select cast(LAST_INSERT_ID(ELEMENT_ID) as decimal) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1)";
                            obj2[14] = bussTableId;
                            obj2[15] = "0";
                            obj2[16] = columnName;
                            obj2[17] = userColDesc + " (Prev " + trailPeriod + "-" + l + ")";
                            obj2[18] = userColDesc + " (Prev " + trailPeriod + "-" + l + ")";
                            obj2[19] = "TIMECALUCULATED";
                            //obj2[20] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            obj2[20] = "(select cast(LAST_INSERT_ID(ELEMENT_ID) as decimal) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1)";
                            obj2[21] = "1";
                            obj2[22] = "0";
                            obj2[23] = bussTableName;
                            obj2[24] = connectionId;
                            obj2[25] = aggType + "" + l;
                            obj2[26] = actual_col_formula;
                            obj2[27] = dependentElementIds;
                            obj2[28] = actual_col_formula;
                            obj2[29] = "Y";
                            obj2[30] = disp_name;
                            obj2[31] = table_disp_name;
                            obj2[32] = table_tooltip_name;
                            finalQuery = pbdb.buildQuery(addUserAllInfoDets, obj2);
//                        String updateQuery1 = "update PRG_USER_ALL_INFO_DETAILS set USER_COL_NAME='E_'+cast(IDENT_CURRENT('PRG_USER_SUB_FOLDER_ELEMENTS') as varchar(258)) where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
//                        String updateQuery2 = "update PRG_USER_ALL_INFO_DETAILS set ref_dim_tab_id ="+ref_dim_tab_id+" where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
//                        String updateQuery3 = "update PRG_USER_ALL_INFO_DETAILS set ref_dim_tab_id ="+ref_dim_element_id+" where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            String updateQuery1 = "update PRG_USER_SUB_FOLDER_ELEMENTS set USER_COL_NAME=concat('E_',cast('select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1' as char)) where ELEMENT_ID='select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1'";
                            String updateQuery2 = "update PRG_USER_ALL_INFO_DETAILS set ref_dim_tab_id =" + ref_dim_tab_id + " where ELEMENT_ID=(select cast(LAST_INSERT_ID(ELEMENT_ID) as decimal) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1)";
                            String updateQuery3 = "update PRG_USER_ALL_INFO_DETAILS set ref_dim_tab_id =" + ref_dim_element_id + " where ELEMENT_ID=(select cast(LAST_INSERT_ID(ELEMENT_ID) as decimal) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1)";
                            list.add(finalQuery);
                            list.add(updateQuery1);
                            list.add(updateQuery2);
                            list.add(updateQuery3);
                        } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                            Object obj2[] = new Object[33];
                            obj2[0] = grpId;
                            obj2[1] = folderId;
                            obj2[2] = folderName;
                            obj2[3] = subfolderId;
                            obj2[4] = subFolderName;//"Formula";
                            obj2[5] = subFolderType;//"Formula";
                            obj2[6] = subFolderTabId;
                            obj2[7] = "N";
                            obj2[8] = "Y";
                            obj2[9] = "N";
                            obj2[10] = "0";
                            obj2[11] = "0";
                            obj2[12] = "0";
                            obj2[13] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            obj2[14] = bussTableId;
                            obj2[15] = "0";
                            obj2[16] = columnName;
                            obj2[17] = userColDesc + " (Prev " + trailPeriod + "-" + l + ")";
                            obj2[18] = userColDesc + " (Prev " + trailPeriod + "-" + l + ")";
                            obj2[19] = "TIMECALUCULATED";
                            obj2[20] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            obj2[21] = "1";
                            obj2[22] = "0";
                            obj2[23] = bussTableName;
                            obj2[24] = connectionId;
                            obj2[25] = aggType + "" + l;
                            obj2[26] = actual_col_formula;
                            obj2[27] = dependentElementIds;
                            obj2[28] = actual_col_formula;
                            obj2[29] = "Y";
                            obj2[30] = disp_name;
                            obj2[31] = table_disp_name;
                            obj2[32] = table_tooltip_name;
                            finalQuery = pbdb.buildQuery(addUserAllInfoDets, obj2);
                            String updateQuery1 = "update PRG_USER_ALL_INFO_DETAILS set USER_COL_NAME='E_'+cast(IDENT_CURRENT('PRG_USER_SUB_FOLDER_ELEMENTS') as varchar(258)) where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            String updateQuery2 = "update PRG_USER_ALL_INFO_DETAILS set ref_dim_tab_id =" + ref_dim_tab_id + " where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            String updateQuery3 = "update PRG_USER_ALL_INFO_DETAILS set ref_dim_tab_id =" + ref_dim_element_id + " where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                            list.add(finalQuery);
                            list.add(updateQuery1);
                            list.add(updateQuery2);
                            list.add(updateQuery3);
                        } else {
                            Object obj2[] = new Object[37];
                            obj2[0] = grpId;
                            obj2[1] = folderId;
                            obj2[2] = folderName;
                            obj2[3] = subfolderId;
                            obj2[4] = subFolderName;//"Formula";
                            obj2[5] = subFolderType;//"Formula";
                            obj2[6] = subFolderTabId;
                            obj2[7] = "N";
                            obj2[8] = "Y";
                            obj2[9] = "N";
                            obj2[10] = "";
                            obj2[11] = "0";
                            obj2[12] = "0";
                            obj2[13] = "0";
                            obj2[14] = "";
                            obj2[15] = elementId;
                            obj2[16] = bussTableId;
                            obj2[17] = "0";
                            obj2[18] = columnName;
                            obj2[19] = "E_" + elementId;
                            obj2[20] = userColDesc + " (Prev " + trailPeriod + "-" + l + ")";
                            obj2[21] = "TIMECALUCULATED";
                            obj2[22] = ref_elementId;
                            obj2[23] = "1";
                            obj2[24] = "0";
                            obj2[25] = "";
                            obj2[26] = "";
                            obj2[27] = bussTableName;
                            obj2[28] = connectionId;
                            obj2[29] = aggType + "" + l;
                            obj2[30] = actual_col_formula;
                            obj2[31] = dependentElementIds;
                            obj2[32] = null;
                            obj2[33] = table_disp_name;
                            obj2[34] = table_tooltip_name;
                            obj2[35] = ref_dim_tab_id;
                            obj2[36] = ref_dim_element_id;
                            finalQuery = pbdb.buildQuery(addUserAllInfoDets, obj2);
                            list.add(finalQuery);
                        }
                    }
                }
            }
            boolean check = pbdb.executeMultiple(list);
            if (check) {
                if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                    String getRefElId = getResourceBundle().getString("getRefElId");
                    PbReturnObject refElIdObject = pbdb.execSelectSQL(getRefElId);
                    ref_elementId = refElIdObject.getFieldValueString(0, 0);
                }
                if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                    String getRefElId = getResourceBundle().getString("getRefElId");
                    String queryId = "select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1";
                    PbReturnObject pbro = pbdb.execSelectSQL(queryId);
                    String lastElementId = String.valueOf(pbro.getFieldValueInt(0, 0));
                    Object obj2[] = new Object[1];
                    obj2[0] = lastElementId;
                    String finalqueryt = pbdb.buildQuery(getRefElId, obj2);
                    PbReturnObject refElIdObject = pbdb.execSelectSQL(finalqueryt);
                    ref_elementId = refElIdObject.getFieldValueString(0, 0);
//                    PbReturnObject refElIdObject = pbdb.execSelectSQL(getRefElId);
//                    ref_elementId = refElIdObject.getFieldValueString(0, 0);
                }
            }
            if (!fromEdit) {
                out.print(ref_elementId);
            } else {
                out.print(measElementId);
            }
        } catch (IOException ex) {
            out.print("");
            logger.error("Exception:", ex);
        } catch (NumberFormatException ex) {
            out.print("");
            logger.error("Exception:", ex);
        } catch (SQLException ex) {
            out.print("");
            logger.error("Exception:", ex);
        }
        logger.info("Exit Method");
        return null;
    }

    public ActionForward getMapMainMeasures(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        try {
            PrintWriter outPrintWriter = null;
            Container container = null;
            String reportId = request.getParameter("reportId");
            HttpSession session = request.getSession(false);
            outPrintWriter = response.getWriter();
            container = Container.getContainerFromSession(request, reportId);
            List<String> mainMeasures = container.getMapMainMeasure();
            List<String> mainMeasuresLabels = container.getMapMainMeasureLabel();
            StringBuilder measureIdsSB = new StringBuilder();
            StringBuilder measureLabelsSB = new StringBuilder();
            StringBuilder json = new StringBuilder();
            for (String measId : mainMeasures) {
                int index = mainMeasures.indexOf(measId);
                if (measId.startsWith("A_")) {
                    measId = measId.substring(2);
                }
                measureIdsSB.append(",").append(measId);
                measureLabelsSB.append(",").append(mainMeasuresLabels.get(index));
            }
            measureIdsSB.replace(0, 1, "");
            measureLabelsSB.replace(0, 1, "");
            json.append("{").append("MainMeasureIds:\"").append(measureIdsSB).append("\",");
            json.append("MainMeasureLabels:\"").append(measureLabelsSB).append("\"}");
            outPrintWriter.println(json.toString());
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward getLevelDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        String elementId = request.getParameter("elementId");
        String levelType = request.getParameter("levelType");
        PbReportViewerDAO dao = new PbReportViewerDAO();
        LinkedHashMultimap<String, String> quarter = LinkedHashMultimap.create();
        quarter = dao.getQuarterDetails(elementId, levelType);
        List<String> value = new ArrayList<String>();
        StringBuilder json = new StringBuilder();
        Set<String> keyset = quarter.keySet();
        StringBuilder cust_name = new StringBuilder();
        StringBuilder cust_st_date = new StringBuilder();
        StringBuilder cust_end_date = new StringBuilder();
        PrintWriter out = null;
        //cq_name.append("\"cq_name\":[");
        Iterator<String> iter = keyset.iterator();
        while (iter.hasNext()) {
            String key = iter.next();
            Set set = quarter.get(key);
            cust_name.append(",\"").append(key).append("\"");
            Iterator<String> it = set.iterator();
            for (int i = 0; i < set.size(); i++) {
                cust_st_date.append(",\"").append(it.next()).append("\"");
                cust_end_date.append(",\"").append(it.next()).append("\"");
                i = i + 2;
            }

        }
        cust_name.replace(0, 1, "");
        cust_end_date.replace(0, 1, "");
        cust_st_date.replace(0, 1, "");
        json.append("{\"cust_name\":[").append(cust_name).append("]").append(",");
        json.append("\"cust_st_date\":[").append(cust_st_date).append("]").append(",");
        json.append("\"cust_end_date\":[").append(cust_end_date).append("]").append("}");
        try {
            out = response.getWriter();
            out.print(json.toString());
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward getLevelDetailsForDiscrete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        PbReportViewerDAO dao = new PbReportViewerDAO();
        String elementId = request.getParameter("elementId");
        String levelType = request.getParameter("levelType");
        List<String> yearList = dao.getLevelDetailsForDiscrete(elementId, levelType);
        StringBuilder yearSB = new StringBuilder();
        for (int i = 0; i < yearList.size(); i++) {
            yearSB.append(",").append("\"").append(yearList.get(i)).append("\"");
        }
        yearSB.replace(0, 1, "");
        StringBuilder json = new StringBuilder();
        json.append("{\"cust_year_details\":").append("[").append(yearSB.toString()).append("]}");
        PrintWriter out = null;
        try {
            out = response.getWriter();
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        out.println(json.toString());
        return null;
    }

    public ActionForward getReportHeadlines(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        String isEdit = request.getParameter("edit");
        SnapshotDesigner snapshotDesigner = new SnapshotDesigner();
        String headlinesTable = "";
        PrintWriter out = null;
        //headlinesTable=snapshotDesigner.getReportHeadlines(isEdit,request);
        try {
            out = response.getWriter();
            out.print(headlinesTable);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }

        return null;
    }

    public ActionForward sendSharereportMail(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {

        PbMailParams params = null;
        PbMail mailer = null;
        Container container = null;
        try {
            HttpSession session = request.getSession(false);
            String reportId = request.getParameter("repID");
            String dlType = request.getParameter("fileType");
            String userId = String.valueOf(session.getAttribute("USERID"));
            String userstextarea = request.getParameter("userstextarea");
            String subject = request.getParameter("share_subject");
            subject = subject.replace("--", "&");
            String headerLogo = request.getParameter("headerLogo");
            String footerLogo = request.getParameter("footerLogo");
            String optionalHeader = request.getParameter("optionalHeader");
            String optionalFooter = request.getParameter("optionalFooter");
            String htmlSignature = request.getParameter("htmlSignature");
            String loggedInUser = String.valueOf(session.getAttribute("LOGINID"));
            String comapnyTitle = String.valueOf(session.getAttribute("compTitle"));
//            subject += "(" + loggedInUser + ")"; //commented by Amar for hiding (PROGEN) in subject line
            container = Container.getContainerFromSession(request, reportId);
            String dir = System.getProperty("java.io.tmpdir") + "/";
            StringBuilder completeContent = new StringBuilder();
            String FileName = "";
            String[] mailids = userstextarea.split(",");
            String comments = request.getParameter("comments");
            completeContent.append("<html><body>");
            completeContent.append("<h5>" + comments + "</h5><br><br>");
            String localPath = (String) session.getAttribute("reportAdvHtmlFileProps");
            container.getReportCollect().setReportAdvHtmlFileProps(localPath);
            String folderPath = container.getReportCollect().getReportAdvHtmlFileProps() + "/SharedReports";
            //
            File folderDir = new File(folderPath);
            if (!folderDir.exists()) {
                folderDir.mkdir();
            }
            //String targetPath=(String)session.getAttribute("oldAdvHtmlFileProps");
            UUID fileUniqueId = UUID.randomUUID();
            String reportFileName = "/sharedReport_" + reportId + "_" + fileUniqueId + ".txt";
            String filePath = folderPath + reportFileName;
//            PbReportCollection bkpCollect=container.getReportCollect();
            PbReportViewerBD pbrepbd = new PbReportViewerBD();
            pbrepbd.writeContainerToTextFile(container, filePath);
            String url;
            String hostName = request.getServerName();
            if (hostName.equalsIgnoreCase("localhost") || hostName.equalsIgnoreCase("127.0.0.1")) {
                String ipAddress = "";
                String requestUrl1 = request.getRequestURL().toString();
                try {
                    for (Enumeration en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {
                        NetworkInterface intf = (NetworkInterface) en.nextElement();
                        for (Enumeration enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {
                            InetAddress inetAddress = (InetAddress) enumIpAddr.nextElement();
                            if (!inetAddress.isLoopbackAddress() && inetAddress instanceof Inet4Address) {
                                ipAddress = inetAddress.getHostAddress().toString();
                            }
                        }
                    }
                } catch (SocketException e) {
                    logger.error("Exception: ", e);
                }
                StringBuffer requestURL = new StringBuffer(requestUrl1.replaceAll(hostName, ipAddress));
                url = requestURL.append("?reportBy=viewReport").append("&REPORTID=" + reportId).append("&shareReport=yes&filePath=" + filePath).toString();
            } else {
                StringBuffer requestURL = request.getRequestURL();
                url = requestURL.append("?reportBy=viewReport").append("&REPORTID=" + reportId).append("&shareReport=yes&filePath=" + filePath).toString();
            }
            DataSnapshotGenerator dataSnapshotGenrtr = new DataSnapshotGenerator();
            if (dlType.equals("H")) {
                //completeContent.append(dataSnapshotGenrtr.generateHtmlForMail(container, userId, "fromHtml"));
                FileName = dataSnapshotGenrtr.generateAndStoreHtmlSnapshot(container, userId, "fromHtml");
            } else if (dlType.equals("CSV")) {
                FileName = dataSnapshotGenrtr.generateAndStoreCSVSnapshot(container, userId, "");
            } else if (dlType.equals("P")) {
                FileName = dataSnapshotGenrtr.generateReportInfoPdf(container);
            } else if (dlType.equals("E")) {
                FileName = dataSnapshotGenrtr.generateReportInfoExcel(container);
            }
            //code added by Dinanath header Logo , footer logo
            String filePath2 = null;
            PbReportViewerDAO pbDAO = new PbReportViewerDAO();
            if (session != null) {
                filePath2 = pbDAO.getFilePath(session);
            } else {
                filePath2 = "/usr/local/cache";
            }
            if (headerLogo != null && headerLogo.equalsIgnoreCase("on")) {
                completeContent.append("<div style='width:100%;height:30%;'><img src=\"cid:image\" height=\"200\" width=\"1100\"></div>");
            }
            if (optionalHeader != null && optionalHeader.equalsIgnoreCase("on")) {
                String htmlSignatureFile = "HtmlOptionalHeaderForScheduler.html";
                BufferedReader br2 = null;
                try {
                    br2 = new BufferedReader(new FileReader(filePath2 + File.separator + htmlSignatureFile));
                    String line = br2.readLine();
                    while (line != null) {
                        completeContent.append(line);
                        line = br2.readLine();
                    }
                } catch (IOException e) {
                    logger.error("Exception: ", e);
                } finally {
                    if (br2 != null) {
                        br2.close();
                    }
                }
            }
            //code endded by Dinanath & code written by swati
            BufferedReader br = new BufferedReader(new FileReader(dir + FileName));
            try {
                String line = br.readLine();
                while (line != null) {
                    completeContent.append(line);
                    line = br.readLine();
                }
            } finally {
                if (br != null) {
                    br.close();
                }
            }
            //added by Dinanath for signature and footerLogo
            completeContent.append("</table><br><br>");
            if (optionalFooter != null && optionalFooter.equalsIgnoreCase("on")) {
                String htmlSignatureFile = "HtmlOptionalFooterForScheduler.html";
                BufferedReader br2 = null;
                try {
                    br2 = new BufferedReader(new FileReader(filePath2 + File.separator + htmlSignatureFile));
                    String line = br2.readLine();
                    while (line != null) {
                        completeContent.append(line);
                        line = br2.readLine();
                    }
                } catch (IOException e) {
                    logger.error("Exception: ", e);
                } finally {
                    if (br2 != null) {
                        br2.close();
                    }
                }
            }
            if (htmlSignature != null && htmlSignature.equalsIgnoreCase("on")) {
                String htmlSignatureFile = "HtmlSignatureForScheduler.html";
                BufferedReader br2 = null;
                try {
                    br2 = new BufferedReader(new FileReader(filePath2 + File.separator + htmlSignatureFile));
                    String line = br2.readLine();
                    while (line != null) {
                        completeContent.append(line);
                        line = br2.readLine();
                    }
                } catch (IOException e) {
                    logger.error("Exception: ", e);
                } finally {
                    if (br2 != null) {
                        br2.close();
                    }
                }
            }
//            completeContent.append( "<div style='font-size:13px;'>Best Regards,<br><br>"
//                                        +"Merwin Ezekial Dawson<br>"
//                                        +"Assistant General Manager -Revenue Management & Global Distribution<br>"
//                                        +"The Leela Palaces, Hotels and Resorts, Sahar, Mumbai 400059 India<br>"
//                                         +"Tel: +91 (22) 66911466, Mobile: +91 9819980283, Fax: +91 (22) 66911455<br>"
//                                         +" E-mail: merwin.dawson@theleela.com,<br>"
//        +"<b>To Reserve Call:</b>  The Leela Reservations Worldwide: 1800 1031 444 (India Toll Free) or +91-124-44 25 444 <b>India Toll Free :</b> 1 800 1031 444 | <br>"
//        +"<b>USA Toll Free :</b> 8556 703 444 | <b>UK Toll Free : </b> 08000 261 111 | <b>Hong Kong Toll Free : </b> 800 906 444 | <b>Singapore Toll Free :</b> 1800 223 4444 |<b>Email:</b> reservations@theleela.com |  <b>Visit:</b> www.theleela.com</div><br><br>");
            if (footerLogo != null && footerLogo.equalsIgnoreCase("on")) {
                completeContent.append("<div style='width:100%;height:50px;'><table><tr><td><img src=\"cid:pidina_image\" height=\"100\" width=\"200\"/></td><td style=\"width: 750px;font-size:30px\"><center> Powered By " + comapnyTitle + "</center></td><td><img src=\"cid:progendina_image\" height=\"100\" width=\"200\"/></td></tr></table></div>");
            }
//code endded by Dinanath for header footer logo
            completeContent.append("</body></html>");
            // code ended
            for (int i = 0; i < mailids.length; i++) {
                params = new PbMailParams();
                //params.setBodyText(completeContent.toString());
                params.setBodyText("");
                params.setToAddr(mailids[i]);
                params.setSubject(subject);
                params.setFilePath(filePath2);
                //  code written by swati
                if (dlType.equals("H")) {
                    params.setBodyText(completeContent.toString());
                    params.setHasAttach(false);
                } else {
                    params.setHasAttach(true);
                }
                params.setFileUrl(url);
//                params.setAttachFile(dir + FileName);
                ArrayList<String> attach = new ArrayList<String>();
//                String str = new String(dir + FileName);
                String str = dir + FileName;
                attach.add(str);
                params.setAttachFile(attach);
                params.setIsHeaderLogoOn(headerLogo);
                params.setIsFooterLogoOn(footerLogo);
                try {
                    mailer = new PbMail(params);
                    mailer.sendMail();
                } catch (MessagingException e) {
                    logger.error("Exception: ", e);
                }
            }
            response.getWriter().print("Report shared with users successfully.");
        } catch (IOException e) {
            logger.error("Exception: ", e);
            response.getWriter().print("Excepton Occurred at: " + e.toString());
        } catch (ParseException e) {
            logger.error("Exception: ", e);
            response.getWriter().print("Excepton Occurred at: " + e.toString());
        }
        return null;
    }

    public ActionForward getViewByValues(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        String elementId = request.getParameter("elementId");
        String reportId = request.getParameter("reportId");
        Container container = Container.getContainerFromSession(request, reportId);
        ProgenDataSet dataSet = container.getRetObj();
        dataSet.resetViewSequence();
        container.resetTopBottom();
        if (!container.getSortColumns().isEmpty()) {
            container.getSortColumns().clear();
            container.setSortColumn(null, "");
        }
        ReportTemplateDAO reportTemlatedao = new ReportTemplateDAO();
        ArrayList<String> viewByValueList = new ArrayList();
        ArrayList dropedList = new ArrayList();

        dropedList = reportTemlatedao.viewByValuesList(reportId);
        String groupName = null;
        if (!dropedList.isEmpty()) {
            groupName = dropedList.get(dropedList.size() - 1).toString();
            dropedList.remove(dropedList.size() - 1);
        }

        PrintWriter out = null;
        int size = dataSet.getViewSequence().size();
        if (size > 200) {
            size = 200;
        }
        for (int i = 0; i < size; i++) {
            viewByValueList.add(dataSet.getFieldValueString(dataSet.getViewSequence().get(i), elementId));
        }

        if (!container.getReportCollect().getCustomSequence().isEmpty()) {
            dropedList.addAll(container.getReportCollect().getCustomSequence());
        }
        // dropedList.clear();

        GenerateDragAndDrophtml dragAndDrophtml = new GenerateDragAndDrophtml("Drag values from here", "Drop values here", dropedList, viewByValueList, request.getContextPath());
        dragAndDrophtml.setGroupName(groupName);
        String htmlStr = dragAndDrophtml.getDragAndDropDiv();
        try {
            out = response.getWriter();
            out.print(htmlStr);

        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward setCustomViewSeq(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        String viewByVals = request.getParameter("viewByVals");
        String reportId = request.getParameter("reportId");
        String elementId = request.getParameter("elementId");
        Container container = Container.getContainerFromSession(request, reportId);
        String[] viewByValsArray = viewByVals.split(",");
        container.getReportCollect().setCustomSequence(Arrays.asList(viewByValsArray));
        PbReportViewerDAO reportViewerDAO = new PbReportViewerDAO();
        ArrayList<Integer> customViewSeq = reportViewerDAO.setCustomViewSequence(reportId, container);
        session.setAttribute(elementId, customViewSeq);
        return null;
    }

    public ActionForward applyCustomSequence(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        String reportId = request.getParameter("reportId");
        Container container = Container.getContainerFromSession(request, reportId);
        PrintWriter out = null;
        boolean flag = false;
        if (container.isTopBottomSet() || !container.getSortColumns().isEmpty()) {
            flag = true;
        }
        try {
            out = response.getWriter();
            out.print(flag);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward setTransposeFormats(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        String rowId = request.getParameter("rowId");
        String alignStyle = request.getParameter("alignStyle");
        String fontStyle = request.getParameter("fontStyle");
        String reportId = request.getParameter("reportId");
        Container container = Container.getContainerFromSession(request, reportId);
        ArrayList<String> formatList = new ArrayList<String>();
        formatList.add(alignStyle);
        formatList.add(fontStyle);
        container.getReportCollect().getTransposeFormatMap().put(rowId, formatList);
        return null;
    }

    public ActionForward getViewByValuesadhoc(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
//        HttpSession session = request.getSession(false);
        String elementId1 = request.getParameter("elementId");
        String elementId = elementId1.concat("_percentwise");
        String reportId = request.getParameter("reportId");
        Container container = Container.getContainerFromSession(request, reportId);
        ProgenDataSet dataSet = container.getRetObj();
        dataSet.resetViewSequence();
        ArrayList<String> viewByValueList = new ArrayList<String>();
        ArrayList<BigDecimal> percentByList = new ArrayList<BigDecimal>();
        BigDecimal grandToatal = (BigDecimal) container.getRetObj().getColumnGrandTotalValue(elementId1);
        PrintWriter out = null;
        int size = dataSet.getViewSequence().size();
//        String str = new String("A_");
        String str = "A_";
        String elid = (String) container.getViewByElementIds().get(0);

        if (container.getDisplayColumns().contains(elementId1.concat("_userGl"))) {
            if (elid.equalsIgnoreCase("Time")) {
                for (int i = 0; i < size; i++) {
                    viewByValueList.add(dataSet.getFieldValueString(dataSet.getViewSequence().get(i), elid));
                    percentByList.add(dataSet.getFieldValueRuntimeMeasure(dataSet.getViewSequence().get(i), elementId1.concat("_glPer")));

                }
            } else {
                String elids = str.concat(elid);
                for (int i = 0; i < size; i++) {
                    viewByValueList.add(dataSet.getFieldValueString(dataSet.getViewSequence().get(i), elids));
                    percentByList.add(dataSet.getFieldValueRuntimeMeasure(dataSet.getViewSequence().get(i), elementId1.concat("_glPer")));

                }
            }
        } else {
            if (elid.equalsIgnoreCase("Time")) {
                for (int i = 0; i < size; i++) {
                    viewByValueList.add(dataSet.getFieldValueString(dataSet.getViewSequence().get(i), elid));
                    percentByList.add(dataSet.getFieldValueRuntimeMeasure(dataSet.getViewSequence().get(i), elementId));

                }
            } else {
                String elids = str.concat(elid);
                for (int i = 0; i < size; i++) {
                    viewByValueList.add(dataSet.getFieldValueString(dataSet.getViewSequence().get(i), elids));
                    percentByList.add(dataSet.getFieldValueRuntimeMeasure(dataSet.getViewSequence().get(i), elementId));

                }
            }
        }
        //percentByList.addAll(dataSet.getRunTimeMeasureData(elementId));

        StringBuilder viewByValues = new StringBuilder();
        StringBuilder percentValues = new StringBuilder();
        StringBuilder grandTotal = new StringBuilder();
        viewByValues.append("{ DimViewByNames:[");
        percentValues.append(" MeasuresValues:[");
        grandTotal.append(" GrandTotal:[");

        for (int i = 0; i < size; i++) {
            viewByValues.append("\"").append(viewByValueList.get(i)).append("\"");
            percentValues.append("\"").append(NumberFormatter.getModifidNumber(percentByList.get(i))).append("%").append("\"");
            //append(NumberFormatter.getModifidNumber(percentByList.get(i)))
            if (i != dataSet.getRowCount() - 1) {
                viewByValues.append(",");
                percentValues.append(",");
            }
        }
        viewByValues.append("],");
        percentValues.append("],");
        grandTotal.append(NumberFormatter.getModifiedNumber(grandToatal, "")).append("] }");
        percentValues.append(grandTotal);
        viewByValues.append(percentValues);
        try {
            out = response.getWriter();
            out.print(viewByValues.toString());
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }

        return null;
    }

    public ActionForward saveCreateKPIMeasure(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        String kpiElementId = request.getParameter("kpiElementId");
        String measName = request.getParameter("measName");
        String kpiName = request.getParameter("kpiName");
        String ReportId = request.getParameter("PbReportId");
        Container container = Container.getContainerFromSession(request, ReportId);
        String UserId = String.valueOf(session.getAttribute("USERID"));
        String aggType = request.getParameter("aggType");
        String timeDet = request.getParameter("timeDet");
        String otherTimeDet = request.getParameter("otherTimeDet");
        String totals = request.getParameter("totals");
        CreateKPIFromReport createKPIFromReport = new CreateKPIFromReport();
        PbReportViewerDAO reportViewerDAO = new PbReportViewerDAO();
        createKPIFromReport.setAggType(aggType);
        createKPIFromReport.setDimensionIds((Object[]) container.getReportCollect().reportParamIds.toArray());
        createKPIFromReport.setDimensionNames((Object[]) container.getReportCollect().reportParamNames.toArray());
        createKPIFromReport.setMeasureId(kpiElementId);
        createKPIFromReport.setMeasureName(measName);
        createKPIFromReport.setReportId(ReportId);
        createKPIFromReport.setReportKPIName(kpiName);
        createKPIFromReport.setTimeDetailsArray((Object[]) container.getReportCollect().timeDetailsArray.toArray());
        createKPIFromReport.setUserId(UserId);
        createKPIFromReport.setRowViewBys((Object[]) container.getReportCollect().reportRowViewbyValues.toArray());
        createKPIFromReport.setColViewBys((Object[]) container.getReportCollect().reportColViewbyValues.toArray());
        LinkedHashMap reportParametersValues = container.getReportCollect().reportParametersValues;
        createKPIFromReport.setReportParametersValues((HashMap) reportParametersValues);
        createKPIFromReport.setDispMeasures((Object[]) container.getTableMeasure().toArray());
        createKPIFromReport.setDispMeasureNames((Object[]) container.getTableMeasureNames().toArray());
        createKPIFromReport.setReportQryCols((Object[]) container.getReportCollect().reportQryElementIds.toArray());
        createKPIFromReport.setQryAggregations((Object[]) container.getReportCollect().reportQryAggregations.toArray());
        createKPIFromReport.setSrchColumn((Object[]) container.getSearchColumns().toArray());
        createKPIFromReport.setSrchConditions((Object[]) container.getSearchConditions().toArray());
        createKPIFromReport.setSrchValue((Object[]) container.getSearchValues().toArray());
        ArrayList<String> srchColumns = container.getSearchColumns();
        createKPIFromReport.setColDataTypes(container.getColumnDataTypes(srchColumns));
        createKPIFromReport.setBizRoles(container.getReportCollect().reportBizRoles);
        createKPIFromReport.setDynamicTimeDetails(timeDet);
        createKPIFromReport.setOtherTimeDetails(otherTimeDet);
        createKPIFromReport.setPagesPerSlide(container.getPagesPerSlide());
        createKPIFromReport.setTotalValue(totals);
        if (container.isTopBottomSet()) {
            createKPIFromReport.setTopBottom(true);
            createKPIFromReport.setSortColumns((Object[]) container.getSortColumns().toArray());
            createKPIFromReport.setSortTypes(container.getSortTypes());
        }
        createKPIFromReport.setTopBtmCount(container.getTopBottomCount());
        createKPIFromReport.setTopBtmMode(container.getTopBottomMode());
        createKPIFromReport.setTopBtmType(container.getTopBottomType());
        if (aggType.equalsIgnoreCase("sum")) {
            ArrayList alist1 = new ArrayList();
            ArrayList alist2 = new ArrayList();
            Long val = new Long("0");
            alist1 = container.getRetObj().retrieveDataBasedOnViewSeq(kpiElementId);
            for (int j = 0; j < alist1.size(); j++) {
                String myval = NumberFormatter.getModifiedNumber(new BigDecimal(alist1.get(j).toString()), "", 0);
                val = val + Long.parseLong(myval.replace(",", ""));
            }
            createKPIFromReport.setAggTypeValue(new BigDecimal(val));
        } else if (aggType.equalsIgnoreCase("avg")) {
            createKPIFromReport.setAggTypeValue(container.getRetObj().getColumnAverageValue(kpiElementId));
        } else if (aggType.equalsIgnoreCase("min")) {
            createKPIFromReport.setAggTypeValue(container.getRetObj().getColumnMinimumValue(kpiElementId));
        } else if (aggType.equalsIgnoreCase("max")) {
            createKPIFromReport.setAggTypeValue(container.getRetObj().getColumnMaximumValue(kpiElementId));
        } else if (aggType.equalsIgnoreCase("count")) {
            createKPIFromReport.setCount(container.getRetObj().getViewSequence().size());
        }
        reportViewerDAO.insertCreateKPIDetails(createKPIFromReport);
        DashboardTemplateDAO templateDAO = new DashboardTemplateDAO();
        //templateDAO.getCreateKPIReturnObject(createKPIFromReport);

        return null;
    }

    public ActionForward multRowColorGroup(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        String viewByVals = request.getParameter("viewByVals");
        String groupName = request.getParameter("groupName");
        String reportId = request.getParameter("reportId");
        String elementId = request.getParameter("elementId");
        Container container = Container.getContainerFromSession(request, reportId);
        String[] viewByValsArray = viewByVals.split(",");
        container.getReportCollect().setViewByValues(Arrays.asList(viewByValsArray));
        ArrayList<BigDecimal> minandMaxvalues = new ArrayList<BigDecimal>();
        List<String> viewBys = container.getReportCollect().getViewByValues();
        ProgenDataSet datset = container.getRetObj();
        ArrayList<String> viewByValueList = new ArrayList();
        for (int i = 0; i < datset.getViewSequence().size(); i++) {
            viewByValueList.add(datset.getFieldValueString(datset.getViewSequence().get(i), elementId));
        }
        TreeSet<BigDecimal> rowmaxandMin = new TreeSet<BigDecimal>();
        for (int i = 0; i < viewByValueList.size(); i++) {
            if (viewBys.contains(viewByValueList.get(i))) {
                for (int j = 1; j < container.getDisplayColumns().size(); j++) {
                    rowmaxandMin.add(datset.getFieldValueBigDecimal(i, j));
                }
            }
        }
        BigDecimal sum = BigDecimal.ZERO;
        Iterator itr = rowmaxandMin.iterator();
        while (itr.hasNext()) {
            sum = sum.add((BigDecimal) itr.next());
        }
        //BigDecimal no=new BigDecimal(rowmaxandMin.size());
        BigDecimal avg = new BigDecimal(Integer.valueOf(sum.intValue()) / (rowmaxandMin.size()));
        minandMaxvalues.add(rowmaxandMin.last());
        minandMaxvalues.add(rowmaxandMin.first());
        minandMaxvalues.add(avg);
        container.getReportCollect().setMinmaxavgValues(minandMaxvalues);
        container.getReportCollect().setGroupName(groupName);
        return null;
    }

    public ActionForward getViewByValuesTimeBaseIndvl(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        ArrayList<String> listvalue = new ArrayList<String>();
        PrintWriter out = null;
        PbReturnObject reportObj = new PbReturnObject();
        String productName = request.getParameter("productName");
        String viewByName = request.getParameter("viewByVals");
        String elementId1 = request.getParameter("elementId");
        String reportId = request.getParameter("reportId");
        Container container = Container.getContainerFromSession(request, reportId);
        ProgenDataSet dataSet = container.getRetObj();
        dataSet.resetViewSequence();
        ReportTemplateDAO templatedao = new ReportTemplateDAO();
        ArrayList<String> viewByValueList = new ArrayList<String>();
        ArrayList<BigDecimal> priorvalue = new ArrayList<BigDecimal>();
        ArrayList<BigDecimal> currentVal = new ArrayList<BigDecimal>();
        ArrayList<BigDecimal> changedVal = new ArrayList<BigDecimal>();
        String elid = (String) container.getViewByElementIds().get(0);
        ArrayList<String> viewByValue = new ArrayList<String>();
        String dimValue = (String) container.getDisplayLabels().get(0);
        viewByValue.add(dimValue);
        ArrayList<BigDecimal> measgrandTotalValues = new ArrayList<BigDecimal>();
        ArrayList<String> measures = new ArrayList<String>();
        measures = container.getDisplayColumns();
        StringBuilder viewByValues = new StringBuilder();
        StringBuilder priorValues = new StringBuilder();
        StringBuilder currenValues = new StringBuilder();
        StringBuilder changedValues = new StringBuilder();
        StringBuilder goalseekVal = new StringBuilder();
        StringBuilder grandTotal = new StringBuilder();
        StringBuilder dimensionName = new StringBuilder();
        StringBuilder measureGandTotals = new StringBuilder();
        StringBuilder existingChangePer = new StringBuilder();
        reportObj = templatedao.getMeasureValues(elementId1.replace("A_", ""));
        for (int i = 0; i < reportObj.rowCount; i++) {
            listvalue.add(reportObj.getFieldValueString(i, "ELEMENT_ID"));
            viewByValue.add(reportObj.getFieldValueString(i, "USER_COL_DESC"));
        }
        if (!productName.equalsIgnoreCase("undefined") && !productName.equalsIgnoreCase("")) {
            if (viewByValue.contains(productName)) {
                viewByValue.remove(productName);
            } else {
                viewByValue.add(productName);
            }
        }
        if (listvalue.size() > 1) {
            String priorValue = listvalue.get(1);
            String currValue = listvalue.get(0);
            String changedVl = listvalue.get(3);
            measgrandTotalValues.add(dataSet.getColumnGrandTotalValue("A_" + priorValue));
            measgrandTotalValues.add(dataSet.getColumnGrandTotalValue("A_" + currValue));
            measgrandTotalValues.add(dataSet.getColumnGrandTotalValue("A_" + changedVl));
            if (measures.contains("A_" + priorValue) && measures.contains("A_" + changedVl)) {
                for (int i = 0; i < dataSet.getViewSequence().size(); i++) {
                    viewByValueList.add(dataSet.getFieldValueString(dataSet.getViewSequence().get(i), "A_" + elid));
                    priorvalue.add(dataSet.getFieldValueBigDecimal(dataSet.getViewSequence().get(i), "A_" + priorValue));
                    currentVal.add(dataSet.getFieldValueBigDecimal(dataSet.getViewSequence().get(i), "A_" + currValue));
                    changedVal.add(dataSet.getFieldValueBigDecimal(dataSet.getViewSequence().get(i), "A_" + changedVl));
                }
                int viewByIndex = 0;
                if (!productName.equalsIgnoreCase("undefined") && !productName.equalsIgnoreCase("")) {
                    viewByIndex = viewByValueList.indexOf(viewByName);
                    viewByValueList.add(viewByIndex + 1, productName);
                    priorvalue.add(viewByIndex + 1, priorvalue.get(viewByIndex));
                    currentVal.add(viewByIndex + 1, currentVal.get(viewByIndex));
                    changedVal.add(viewByIndex + 1, changedVal.get(viewByIndex));
                }
                viewByValues.append("{ DimViewByNames:[");
                priorValues.append("PriorValues:[");
                currenValues.append(" currentValues:[");
                changedValues.append(" ChangedValues:[");
                goalseekVal.append(" GoalSeekChangedValue:[");
                grandTotal.append(" GrandTotalValue:[");
                dimensionName.append(" DimensionName:[");
                measureGandTotals.append(" MeasureGrandTotal:[");
                existingChangePer.append(" ExistingChangedPer:[");
                BigDecimal percent = new BigDecimal(100);
                BigDecimal grandTotalValue = BigDecimal.ZERO;
                ArrayList<String> numbderformatTotal = new ArrayList<String>();

                if (container.getDisplayColumns().contains(elementId1.concat("_changedPer")) && viewByValueList.size() == dataSet.getViewSequence().size()) {
                    for (int i = 0; i < currentVal.size(); i++) {
                        numbderformatTotal.add((NumberFormatter.getModifiedNumber(dataSet.getFieldValueRuntimeMeasure(dataSet.getViewSequence().get(i), elementId1.concat("_timeBased")), "")));
                    }
                    for (int i = 0; i < viewByValueList.size(); i++) {
                        viewByValues.append("\"").append(viewByValueList.get(i)).append("\"");
                        priorValues.append("\"").append(NumberFormatter.getModifiedNumber(priorvalue.get(i), "")).append("\"");
                        currenValues.append("\"").append(NumberFormatter.getModifiedNumber(currentVal.get(i), "")).append("\"");
                        changedValues.append("\"").append(NumberFormatter.getModifiedNumber(changedVal.get(i), "")).append("\"");
                        existingChangePer.append("\"").append(NumberFormatter.getModifiedNumber(dataSet.getFieldValueRuntimeMeasure(dataSet.getViewSequence().get(i), elementId1.concat("_changedPer")), "")).append("\"");
                        goalseekVal.append("\"").append(numbderformatTotal.get(i)).append("\"");
                        if (i != viewByValueList.size() - 1) {
                            viewByValues.append(",");
                            priorValues.append(",");
                            currenValues.append(",");
                            changedValues.append(",");
                            existingChangePer.append(",");
                            goalseekVal.append(",");
                        }
                    }
                    for (int i = 0; i < numbderformatTotal.size(); i++) {
                        //grandTotalValue=grandTotalValue.add((currentVal.get(i).add((changedVal.get(i).multiply(currentVal.get(i))).divide(percent))));
                        grandTotalValue = grandTotalValue.add(new BigDecimal(numbderformatTotal.get(i).replace(",", "")));
                    }
                } else {
                    for (int i = 0; i < currentVal.size(); i++) {
                        numbderformatTotal.add(NumberFormatter.getModifiedNumber(((changedVal.get(i).multiply(currentVal.get(i))).divide(percent).add(currentVal.get(i))), ""));
                    }
                    for (int i = 0; i < viewByValueList.size(); i++) {
                        viewByValues.append("\"").append(viewByValueList.get(i)).append("\"");
                        priorValues.append("\"").append(NumberFormatter.getModifiedNumber(priorvalue.get(i), "")).append("\"");
                        currenValues.append("\"").append(NumberFormatter.getModifiedNumber(currentVal.get(i), "")).append("\"");
                        changedValues.append("\"").append(NumberFormatter.getModifiedNumber(changedVal.get(i), "")).append("\"");
                        goalseekVal.append("\"").append(numbderformatTotal.get(i)).append("\"");
                        if (i != viewByValueList.size() - 1) {
                            viewByValues.append(",");
                            priorValues.append(",");
                            currenValues.append(",");
                            changedValues.append(",");
                            goalseekVal.append(",");
                        }
                    }
                    for (int i = 0; i < numbderformatTotal.size(); i++) {
                        //grandTotalValue=grandTotalValue.add((currentVal.get(i).add((changedVal.get(i).multiply(currentVal.get(i))).divide(percent))));
                        grandTotalValue = grandTotalValue.add(new BigDecimal(numbderformatTotal.get(i).replace(",", "")));
                    }
                }
                for (int i = 0; i < viewByValue.size(); i++) {
                    dimensionName.append("\"").append(viewByValue.get(i)).append("\"");
                    dimensionName.append(",");
                }
                for (int i = 0; i < measgrandTotalValues.size(); i++) {
                    measureGandTotals.append("\"").append(NumberFormatter.getModifiedNumber(measgrandTotalValues.get(i), "")).append("\"");
                    measureGandTotals.append(",");
                }
                existingChangePer.append("] }");
                measureGandTotals.append(" ] ,");
                dimensionName.append(" ] ,");
                grandTotal.append("\"").append(NumberFormatter.getModifiedNumber(grandTotalValue, "")).append("\"").append("] ,");
                viewByValues.append("],");
                priorValues.append("],").append(currenValues).append("],").append(changedValues).append("],").append(goalseekVal).append("] ,").append(grandTotal).append(dimensionName).append(measureGandTotals).append(existingChangePer);
                viewByValues.append(priorValues);
                try {
                    out = response.getWriter();
                    out.print(viewByValues.toString());
                } catch (IOException ex) {
                    logger.error("Exception:", ex);
                }
            } else {
                try {
                    String status = "Prior Not Here";
                    out = response.getWriter();
                    out.print(status);
                } catch (IOException ex) {
                    logger.error("Exception:", ex);
                }
            }
        } else {
            try {
                String status = "Not Exist";
                out = response.getWriter();
                out.print(status);
            } catch (IOException ex) {
                logger.error("Exception:", ex);
            }
        }
        return null;
    }

    public ActionForward getNewProdItroViewBys(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        String elementId = request.getParameter("elementId");
        String reportId = request.getParameter("reportId");
        Container container = Container.getContainerFromSession(request, reportId);
        ProgenDataSet dataSet = container.getRetObj();
        String viewByValue = null;
        if (!container.getDisplayLabels().get(0).equals("Time")) {
            viewByValue = (String) container.getDisplayColumns().get(0);
        } else {
            viewByValue = (String) container.getDisplayColumns().get(1);
        }
        dataSet.resetViewSequence();
        //container.resetTopBottom();
        if (!container.getSortColumns().isEmpty()) {
            container.getSortColumns().clear();
            container.setSortColumn(null, "");
        }
        ArrayList<String> viewByValueList = new ArrayList();
        ArrayList dropedList = new ArrayList();
        PrintWriter out = null;
        for (int i = 0; i < dataSet.getViewSequence().size(); i++) {
            viewByValueList.add(dataSet.getFieldValueString(dataSet.getViewSequence().get(i), viewByValue));
        }
        // dropedList.clear();
        GenerateDragAndDrophtml dragAndDrophtml = new GenerateDragAndDrophtml("Drag values from here", "Drop values here", dropedList, viewByValueList, request.getContextPath());
        String htmlStr = dragAndDrophtml.getDragAndDropDiv();
        try {
            out = response.getWriter();
            out.print(htmlStr);

        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward dailyScheduleReport(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        HttpSession session = request.getSession(false);
        try {
            String reportId = request.getParameter("reportId");
            String completeurl = request.getParameter("url");
            String schedulerName = request.getParameter("scheduleName");
            String mailIds = request.getParameter("usertextarea");
            String contentType = request.getParameter("fileType");
            String startDate = request.getParameter("startdate");
            String endDate = request.getParameter("enddate");
            String hrs = request.getParameter("hrs");
            String mins = request.getParameter("mins");
            String periodType = request.getParameter("Data");
            String schedulerId = request.getParameter("schedulerId");
            String setFromOneview = request.getParameter("fromoneviewshcedule");
            String oneviewid = request.getParameter("oneviewid");
            String path = request.getParameter("contextpath");
            //Added by Amar
            String fromGO = request.getParameter("fromGO");
            //end of code
            //added by Dinanath for header logo
            String headerLogo = request.getParameter("headerLogo2");
            String footerLogo = request.getParameter("footerLogo2");
            String optionalHeader = request.getParameter("optionalHeader2");
            String optionalFooter = request.getParameter("optionalFooter2");
            String htmlSignature = request.getParameter("htmlSignature2");
            //end of code by Dinanath
            mailIds = mailIds.replace("\n", "").replace(" ", ""); //added by Nazneen on 16 dec for removing spaces and next line
            // String frequency="Daily";
            String fileName = "";
            String frequency = request.getParameter("frequency");
//         frequency="Daily";
            String scheduledTime = hrs.concat(":").concat(mins);
            PbDb pbDB = new PbDb();
            PbReturnObject PbRetObj;
            PbReturnObject PbRetObj1;
            String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
            HashMap GraphSizesDtlsHashMap = null;
            GraphSizesDtlsHashMap = (HashMap) request.getSession(false).getAttribute("GraphSizesDtlsHashMap");
            String advHtmlFileProps = (String) request.getSession(false).getAttribute("advHtmlFileProps");
//         String advHtmlFileProps=(String) request.getSession(false).getAttribute("advHtmlFileProps");
            String oldAdvHtmlFileProps = (String) request.getSession(false).getAttribute("oldAdvHtmlFileProps");
            String particularDay = request.getParameter("particularDay");
            String monthParticularDay = request.getParameter("monthParticularDay");
            if (monthParticularDay == null) {
                monthParticularDay = "1";
            }
            Date sDate, eDate;
            DateFormat formatter;
            //added by Nazneen
            String sql1 = "select * from PRG_AR_PERSONALIZED_REPORTS where PRG_REPORT_CUST_NAME='" + schedulerName + "'";
            PbRetObj1 = pbDB.execSelectSQL(sql1);
            if (PbRetObj1.rowCount > 0) {
                logger.info("in already Exists");
                PrintWriter out = response.getWriter();
                out.println("Scheduler with this name already exists! Please enter another name.");
            } else {
                String value = "";
                String valu = "";
                String mont = "";
                String CurrValue = "";
                String value1 = "";
                String valu1 = "";
                String mont1 = "";
                String CurrValue1 = "";
                value = startDate;
                int slashval = value.indexOf("/");
                int slashLast = value.lastIndexOf("/");
                valu = value.substring(0, slashval);
                mont = value.substring(slashval + 1, slashLast + 1);
                CurrValue = mont.concat(valu).concat(value.substring(slashLast));
                startDate = CurrValue;
                value1 = endDate;
                int slashval1 = value1.indexOf("/");
                int slashLast1 = value1.lastIndexOf("/");
                valu1 = value1.substring(0, slashval1);
                mont1 = value1.substring(slashval1 + 1, slashLast1 + 1);
                CurrValue1 = mont1.concat(valu1).concat(value1.substring(slashLast1));
                endDate = CurrValue1;

                formatter = new SimpleDateFormat("dd/MM/yyyy");//modified by Dinanath
                sDate = formatter.parse(startDate);
                eDate = formatter.parse(endDate);
                if (schedulerId != null) {
                    PbReportViewerDAO dao = new PbReportViewerDAO();
                    dao.deleteScheduledReport(schedulerId);
                }
                SnapshotDesigner SSDesigner = new SnapshotDesigner();
                String sql = "select PRG_REPORT_CUST_NAME from PRG_AR_PERSONALIZED_REPORTS where PRG_REPORT_ID=" + reportId + " and PRG_REPORT_CUST_NAME='" + schedulerName + "'";
                PbRetObj = pbDB.execSelectSQL(sql);
                if (setFromOneview != null && setFromOneview.equalsIgnoreCase("true")) {
                } else if (fromGO.equalsIgnoreCase("true")) {
                    if (!(PbRetObj.getRowCount() > 0 && PbRetObj != null)) {
                        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                            SSDesigner.createDocument(reportId, completeurl, request, "now()", "", userId, schedulerName, "schedulerGO");
                        } else {
                            SSDesigner.createDocument(reportId, completeurl, request, "sysdate", "", userId, schedulerName, "schedulerGO");
                        }
                    }
                } else {
                    if (!(PbRetObj.getRowCount() > 0 && PbRetObj != null)) {
                        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                            SSDesigner.createDocument(reportId, completeurl, request, "now()", "", userId, schedulerName, "scheduler");
                        } else {
                            SSDesigner.createDocument(reportId, completeurl, request, "sysdate", "", userId, schedulerName, "scheduler");
                        }
                    }
                }
                ReportTemplateDAO reportDAO = new ReportTemplateDAO();
                String SchedulerId = "";
//            String SchedulerId = reportDAO.getSchedulerID(Integer.parseInt(reportId), schedulerName);
                ReportSchedule schedule = new ReportSchedule();
                schedule.setReportId(Integer.parseInt(reportId));
                schedule.setSchedulerName(schedulerName);
                schedule.setReportmailIds(mailIds);
                schedule.setContenType(contentType);
                schedule.setScheduledTime(scheduledTime);
                schedule.setFrequency(frequency);
                schedule.setStartDate(sDate);
                schedule.setEndDate(eDate);
                schedule.setDataSelection(periodType);
                schedule.setIsReportSchedule(true);
                //code added by Dinanath
                schedule.setIsHeaderLogoOn(headerLogo);
                schedule.setIsFooterLogoOn(footerLogo);
                schedule.setIsOptionalHeaderTextOn(optionalHeader);
                schedule.setIsOptionalFooterTextOn(optionalFooter);
                schedule.setIsHtmlSignatureOn(htmlSignature);
                String filePath = null;
                PbReportViewerDAO pbDAO = new PbReportViewerDAO();
                if (session != null) {
                    filePath = pbDAO.getFilePath(session);
                } else {
                    filePath = "/usr/local/cache";
                }
                schedule.setadvHtmlFileProps(filePath);
                //end of code by Dinanath
                //Added by Amar
                if (fromGO.equalsIgnoreCase("true")) {
                    schedule.setIsGoSchedule(true);
                }
                //end of code
                //Start of code by sandeep on 15/10/14 for schedule// update local files in oneview
                if (setFromOneview != null && setFromOneview.equalsIgnoreCase("true")) {
                    schedule.setFromOneview(true);
                    schedule.setoneviewid(Integer.parseInt(oneviewid));
                    schedule.setGraphSizesDtlsHashMap(GraphSizesDtlsHashMap);
                    schedule.setadvHtmlFileProps(advHtmlFileProps);
                    schedule.setoldAdvHtmlFileProps(oldAdvHtmlFileProps);
                    fileName = "OneviewDetails" + reportId + "_" + session.getId() + "_" + System.currentTimeMillis() + ".txt";
                    schedule.setfilename(fileName);
                    schedule.setContextPath(path);
                    PbDb pbdb = new PbDb();
                    String qry = " DELETE FROM PRG_AR_PERSONALIZED_REPORTS WHERE PRG_REPORT_ID='" + oneviewid + "'";
                    pbdb.execModifySQL(qry);
                } else {
//                ReportTemplateDAO reportDAO = new ReportTemplateDAO();
                    SchedulerId = reportDAO.getSchedulerID(Integer.parseInt(reportId), schedulerName);
                    schedule.setReportScheduledId(Integer.parseInt(SchedulerId));
                }
                //End of code by sandeep on 15/10/14 for schedule// update local files in oneview
                schedule.setUserId((request.getSession(false).getAttribute("USERID")).toString());
                if (frequency.equalsIgnoreCase("Weekly")) {
                    schedule.setParticularDay(particularDay);
                } else {
                    schedule.setParticularDay(monthParticularDay);
                }
                if (setFromOneview != null && setFromOneview.equalsIgnoreCase("true")) {
                } else {
                    List<ReportSchedule> scheduleList = new ArrayList<ReportSchedule>();
                    scheduleList.add(schedule);
                    Gson gson = new Gson();
                    String gsonString = gson.toJson(scheduleList);
                    reportDAO.updateSchedulerDetails(SchedulerId, schedule);
                }
                SchedulerBD bd = new SchedulerBD();
                bd.scheduleReport(schedule, false);
                response.getWriter().print("Report is Scheduled Sucessfully");
            }
        } catch (Exception e) {
            response.getWriter().print("Something went wrong!! Report is not Scheduled Sucessfully");
            logger.error("Exception: ", e);
        }
        return null;
    }

    public ActionForward newProductFormHtmlGeneration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
        HttpSession session = request.getSession(false);
        String elementId = request.getParameter("colName");
        String reportId = request.getParameter("reportid");
        String htmlType = request.getParameter("htmltype");
        String goalName = request.getParameter("goalName");
        Container container = Container.getContainerFromSession(request, reportId);
        ProgenDataSet dataSet = container.getRetObj();
        PbReturnObject reportObj = new PbReturnObject();
        ReportTemplateDAO templatedao = new ReportTemplateDAO();
        reportObj = templatedao.getMeasureValues(elementId.replace("A_", ""));
        ArrayList<String> measures = new ArrayList<String>();
        measures.add((String) container.getDisplayLabels().get(0));
        ArrayList<String> viewByValues = new ArrayList<String>();
        ArrayList<String> currentValues = new ArrayList<String>();
        ArrayList<String> priorValues = new ArrayList<String>();
        ArrayList<String> changedValues = new ArrayList<String>();
        ArrayList<String> goalPerVal = new ArrayList<String>();
        ArrayList<String> goalChangeVal = new ArrayList<String>();
        ArrayList<String> htmltypGoalName = new ArrayList<String>();
        ArrayList<String> coumnNames = new ArrayList<String>();
        for (int i = 0; i < reportObj.rowCount; i++) {
            coumnNames.add(reportObj.getFieldValueString(i, "USER_COL_DESC"));
        }
        htmltypGoalName.add(goalName);
        htmltypGoalName.add(htmlType);
        measures.add(coumnNames.get(0));
        measures.add(coumnNames.get(1));
        measures.add(coumnNames.get(3));
        measures.add("Proj. Change%");
        measures.add("Proj. Value");
        String[] viewBys = request.getParameterValues("viewBys");
        viewByValues.addAll(Arrays.asList(viewBys));
        String[] currval = request.getParameterValues("currvalues");
        currentValues.addAll(Arrays.asList(currval));
        String[] priorVals = request.getParameterValues("measureValues");
        priorValues.addAll(Arrays.asList(priorVals));
        String[] changedVal = request.getParameterValues("changedVals");
        changedValues.addAll(Arrays.asList(changedVal));
        String[] goalChanged = request.getParameterValues("formperent");
        goalPerVal.addAll(Arrays.asList(goalChanged));
        String[] goalChangedValues = request.getParameterValues("goalTimeIndividual");
        goalChangeVal.addAll(Arrays.asList(goalChangedValues));
        NewProductNameHelper newProdData = new NewProductNameHelper();
        newProdData.setGoalNameType(htmltypGoalName);
        newProdData.setMeasures(measures);
        newProdData.setViewByNameValue(viewByValues);
        newProdData.setCurrentValue(currentValues);
        newProdData.setPriorValue(priorValues);
        newProdData.setChangedpercent(changedValues);
        newProdData.setGoalChangePernt(goalPerVal);
        newProdData.setGoalChangeValue(goalChangeVal);
        String FileName = "";
        //String[] mailids=userstextarea.split(",");
        DataSnapshotGenerator dataSnapshotGenrtr = new DataSnapshotGenerator();
        if (htmlType.equals("html")) {
            //completeContent.append(dataSnapshotGenrtr.generateHtmlForMail(container, userId, "fromHtml"));
            FileName = dataSnapshotGenrtr.generateNewProductHtml(newProdData, "html");
            ServletUtilities.downloadFile(FileName, response, "application/html");
        } else if (htmlType.equals("excel")) {
            FileName = dataSnapshotGenrtr.generateNewProductExcel(newProdData, "xls");
            ServletUtilities.downloadFile(FileName, response, "application/xls");
        }
//            BufferedReader br = new BufferedReader(new FileReader(dir + FileName));
//            try {
//
//                 String line = br.readLine();
//                 while (line != null) {
//                        completeContent.append(line);
//                        line = br.readLine();
//
//
//                 }
//                } finally {
//                    br.close();
//
//                    //ServletUtilities.markFileForDeletion(FileName, request.getSession(false));
//              }
//
//                    
        return null;
    }

    public ActionForward newProductPercentBase(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {

        HttpSession session = request.getSession(false);
        String elementId1 = request.getParameter("elementId");
        String reportId = request.getParameter("reportId");
        String newProductName = request.getParameter("productName");
        String viewByProduct = request.getParameter("viewByVals");
        String displaName = request.getParameter("disColName");
        Container container = Container.getContainerFromSession(request, reportId);
        ProgenDataSet dataSet = container.getRetObj();
        dataSet.resetViewSequence();
        ArrayList<String> viewByValueList = new ArrayList<String>();
        ArrayList<String> percentByList = new ArrayList<String>();
        ArrayList<String> measureValues = new ArrayList<String>();
        ArrayList<String> goalChanged = new ArrayList<String>();
        ArrayList<String> tableMeasures = new ArrayList<String>();
        BigDecimal goalchangePertotal = BigDecimal.ZERO;
        BigDecimal goalchangedValue = BigDecimal.ZERO;

        BigDecimal grandToatal = (BigDecimal) container.getRetObj().getColumnGrandTotalValue(elementId1);
        PrintWriter out = null;
        int size = dataSet.getViewSequence().size();
//        String str = new String("A_");
        String str = "A_";
        String elid = (String) container.getViewByElementIds().get(0);

        if (elid.equalsIgnoreCase("Time")) {
            for (int i = 0; i < size; i++) {
                viewByValueList.add(dataSet.getFieldValueString(dataSet.getViewSequence().get(i), elid));
                measureValues.add((NumberFormatter.getModifiedNumber(new BigDecimal(dataSet.getFieldValueString(dataSet.getViewSequence().get(i), elementId1)), "")));
                percentByList.add((NumberFormatter.getModifiedNumber((new BigDecimal(measureValues.get(i).replace(",", ""), MathContext.DECIMAL64).divide(grandToatal)).multiply(new BigDecimal(100)), "")));
                goalChanged.add((NumberFormatter.getModifiedNumber((new BigDecimal(measureValues.get(i).replace(",", ""), MathContext.DECIMAL64).divide(grandToatal)).multiply(new BigDecimal(100)), "")));

            }
        } else {
            String elids = str.concat(elid);
            for (int i = 0; i < size; i++) {
                viewByValueList.add(dataSet.getFieldValueString(dataSet.getViewSequence().get(i), elids));
                measureValues.add((NumberFormatter.getModifiedNumber(new BigDecimal(dataSet.getFieldValueString(dataSet.getViewSequence().get(i), elementId1)), "")));
                percentByList.add((NumberFormatter.getModifidNumber((new BigDecimal(measureValues.get(i).replace(",", ""), MathContext.DECIMAL64).multiply(new BigDecimal(100))).divide(grandToatal, 2))));
                goalChanged.add((NumberFormatter.getModifiedNumber((new BigDecimal(measureValues.get(i).replace(",", ""), MathContext.DECIMAL64).multiply(new BigDecimal(100))).divide(grandToatal, 2), "")));

            }
        }

        int viewByIndex = viewByValueList.indexOf(viewByProduct);
        viewByValueList.add(viewByIndex + 1, newProductName);
        measureValues.add(viewByIndex + 1, measureValues.get(viewByIndex));
        percentByList.add(viewByIndex + 1, "0");
        goalChanged.add(viewByIndex + 1, goalChanged.get(viewByIndex));

        for (int i = 0; i < measureValues.size(); i++) {
            goalchangePertotal = goalchangePertotal.add(new BigDecimal(goalChanged.get(i).replace(",", "")));
            goalchangedValue = goalchangedValue.add(new BigDecimal(measureValues.get(i).replace(",", "")));
        }

        tableMeasures.add(container.getViewByColNames().get(0).toString());
        tableMeasures.add(displaName);
        tableMeasures.add(displaName.concat("(%wise)"));
        tableMeasures.add(goalchangePertotal.toString());
        tableMeasures.add(NumberFormatter.getModifiedNumber(goalchangedValue, "").toString());
        tableMeasures.add(newProductName);

        StringBuilder viewByValues = new StringBuilder();
        StringBuilder percentValues = new StringBuilder();
        StringBuilder grandTotal = new StringBuilder();
        StringBuilder measureValue = new StringBuilder();
        StringBuilder goalChangePer = new StringBuilder();
        StringBuilder measvalandGrndTotals = new StringBuilder();

        viewByValues.append("{ DimViewByNames:[");
        measureValue.append(" MeasureValues:[");
        percentValues.append(" PercentValues:[");
        goalChangePer.append(" GoalChangePercent:[");
        grandTotal.append(" GrandTotal:[");
        measvalandGrndTotals.append(" MeasuresAndGrandTotal:[");

        for (int i = 0; i < viewByValueList.size(); i++) {
            viewByValues.append("\"").append(viewByValueList.get(i)).append("\"");
            measureValue.append("\"").append(measureValues.get(i)).append("\"");
            percentValues.append("\"").append((percentByList.get(i))).append("%").append("\"");
            goalChangePer.append("\"").append((goalChanged.get(i))).append("\"");
            if (i != viewByValueList.size() - 1) {
                viewByValues.append(",");
                measureValue.append(",");
                percentValues.append(",");
                goalChangePer.append(",");
            }
        }
        for (int i = 0; i < tableMeasures.size(); i++) {
            measvalandGrndTotals.append("\"").append(tableMeasures.get(i)).append("\"");
            measvalandGrndTotals.append(",");
        }
        measvalandGrndTotals.append("] }");
        goalChangePer.append("] ,");
        measureValue.append("] ,");
        viewByValues.append("],");
        percentValues.append("],");
        grandTotal.append(NumberFormatter.getModifiedNumber(grandToatal, "")).append("] ,");
        viewByValues.append(percentValues).append(grandTotal).append(measureValue).append(goalChangePer).append(measvalandGrndTotals);

        try {
            out = response.getWriter();
            out.print(viewByValues.toString());

        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }

        return null;
    }

    public ActionForward getSchedulerNames(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
        String reportId = request.getParameter("reportId");
        PbReportViewerBD bd = new PbReportViewerBD();
        String schedulerNames = bd.getScheduledNames(reportId, userId);
        response.getWriter().print(schedulerNames);
        return null;
    }

    public ActionForward editSchedulerDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String schedulerId = request.getParameter("schedulerId");
        PbReportViewerBD bd = new PbReportViewerBD();
        String schedulerdetails = bd.getSchedulerDetails(schedulerId);
        // 
        response.getWriter().print(schedulerdetails);
        return null;
    }
    //Added By Ram 02Nov2015 For Dashboard Schedule

    public ActionForward editSchedulerDashboardDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String schedulerId = request.getParameter("schedulerId");
        PbReportViewerBD bd = new PbReportViewerBD();
        String schedulerdetails = bd.getSchedulerDashboardDetails(schedulerId);
        response.getWriter().print(schedulerdetails);
        return null;
    }

    public ActionForward deleteSchedulerDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String schedulerId = request.getParameter("schedulerId");
        PbReportViewerDAO dao = new PbReportViewerDAO();
        dao.deleteScheduledReport(schedulerId);
        return null;
    }
//Added By Ram 02Nov2015 for delete Dashboard schedule

    public ActionForward deleteDashboardSchedulerDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String schedulerId = request.getParameter("schedulerId");
        PbReportViewerDAO dao = new PbReportViewerDAO();
        dao.deleteDashboardScheduledReport(schedulerId);
        return null;
    }

    public ActionForward getscheduleCount(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
        PbReportViewerDAO dao = new PbReportViewerDAO();
        int cnt = dao.getScheduleCount(userId);
        HashMap map = new HashMap();
        map.put("scheduleCount", cnt);
        Gson json = new Gson();
        String jsonString = json.toJson(map);
        response.getWriter().print(jsonString);
        return null;
    }

    public ActionForward getEnableMeasureDrill(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
        String reportId = request.getParameter("reportId");
        String elementId = request.getParameter("elementId");
        Container container = Container.getContainerFromSession(request, reportId);
        ProgenDataSet dataSet = container.getRetObj();
        return null;
    }

    public ActionForward generateJsonData(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
        String reportId = request.getParameter("reportId");
        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
        Container container = Container.getContainerFromSession(request, reportId);
        PbReportViewerDAO dao = new PbReportViewerDAO();
        String jsonData = dao.generateChartJson(container, userId);
        PrintWriter out = response.getWriter();
        out.print(jsonData);
        return null;
    }

    public ActionForward generateoneviewJsonData(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ClassNotFoundException {
        String reportId = request.getParameter("repId");
        HttpSession session = request.getSession(false);
        String action = request.getParameter("action");
        String oneviewid = request.getParameter("oneviewid");
        String regid = request.getParameter("regid");
        String repname = request.getParameter("graphName");
        String chartname = request.getParameter("chartname");
        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
        Container container = Container.getContainerFromSession(request, reportId);
        PbReportViewerDAO dao = new PbReportViewerDAO();
        String jsonData = "";
        OnceViewContainer onecontainer = null;
        String advHtmlFileProps = (String) request.getSession(false).getAttribute("advHtmlFileProps");
        String oldAdvHtmlFileProps = (String) request.getSession(false).getAttribute("oldAdvHtmlFileProps");
        String fileName = session.getAttribute("tempFileName").toString();

        FileInputStream fis = new FileInputStream(advHtmlFileProps + "/" + fileName);
        ObjectInputStream ois = new ObjectInputStream(fis);
        onecontainer = (OnceViewContainer) ois.readObject();
        ois.close();
        if (action != null && action.equalsIgnoreCase("save")) {
        } else {
            List<OneViewLetDetails> oneviewletDetails = onecontainer.onviewLetdetails;
            for (int i = 0; i < oneviewletDetails.size(); i++) {
                OneViewLetDetails detail = oneviewletDetails.get(i);
                String regid1 = detail.getNoOfViewLets();
                if (regid1 != null && regid1.equalsIgnoreCase(regid)) {
                    container = detail.getContainer();

                }

            }
        }

        if (action != null && action.equalsIgnoreCase("save")) {
//        jsonData=dao.saveChartJson(container,userId,oneviewid,regid,oldAdvHtmlFileProps,onecontainer);
        } else if (action != null && action.equalsIgnoreCase("add")) {
            PbReportCollection collect = container.getReportCollect();
            QueryExecutor qryExec = new QueryExecutor();
            ArrayList viewBys = container.getViewByElementIds();
            ArrayList viewBys1 = container.getViewByColNames();
            String bizzRoleId = container.getReportCollect().reportBizRoles[0];
            String repnamee = container.getReportName();
            String busrolename = collect.getReportBizRoleName(bizzRoleId);
            String filePath = "/usr/local/cache/" + busrolename.replaceAll("\\W", "").trim() + "/" + repnamee.replaceAll("\\W", "").trim() + "_" + reportId + "/" + repnamee.replaceAll("\\W", "").trim() + "_" + reportId + "_data.json";
            File file = new File(filePath);
            Gson gson = new Gson();
            FileReadWrite fileReadWrite = new FileReadWrite();
            if (file.exists()) {
                HashMap<String, List<Map<String, String>>> chartData12 = new HashMap<String, List<Map<String, String>>>();

                String chartData1 = fileReadWrite.loadJSON(filePath);

                Type mapTarType = new TypeToken<HashMap<String, List<Map<String, String>>>>() {
                }.getType();
                chartData12 = gson.fromJson(chartData1, mapTarType);
                List<String> charts = new ArrayList(chartData12.keySet());
                List<Map<String, String>> sds = chartData12.get("chartdata");
//                Map<String, String> sdfsdf=sds.get(index)
// String graphName=charts.get(0);
            }
            ProgenDataSet pbretObj = null;
            PbReportQuery reportQuery = null;
            reportQuery = qryExec.formulateQuery(collect, userId);
            ArrayList viewBysList = new ArrayList();
            ArrayList queryCols = new ArrayList();
            for (int i = 0; i < viewBys.size(); i++) {
                viewBysList.add(viewBys.get(i));
            }
//        for(int i=0;i<measBys.length;i++){
//        queryCols.add(measBys[i]);
//        }
            reportQuery.setRowViewbyCols(viewBysList);
//        reportQuery.setQryColumns(queryCols);
            reportQuery.setColViewbyCols(queryCols);
            String query = null;
            try {
                query = reportQuery.generateViewByQry();
            } catch (Exception ex) {
//            logger.error("Exception:",ex);
            }
            pbretObj = qryExec.executeQuery(collect, query, false);
            container.setRetObj(pbretObj);

            jsonData = dao.generateoneviewJson(container, userId, regid);

        } else {
            jsonData = dao.generateoneviewJson(container, userId, regid);
        }

        PrintWriter out = response.getWriter();
        out.print(jsonData);
        return null;
    }
    //sandeep

    public ActionForward gettingJsonData(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ClassNotFoundException {

        HttpSession session = request.getSession(false);
        String action = request.getParameter("action");
        String oneviewid = request.getParameter("oneviewid");

        FileReadWrite fileReadWrite = new FileReadWrite();
        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
        String advHtmlFileProps = (String) request.getSession(false).getAttribute("advHtmlFileProps");
        String fileName = "";
        String oldAdvHtmlFileProps = (String) request.getSession(false).getAttribute("oldAdvHtmlFileProps");
        PbReportViewerDAO dao = new PbReportViewerDAO();
        String jsonData = "";
        PbReturnObject retObj = null;
        OnceViewContainer onecontainer = null;
        HashMap map1 = new HashMap();
        if (session.getAttribute("ONEVIEWDETAILS") != null) {
            map1 = (HashMap) session.getAttribute("ONEVIEWDETAILS");
            if (map1 != null) {
                onecontainer = (OnceViewContainer) map1.get(oneviewid);
            }
            session.removeAttribute("ONEVIEWDETAILS");
        } else {

            fileName = session.getAttribute("tempFileName").toString();
            ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
            OneViewBD oneViewBD = new OneViewBD();

            retObj = reportTemplateDAO.getOneviewFileNam(oneviewid);
            String USERID = (String) session.getAttribute("USERID");

            fileName = retObj.getFieldValueString(0, 1);
//        oneVersion=retObj.getFieldValueString(0, 9);
//        filePath=retObj.getFieldValueString(0, 11);

            FileInputStream fis = new FileInputStream(oldAdvHtmlFileProps + "/" + fileName);
            ObjectInputStream ois = new ObjectInputStream(fis);
            onecontainer = (OnceViewContainer) ois.readObject();
            ois.close();
        }
        List<OneViewLetDetails> oneviewletDetails = onecontainer.onviewLetdetails;
        HashMap<String, List> map = new HashMap<String, List>();
        ArrayList<String> repids = new ArrayList<String>();
        ArrayList<String> repnames = new ArrayList<String>();
        ArrayList<String> chartnames = new ArrayList<String>();
        ArrayList<String> regids = new ArrayList<String>();
        ArrayList<String> busrolename = new ArrayList<String>();
        ArrayList<String> idArr = new ArrayList<String>();
        ArrayList<String> drillviewby = new ArrayList<String>();

        String graphName = "";
        int j = 0;
        for (int i = 0; i < oneviewletDetails.size(); i++) {
            OneViewLetDetails detail = oneviewletDetails.get(i);
            String reptype = detail.getReptype();
//                    if(reptype!=null && reptype.equalsIgnoreCase("repGraph")){
            String repid = detail.getRepId();
            String regid = detail.getNoOfViewLets();
            String reportname = detail.getRepName();
            String drillvalue = detail.getchartdrills();
            String drillvalue1 = detail.getchartrefreshdrills();
            String viewvalue = detail.getdrillviewby();
            graphName = detail.getchartname();
//                   busrolename=detail.getRolename();
            regids.add(regid);
            repids.add(repid);
            repnames.add(reportname);
            busrolename.add(detail.getRolename());
            idArr.add(drillvalue);
            drillviewby.add(viewvalue);
//                        Container container=detail.getContainer();
//                          PbReportCollection collect = container.getReportCollect();
//                          busrolename=  collect.getReportBizRoleName(detail.getRoleId());
//                        if( repid == null ? "80" == null : repid.equals("80")){
//String filePath = "/usr/local/cache/"+busrolename.replaceAll("\\W","").trim()+"/"+reportname.replaceAll("\\W","").trim()+"_"+repid+"/"+reportname.replaceAll("\\W","").trim()+"_"+repid+".json";
//  File file = new File(filePath);
//  Gson gson = new Gson();
//if(file.exists()){
//             HashMap<String,List<Map<String, String>>> chartData12 = new HashMap<String,List<Map<String, String>>>();
//
//                            String chartData1  = fileReadWrite.loadJSON(filePath);
//
//                  Type mapTarType = new TypeToken <HashMap<String,List<Map<String, String>>>>() {
//                }.getType();
//chartData12 = gson.fromJson(chartData1, mapTarType);
// List<String> charts = new ArrayList(chartData12.keySet());
//graphName=charts.get(j);
// j++;
//
//                    }
//                    }
            chartnames.add(graphName);
//                    }

        }
        if (action != null && action.equalsIgnoreCase("refresh")) {
            fileName = retObj.getFieldValueString(0, 1);
            FileOutputStream fos = new FileOutputStream(oldAdvHtmlFileProps + "/" + fileName);
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(onecontainer);
            oos.flush();
            oos.close();
            fileName = session.getAttribute("tempFileName").toString();
            FileOutputStream fos1 = new FileOutputStream(advHtmlFileProps + "/" + fileName);
            ObjectOutputStream oos1 = new ObjectOutputStream(fos1);
            oos1.writeObject(onecontainer);
            oos1.flush();
            oos1.close();
            session.removeAttribute("dataMapgblsave");
        }
        map.put("regionids", regids);
        map.put("reportids", repids);
        map.put("repnames", repnames);
        map.put("chartnames", chartnames);
        map.put("busrolename", busrolename);
        map.put("idArr", idArr);
        map.put("drillviewby", drillviewby);
        Gson json = new Gson();
        String jsonString = json.toJson(map);
        PrintWriter out = response.getWriter();
        out.print(jsonString);
        return null;
    }

    public ActionForward addNewChartsUI(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, Exception {
        String reportId = request.getParameter("reportId");
        HttpSession session = request.getSession(false);
        String fromoneview = "null";
        PbReportViewerDAO dao = new PbReportViewerDAO();
        String jsonData = null;
        String filesPath = "";
        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));

        Gson gson = new Gson();
        OneViewLetDetails detail = new OneViewLetDetails();
        String oneviewid = request.getParameter("oneviewid");
        if (fromoneview != null && fromoneview.equalsIgnoreCase("true")) {

            jsonData = dao.createoneviewobject(request, response, oneviewid, userId);
        } else {
            String InnerViewbyEleId = request.getParameter("InnerViewbyEleId");
            String goUpdate = request.getParameter("goUpdate");
            String[] viewBys = request.getParameter("rowViewByArray").split(",");
            String[] rowViewNamesArr = request.getParameter("rowViewNamesArr").split(",");
            String[] measBys = request.getParameter("rowMeasArray").split(",");
            String[] rowMeasNamesArr = request.getParameter("rowMeasNamesArr").split(",");
            String[] AggType = request.getParameter("AggType").split(",");

            Container container = Container.getContainerFromSession(request, reportId);
            if (session != null) {
                filesPath = dao.getFilePath(session);
            } else {
                filesPath = "/usr/local/cache";
            }
//
            container.setFilesPath(filesPath);
            PbReportCollection collect = container.getReportCollect();
            String bizzRoleId = container.getReportCollect().reportBizRoles[0];
            String bizzRoleName = collect.getReportBizRoleName(bizzRoleId);
//        PbReportViewerDAO dao = new PbReportViewerDAO();
//        String jsonData=null;
//        if(request.getParameter("chartId")==null){
////        jsonData=dao.addNewCharts(container,reportId,userId,viewBys,rowViewNamesArr,"Local");
//        }
//        else{
            jsonData = dao.addNewCharts(container, reportId, userId, viewBys, rowViewNamesArr, measBys, rowMeasNamesArr, String.valueOf(request.getParameter("chartId")), AggType, fromoneview, null, detail, InnerViewbyEleId, filesPath, goUpdate);
//        }
        }
//        ReportManagementDAO report = new ReportManagementDAO();
//        String reportData = report.chartRequestHandler(request,bizzRoleName);

//        PrintWriter out = response.getWriter();
//        out.print(jsonData);
//        out.print(reportData);
        return null;
    }

    public ActionForward getRepTimeSpanDisplay(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
        String reportId = request.getParameter("repId");
        String from = request.getParameter("from");
        Container container = Container.getContainerFromSession(request, reportId);
        PbReportCollection collect = new PbReportCollection();
        collect = container.getReportCollect();
        ArrayList<String> timeinfo = collect.timeDetailsArray;
        PbReportViewerDAO dao = new PbReportViewerDAO();
        ProgenParam connectionparam = new ProgenParam();
        String lastupdateedate = "";
        Connection con = null;
        ArrayList<String> qryelements = collect.reportQryElementIds;
        String elementId = "";
        if (qryelements != null && !qryelements.isEmpty()) {
            elementId = qryelements.get(0);
            con = connectionparam.getConnection(elementId);
            lastupdateedate = dao.getLastUpdatedDate(con, elementId);
        }

        StringBuilder sb = new StringBuilder();
        String vals = container.getTimememdetails().get("PR_DAY_DENOM").toString();
        vals = vals.replace("[", "");
        vals = vals.replace("]", "");
        String[] vals1 = vals.split(",");
        DateFormat formatter;
        Date date12;
//        container.getTimememdetails().get("PR_DAY_DENOM");
        Date date = new Date();
        String[] dates1 = new String[10];
        String[] dates = new String[10];
        Calendar ca1123 = Calendar.getInstance();
        java.util.Date d1 = new java.util.Date(ca1123.getTimeInMillis());
        if (vals1[1].contains("/")) {
            dates = vals1[1].split("/");
        }
        if (vals1[1].contains("-")) {
            dates1 = vals1[1].split(" ");
            String values = dates1[1];
            String[] repdates = values.split("-");
            dates[2] = repdates[0];
            dates[0] = repdates[1];
            dates[1] = repdates[2];
        }
        //  dates[0];//month
        // dates[1];//day
        // dates[2];//year
        Calendar ca1 = Calendar.getInstance();

        // set(year, month, date) month 0-11
        ca1.set(Integer.parseInt(dates[2].substring(0, 4)), Integer.parseInt(dates[0].replace(" ", "")) - 1, Integer.parseInt(dates[1]));
        java.util.Date d = new java.util.Date(ca1.getTimeInMillis());
        String partialName = new SimpleDateFormat("MMM").format(d);
        String fullName = partialName + "'" + dates[2].substring(2, 4);
        String nameToDisplay = timeinfo.get(3);
        if (timeinfo.get(1).equalsIgnoreCase("PRG_DATE_RANGE")) {
            nameToDisplay = "Custom";
        }
        if (timeinfo.get(3).equalsIgnoreCase("Month")) {
            nameToDisplay = "Month";
//          partialName= new SimpleDateFormat("MMM").format(d);
            fullName = partialName + "'" + dates[2].substring(2, 4);
        } else if (timeinfo.get(3).equalsIgnoreCase("Qtr")) {
            int month = Integer.parseInt(new SimpleDateFormat("M").format(d));
            nameToDisplay = "Quarter";
            if (month >= 1 && month <= 3) {
                partialName = "Q4";
            } else if (month >= 4 && month <= 6) {
                partialName = "Q1";
            } else if (month >= 7 && month <= 9) {
                partialName = "Q2";
            } else if (month >= 10 && month <= 12) {
                partialName = "Q3";
            }
            fullName = partialName + "-" + dates[2].substring(0, 4);
        } else {
        }
        if (!(from == null && from.equalsIgnoreCase("")) && !from.equalsIgnoreCase("fromtab")) {
            sb.append("<div id='timeinfo' name ='Time Info' title='Time Info'style='position:absolute;width:50px;left:600px;top:200px;'><table border='1' width='100px' class='mycls' cellspacing='0' cellpadding='0' ><tr class='navtitle-hover'align='right'onmousemove=divMove('timeinfo')  id='" + reportId + "tr'><td align='right' id='titleBar'  style='cursor:move' width='80%' id='" + reportId + "td'><a class='ui-icon ui-icon-close' onclick=closeRepSpan('" + reportId + "')></a></td></tr><tr><td>");
        }
        sb.append("<table><tr style=\"width:100px\"><td align=\"left\" styel=\"width:85px\">Duration</td><td>:</td><td align=\"left\" style=\"color:red ;width:15px\">" + nameToDisplay + "</td></tr>");
        if (!timeinfo.get(1).equalsIgnoreCase("PRG_DATE_RANGE")) {
            sb.append("<tr><td align=\"left\" style=\"color:red ;width:85px\">" + nameToDisplay + "</td><td>:</td><td align=\"left\" style=\"widht:15px\">" + fullName + "</td></tr>");
        }
        sb.append("<tr style=\"width:100px\"><td align=\"left\" styel=\"width:85px\">From Date </td><td>:</td><td align=\"left\" style=\"widht:15px\">" + vals1[0].substring(0, 10) + "</td></tr>");
        sb.append("<tr style=\"width:100px\" ><td align=\"left\" styel=\"width:85px\">To Date </td><td>:</td><td align=\"left\" style=\"widht:15px\">" + vals1[1].substring(0, 11) + "</td></tr>");
        String[] datevals1 = vals1[2].split(" ");
        String[] datevals = new String[10];
        int mymonth = 0;
        int decval = 0;
        if (datevals1[1].contains("/")) {
            datevals = datevals1[1].split("/");
            mymonth = Integer.parseInt(datevals[0]);
            decval = mymonth - 1;
        } else {
            String[] myvals = datevals1[1].split("-");

            datevals[2] = myvals[0];
            datevals[1] = myvals[2];
            mymonth = Integer.parseInt(datevals[1]);
            decval = mymonth - 1;
        }

        Calendar ca11 = Calendar.getInstance();
        ca11.set(Integer.parseInt(datevals[2].substring(0, 4)), decval, Integer.parseInt(datevals[1]));
//        java.util.Date d1 = new java.util.Date(ca11.getTimeInMillis());
        d = new java.util.Date(ca11.getTimeInMillis());
        Calendar ca112 = Calendar.getInstance();
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        ca112.add(Calendar.DATE, -1);
//        String repUpdatedate = dateFormat.format(ca112.getTime());
//        String[] datearr =  lastupdateedate.split(" ");
        String repUpdatedate = lastupdateedate;
//        
        partialName = new SimpleDateFormat("MMM").format(d);
        fullName = partialName + "'" + datevals[2].substring(2, 4);

        if (timeinfo.get(3).equalsIgnoreCase("Month")) {
            fullName = partialName + "'" + datevals[2].substring(2, 4);
        } else if (timeinfo.get(3).equalsIgnoreCase("Qtr")) {
            int month = Integer.parseInt(new SimpleDateFormat("M").format(d));
            nameToDisplay = "Quarter";
            if (month >= 1 && month <= 3) {
                partialName = "Q4";
            } else if (month >= 4 && month <= 6) {
                partialName = "Q1";
            } else if (month >= 7 && month <= 9) {
                partialName = "Q2";
            } else if (month >= 10 && month <= 12) {
                partialName = "Q3";
            }
            fullName = partialName + "-" + datevals[2].substring(0, 4);
        } else {
        }
        if (timeinfo.get(1).equalsIgnoreCase("PRG_DATE_RANGE")) {
            sb.append("<tr style=\"width:100px\"><td align=\"left\" styel=\"width:85px\">Compare Dates</td>");
        } else {
            sb.append("<tr style=\"width:100px\"><td  align=\"left\" styel=\"width:85px\">Compare</td><td>:</td><td align=\"left\" style=\"widht:15px\">" + fullName + "</td></tr>");
        }
        sb.append("<tr style=\"width:100px\"><td align=\"left\" styel=\"width:85px\">From Date </td><td>:</td><td align=\"left\" style=\"widht:15px\">" + vals1[2].substring(0, 11) + "</td></tr>");
        sb.append("<tr style=\"width:100px\"><td align=\"left\" styel=\"width:85px\">To Date </td><td>:</td><td align=\"left\" style=\"widht:15px\">" + vals1[3].substring(0, 11) + "</td></tr>");
        sb.append("<tr style=\"width:100px\"><td align=\"left\" styel=\"width:85px\">Updated On </td><td>:</td><td align=\"left\" style=\"widht:15px\">" + repUpdatedate + "</td></tr>");

        sb.append("</table>");
        sb.append("</td></tr></table></div>");
        PrintWriter out = response.getWriter();
        out.print(sb);
        return null;
    }

    public ActionForward getDateforDateFormat(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
        HttpSession session = request.getSession(false);
        if (session.getAttribute("dateFormat") != null) {
            session.removeAttribute("dateFormt");
        }
        String dateFormat = request.getParameter("dateFormt");
        session.setAttribute("dateFormat", dateFormat);
        return mapping.findForward("homejsp");
    }

    public ActionForward getDimenssionDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException {
        String selectedParam = request.getParameter("selectedParam");
        PbDb pbdb = new PbDb();
        PbReturnObject vewdetspbro = null;
        PbReturnObject paramMbrsObj = null;
        String vewdetssql = "SELECT GRP_ID, FOLDER_ID, FOLDER_NAME, SUB_FOLDER_ID, SUB_FOLDER_NAME, SUB_FOLDER_TYPE, SUB_FOLDER_TAB_ID, IS_DIMENSION, IS_FACT, IS_BUCKET, DISP_NAME,"
                + " QRY_DIM_ID, DIM_ID, DIM_TAB_ID, DIM_NAME, ELEMENT_ID, BUSS_TABLE_ID, BUSS_COL_ID, BUSS_COL_NAME,"
                + " USER_COL_NAME, USER_COL_DESC, USER_COL_TYPE, REF_ELEMENT_ID, REF_ELEMENT_TYPE, MEMBER_ID, MEMBER_NAME"
                + ", DENOM_QUERY, BUSS_TABLE_NAME, CONNECTION_ID, AGGREGATION_TYPE, ACTUAL_COL_FORMULA, USE_REPORT_FLAG, "
                + "REFFERED_ELEMENTS,DISPLAY_FORMULA,TABLE_DISP_NAME,TABLE_TOOLTIP_NAME FROM PRG_USER_ALL_INFO_DETAILS where ELEMENT_ID=" + selectedParam;
        vewdetspbro = pbdb.execSelectSQL(vewdetssql);
        String connectionId = String.valueOf(vewdetspbro.getFieldValueInt(0, "CONNECTION_ID"));
        String dimBussTabId = String.valueOf(vewdetspbro.getFieldValueInt(0, "BUSS_TABLE_ID"));
        String dimElementId = String.valueOf(vewdetspbro.getFieldValueInt(0, "ELEMENT_ID"));
        String busstabName = String.valueOf(vewdetspbro.getFieldValueString(0, "BUSS_TABLE_NAME"));
        String memName = String.valueOf(vewdetspbro.getFieldValueString(0, "BUSS_COL_NAME"));
        String usercolName = String.valueOf(vewdetspbro.getFieldValueString(0, "USER_COL_DESC"));
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dimBussTabId", dimBussTabId);
        map.put("dimElementId", dimElementId);
        map.put("busstabName", busstabName + "." + memName);
        Gson gson = new Gson();
        String gsonString = gson.toJson(map);
        response.getWriter().print(gsonString);
        return null;
    }

    public ActionForward hideLeftTd(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {

        String reportId = request.getParameter("repId");
        String hidelefttd = request.getParameter("block");
        String tdtype = request.getParameter("tdType");
        PbReportViewerDAO dao = new PbReportViewerDAO();
        dao.updateHideLeftTdStatus(reportId, hidelefttd, tdtype);
        return null;

    }

    public ActionForward getLeftTdStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {

        String reportId = request.getParameter("repId");
        String tdtype = request.getParameter("tdtype");
        String repLeftTdStatus = null;
        PbReportViewerDAO dao = new PbReportViewerDAO();
        repLeftTdStatus = dao.getLeftTdStatus(reportId, tdtype);
        PrintWriter out = response.getWriter();
        out.print(repLeftTdStatus);

        return null;

    }

    public ActionForward getMeasureValues(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        String elementId = request.getParameter("measureId");
        PbReportViewerDAO dao = new PbReportViewerDAO();
        ArrayList draggableList = new ArrayList();
        String factName = null;
        PbReturnObject measureValues = dao.getMeasureValues(elementId, factName);
        if (measureValues != null) {
            for (int i = 0; i < measureValues.getRowCount(); i++) {
                //
                draggableList.add(measureValues.getFieldValueString(i, 0));
            }
            GenerateDragAndDrophtml draganddrophtml = new GenerateDragAndDrophtml("", "", null, draggableList, request.getContextPath());
            response.getWriter().print(draganddrophtml.getDragAndDropDiv());
        }
        return null;
    }

    public ActionForward getMeasureNamesforParamFilter(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        String folderIds = (String) request.getParameter("folderIds");
        String subFolderId = (String) request.getParameter("subfolderIds");
        //  HashMap map=new HashMap();
        TreeMap map = new TreeMap();
        ReportTemplateDAO dao = new ReportTemplateDAO();
        map = dao.getMeasureNames(folderIds, subFolderId, request.getContextPath());
        Gson gson = new Gson();
        String gsonString = gson.toJson(map);
        //
        response.getWriter().print(gsonString);
        return null;
    }

    public ActionForward checkforMeasureType(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        String measureId = (String) request.getParameter("columnName");
        measureId = measureId.substring(2);
        PbReportViewerDAO dao = new PbReportViewerDAO();
        int cnt = dao.checkMesureType(measureId);
        //
        response.getWriter().print(cnt);
        return null;
    }

    public ActionForward chkMsrforConversionFormula(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        String measureId = (String) request.getParameter("columnName");
        measureId = measureId.substring(2);
        PbReportViewerDAO dao = new PbReportViewerDAO();
        int cnt = dao.chkMsrforConversionFormula(measureId);
        //
        response.getWriter().print(cnt);
        return null;
    }

    public ActionForward getViewbysRelatedReport(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        String reportid = request.getParameter("reportid");
        PbReportViewerBD viewerBd = new PbReportViewerBD();
        String from = request.getParameter("callFrom");
        String viewbydetails = viewerBd.getViewbysRelatedReport(reportid, from);
//        
        response.getWriter().print(viewbydetails);
        return null;
    }

    public ActionForward saveAdvanceParameters(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        HttpSession session = request.getSession(false);
        String reportId = request.getParameter("reportId");
        String CheckViewbyId = request.getParameter("CheckViewbyId");
        String uncheckViewbyId = request.getParameter("uncheckViewbyId");
        String checkdepentReportIds = request.getParameter("checkdepentReportIds");
        String checkdepentReportIds1 = request.getParameter("checkdepentReportIds1");
        String[] ViewbyNames = request.getParameterValues("viewByName");
        String[] ViewbyIds = request.getParameterValues("viewByID");
        String[] conditions = request.getParameterValues("condition");
        String[] depRepIds = request.getParameterValues("reportName");
        String[] checkReportIdArr1 = null;
        String[] uncheckViewbyIdArr = null;
        String[] CheckViewbyIdArr = CheckViewbyId.split(",");

        String[] checkReportIdArr = checkdepentReportIds.split(",");
        if (checkdepentReportIds1 != null) {
            checkReportIdArr1 = checkdepentReportIds1.split(",");
        }
        if (uncheckViewbyId != null) {
            uncheckViewbyIdArr = uncheckViewbyId.split(",");
        }
        //

        PbReportViewerDAO savedao = new PbReportViewerDAO();
        savedao.saveAdvanceParameterOptions(reportId, ViewbyIds, conditions, CheckViewbyIdArr, checkReportIdArr, checkReportIdArr1, uncheckViewbyIdArr);
        return null;
    }

    public ActionForward getInsightTableData(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        String viewById = request.getParameter("viewByDim");
        String paramVals = request.getParameter("paramVals");
        String reportId = request.getParameter("reportId");
        PbReportViewerBD bd = new PbReportViewerBD();
        String drilldata = bd.generateInsightDrillData(viewById, null, paramVals, null, reportId, request, null);
        response.getWriter().print(drilldata);
        return null;
    }

    public ActionForward getViewbyDrillData(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        String viewById = request.getParameter("viewByDim");
        String dimValue = request.getParameter("dimValue");
        String paramVals = request.getParameter("paramVals");
        String masterDimId = request.getParameter("masterDimension");
        String reportId = request.getParameter("reportId");
        String childDimId = request.getParameter("childDimId");
        Container container = Container.getContainerFromSession(request, reportId);
        Map<String, String> drillMap = container.getReportCollect().getDrillMap();
        if (childDimId == null || "".equals(childDimId)) {
            childDimId = (String) drillMap.get(viewById);
        }
        PbReportViewerBD bd = new PbReportViewerBD();
        String drilldata = bd.generateInsightDrillData(viewById, dimValue, paramVals, masterDimId, reportId, request, childDimId);
        response.getWriter().print(drilldata);
        return null;
    }
    //Surender

    public ActionForward getMeasuresForOneView(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        String foldersIds = request.getParameter("busroleID");
        String result = "";
        HashMap map = new HashMap();
        Container container = null;
        String customReportId = "";

        ArrayList<String> Parameters = null;

        ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();

        if (session != null) {
            result = reportTemplateDAO.getMeasuresForOneView(foldersIds, request.getContextPath());
            request.setAttribute("oneviewMeasu", result);
            return mapping.findForward("oneviewMeasures");
        } else {
            return mapping.findForward("sessionExpired");
        }

    }

//Surender
    public ActionForward insertOneViewName(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        String oneviewName = request.getParameter("oneviewName");
        ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
        String oneVIewId = reportTemplateDAO.insertOneViewName(oneviewName);
        String oneViewType = request.getParameter("oneViewType");
        String roleId = request.getParameter("roleId");
        String innerWidth = request.getParameter("innerWidth");
        String datetype = request.getParameter("datetype");
        String oneviewtypedate = (String) session.getAttribute("oneviewdatetype");
        if (oneViewType != null && (oneViewType.equalsIgnoreCase("Business TemplateView") || oneViewType.equalsIgnoreCase("Measure Based Business Template"))) {
            HashMap map = new HashMap();
            HashMap oneMap = new HashMap();
            Container container = null;
            if (session.getAttribute("PROGENTABLES") != null) {
                map = (HashMap) session.getAttribute("PROGENTABLES");
                if (map.get(oneVIewId) != null) {
                    container = (Container) map.get(oneVIewId);
                    container = new Container();
                } else {
                    container = new Container();
                }
            } else {
                container = new Container();
            }
            PbReportCollection collect = container.getReportCollect();
            if (collect == null) {
                collect = new PbReportCollection();
            }
            HashMap ParametersHashMap = container.getParametersHashMap();
            ParametersHashMap.put("UserFolderIds", roleId);
            container.setParametersHashMap(ParametersHashMap);
            collect.setReportBizRole(Integer.parseInt(roleId));
            container.setReportCollect(collect);
            container.setReportId(oneVIewId);
            container.setTableId(oneVIewId);
            container.setReportName(oneviewName);
            container.setSessionContext(session, container);
            request.setAttribute("ReportId", oneVIewId);
            request.setAttribute("roleid", roleId);
            OnceViewContainer onecontainer = new OnceViewContainer();
            //maintaining default time details in designer of oneview written by swati
            ProgenParam paramdate = new ProgenParam();
            ArrayList alist = new ArrayList();
            if (oneviewtypedate != null && oneviewtypedate.equalsIgnoreCase("true")) {
                if (datetype != null && datetype.equalsIgnoreCase("StandardTime")) {
                    String value1 = paramdate.getdateforpage();
//             ArrayList alist = new ArrayList();
                    alist.add("Day");
                    alist.add("PRG_STD");
                    alist.add(value1);
                    alist.add("Month");
                    alist.add("Last Period");
                } else if (datetype != null && datetype.equalsIgnoreCase("RangeBasis")) {
                }
            } else {
                String value1 = paramdate.getdateforpage();
//             ArrayList alist = new ArrayList();
                alist.add("Day");
                alist.add("PRG_STD");
                alist.add(value1);
                alist.add("Month");
                alist.add("Last Period");
            }
            onecontainer.timedetails = alist;
            onecontainer.oneviewId = oneVIewId;
            onecontainer.oneviewName = oneviewName;
            if (innerWidth != null && !innerWidth.equalsIgnoreCase("")) {
                onecontainer.width = Integer.parseInt(innerWidth);
            }
//         onecontainer.setContainer(container);
            onecontainer.setRoleId(roleId);
            onecontainer.setOneViewType(oneViewType);
            oneMap.put(oneVIewId, onecontainer);
            session.setAttribute("ONEVIEWDETAILS", oneMap);

        }
        response.getWriter().print(oneVIewId);
        return null;

    }
//Surender

    public ActionForward generateRegions(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        String oneviewID = request.getParameter("oneviewID");
        String oneviewLets = request.getParameter("oneviewLets");
        String oneviewName = request.getParameter("oneviewName");
        String innerWidth = request.getParameter("innerWidth");
        String height = request.getParameter("height");
        String from = request.getParameter("from");
//         String roleId = request.getParameter("busRolId");
        int row = Integer.parseInt(request.getParameter("row"));
        int col = Integer.parseInt(request.getParameter("col"));
//        int prevCol=0;
        int prevRow = Integer.parseInt(request.getParameter("prevRow"));
        int dashId = Integer.parseInt(oneviewLets);
        HashMap map = new HashMap();
        String oneViewType = request.getParameter("oneViewType");
//           map = (HashMap) session.getAttribute("ONEVIEW");
//           onecontainer = (OnceViewContainer) map.get(oneviewID);
        if (session.getAttribute("ONEVIEWDETAILS") != null) {
            OnceViewContainer onecontainer = null;
            map = (HashMap) session.getAttribute("ONEVIEWDETAILS");
            onecontainer = (OnceViewContainer) map.get(oneviewID);
            if (innerWidth != null && !innerWidth.equalsIgnoreCase("")) {
                onecontainer.width = Integer.parseInt(innerWidth);
            }
            for (int i = prevRow; i < row; i++) {
                for (int j = 0; j < col; j++) {
                    OneViewLetDetails detail = new OneViewLetDetails();
                    detail.setNoOfViewLets(oneviewLets);
                    detail.setCol(j);
                    detail.setRow(i);
                    detail.setColSpan(1);
                    detail.setRowSpan(1);
                    onecontainer.addDashletDetail(detail);
                    dashId = dashId + 1;
                    oneviewLets = String.valueOf(dashId);
//                detail.setRoleId(roleId);
                    detail.setOneviewId(oneviewID);
                }
            }
            onecontainer.oneviewId = oneviewID;
            onecontainer.oneviewName = oneviewName;
//          
//         onecontainer.setColumns(col);
            onecontainer.setRows(row);
            onecontainer.height = height;
        } else {
            ArrayList prevRows = new ArrayList();
            OnceViewContainer onecontainer = null;
            OneViewLetDetails detail = null;
            if (from != null && from.equalsIgnoreCase("viewer")) {
                String advHtmlFileProps = (String) request.getSession(false).getAttribute("advHtmlFileProps");

                ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
                String fileName = session.getAttribute("tempFileName").toString();
                FileInputStream fis2 = new FileInputStream(advHtmlFileProps + "/" + fileName);
                ObjectInputStream ois2 = new ObjectInputStream(fis2);
                onecontainer = (OnceViewContainer) ois2.readObject();
                ois2.close();
                dashId = onecontainer.onviewLetdetails.size();

                oneviewLets = String.valueOf(dashId);
//                prevRow=onecontainer.getRows();
//                row=prevRow+row;
                //detail=(OneViewLetDetails) onecontainer.onviewLetdetails;
                for (int i = prevRow; i < row; i++) {
                    for (int j = 0; j < col; j++) {
                        detail = new OneViewLetDetails();
                        detail.setNoOfViewLets(oneviewLets);
                        detail.setCol(j);
                        detail.setRow(i);
                        detail.setColSpan(1);
                        detail.setRowSpan(1);
                        onecontainer.addDashletDetail(detail);
                        dashId = dashId + 1;
                        oneviewLets = String.valueOf(dashId);
//                detail.setRoleId(roleId);
                        detail.setOneviewId(oneviewID);
                    }
                }
            } else {
                onecontainer = new OnceViewContainer();
                //maintaining default time details in designer of oneview written by swati
                ProgenParam paramdate = new ProgenParam();
                String value1 = paramdate.getdateforpage();
                ArrayList alist = new ArrayList();
                alist.add("Day");
                alist.add("PRG_STD");
                alist.add(value1);
                alist.add("Month");
                alist.add("Last Period");
                onecontainer.timedetails = alist;

                for (int i = prevRow; i < row; i++) {
                    for (int j = 0; j < col; j++) {
                        detail = new OneViewLetDetails();
                        detail.setNoOfViewLets(oneviewLets);
                        detail.setCol(j);
                        detail.setRow(i);
                        detail.setColSpan(1);
                        detail.setRowSpan(1);
                        onecontainer.addDashletDetail(detail);
                        dashId = dashId + 1;
                        oneviewLets = String.valueOf(dashId);
//                detail.setRoleId(roleId);
                        detail.setOneviewId(oneviewID);
                    }
                }
            }
            onecontainer.oneviewId = oneviewID;
            onecontainer.oneviewName = oneviewName;
            onecontainer.setOneViewType(oneViewType);
            if (innerWidth != null && !innerWidth.equalsIgnoreCase("")) {
                onecontainer.width = Integer.parseInt(innerWidth);
            }
//         onecontainer.setColumns(col);
            onecontainer.setRows(row);
            onecontainer.height = height;
            map.put(oneviewID, onecontainer);
            if (from != null && from.equalsIgnoreCase("viewer")) {
                String advHtmlFileProps = (String) request.getSession(false).getAttribute("advHtmlFileProps");
                ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
                String fileName = session.getAttribute("tempFileName").toString();
                FileOutputStream fos = new FileOutputStream(advHtmlFileProps + "/" + fileName);
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                oos.writeObject(onecontainer);
                oos.flush();
                oos.close();
            } else {
                session.setAttribute("ONEVIEWDETAILS", map);
            }
        }

        return null;

    }
//Surender

    public ActionForward deleteOneViewFromSession(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        String oneviewID = request.getParameter("oneviewID");
        HashMap map = new HashMap();

        session.removeAttribute("ONEVIEWDETAILS");

        return null;
    }
//Surender

    public ActionForward saveingOneviews(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        String oneviewID = request.getParameter("oneViewIdValue");
        HashMap map = new HashMap();
        PbReturnObject reportObj = new PbReturnObject();
        OnceViewContainer onecontainer = new OnceViewContainer();
        PbDb pbdb = new PbDb();
        String assignFlag = null;
        String newoneViewId = null;
        String oneViewVersion = "";
        assignFlag = request.getParameter("assignFlag");
        String datetype = request.getParameter("datetype");
        String oneViewVersion1 = request.getParameter("oneviewVersion");
        if (assignFlag == null) {
            assignFlag = "false";
        }
        String oneviewtypedate = (String) session.getAttribute("oneviewdatetype");
        if (assignFlag.equalsIgnoreCase("true")) {
            //request.setAttribute("assignFlag", assignFlag);
            String finalqr = getResourceBundle1().getString("getOneviewIdName");
            reportObj = pbdb.execSelectSQL(finalqr);
            int oneId = 0;
            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                oneId = reportObj.getFieldValueInt(0, 0);
                newoneViewId = Integer.toString(oneId + 1);
            } else {
                oneId = reportObj.getFieldValueInt(0, 0);
                newoneViewId = Integer.toString(oneId);
            }

            oneviewID = request.getParameter("oneviewId");
            PbReturnObject retObj = null;
            ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
            retObj = reportTemplateDAO.getOneviewFileNam(oneviewID);
            String onefileName = retObj.getFieldValueString(0, "ONEVIEW_FILE");
            String filePath = retObj.getFieldValueString(0, "FILEPATH");

            FileInputStream fis = new FileInputStream(filePath + "/" + onefileName);
            ObjectInputStream ois = new ObjectInputStream(fis);
            onecontainer = (OnceViewContainer) ois.readObject();
            ois.close();
        } else {
            oneViewVersion = session.getAttribute("OneViewVersion").toString();
            if (oneViewVersion1 != null) {
                oneViewVersion = oneViewVersion1;
            }
            session.setAttribute("oneViewVersion", oneViewVersion);
            map = (HashMap) session.getAttribute("ONEVIEWDETAILS");
            onecontainer = new OnceViewContainer();
            onecontainer = (OnceViewContainer) map.get(oneviewID);
        }
        request.setAttribute("assignFlag", assignFlag);
        String sequnce = "sequence";
        session.setAttribute("assignFlagsequence", sequnce);
//         List<OneViewLetDetails> onevieLet=onecontainer.onviewLetdetails;
        if ((oneViewVersion1 != null && oneViewVersion1.equalsIgnoreCase("2.5")) || onecontainer.getOneViewType() != null && (onecontainer.getOneViewType().equalsIgnoreCase("Business TemplateView") || onecontainer.getOneViewType().equalsIgnoreCase("Measure Based Business Template"))) {
        } else {
            PbReportViewerBD pbrepBd = new PbReportViewerBD();
            onecontainer = pbrepBd.deleteIfEmptyDetails(onecontainer);
            onecontainer = pbrepBd.deleteIfEmptyDetails(onecontainer);
            onecontainer = pbrepBd.deleteIfEmptyDetails(onecontainer);
            onecontainer = pbrepBd.deleteIfEmptyDetails(onecontainer);
            onecontainer = pbrepBd.deleteIfEmptyDetails(onecontainer);
            onecontainer = pbrepBd.deleteIfEmptyDetails(onecontainer);
            onecontainer = pbrepBd.deleteIfEmptyDetails(onecontainer);
            onecontainer = pbrepBd.deleteIfEmptyDetails(onecontainer);
            onecontainer = pbrepBd.deleteIfEmptyDetails(onecontainer);
            onecontainer = pbrepBd.deleteIfEmptyDetails(onecontainer);
            onecontainer = pbrepBd.deleteIfEmptyDetails(onecontainer);
            onecontainer = pbrepBd.deleteIfEmptyDetails(onecontainer);
            onecontainer = pbrepBd.deleteIfEmptyDetails(onecontainer);
            onecontainer = pbrepBd.deleteIfEmptyDetails(onecontainer);
            onecontainer = pbrepBd.deleteIfEmptyDetails(onecontainer);
        }
//         for(int i=0;i<onevieLet.size();i++){
//             if(onevieLet.get(i).getRepName()==null){
//                 onecontainer.onviewLetdetails.remove(i);
//             }
//         }
//
//        for (int i = 0; i < onecontainer.onviewLetdetails.size(); i++) {
//            onecontainer.onviewLetdetails.get(i).setNoOfViewLets(Integer.toString(i));
//        }

        ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
        OneViewBD oneViewBD = new OneViewBD();

        StringBuilder finalStringVal = new StringBuilder();
        String CurrValue = null;
        String valu = null;
        String value = null;
        String value1 = null;

        if (!assignFlag.equalsIgnoreCase("true")) {
            if (onecontainer != null && !onecontainer.onviewLetdetails.isEmpty()) {
                List<OneViewLetDetails> dashletDetails = onecontainer.onviewLetdetails;
                ArrayList alist = new ArrayList();
                ProgenParam paramdate = new ProgenParam();
                if (oneviewtypedate != null && oneviewtypedate.equalsIgnoreCase("true")) {
                    if (datetype != null && datetype.equalsIgnoreCase("StandardTime")) {
                        value = "";
                        valu = "";
                        String mont = "";
                        CurrValue = "";
                        value1 = "";
                        value = paramdate.getdateforpage();
                        value1 = paramdate.getdateforpage();
                        valu = value.substring(0, 2);
                        mont = value.substring(3, 5);
                        CurrValue = mont.concat("/").concat(valu).concat(value.substring(5));
                        value = "Month";
                        valu = "Last Period";
//                ArrayList alist = new ArrayList();
                        alist.add("Day");
                        alist.add("PRG_STD");
                        alist.add(value1);
                        alist.add(value);
                        alist.add(valu);
                    }
//                    else if (datetype != null && datetype.equalsIgnoreCase("RangeBasis")) {
//                        value = "";
//                        valu = "";
//                        String mont = "";
//                        CurrValue = "";
//                        value1 = "";
//                        value = paramdate.getdateforpage();
//                        value1 = paramdate.getdateforpage();
//                        valu = value.substring(0, 2);
//                        mont = value.substring(3, 5);
//                        CurrValue = mont.concat("/").concat(valu).concat(value.substring(5));
////                value="Month";
////                valu="Last Period";
////                ArrayList alist = new ArrayList();
//                        alist.add("Day");
//                        alist.add("PRG_DATE_RANGE");
//                        alist.add(String.valueOf(paramdate.getdateforpage(30)));//added on 28-11-09
//                        alist.add(String.valueOf(paramdate.getdateforpage()));
//                        alist.add(String.valueOf(paramdate.getdateforpage(60)));
//                        alist.add(String.valueOf(paramdate.getdateforpage(31)));
//
//
//                    }
                } else {
                    value = "";
                    valu = "";
                    String mont = "";
                    CurrValue = "";
                    value1 = "";
                    value = paramdate.getdateforpage();
                    value1 = paramdate.getdateforpage();
                    valu = value.substring(0, 2);
                    mont = value.substring(3, 5);
                    CurrValue = mont.concat("/").concat(valu).concat(value.substring(5));
                    value = "Month";
                    valu = "Last Period";
//                ArrayList alist = new ArrayList();
                    alist.add("Day");
                    alist.add("PRG_STD");
                    alist.add(value1);
                    alist.add(value);
                    alist.add(valu);
                }

                onecontainer.timedetails = alist;

            }
        }

        String advHtmlFileProps = null;
        InputStream servletStream = session.getServletContext().getResourceAsStream("/WEB-INF/classes/cache.ccf");
        if (servletStream != null) {
            try {
                Properties fileProps = new Properties();
                fileProps.load(servletStream);
                advHtmlFileProps = fileProps.getProperty("jcs.auxiliary.DC.attributes.DiskPath");
                session.setAttribute("oldAdvHtmlFileProps", advHtmlFileProps);
            } catch (IOException e) {
                logger.error("Exception: ", e);
            }
        }

        /*
         * belowe code is create the directory for oneview to plavce the inner files
         */
        String folderName = null;
        if (assignFlag.equalsIgnoreCase("true")) {
            folderName = onecontainer.oneviewName + "_Analyzer_" + onecontainer.oneviewId + "_" + new SimpleDateFormat("mm-dd-yy").format(new Date());
        } else {
            folderName = onecontainer.oneviewName + "_" + onecontainer.oneviewId + "_" + new SimpleDateFormat("mm-dd-yy").format(new Date());
        }
        String folderPath = advHtmlFileProps + "/" + folderName;
        File folderDir = new File(folderPath);
        if (!folderDir.exists()) {
            folderDir.mkdir();
            session.removeAttribute("oldAdvHtmlFileProps");
            session.setAttribute("oldAdvHtmlFileProps", folderPath);
            advHtmlFileProps = folderPath;
        }  /*
         * dirctory created
         */

        String oneviewFileName = "";
        oneviewFileName = "OneviewDetails" + oneviewID + "_" + System.currentTimeMillis() + ".txt";
        ServletWriterTransferObject swt = null;
        swt = ServletUtilities.createBufferedWriter(oneviewID.concat("123"), "txt");
        String oneviewDeatilsFile = swt.fileName;
        FileOutputStream fos1 = new FileOutputStream(advHtmlFileProps + "/" + oneviewFileName);
        ObjectOutputStream oos1 = new ObjectOutputStream(fos1);
        oos1.writeObject(onecontainer);
        oos1.flush();
        oos1.close();
//        String oneViewVersion = session.getAttribute("OneViewVersion").toString();
        if (!assignFlag.equalsIgnoreCase("true")) {
            reportTemplateDAO.updateOneviewData(oneviewFileName, oneviewID, oneViewVersion, folderPath);
            oneViewBD.insertOneviewRegData(onecontainer, oneviewID, request);
        }/*
         * build inner region files
         */ else {
            //reportTemplateDAO.updateOneviewData(oneviewFileName,newoneViewId,oneViewVersion,folderPath);
            // oneViewBD.insertOneviewRegData(onecontainer,newoneViewId,request);
        }

        if (onecontainer != null && !onecontainer.onviewLetdetails.isEmpty()) {
            List<OneViewLetDetails> dashletDetails = onecontainer.onviewLetdetails;

            ProgenParam paramdate = new ProgenParam();
            value = "";
            valu = "";
            String mont = "";
            CurrValue = "";
            value = paramdate.getdateforpage();
            valu = value.substring(0, 2);
            mont = value.substring(3, 5);
            CurrValue = mont.concat("/").concat(valu).concat(value.substring(5));
            value = "Month";
            valu = "Last Period";

            StringBuilder dashBuilder = new StringBuilder("");
            int rowIndex = -1;

//           List<DashletDetail> dashletDetails = collect.dashletDetails;
            boolean flag = false;
//        int buildTable = 0;
            String kpiType = "";
            ArrayList<Integer> al = new ArrayList();

            if (dashletDetails != null && !dashletDetails.isEmpty()) {
                finalStringVal.append("<?xml version='1.0' encoding='UTF-8'?>");
//                finalStringVal.append("<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'   'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd' >");
                finalStringVal.append("<html xmlns='http://www.w3.org/1999/xhtml'>");
                finalStringVal.append("<head>");
                finalStringVal.append("</head><body>");
                finalStringVal.append("<div  align=\"left\" style=\"width:100%; \">");
                finalStringVal.append("<table align='right'><tr><td style='display:none;'>").append("<input type='text' id='dateIdValue' name='' value='" + CurrValue + "'>").append("</td>").append("<td style='display:none;'>").append("<input type='text' id='durationId' name='' value='" + value + "'>").append("</td>").append("<td style='display:none;'>").append("<input type='text' id='comareWithId' name='' value='" + valu + "'>").append("</td></tr></table>");
//                finalStringVal.append("<table align='right'><tr><td style='display:none;'>").append("<input type='text' id='dateIdValue' name='' value='" + CurrValue + "'>").append("</td>").append("<td style='display:none;'>").append("<input type='text' id='durationId' name='' value='" + value + "'>").append("</td>").append("<td style='display:none;'>").append("<input type='text' id='comareWithId' name='' value='" + valu + "'>").append("</td></tr></table>");

                //<td id =\"addreginView\" ><a class=\"ui-icon ui-icon-plusthick\"  href=\"javascript:void(0)\" title=\"Add Region\" onclick=\"addRegioninViewer("+oneviewID+")\" ></a></td>
                if (oneViewVersion1 != null && oneViewVersion1.equalsIgnoreCase("2.5")) {
                } else //            finalStringVal.append("<tr>");
                //           finalStringVal.append("<td rowsapn='"+dashletDetails.get(p).getRowSpan()+"' colspan='"+dashletDetails.get(p).getColSpan()+"'>");
                if (onecontainer.getOneViewType() != null && (onecontainer.getOneViewType().equalsIgnoreCase("Business TemplateView") || onecontainer.getOneViewType().equalsIgnoreCase("Measure Based Business Template"))) {
                    finalStringVal.append(oneViewBD.generateBusinessTemplateView(request, response, onecontainer));
                } else {
                    ArrayListMultimap<Integer, Integer> rowinfo = ArrayListMultimap.create();
                    for (int i = 0; i < dashletDetails.size(); i++) {
                        OneViewLetDetails detail = dashletDetails.get(i);
                        rowinfo.put(detail.getRow(), detail.getCol());
                    }

                    for (int count = 0; count < rowinfo.keySet().size(); count++) {
                        int buildTable = 0;
//                if(rowIndex<rowinfo.keySet().size()-1)
                        rowIndex++;
                        int colNum = 0;
                        int rowNum = 0;
                        int rowSpanNum = 0;
                        int colSpanNum = 0;
                        List<Integer> dashlets = rowinfo.get(rowIndex);
//                while (dashlets.isEmpty()) {
//                    rowIndex++;
//                    dashlets = rowinfo.get(rowIndex);
//                }
                        al.add(rowIndex);
                        int numOfDashlets = dashlets.size();
                        int numOfCols = numOfDashlets;
                        for (int p = 0; p < dashletDetails.size(); p++) {
                            OneViewLetDetails detail = dashletDetails.get(p);
                            int row = detail.getRow();
                            int col = detail.getCol();
                            int rowSpan = detail.getRowSpan();
                            int colSpan = detail.getColSpan();
                            if (row == rowIndex) {

                                if (rowSpan == 1) {
                                    colNum = col;
                                    rowNum = row;
                                    rowSpanNum = rowSpan;
                                    colSpanNum = colSpan;
                                    if (colSpan > 1) {
                                        numOfCols = numOfCols + (colSpan - 1);
                                    }
                                    buildTable = 1;
                                    flag = false;
                                } else if (rowSpan > 1) {
                                    colNum = col;
                                    rowNum = row;
                                    rowSpanNum = rowSpan;
                                    colSpanNum = colSpan;
                                    if (colSpan > 1) {
                                        numOfCols = numOfCols + (colSpan - 1);
                                    }

                                    flag = true;
                                }
                                if (flag == true) {
                                    buildTable = 2;
                                    break;
                                }
                            }
                        }

                        if (buildTable == 1) {
                            finalStringVal.append("<table style='table-layout: fixed; width: 100%; border-spacing: 15px;'>");
                            for (int i = 0; i < dashletDetails.size(); i++) {
                                OneViewLetDetails detail = dashletDetails.get(i);
                                int row = detail.getRow();
                                int col = detail.getCol();

                                if (row == rowNum) {
                                    if (col == 0) {
                                        finalStringVal.append("<tr width=100%>");
                                        String result = oneViewBD.buildRegionData(request, response, onecontainer, detail);
                                        oneViewBD.saveOneviewRegData(onecontainer, result, detail.getNoOfViewLets(), request);
                                        finalStringVal.append("<td id='" + detail.getNoOfViewLets() + "' width='" + detail.getWidth() + "px' style='height:" + detail.getHeight() + "px;' rowspan='" + detail.getRowSpan() + "' colspan='" + detail.getColSpan() + "'>");
                                        finalStringVal.append(result);
                                        finalStringVal.append("</td>");

                                    } else {

                                        String result = oneViewBD.buildRegionData(request, response, onecontainer, detail);
                                        oneViewBD.saveOneviewRegData(onecontainer, result, detail.getNoOfViewLets(), request);
                                        finalStringVal.append("<td id='" + detail.getNoOfViewLets() + "' width='" + detail.getWidth() + "px' style='height:" + detail.getHeight() + "px;' rowspan='" + detail.getRowSpan() + "' colspan='" + detail.getColSpan() + "'>");
                                        finalStringVal.append(result);
                                        finalStringVal.append("</td>");

                                    }

                                }
                            }
                            finalStringVal.append("</tr></table>");
                            al = new ArrayList();
                        } else if (buildTable == 2) {
                            int startTableRowNum = rowNum;
                            int maxRows = rowNum + rowSpanNum;
                            int endTableRowNum = maxRows;
                            int newRowNum = rowNum;
                            int newRowSpanNum = rowSpanNum;
                            int newColNum = colNum;
                            int newColSpanNum = colSpanNum;
                            int newMaxRows = maxRows;
                            for (int k = rowNum; k < maxRows; k++) {
                                for (int n = 0; n < dashletDetails.size(); n++) //loop-^295
                                {
                                    OneViewLetDetails detail = dashletDetails.get(n);
                                    int row = detail.getRow();
                                    int col = detail.getCol();
                                    int rowSpan = detail.getRowSpan();
                                    int colSpan = detail.getColSpan();

                                    if (row >= rowNum && row < maxRows) {
                                        if (row != rowNum || col != colNum) {
                                            if (rowSpan > 1) {
                                                if (colSpan > 1) {
                                                    numOfCols = numOfCols + (colSpan - 1);
                                                }
                                                newRowNum = row;
                                                newColNum = col;
                                                newRowSpanNum = rowSpan;
                                                newColSpanNum = colSpan;
                                                newMaxRows = newRowNum + newRowSpanNum;
                                                //                                    flag=true;
                                            } else {
                                                if (colSpan > 1) {
                                                    numOfCols = numOfCols + (colSpan - 1);
                                                }
                                            }

                                            if (newMaxRows > maxRows) {
                                                maxRows = newMaxRows;
                                                rowNum = newRowNum;
                                                colNum = newColNum;
                                                rowSpanNum = newRowSpanNum;
                                                colSpanNum = newColSpanNum;
                                                endTableRowNum = newMaxRows;
                                                flag = true;
                                            } else {
                                                flag = false;
                                            }
                                            if (flag == true) {
                                                break;
                                            }
                                        }
                                    }
                                }
                                if (flag == false) {
                                    k++;
                                }
                            }

                            finalStringVal.append("<table style='table-layout: fixed; width: 100%; border-spacing: 15px;'>");
                            int prevRow = 0;
                            for (int i = 0; i < dashletDetails.size(); i++) {
                                OneViewLetDetails detail = dashletDetails.get(i);
                                int row = detail.getRow();
                                int col = detail.getCol();
//                            int rowSpan = detail.getRowSpan();
//                            int colSpan = detail.getColSpan();
//                            String dashletId = detail.getRepId();

//                            // % wise width for dashlets
//                            double width = 100;
//                            if (numOfCols == 1) {
//                                width = 100;
//                            } else if (numOfCols == 2) {
//                                width = 50;
//                                width = width * colSpan;
//                            } else if (numOfCols == 3) {
//                                width = 33;
//                                width = width * colSpan;
//                            } else if (numOfCols == 4) {
//                                width = 25;
//                                width = width * colSpan;
//                            }
                                if (row >= startTableRowNum && row < endTableRowNum) {
                                    if (row == startTableRowNum && col == 0) {
                                        prevRow = row;
                                        finalStringVal.append("<tr width=100%>");
                                        String result = oneViewBD.buildRegionData(request, response, onecontainer, detail);
                                        oneViewBD.saveOneviewRegData(onecontainer, result, detail.getNoOfViewLets(), request);
                                        finalStringVal.append("<td id='" + detail.getNoOfViewLets() + "' width='" + detail.getWidth() + "px' style='height:" + detail.getHeight() + "px;' rowspan='" + detail.getRowSpan() + "' colspan='" + detail.getColSpan() + "'>");
                                        finalStringVal.append(result);
                                        finalStringVal.append("</td>");

                                    } else if (row == prevRow) {
                                        String result = oneViewBD.buildRegionData(request, response, onecontainer, detail);
                                        oneViewBD.saveOneviewRegData(onecontainer, result, detail.getNoOfViewLets(), request);
                                        finalStringVal.append("<td id='" + detail.getNoOfViewLets() + "' width='" + detail.getWidth() + "px' style='height:" + detail.getHeight() + "px;' rowspan='" + detail.getRowSpan() + "' colspan='" + detail.getColSpan() + "'>");
                                        finalStringVal.append(result);
                                        finalStringVal.append("</td>");

                                    } else {
                                        finalStringVal.append("</tr>");
                                        prevRow = row;
                                        finalStringVal.append("<tr width=100%>");
                                        if (col == 0) {
                                            String result = oneViewBD.buildRegionData(request, response, onecontainer, detail);
                                            oneViewBD.saveOneviewRegData(onecontainer, result, detail.getNoOfViewLets(), request);
                                            finalStringVal.append("<td id='" + detail.getNoOfViewLets() + "' width='" + detail.getWidth() + "px' style='height:" + detail.getHeight() + "px;' rowspan='" + detail.getRowSpan() + "' colspan='" + detail.getColSpan() + "'>");
                                            finalStringVal.append(result);
                                            finalStringVal.append("</td>");

                                        } else {
                                            String result = oneViewBD.buildRegionData(request, response, onecontainer, detail);
                                            oneViewBD.saveOneviewRegData(onecontainer, result, detail.getNoOfViewLets(), request);
                                            finalStringVal.append("<td id='" + detail.getNoOfViewLets() + "' width='" + detail.getWidth() + "px' style='height:" + detail.getHeight() + "px;' rowspan='" + detail.getRowSpan() + "' colspan='" + detail.getColSpan() + "'>");
                                            finalStringVal.append(result);
                                            finalStringVal.append("</td>");
                                        }
                                    }
                                }
                            }
                            finalStringVal.append("</tr></table>");
                            rowIndex = +(endTableRowNum - 1);
                        }
                    }

                }

            }
//            finalStringVal.append("<table align='right'><tr><td style='display:none;'>").append("<input type='text' id='dateIdValue' name='' value='" + CurrValue + "'>").append("</td>").append("<td style='display:none;'>").append("<input type='text' id='durationId' name='' value='" + value + "'>").append("</td>").append("<td style='display:none;'>").append("<input type='text' id='comareWithId' name='' value='" + valu + "'>").append("</td></tr></table>");
//             finalStringVal.append("</div>");

            finalStringVal.append("</body></html>");
//           response.getWriter().print(finalStringVal.toString());

        }
        String userId = (String) session.getAttribute("USERID");
        swt = ServletUtilities.createBufferedWriter(oneviewID.concat("123"), "txt");
        String regionFileName = swt.fileName;
        StringBuilder roleIds = new StringBuilder();
        HashSet roleIdSet = new HashSet();
        StringBuilder roleIdString = new StringBuilder();
        String roleIdsString = "";
        List<OneViewLetDetails> dashletDetails1 = onecontainer.onviewLetdetails;
        //added by srikanth.p
        for (OneViewLetDetails viewlet : dashletDetails1) {
            roleIdSet.add(viewlet.getRoleId());
        }
        Iterator roleIter = roleIdSet.iterator();
        while (roleIter.hasNext()) {
            roleIdString.append(",").append(roleIter.next());
        }
        if (roleIdString.length() >= 1) {
            roleIdsString = roleIdString.substring(1);
        }

//           for (int i = 0; i < dashletDetails1.size(); i++) {
//              OneViewLetDetails detail = dashletDetails1.get(i);
//              OneViewLetDetails detail1 = dashletDetails1.get(0);
//              if(i==0)
//                  roleIds.append(","+detail.getRoleId());
//              if(!detail1.getRoleId().equalsIgnoreCase(detail.getRoleId()))
//              roleIds.append(","+detail.getRoleId());
//           }
        String oneviewRegionFileName = "";
        if (assignFlag.equalsIgnoreCase("true")) {
            oneviewRegionFileName = "OneviewRegionDetails" + oneviewID + "_Analyzer_" + System.currentTimeMillis() + ".txt";
        } else {
            oneviewRegionFileName = "OneviewRegionDetails" + oneviewID + "_" + System.currentTimeMillis() + ".txt";
        }
        FileOutputStream fos = new FileOutputStream(advHtmlFileProps + "/" + oneviewRegionFileName);
        ObjectOutputStream oos = new ObjectOutputStream(fos);
        oos.writeObject(finalStringVal.toString());
        oos.flush();
        oos.close();//newoneViewId
        if (assignFlag.equalsIgnoreCase("true")) {
            reportTemplateDAO.upDateOneviewRegionData(oneviewRegionFileName, newoneViewId, onecontainer.oneviewName, userId, roleIdsString, folderName);
        } else {
            reportTemplateDAO.upDateOneviewRegionData(oneviewRegionFileName, oneviewID, onecontainer.oneviewName, userId, roleIdsString, null);
        }
//          if(oneViewVersion1!=null && !oneViewVersion1.equalsIgnoreCase("2.5")){
        response.getWriter().print(oneviewFileName);
//          }
        session.setAttribute("oneviewFileNamenew", oneviewFileName);
        session.removeAttribute("issaving");
        session.setAttribute("filePath", advHtmlFileProps);
        request.setAttribute("newoneViewId", newoneViewId);
        session.removeAttribute("ONEVIEWDETAILS");
        return null;
    }

    public ActionForward saveFactFilterDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {

        String factFilterName = request.getParameter("factFilterName");
        String reportId = request.getParameter("reportId");
        String measEleId = request.getParameter("measEleId");

        String[] Cond = request.getParameterValues("Cond");
        String[] mName1 = request.getParameterValues("mName");
        String[] mCond = request.getParameterValues("mCond");
        String[] mValues = request.getParameterValues("mValues");
        String[] eValues = request.getParameterValues("eValues");
        String[] cmpMsrName = request.getParameterValues("cmpMsrName");
        String checkCmpMsrids = request.getParameter("checkCmpMsrids");
        String progenTime = request.getParameter("ProgenTime");
        String[] endcmpMsrName = request.getParameterValues("endcmpMsrName");
        String dimElementId = request.getParameter("dimVal");
        String priority = request.getParameter("priority");

        if (progenTime != null && progenTime.equalsIgnoreCase("on")) {
            progenTime = "Y";
        } else {
            progenTime = "N";
        }

        ReportTemplateDAO dao = new ReportTemplateDAO();
        String busdeatils = dao.getBussTabledetails(measEleId);
        String[] arr = busdeatils.split(",");
        String busTableId = arr[0];
        String busTableName = arr[1];
        String[] cmpMsrIds = checkCmpMsrids.split(",");
        ArrayList msrId = new ArrayList();
        msrId.addAll(Arrays.asList(cmpMsrIds));
//        String factFormula = "";
        StringBuilder factFormula = new StringBuilder();
        for (int i = 0; i < mName1.length; i++) {
            if (i != 0) {
                factFormula.append(" " + Cond[i] + " ");
            }
            if (mName1[i].equalsIgnoreCase("@PROGENTIME@@ST_DATE") || mName1[i].equalsIgnoreCase("@PROGENTIME@@ED_DATE")) {
                factFormula.append(mName1[i]);
            } else {
                factFormula.append(dao.getBuscolName(mName1[i]));
            }
            factFormula.append(" " + mCond[i] + " ");
            if (cmpMsrIds.length != 0) {
                if (msrId.contains(String.valueOf(i))) {
                    if (cmpMsrName[i].equalsIgnoreCase("@PROGENTIME@@ST_DATE") || cmpMsrName[i].equalsIgnoreCase("@PROGENTIME@@ED_DATE")) {
                        factFormula.append(cmpMsrName[i] + " ");
                    } else {
                        factFormula.append(dao.getBuscolName(cmpMsrName[i]) + " ");
                    }
                    if (mCond[i].equalsIgnoreCase("between")) {
                        if (endcmpMsrName[i].equalsIgnoreCase("@PROGENTIME@@ST_DATE") || endcmpMsrName[i].equalsIgnoreCase("@PROGENTIME@@ED_DATE")) {
                            factFormula.append(" and " + endcmpMsrName[i] + " ");
                        } else {
                            factFormula.append(" and " + dao.getBuscolName(endcmpMsrName[i]) + " ");
                        }
                    }

                } else {
//                    String msrVals = "";
                    StringBuilder msrVals = new StringBuilder();
                    if (mValues[i].contains(",")) {
                        String[] val = mValues[i].split(",");
                        StringBuffer str = new StringBuffer();
                        for (int v = 0; v < val.length; v++) {
                            val[v] = "''" + val[v] + "''";
                            str.append(",").append(val[v]);
                        }
                        msrVals.append(" (" + str.substring(1) + ") ");
                    } else {
                        if (mValues != null && mValues.length > 0 && !mValues[i].equalsIgnoreCase("")) {
                            msrVals.append(" (" + "''" + mValues[i] + "''" + ") ");
                        }
                    }

                    factFormula.append(msrVals);
                    if (mCond[i].equalsIgnoreCase("between")) {
                        String endmsrVals = "";
                        if (eValues[i].contains(",")) {
                            String[] val = eValues[i].split(",");
                            StringBuffer str = new StringBuffer();
                            for (int v = 0; v < val.length; v++) {
                                val[v] = "''" + val[v] + "''";
                                str.append(",").append(val[v]);
                            }
                            endmsrVals = " (" + str.substring(1) + ") ";
                        } else {
                            endmsrVals = " (" + "''" + eValues[i] + "''" + ") ";
                        }
                        msrVals.append(" and " + endmsrVals);
                        //  factFormula += " and " +"("+ "''" + eValues[i] + "''"+") ";
                    }
                }

            } else {
                String msrVals = "";
                if (mValues[i].contains(",")) {
                    String[] val = mValues[i].split(",");
                    StringBuffer str = new StringBuffer();
                    for (int v = 0; v < val.length; v++) {
                        val[v] = "''" + val[v] + "''";
                        str.append(",").append(val[v]);
                    }
                    msrVals = str.substring(1);
                } else {
                    msrVals = "''" + mValues[i] + "''";
                }

                factFormula.append(" (" + msrVals + ") ");

                if (mCond[i].equalsIgnoreCase("between")) {

                    String endmsrVals = "";
                    if (eValues[i].contains(",")) {
                        String[] val = eValues[i].split(",");
                        StringBuffer str = new StringBuffer();
                        for (int v = 0; v < val.length; v++) {
                            val[v] = "''" + val[v] + "''";
                            str.append(",").append(val[v]);
                        }
                        endmsrVals = " (" + str.substring(1) + ") ";
                    } else {
                        endmsrVals = " (" + "''" + eValues[i] + "''" + ") ";
                    }
                    factFormula.append(" and " + endmsrVals);
                    //  factFormula += " and " +"("+ "''" + eValues[i] + "''"+") ";
                }
            }

        }
        PbReportViewerDAO viewerdao = new PbReportViewerDAO();
//         viewerdao.insertFactFilterDetails(busTableId,reportId,factFilterName,factFormula,progenTime);
        viewerdao.insertFactFilterDetails(busTableId, reportId, factFilterName, factFormula.toString(), progenTime, dimElementId, priority);

        return null;
    }

    public ActionForward viewFactFormula(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        String reportId = request.getParameter("reportId");
        String gsonString = null;
        PbReportViewerBD bd = new PbReportViewerBD();
        HashMap map = bd.getFactDetails(reportId);
        Gson gson = new Gson();
        gsonString = gson.toJson(map);
        // 
        response.getWriter().print(gsonString);
        return null;
    }

    public ActionForward deleteFactFormulas(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        String reportId = request.getParameter("reportId");
        String filterId = request.getParameter("filterId");
        PbReportViewerDAO dao = new PbReportViewerDAO();
        dao.deleteFactFormulas(filterId, reportId);
        response.getWriter().print("success");
        return null;
    }

    public ActionForward drillView(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
        Container container = null;
        ArrayList drillvalues = new ArrayList();
        String viewvalue = request.getParameter("value");
        String reportId = request.getParameter("repId");
        String newTab = request.getParameter("isnewtabfirstTime");//added by bhargavi
        container = Container.getContainerFromSession(request, reportId);
        drillvalues.add(viewvalue);
        container.setDrillViewValues(drillvalues);
        //start of code by bhargavi
        if (newTab != null) {
            container.setRepInNewtab(newTab);
        }
        //end of code by bhargavi

        return null;
    }

    public ActionForward chkforUserPrevilages(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        ServletContext context = this.getServlet().getServletContext();
        boolean isPAEnableforUser = false;
        String userType = null;
        HashMap<String, UserStatusHelper> statushelper;
        statushelper = (HashMap) context.getAttribute("helperclass");
        UserStatusHelper helper = new UserStatusHelper();
        if (!statushelper.isEmpty()) {
            helper = statushelper.get(request.getSession(false).getId());
            if (helper != null) {
                isPAEnableforUser = helper.getPowerAnalyser();
                userType = helper.getUserType();
            }
        }
        String resultStr = "{\"userType\":\"" + userType + "\",\"isPAEnableforUser\":\"" + isPAEnableforUser + "\"}";
        response.getWriter().print(resultStr);
//        response.getWriter().print(userType);
        return null;
    }

    public ActionForward getBussTabId(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        String columnName = request.getParameter("columnName");
        String elementId = columnName.substring(2);
        PbReportViewerDAO viewerBd = new PbReportViewerDAO();
        String bussTabId = viewerBd.getBussTabId(elementId);

//        
        response.getWriter().print(bussTabId);
        return null;
    }
    //started by Nazneen

    public ActionForward quickTimeBasedFormula(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {

        PbReportViewerDAO pbeditdao = new PbReportViewerDAO();
        String selectedvalues = request.getParameter("selectedvalues");
        String bussTableId = request.getParameter("bussTableId");
        String buscolid = request.getParameter("bussColId");
        String colName = request.getParameter("colName");
        String eleName = request.getParameter("eleName");
        String elementId = eleName.substring(2);
        String folder_id = request.getParameter("folder_id");
        String calender_id = request.getParameter("Calender");
        String dateElementId = request.getParameter("dateEId");
        String dateoption = request.getParameter("dateoption");
        String withProgenTimeVar = request.getParameter("withProgenTimeVar");
        String withoutProgenTimeVar = request.getParameter("withoutProgenTimeVar");

//        String bussTableId = "";
//
//        if(!buscolid.contains("0")){
//        ArrayList<String> id = pbeditdao.getTableid(buscolid);
//        bussTableId = id.get(0);
//        colName = id.get(1);
//        }
        String tablename = request.getParameter("tablename");
        String[] splitselected = selectedvalues.split(",");
        String tableid = pbeditdao.getAllFields(bussTableId);
        ArrayList selvalueslist = new ArrayList();
        ArrayList colnames = new ArrayList();

        String manipulatestring = null;
        for (int i = 0; i < splitselected.length; i++) {
            manipulatestring = request.getParameter(splitselected[i]);
            colnames.add(manipulatestring);
            manipulatestring = manipulatestring.replace("-", "(");
            manipulatestring = manipulatestring.concat(")");
            selvalueslist.add(manipulatestring);
        }
        String status = pbeditdao.quicktimebasedFormula(selvalueslist, bussTableId, colnames, buscolid, colName, tablename, elementId, folder_id, calender_id, dateElementId, dateoption, "false", "false");
        if (withProgenTimeVar.equalsIgnoreCase("true")) {
            pbeditdao.quicktimebasedFormula(selvalueslist, bussTableId, colnames, buscolid, colName, tablename, elementId, folder_id, calender_id, dateElementId, dateoption, "true", "false");
        }
        if (withoutProgenTimeVar.equalsIgnoreCase("true")) {
            pbeditdao.quicktimebasedFormula(selvalueslist, bussTableId, colnames, buscolid, colName, tablename, elementId, folder_id, calender_id, dateElementId, dateoption, "false", "true");
        }
        return null;
    }

    public String getConn(String colName) throws Exception {
        String elementId = colName.substring(2);
        PbReportViewerDAO viewerBd = new PbReportViewerDAO();
        String connId = viewerBd.getConn(elementId);
        return connId;
    }

    public ActionForward getCalanderDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        String connectionID = request.getParameter("connectionID");
        PbReportViewerDAO reportViewDao = new PbReportViewerDAO();

        try {
            response.getWriter().print(reportViewDao.getCalDetails(connectionID));
        } catch (IOException e) {
        }
        return null;
    }

    public ActionForward viewParameterReset(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        String reportId = request.getParameter("reportId");
        PbReportViewerDAO dao = new PbReportViewerDAO();
        String jsonstring = dao.resetParameterReport(reportId);
        response.getWriter().print(jsonstring);
        return null;
    }

    public ActionForward updateParamswithChanges(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        Container container = null;
        String reportId = request.getParameter("reportId");
        String paramIds = request.getParameter("paramdispIds");
        String[] params = paramIds.split(",");
        HashMap paramsandtypeHashmap = new HashMap();
        container = Container.getContainerFromSession(request, reportId);
        for (int i = 0; i < params.length; i++) {
            paramsandtypeHashmap.put(params[i], request.getParameter("paramid-" + params[i]));
        }

        PbReportViewerDAO dao = new PbReportViewerDAO();
        dao.updateRepParams(reportId, params, paramsandtypeHashmap, container);

        return null;
    }

    public ActionForward dateParse(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws ParseException, IOException {
        String datep = request.getParameter("perioddate");
        String datef = request.getParameter("fromdate");
        String datet = request.getParameter("todate");
        String datecf = request.getParameter("comparefrom");
        String datect = request.getParameter("compareto");
        Date date1;
        if (datep != null && datep.contains(",")) {
            PbReportCollection dateparse = new PbReportCollection();
            String perioddate = dateparse.parseDate(datep);
            response.getWriter().print(perioddate);

        }
        if (datef != null && datef.contains(",")) {
            PbReportCollection dateparse = new PbReportCollection();
            String fromdate = dateparse.parseDate(datef);
            response.getWriter().print(fromdate + ",");

        }
        if (datet != null && datet.contains(",")) {
            PbReportCollection dateparse = new PbReportCollection();
            String todate = dateparse.parseDate(datet);
            response.getWriter().print(todate + ",");

        }
        if (datecf != null && datecf.contains(",")) {
            PbReportCollection dateparse = new PbReportCollection();
            String comparefrom = dateparse.parseDate(datecf);
            response.getWriter().print(comparefrom + ",");

        }
        if (datect != null && datect.contains(",")) {
            PbReportCollection dateparse = new PbReportCollection();
            String compareto = dateparse.parseDate(datect);
            response.getWriter().print(compareto);

        }
        return null;

    }

    public ActionForward updateScheduleDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws ParseException, IOException {
        String reportId = request.getParameter("reportId");
        String isUpdReport = request.getParameter("isUpdReport");
        String completeurl = request.getParameter("url");
        String schedulerName = request.getParameter("scheduleName");
        String mailIds = request.getParameter("usertextarea");
        String contentType = request.getParameter("fileType");
        String startDate = request.getParameter("startdate");
        String endDate = request.getParameter("enddate");
        String hrs = request.getParameter("hrs");
        String mins = request.getParameter("mins");
        String periodType = request.getParameter("Data");
        String schedulerId = request.getParameter("schedulerId");
        //Added by Amar for GO Scheduler
        String fromGO = request.getParameter("fromGO");
        //end of code
        //code written by Dinanath for header logo
        String headerLogo = request.getParameter("headerLogo");
        String footerLogo = request.getParameter("footerLogo");
        String optionalHeader = request.getParameter("optionalHeader");
        String optionalFooter = request.getParameter("optionalFooter");
        String htmlSignature = request.getParameter("htmlSignature");
        //end of code By Dinanath
        // String frequency="Daily";
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");

        String frequency = request.getParameter("frequency");
        String scheduledTime = hrs.concat(":").concat(mins);
        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
        String particularDay = request.getParameter("particularDay");
        String monthParticularDay = request.getParameter("monthParticularDay");
        Date sDate, eDate;
        DateFormat formatter;
        String value = "";
        String valu = "";
        String mont = "";
        String CurrValue = "";
        String value1 = "";
        String valu1 = "";
        String mont1 = "";
        String CurrValue1 = "";
        value = startDate;
        int slashval = value.indexOf("/");
        int slashLast = value.lastIndexOf("/");
        valu = value.substring(0, slashval);
        mont = value.substring(slashval + 1, slashLast + 1);
        CurrValue = mont.concat(valu).concat(value.substring(slashLast));
        startDate = CurrValue;
        //Added Amar for share report 
        String requestUrl1 = request.getRequestURL().toString();
        //end of code
        value1 = endDate;
        int slashval1 = value1.indexOf("/");
        int slashLast1 = value1.lastIndexOf("/");
        valu1 = value1.substring(0, slashval1);
        mont1 = value1.substring(slashval1 + 1, slashLast1 + 1);
        CurrValue1 = mont1.concat(valu1).concat(value1.substring(slashLast1));
        endDate = CurrValue1;

        formatter = new SimpleDateFormat("MM/dd/yyyy");
        sDate = formatter.parse(startDate);
        eDate = formatter.parse(endDate);
        ReportTemplateDAO reportDAO = new ReportTemplateDAO();
//         String SchedulerId=reportDAO.getSchedulerID(Integer.parseInt(reportId),schedulerName);
        ReportSchedule schedule = new ReportSchedule();
        schedule.setReportId(Integer.parseInt(reportId));
        schedule.setSchedulerName(schedulerName);
        schedule.setReportmailIds(mailIds);
        schedule.setContenType(contentType);
        schedule.setScheduledTime(scheduledTime);
        schedule.setReportScheduledId(Integer.parseInt(schedulerId));
        schedule.setFrequency(frequency);
        schedule.setStartDate(sDate);
        schedule.setEndDate(eDate);
        schedule.setDataSelection(periodType);
        schedule.setIsReportSchedule(true);
        schedule.setrequestUrl(requestUrl1);
        schedule.setUserId((request.getSession(false).getAttribute("USERID")).toString());
        //code written by Dinanath for header logo as on 17/09/2015
        schedule.setIsHeaderLogoOn(headerLogo);
        schedule.setIsFooterLogoOn(footerLogo);
        schedule.setIsOptionalHeaderTextOn(optionalHeader);
        schedule.setIsOptionalFooterTextOn(optionalFooter);
        schedule.setIsHtmlSignatureOn(htmlSignature);
        //end of code
        if (frequency.equalsIgnoreCase("Weekly")) {
            schedule.setParticularDay(particularDay);
        } else {
            schedule.setParticularDay(monthParticularDay);
        }
        //Added by Amar
        if (fromGO != null && fromGO.equalsIgnoreCase("true")) {
            schedule.setIsGoSchedule(true);
        }
        //end of code
        //added by Dinanath
//            SnapshotDesigner SSDesigner = new SnapshotDesigner();
//        try {
//        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
//                SSDesigner.createDocument(reportId, completeurl, request, response, "now()", "", userId, schedulerName, "scheduler");
//            
//          } else {
//                        SSDesigner.createDocument(reportId, completeurl, request, response, "sysdate", "", userId, schedulerName, "scheduler");
//          }
//          } catch (Exception ex) {
//                logger.error("Exception:",ex);
//            }
        //  Added By Ram
        if (isUpdReport.equalsIgnoreCase("true")) {
            reportDAO.updateSchedulerDetails(schedulerId, schedule);
        } else {
            reportDAO.updateDashboardSchedulerDetails(schedulerId, schedule);
        }
        //End Of Code
        SchedulerBD bd = new SchedulerBD();
        bd.scheduleReport(schedule, false);
        return null;
    }

    public ActionForward updateScheduleParamMetadataDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws ParseException, IOException, Exception {
        String reportId = request.getParameter("reportId");
        String schedulerId = request.getParameter("schedulerId");
        String completeurl = request.getParameter("url");
        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
//        request.setAttribute("updateScheduler","updateScheduler");
        request.setAttribute("schedulerId", schedulerId);
        SnapshotDesigner SSDesigner = new SnapshotDesigner();
        SSDesigner.createDocument(reportId, completeurl, request, "sysdate", "", userId, "", "scheduler");
//        PbReportViewerDAO dao = new PbReportViewerDAO();
//        ReportSchedule schedule = dao.getSchedulerDetails(schedulerId);
//        SchedulerBD bd = new SchedulerBD();
//        bd.scheduleReport(schedule,false);

        return null;
    }

    public ActionForward adhocChangeViewBy(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws ParseException, IOException, Exception {
        HttpSession session = request.getSession(false);
        HashMap map = null;
        Container container = null;
        String userId = "";
        String Type = "tbody";
        String newViewById = request.getParameter("newViewById");
        logger.info("newViewById" + newViewById);
        String reportId = request.getParameter("reportId");
        Type = request.getParameter("Type");

        if (session != null) {
            ArrayList<String> rowViewbyIds = new ArrayList<String>();
            ArrayList<String> colViewbyIds = new ArrayList<String>();
            if (session.getAttribute("PROGENTABLES") != null) {
                map = (HashMap) session.getAttribute("PROGENTABLES");
                container = (Container) map.get(reportId);
                userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
                if (Type.equalsIgnoreCase("tableHeader")) {
                    String drillType = request.getParameter("drillType");
                    String presentViewById = request.getParameter("presentViewById");
                    rowViewbyIds.addAll(container.getReportCollect().reportRowViewbyValues);
                    colViewbyIds.addAll(container.getReportCollect().reportColViewbyValues);
                    int index;
                    if (colViewbyIds.contains(presentViewById)) {
                        index = colViewbyIds.indexOf(presentViewById);
                        if (drillType.equalsIgnoreCase("drillside")) {
                            if (!colViewbyIds.contains(newViewById) && !rowViewbyIds.contains(newViewById)) {
                                colViewbyIds.add(newViewById);
                            }
                        } else {
                            if (!colViewbyIds.contains(newViewById) && !rowViewbyIds.contains(newViewById)) {
                                colViewbyIds.set(index, newViewById);
                            }
                        }
                    } else {
                        index = rowViewbyIds.indexOf(presentViewById);
                        if (drillType.equalsIgnoreCase("drillside")) {
                            if (!colViewbyIds.contains(newViewById) && !rowViewbyIds.contains(newViewById)) {
                                rowViewbyIds.add(newViewById);
                            }
                        } else {
                            if (!colViewbyIds.contains(newViewById) && !rowViewbyIds.contains(newViewById)) {
                                rowViewbyIds.set(index, newViewById);
                            }
                        }
                    }
                    session.removeAttribute("colViewByLst");
                    session.removeAttribute("rowViewByLst");
                    session.setAttribute("colViewByLst", colViewbyIds);
                    session.setAttribute("rowViewByLst", rowViewbyIds);

                } else {
                    rowViewbyIds.addAll(container.getReportCollect().reportRowViewbyValues);
                    colViewbyIds = container.getReportCollect().reportColViewbyValues;
                    if (newViewById.equalsIgnoreCase("Day") || newViewById.equalsIgnoreCase("Week") || newViewById.equalsIgnoreCase("Month") || newViewById.equalsIgnoreCase("Qtr") || newViewById.equalsIgnoreCase("Year")) {
                        if (!rowViewbyIds.contains("TIME")) {
                            rowViewbyIds.add("TIME");
                        }
                    } else {
                        if (!rowViewbyIds.contains(newViewById)) {
                            rowViewbyIds.add(newViewById);
                        }
                    }
                    //
                    session.removeAttribute("colViewByLst");
                    session.removeAttribute("rowViewByLst");
                    session.setAttribute("colViewByLst", colViewbyIds);
                    session.setAttribute("rowViewByLst", rowViewbyIds);
                }
                //container.setColumnViewList(colViewByLst);
                // container.setRowViewList(rowViewByLst);
                session.removeAttribute("allViewIds");
                session.removeAttribute("allViewNames");
                session.removeAttribute("rowViewIdList");
                session.removeAttribute("colViewIdList");
                session.removeAttribute("rowNamesLst");
                session.removeAttribute("colNamesLst");
            }
            return null;
        } else {
            return mapping.findForward("sessionExpired");
        }
    }

    public ActionForward defineCustomSequence(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {

        String ReportId = request.getParameter("REPORTID");
        String graphId = request.getParameter("graphId");
        String folderId = request.getParameter("folderIds");
        String grpId = request.getParameter("grpIds");
        PbReportViewerDAO dao = new PbReportViewerDAO();
        HttpSession session = request.getSession(false);
        ArrayList crosstablist = new ArrayList();
        PrintWriter outPrintWriter = response.getWriter();
        String Totalurl = dao.defineCustomSequence(ReportId, graphId, folderId, grpId, session, request);

        outPrintWriter.print(Totalurl);
        //response.getWriter().print("success");
        return null;
    }
//       public ActionForward reOrderCustomSeq(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception{
//       String dispOrder=request.getParameter("totalliurl");
//        String ReportId=request.getParameter("ReportId");
//        Container container = null;
//          HttpSession session = request.getSession(false);
//          PbReportCollection collect = new PbReportCollection();
//           String[] crosstaborder = dispOrder.split(",");
//           HashMap<String,ArrayList> nonviewbyhashmapfromretObj = new HashMap<String, ArrayList>();
//           HashMap<String,ArrayList> nonviewbyhashmapcreated = new HashMap<String, ArrayList>();
//          ArrayList finalcrosstaborder = new ArrayList(Arrays.asList(dispOrder.split(" , ")));
//            HashMap map = (HashMap) request.getSession(false).getAttribute("PROGENTABLES");
//            container = (Container) map.get(ReportId);
//            collect = container.getReportCollect();
//            PbReturnObject pbretObj = new PbReturnObject();
//           pbretObj = (PbReturnObject) container.getRetObj();
//           nonviewbyhashmapfromretObj = pbretObj.nonViewByMapNew;
//           pbretObj.CrossTabfinalOrder =  finalcrosstaborder;
//           for(int i=0;i<finalcrosstaborder.size();i++){
//           nonviewbyhashmapcreated.put(finalcrosstaborder.get(i).toString(),(ArrayList) nonviewbyhashmapfromretObj.get(finalcrosstaborder.get(i).toString()));
//                   }
//          collect.setNonViewByMapNew(nonviewbyhashmapcreated);
//          collect.setFinalcrosstaborder(finalcrosstaborder);
////           ArrayList crosstaborder =  dispOrder.split(",");
//
////          PbReturnObject retobj=new PbReturnObject();
////          retobj.setSession(session);
////          retobj.setRequest1(request);
//          //sesstion.setAttribute(ReportId,iscrosstabrep);
//
////        PbReportViewerDAO dao=new PbReportViewerDAO();
////        dao.reOrderCustomSeq(url, iscrosstabrep);
//        return null;
//        }

    public ActionForward reOrderCustomSeq(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {

        String url = request.getParameter("totalliurl");
        String iscrosstabrep = request.getParameter("iscrosstabrep");
        String ReportId = request.getParameter("ReportId");
        String colviewby = request.getParameter("colviewby");
        HttpSession session = request.getSession(false);
        session.setAttribute(ReportId + "-reorder", url);
        session.setAttribute("iscrosstabrep", iscrosstabrep);
//          PbReturnObject retobj=new PbReturnObject();
//          retobj.setSession(session);
//          retobj.setRequest1(request);

        //sesstion.setAttribute(ReportId,iscrosstabrep);
        PbReportViewerDAO dao = new PbReportViewerDAO();
        dao.reOrderCustomSeq(url, iscrosstabrep, ReportId, request, colviewby);

        return null;
    }

    public ActionForward saveDynamicHeadline(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        String reportId = request.getParameter("reportId");
        String completeurl = request.getParameter("url");
        String headlineName = request.getParameter("headlineName");
        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
        SnapshotDesigner SSDesigner = new SnapshotDesigner();
        SSDesigner.createDocument(reportId, completeurl, request, "dynamicDate", "", userId, headlineName, "dynamicHeadline");
        //code written by swati
        ReportTemplateDAO reportDAO = new ReportTemplateDAO();
        String headlineId = reportDAO.getSchedulerID(Integer.parseInt(reportId), headlineName);
        DataSnapshotDAO snapDao = new DataSnapshotDAO();
        snapDao.DynamicheadlineAssignment(headlineId, userId);
        response.getWriter().print(headlineId);
        return null;
    }

    public ActionForward getReportParameters(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        String reportId = request.getParameter("REPORTID");
        HashMap map = new HashMap();
        Container container = null;
        map = (HashMap) request.getSession(false).getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);
        ArrayList<String> Parameters = new ArrayList<String>();
        Parameters = (ArrayList<String>) container.getParametersHashMap().get("Parameters");
        ArrayList<String> ParametersNames = new ArrayList<String>();
        ParametersNames = (ArrayList<String>) container.getParametersHashMap().get("ParametersNames");
        HashMap<String, ArrayList<String>> gsonmap = new HashMap<String, ArrayList<String>>();
        gsonmap.put("parameters", Parameters);
        gsonmap.put("parameterNames", ParametersNames);
        Gson gson = new Gson();
        String gsonString = gson.toJson(gsonmap);
        response.getWriter().print(gsonString);

        return null;
    }

    public ActionForward saveInnerViewbys(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        String reportId = request.getParameter("REPORTID");
        String elementId = request.getParameter("eId");
        PbReportViewerDAO dao = new PbReportViewerDAO();
        dao.saveInnerViewbys(reportId, elementId);

        return null;
    }

    public ActionForward buildJqPlotGraphs(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        HttpSession session = request.getSession(false);
        ProGenJqPlotChartTypes jqplotcontainer = new ProGenJqPlotChartTypes();
        ProgenJqplotGraphBD jqplotgraphbd = new ProgenJqplotGraphBD();
        String ReportId = "";
        String graphid = "";
        String graphtype = "";
        String graphaction = "";
        String graphids = "";
        String selectedgraph = "";
        String grpidfrmrep = "";
        String fromHome = "";
        String[] rowValues = null;
        String[] tablecols = null;
        String olapFunc = "";
        String graphTitle = "";
        String hometabid = "";
        HashMap map = new HashMap();
        Container container = null;
        String[] viewByColumns = null;
        ProgenDataSet retobj = null;
        HashMap GraphHashMap = null;
        String graphSlide = "";
        int rowCount;
        int row;
        int graphcount = 1;
        boolean istranspose = false;
        StringBuilder graph = new StringBuilder();
        ArrayList alist = new ArrayList();
        PbReportViewerBD reportViewerBD = new PbReportViewerBD();
        HandsonTableBD hotBd = new HandsonTableBD();
        HashMap<String, ArrayList> hashMap = new HashMap<String, ArrayList>();
        int screenheight = 440;
        try {
            fromHome = request.getParameter("fromHome");
            graphSlide = request.getParameter("graphSlide");
            ReportId = request.getParameter("REPORTID");
            if (session.getAttribute("PROGENTABLES") == null) {
                hashMap = hotBd.getAllFilesdata(ReportId.toString(), session, request, response);
            }
            map = (HashMap) session.getAttribute("PROGENTABLES");
            if ((map != null && (Container) map.get(ReportId) == null)) {

                hashMap = hotBd.getAllFilesdata(ReportId.toString(), session, request, response);
            }
            container = (Container) map.get(ReportId);
            retobj = container.getRetObj();
            graphid = request.getParameter("gid");
            graphtype = request.getParameter("grptypid");
            graphaction = request.getParameter("graphChange");
            graphids = request.getParameter("grpIds");
            selectedgraph = request.getParameter("selectedgraph");
            grpidfrmrep = request.getParameter("grpidfrmrep");
            GraphHashMap = container.getGraphHashMap();
            if (request.getParameter("graphcount") != null && !request.getParameter("graphcount").isEmpty() && !request.getParameter("graphcount").equalsIgnoreCase("null")) {
                graphcount = Integer.parseInt(request.getParameter("graphcount"));
            }
            if (request.getParameter("hometabid") != null && !request.getParameter("hometabid").isEmpty()) {
                hometabid = request.getParameter("hometabid");
            }
            HashMap singleGraphDetails = (HashMap) GraphHashMap.get(grpidfrmrep);
            JqplotGraphProperty graphproperty = new JqplotGraphProperty();
            PbReportViewerDAO reportViewerdao = new PbReportViewerDAO();
            graphTitle = singleGraphDetails.get("graphName").toString();
            viewByColumns = (String[]) singleGraphDetails.get("viewByElementIds");
            String[] no_of_graphs = null;
            if (!fromHome.equalsIgnoreCase("null") && !fromHome.equalsIgnoreCase("")) {
                olapFunc = "olapGraph(\'" + graphTitle + "\',\'" + ReportId + "\',\'" + grpidfrmrep + "\',\'1\')";
            }
            if (GraphHashMap.size() != 0) {
                if (GraphHashMap.get("graphIds") != null) {
                    no_of_graphs = ((String) GraphHashMap.get("graphIds")).split(",");
                }
            }

            if (request.getParameter("screenheight") != null && !request.getParameter("screenheight").isEmpty() && !request.getParameter("screenheight").equalsIgnoreCase("null")) {
                screenheight = Integer.parseInt(request.getParameter("screenheight").toString());
            }
            if (GraphHashMap.get("jqgraphproperty" + grpidfrmrep) != null) {
                graphproperty = (JqplotGraphProperty) GraphHashMap.get("jqgraphproperty" + grpidfrmrep);

            } else {
                graphproperty = reportViewerdao.getJqGraphDetails(grpidfrmrep);
            }
            if (request.getParameter("rowValues") != null && !request.getParameter("rowValues").isEmpty() && !request.getParameter("rowValues").equalsIgnoreCase("null")) {
                rowValues = request.getParameter("rowValues").split(",");
            } else if (graphproperty != null && graphproperty.getRowValues() != null) {
                rowValues = graphproperty.getRowValues();
                tablecols = graphproperty.getTableColumns();
            }

            if (rowValues != null && rowValues.length > 1) {
                for (String temp1 : rowValues) {
                    alist.add(temp1);
                }
                graphproperty.setRowValues(rowValues);
            }
            if ((request.getParameter("tablecols") != null && !request.getParameter("tablecols").equalsIgnoreCase("null") && !request.getParameter("tablecols").isEmpty()) || (request.getParameter("tablecols") != null && request.getParameter("tablecols").equalsIgnoreCase("novalues"))) {
                tablecols = request.getParameter("tablecols").split(",");
                singleGraphDetails.remove("tablecols");
                if (!request.getParameter("tablecols").equalsIgnoreCase("novalues")) {
                    singleGraphDetails.put("tablecols", tablecols);
                }
            } else if (singleGraphDetails.get("tablecols") != null && !singleGraphDetails.get("tablecols").toString().equalsIgnoreCase("nottablecols") && !request.getParameter("tablecols").isEmpty()) {
                tablecols = (String[]) singleGraphDetails.get("tablecols");
            } else if (graphproperty != null && graphproperty.getTableColumns() != null && (singleGraphDetails.get("tablecols") == null || !singleGraphDetails.get("tablecols").toString().equalsIgnoreCase("nottablecols"))) {
                tablecols = graphproperty.getTableColumns();
            }
            if (graphaction != null) {
                if (graphaction.equalsIgnoreCase("default")) {
                    if (graphid != null && graphtype != null) {
                        if (!("".equalsIgnoreCase(graphid)) && !("".equalsIgnoreCase(graphtype))) {
                            jqplotgraphbd.chartId = "chart" + grpidfrmrep;
                            jqplotgraphbd.JqplotGraphProperty = graphproperty;
                            jqplotgraphbd.rowValues = rowValues;
                            jqplotgraphbd.tablecols = tablecols;
                            jqplotgraphbd.tickId = "";
                            if (!fromHome.equalsIgnoreCase("null") && !fromHome.equalsIgnoreCase("")) {
                                jqplotgraphbd.ishomeTab = true;
                                graph.append("<a  style='TEXT-DECORATION: NONE;cursor: pointer;font-size: 13px;color:#2191C0;width:13px;height:10px;' href=javascript:void(0) onclick=parent.gotoDBCON1('" + request.getContextPath() + "','" + ReportId + "')>" + graphTitle + "</a>");

                                if (!fromHome.equalsIgnoreCase("null") && !fromHome.equalsIgnoreCase("") && no_of_graphs.length > 1 && graphcount == 1) {
                                    HashMap singleGraphDetails2 = (HashMap) GraphHashMap.get(no_of_graphs[1]);
                                    if (GraphHashMap.get("jqgraphproperty" + no_of_graphs[1]) != null) {
                                        graphproperty = (JqplotGraphProperty) GraphHashMap.get("jqgraphproperty" + no_of_graphs[1]);

                                    } else {
                                        graphproperty = reportViewerdao.getJqGraphDetails(no_of_graphs[1]);
                                    }
                                    String graphname = graphproperty.getGraphTypename();

                                    graph.append("<INPUT type='image' src='" + request.getContextPath() + "/icons pinvoke/arrow-skip.png' style='cursor: pointer;width:13px; float:right;height:10px;' title='Next Graph' onclick='secondGraph(" + ReportId + "," + no_of_graphs[1] + ",\"" + hometabid + "\",\"" + graphname + "\",\"" + request.getContextPath() + "\",2)'/>");
                                } else if (!fromHome.equalsIgnoreCase("null") && !fromHome.equalsIgnoreCase("") && no_of_graphs.length > 1 && graphcount == 2) {
                                    HashMap singleGraphDetails2 = (HashMap) GraphHashMap.get(no_of_graphs[0]);
                                    if (GraphHashMap.get("jqgraphproperty" + no_of_graphs[0]) != null) {
                                        graphproperty = (JqplotGraphProperty) GraphHashMap.get("jqgraphproperty" + no_of_graphs[0]);

                                    } else {
                                        graphproperty = reportViewerdao.getJqGraphDetails(no_of_graphs[0]);
                                    }
                                    String graphname = graphproperty.getGraphTypename();
                                    graph.append("<INPUT type='image' src='" + request.getContextPath() + "/icons pinvoke/arrow-skip-180.png' style='cursor: pointer;width:13px;float:right; height:10px;' title='Previous Graph'  onclick='secondGraph(" + ReportId + "," + no_of_graphs[0] + ",\"" + hometabid + "\",\"" + graphname + "\",\"" + request.getContextPath() + "\",1)'/>");
                                }
                                graph.append("<INPUT type='image' src='" + request.getContextPath() + "/icons pinvoke/gear1.jpeg' style='cursor: pointer;width:10px;padding-right:4px;float:right; height:10px;' title='Local Refresh'  onclick='localRefresh(" + ReportId + "," + no_of_graphs[0] + ",\"" + hometabid + "\",\"" + request.getContextPath() + "\")'/>");
                            }
                            if (graphtype.equalsIgnoreCase("ColumnPie")) {
                                ReportTemplateBD reporttemp = new ReportTemplateBD();
                                graph.append(reporttemp.builcolumnpie(graphproperty, jqplotgraphbd, alist, rowValues, request, container, jqplotcontainer));

                            } else if ((graphtype.equalsIgnoreCase("Pie") || graphtype.equalsIgnoreCase("Funnel")) && container.isReportCrosstab()) {
                                ReportTemplateBD reporttemp = new ReportTemplateBD();
                                graph.append(reporttemp.builcrosstabpie(graphproperty, jqplotgraphbd, alist, rowValues, request, container, jqplotcontainer, null));

                            } else {
                                if (no_of_graphs.length == 1 && (graphtype.equalsIgnoreCase("pie") || graphtype.equalsIgnoreCase("Pie-Empty") || graphtype.equalsIgnoreCase("Donut") || graphtype.equalsIgnoreCase("Donut-Double") || graphtype.equalsIgnoreCase("Funnel"))) {
                                    if (!fromHome.equalsIgnoreCase("null") && !fromHome.equalsIgnoreCase("")) {
                                        graph.append("<div id='chart" + grpidfrmrep + "' class='cla' style='width:40%; height:" + screenheight + "px;margin: auto'  onclick=\"" + olapFunc + "\"></div>");
                                    } else {
                                        graph.append("<div id='chart" + grpidfrmrep + "' class='cla' style='width:40%; height:" + screenheight + "px;margin: auto'></div>");
                                    }
                                } else if (no_of_graphs.length == 2 && (graphtype.equalsIgnoreCase("pie") || graphtype.equalsIgnoreCase("Pie-Empty") || graphtype.equalsIgnoreCase("Donut") || graphtype.equalsIgnoreCase("Donut-Double") || graphtype.equalsIgnoreCase("Funnel"))) {
                                    if (!fromHome.equalsIgnoreCase("null") && !fromHome.equalsIgnoreCase("")) {
                                        graph.append("<div id='chart" + grpidfrmrep + "' class='cla' style='width:80%; height:" + screenheight + "px;margin: auto' onclick=\"" + olapFunc + "\"></div>");
                                    } else {
                                        graph.append("<div id='chart" + grpidfrmrep + "' class='cla' style='width:80%; height:" + screenheight + "px;margin: auto'></div>");
                                    }
                                } else if (fromHome == null || fromHome.isEmpty() || fromHome.equalsIgnoreCase("null")) {
                                    graph.append("<div id='chart" + grpidfrmrep + "' class='cla' style='width:100%; height:" + screenheight + "px;'></div>");
                                } else if (!fromHome.equalsIgnoreCase("null") && !fromHome.equalsIgnoreCase("")) {
                                    graph.append("<div id='chart" + grpidfrmrep + "' class='cla' style='width:100%; height:" + screenheight + "px;' onclick=\"" + olapFunc + "\">");
                                    graph.append("</div>");
                                }

                                graph.append("<script>");
                                graph.append(jqplotgraphbd.prepareJqplotGraph(ReportId, graphid, graphtype, jqplotcontainer, request, graphids, selectedgraph, grpidfrmrep));
                                graph.append("</script>");
                                graph.append("</div>");
                            }
                        }
                    }
                }
            }

        } catch (Exception e) {
            logger.error("Exception: ", e);
        }
        PrintWriter out = response.getWriter();
        String hotFilePath = (String) session.getAttribute("reportAdvHtmlFileProps");
        if (!fromHome.equalsIgnoreCase("null") && !fromHome.equalsIgnoreCase("") && (graphSlide == null || graphSlide.isEmpty() || graphSlide.equalsIgnoreCase("null"))) {
            String homeFileName = "";
            String graphType = "graphType";
            homeFileName = "welcomePage" + ReportId + "_" + System.currentTimeMillis() + ".txt";
            FileOutputStream fos1 = new FileOutputStream(hotFilePath + "/" + homeFileName);
            ObjectOutputStream oos1 = new ObjectOutputStream(fos1);
            oos1.writeObject(graph.toString());
            oos1.flush();
            oos1.close();
            PbReportViewerDAO repDao = new PbReportViewerDAO();
            if (graphcount != 2) {
                repDao.insertHomePageGraphs(ReportId, homeFileName, grpidfrmrep, container.getReportDesc(), graphType);
            }
        }
        out.print(graph.toString());
        return null;
    }

    /**
     * @author srikanth.p
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return clones the oldOneView and creates the new OneView
     * @throws java.lang.Exception
     */
    public ActionForward saveAsNewOneView(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        String oldoneViewId = request.getParameter("oldoneViewId");
        String newOneViewName = request.getParameter("newOneViewName");
        if (session != null) {
            ReportTemplateDAO reportDao = new ReportTemplateDAO();
//        String advHtmlFileProps=(String) request.getSession(false).getAttribute("oldAdvHtmlFileProps");
            String userId = session.getAttribute("USERID").toString();
            String result = reportDao.saveAsNewOneView(oldoneViewId, newOneViewName, session, request, userId);
            response.getWriter().print(result);
        }
        return null;
    }

    public ActionForward saveTimeDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        HashMap map = new HashMap();
        String date = request.getParameter("Date");
        String reportId = request.getParameter("reportId");
        String ComparisonDate = request.getParameter("istoggledate");
        // String ComparisonDate="No";
        ReportTemplateDAO DAO = new ReportTemplateDAO();
        PbReportViewerBD reportViewBD = new PbReportViewerBD();
        Container container = null;
        map = (HashMap) session.getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);
        DAO.saveComparisonDate(reportId, ComparisonDate);  //added by krishan pratap
        reportViewBD.saveTimeDetails(container, date, Integer.parseInt(reportId), request);

        return null;
    }

    public ActionForward saveParameterSection(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        String reportId = request.getParameter("REPORTID");
        HttpSession session = request.getSession(false);
        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
        HashMap map = new HashMap();
        Container container = null;
        map = (HashMap) session.getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);
        PbReportViewerBD saveParameter = new PbReportViewerBD();
        saveParameter.saveParameterSection(container, Integer.parseInt(reportId));
        // 
        return null;
    }

    public ActionForward saveGraphRegion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        String reportId = request.getParameter("REPORTID");
        HttpSession session = request.getSession(false);
        HashMap map = new HashMap();
        Container container = null;
        map = (HashMap) session.getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);
        PbReportViewerBD saveGraphSection = new PbReportViewerBD();
        saveGraphSection.saveGraphRegion(container, Integer.parseInt(reportId));
        return null;
    }

    public ActionForward saveTableRegion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        String reportId = request.getParameter("ReportId");
        HttpSession session = request.getSession(false);
        HashMap map = new HashMap();
        Container container = null;
        map = (HashMap) session.getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);
        PbReportViewerBD saveTableRegion = new PbReportViewerBD();
        saveTableRegion.saveTableRegion(container, Integer.parseInt(reportId));
        return null;
    }

    public ActionForward getAllDateEids(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        String bussTableId = request.getParameter("bussTableId");
        PbReportViewerDAO getEids = new PbReportViewerDAO();
        String result = getEids.getAllDateEids(bussTableId);
        response.getWriter().print(result);
        return null;
    }

    public ActionForward dateToggle(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        ArrayList<String> timeInfo = null;
        String reportId = request.getParameter("REPORTID");
        String datetoggl = request.getParameter("datetoggl");
        HttpSession session = request.getSession(false);
        HashMap map = new HashMap();
        Container container = null;
        HashMap<String, ArrayList<String>> timeDetailsMap = new LinkedHashMap<String, ArrayList<String>>();
        map = (HashMap) session.getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);
        PbReportCollection collect = new PbReportCollection();
        collect = container.getReportCollect();
        timeInfo = collect.timeDetailsArray;
        String date1 = "";
        String date2 = "";
        String date3 = "";
        String date4 = "";
        PbReportViewerDAO dateformat = new PbReportViewerDAO();
        String vals = "";
  DateFormat df = new SimpleDateFormat("MM/dd/yyyy");      

        if (container.getTimememdetails().get("PR_DAY_DENOM") != null) {
            vals = container.getTimememdetails().get("PR_DAY_DENOM").toString();
        } else {
            vals = container.getTimememdetails().get("pr_day_denom").toString();
        }
        vals = vals.replace("[", "");
        vals = vals.replace("]", "");
        String[] vals1 = vals.split(",");
        if (vals1[0].toString().contains("-") && vals1[1].toString().contains("-") && vals1[2].toString().contains("-") && vals1[3].toString().contains("-")) {
            date1 = vals1[0].trim().substring(5, 7) + "/" + vals1[0].trim().substring(8, 10) + "/" + vals1[0].trim().substring(0, 4);
            date2 = vals1[1].trim().substring(5, 7) + "/" + vals1[1].trim().substring(8, 10) + "/" + vals1[1].trim().substring(0, 4);
            date3 = vals1[2].trim().substring(5, 7) + "/" + vals1[2].trim().substring(8, 10) + "/" + vals1[2].trim().substring(0, 4);
            date4 = vals1[3].trim().substring(5, 7) + "/" + vals1[3].trim().substring(8, 10) + "/" + vals1[3].trim().substring(0, 4);
        } else {
           if (container.getViewByColNames().contains("TIME")||container.getViewByColNames().contains("Time") ) {
       Date d = new Date(vals1[0].trim());
         date1=df.format(d);
         d = new Date(vals1[1].trim());
            date2 = df.format(d);
            d = new Date(vals1[2].trim());
            date3 = df.format(d);
            d = new Date(vals1[3].trim());
            date4 =df.format(d);
               
           }else{

            date1 = vals1[0].trim().substring(0, 10);
            date2 = vals1[1].trim().substring(0, 10);
            date3 = vals1[2].trim().substring(0, 10);
            date4 = vals1[3].trim().substring(0, 10);
        }
        }
        if (timeInfo != null && timeInfo.get(0).toString().equalsIgnoreCase("DAY") && timeInfo.get(1).toString().equalsIgnoreCase("PRG_STD")) {
            String[] timemapkey = {"AS_OF_DATE1", "AS_OF_DATE2", "CMP_AS_OF_DATE1", "CMP_AS_OF_DATE2"};
            String[] timeType = {"From DATE", "To DATE", "Comp From DATE", "Comp To DATE"};
            String[] date = {date1, date2, date3, date4};
            collect.timeDetailsMap.clear();
            for (int i = 0; i < timemapkey.length; i++) {
                ArrayList timedetails = new ArrayList();
                timedetails.add(date[i].trim());
                timedetails.add("CBO_" + timemapkey[i]);
                timedetails.add(timeType[i]);
//                timedetails.add("" + (i + 1) + "");
//                timedetails.add("" + (i + 1) + "");
                timedetails.add(Integer.toString(i + 1));
                timedetails.add(Integer.toString(i + 1));
                timedetails.add(date[i].trim());
                timedetails.add(timemapkey[i]);
                collect.timeDetailsMap.put(timemapkey[i], timedetails);
            }
            collect.timeDetailsArray.set(1, "PRG_DATE_RANGE");
            collect.timeDetailsArray.set(2, date1);
            collect.timeDetailsArray.set(3, date2);
            collect.timeDetailsArray.set(4, date3);
            collect.timeDetailsArray.add(date4);

        } else if (timeInfo != null && timeInfo.get(0).toString().equalsIgnoreCase("DAY") && timeInfo.get(1).toString().equalsIgnoreCase("PRG_DATE_RANGE")) {
            String[] timemapkey = {"PRG_PERIOD_TYPE", "AS_OF_DATE", "PRG_COMPARE"};
            String[] timeType = {"Month", date2.trim().substring(0, 10), "Last Period"};
            collect.timeDetailsMap.clear();
            for (int i = 0; i < timemapkey.length; i++) {
                ArrayList timedetails = new ArrayList();
                timedetails.add(timeType[i]);
                timedetails.add("CBO_" + timemapkey[i]);
                timedetails.add("DATE");
                timedetails.add("1");
                timedetails.add("1");
                timedetails.add(timeType[i]);
                timedetails.add(timemapkey[i]);
                collect.timeDetailsMap.put(timemapkey[i], timedetails);
            }
            collect.timeDetailsArray.set(1, "PRG_STD");
            collect.timeDetailsArray.set(2, date2.trim().substring(0, 10));
            collect.timeDetailsArray.set(3, "Month");
            collect.timeDetailsArray.set(4, "Last Period");
            collect.timeDetailsArray.remove(5);

        }
        container.setReportCollect(collect);
        container.datetoggl = datetoggl;
        response.getWriter().print("Success");
        return null;
    }

    public ActionForward reportDrillAssignment(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        String reportId = request.getParameter("reportId");
        HttpSession session = request.getSession(false);
        String userId = String.valueOf(session.getAttribute("USERID"));
        HashMap map = new HashMap();
        Container container = null;
        map = (HashMap) session.getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);
        PbReportViewerDAO getrepIds = new PbReportViewerDAO();
        HashMap<String, ArrayList> reportDetails = getrepIds.getAllReportsRelatedtoRole(reportId, userId, container);
        Gson gson = new Gson();
        String reportJson = gson.toJson(reportDetails);
        response.getWriter().print(reportJson);
        return null;
    }

    public ActionForward saveDrillAssignReports(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {

       
         HttpSession session = request.getSession(false);
        String reportId = request.getParameter("reportId");
        String[] msrIds = request.getParameterValues("msrId");
        String[] AssignreportIds = request.getParameterValues("MsrReport");
        String reportselection = request.getParameter("reportselection");
        String[] multireportNames = request.getParameterValues("multireportNames");
        String[] multireportIds = request.getParameterValues("multireportIds");
        String isKPIDashboard = request.getParameter("isKPIDashboard");
        Container container = null;
        HashMap map = (HashMap) request.getSession(false).getAttribute("PROGENTABLES");
        session.setAttribute("drillreportflag","true");
        container = (Container) map.get(reportId);
        container.setMeasureDrillType("ReportDrill");
        if (reportselection.equalsIgnoreCase("multi report")) {
            container.setMsrDrillReportSelection("multi report");
            HashMap<String, HashMap<String, String>> msrDrillReportIdandnames = new HashMap<String, HashMap<String, String>>();
            for (int i = 0; i < msrIds.length; i++) {
                HashMap<String, String> map1 = new HashMap<String, String>();
                if (multireportIds[i].contains(",")) {
                    String[] reportIds = multireportIds[i].split(",");
                    String[] reportNames = multireportNames[i].split(",");
                    for (int j = 0; j < reportIds.length; j++) {
                        map1.put(reportIds[j], reportNames[j]);
                    }
                } else {
                    map1.put(multireportIds[i], multireportNames[i]);
                }
                msrDrillReportIdandnames.put("A_" + msrIds[i], map1);
            }
            container.setMsrDrillReportIdandnames(msrDrillReportIdandnames);
            //  
        } else {
            container.setMsrDrillReportSelection("single report");
        }
        PbReportViewerDAO saveReports = new PbReportViewerDAO();
        saveReports.saveDrillAssignmentReports(reportId, msrIds, AssignreportIds, container, multireportIds);
        if (isKPIDashboard != null && isKPIDashboard.toString().equalsIgnoreCase("true")) {
            PrintWriter out = response.getWriter();
            PbReportViewerBD KPIDashboardBD = new PbReportViewerBD();
            StringBuilder result = KPIDashboardBD.DisplayKpiDashBoard(container);
//        out.print(result);
            out.print(result.toString());
        }

//      container.setReportDrillMap(reportmap);
        return null;
    }

    public ActionForward getLevelDetailsForDiscreteFromTargetMe(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        PbReportViewerDAO dao = new PbReportViewerDAO();
        String elementId = request.getParameter("elementId");
        String levelType = request.getParameter("levelType");
        HashMap<String, List<String>> measMap = new HashMap<String, List<String>>();
        measMap = dao.getYearLevelForTargetMeas(elementId, levelType);
        StringBuilder yearSB = new StringBuilder();
        StringBuilder customYear = new StringBuilder();
        List<String> yearsList = new ArrayList<String>();
        List<String> customyear = new ArrayList<String>();
        yearsList = measMap.get("DDATE");
        customyear = measMap.get("CUSTOMYEAR");

        yearSB.append("{ cust_year_details :[");
        customYear.append(" cust_year :[");

        for (int i = 0; i < yearsList.size(); i++) {
            yearSB.append("\"").append(yearsList.get(i)).append("\"");
            customYear.append("\"").append(customyear.get(i)).append("\"");
            if (i != yearsList.size() - 1) {
                yearSB.append(",");
                customYear.append(",");
            }
        }
        yearSB.append("],").append(customYear).append("]}");
        try {
            response.getWriter().print(yearSB.toString());
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward multiSelectAdhocDrillDown(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {

        String[] drillAcrossItems = request.getParameter("drillAcrossItems").split(",");
        logger.info("****" + request.getParameter("drillAcrossItems"));
        ArrayListMultimap<String, String> map = ArrayListMultimap.create();
        for (int i = 0; i < drillAcrossItems.length; i++) {
            if (drillAcrossItems[i].contains("#")) {
                String[] arr = drillAcrossItems[i].split("#");
                for (int x = 0; x < arr.length; x++) {
                    String[] tempArr = arr[x].split(":");
                    map.put("&CBOARP" + tempArr[0].replace("A_", ""), tempArr[1]);
                }
            } else {
                String[] tempArr = drillAcrossItems[i].split(":");
                map.put("&CBOARP" + tempArr[0].replace("A_", ""), tempArr[1]);
            }
        }
        StringBuilder sb = new StringBuilder();
        Set<String> keySet = map.keySet();
        Iterator<String> iter = keySet.iterator();
        while (iter.hasNext()) {
            String key = iter.next();
            List<String> valList = map.get(key);
            sb.append(key + "=");
            StringBuilder valSB = new StringBuilder();
            for (String val : valList) {
                valSB.append("," + val);
            }
            sb.append(valSB.substring(1));
        }
        logger.info("sb" + sb.toString());
        try {
            response.getWriter().print(sb.toString());
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward getTableList(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        String paramslist = request.getParameter("paramslist");
        String currentBizRoles = request.getParameter("currentBizRoles");
        String aoid = request.getParameter("aoid");
        GetDimFactMapping gfm = new GetDimFactMapping();
        //Added by Ram
        String repId = request.getParameter("currentReportId");
        ReportTemplateDAO templateDAO = new ReportTemplateDAO();
        if (paramslist != null && !paramslist.equalsIgnoreCase("")) {
            paramslist = paramslist.substring(1, paramslist.length() - 1);
            paramslist = templateDAO.getUnMeasureViewBys(repId, paramslist);
        }
        //End Ram Code
        ArrayList alist = new ArrayList();
        String[] vals = null;
        String tableList = "";
        if (paramslist != null && !paramslist.equalsIgnoreCase("")) {
            vals = paramslist.split(",");
        }
        if (vals != null) {
            for (int i = 0; i < vals.length; i++) {
                alist.add(vals[i].replace("[", "").replace("]", "").replace(" ", ""));
            }
        }
        HashMap tabNames = new HashMap();
        ReportTemplateDAO rdao = new ReportTemplateDAO();
        //templateDAO.getMeasures(currentBizRoles, alist,request.getContextPath());
        if (!alist.isEmpty()) {
            try {
                tableList = gfm.getFact(alist);
            } catch (SQLException ex) {
                logger.error("Exception:", ex);
            }
            if (aoid != null && !aoid.equalsIgnoreCase("")) {
                tabNames = rdao.getTableNamesForAO(aoid, tableList);
            } else {
                tabNames = rdao.getTableNames(currentBizRoles, tableList);
            }
        } else {
            if (currentBizRoles == null && aoid != null && !aoid.equalsIgnoreCase("")) {
                tabNames = rdao.getTableNamesForAO(aoid, tableList);
            } else {
                tabNames = rdao.getTableNames(currentBizRoles, tableList);
            }
        }
        //
        JSONObject jsonMap = new JSONObject();
        jsonMap.put("idsList", tabNames.get("tabIdList"));
        jsonMap.put("namesList", tabNames.get("tabNameList"));
        try {
            response.getWriter().print(jsonMap.toString());
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward setTableListToContainer(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        String repId = request.getParameter("repId");
        String tabLst = request.getParameter("tabLst");
        String[] tabListArray = null;
        ArrayList alsit = new ArrayList();
        Container container = null;
        if (tabLst != null && !tabLst.equalsIgnoreCase("")) {
            tabListArray = tabLst.split(",");
            for (int i = 0; i < tabListArray.length; i++) {
                alsit.add(tabListArray[i]);
            }
        }
        container = Container.getContainerFromSession(request, repId);
        container.setTableList(alsit);
        return null;
    }

    public ActionForward getViewFilters(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        HashMap map = null;
        HashMap allViewBys = new HashMap();
        ArrayList<String> allViewIds = new ArrayList<String>();
        ArrayList<String> allViewNames = new ArrayList<String>();
        ArrayList<String> rowViewIdList = new ArrayList<String>();
        ArrayList<String> colViewIdList = new ArrayList<String>();
        ArrayList<String> rowNamesLst = new ArrayList<String>();
        ArrayList<String> colNamesLst = new ArrayList<String>();

        ArrayList<String> allselectedViewIds = new ArrayList<String>();
        ArrayList<String> allselectedViewNames = new ArrayList<String>();
        String rowName = "";
        String colName = "";
        String ViewFrom = String.valueOf(session.getAttribute("ViewFrom"));
        Container container = null;
        String reportId = request.getParameter("REPORTID");
        PbReportCollection collect = new PbReportCollection();
        HashMap ParameterMap = new HashMap();
        ReportTemplateDAO rdao = new ReportTemplateDAO();
        String selectedParams = rdao.getSelectedParamDetails(reportId);

        if (session != null) {
            if (session.getAttribute("PROGENTABLES") != null) {
                map = (HashMap) session.getAttribute("PROGENTABLES");
                container = (Container) map.get(reportId);
            }
            if (container != null) {
                ArrayList alist = new ArrayList();
                String[] selectedParamsArray = null;
                if (selectedParams != null && !selectedParams.equalsIgnoreCase("")) {
                    selectedParamsArray = selectedParams.split(",");
                }
                if (selectedParamsArray != null) {
                    for (int i = 0; i < selectedParamsArray.length; i++) {
                        alist.add(selectedParamsArray[i]);
                    }
                }
                if (ViewFrom.equalsIgnoreCase("Designer")) {
                    ParameterMap = container.getParametersHashMap();
                    allViewIds = (ArrayList<String>) ParameterMap.get("Parameters");
                    allViewNames = (ArrayList<String>) ParameterMap.get("ParametersNames");
                } else {
                    collect = container.getReportCollect();
                    allViewBys = collect.getReportParameters();
                    String[] allKeys = (String[]) (allViewBys.keySet()).toArray(new String[0]);
                    for (int i = 0; i < allViewBys.size(); i++) {
                        allViewIds.add(allKeys[i]);
                        allViewNames.add(collect.getElementName(allKeys[i]));

                    }
                    for (int i = 0; i < allViewBys.size(); i++) {
                        if (alist != null && !alist.isEmpty()) {
                            for (int j = 0; j < alist.size(); j++) {
                                if (alist.get(j) != null && alist.get(j) != "" && allKeys[i].equalsIgnoreCase(alist.get(j).toString())) {
                                    allselectedViewIds.add(allKeys[i]);
                                    allselectedViewNames.add(collect.getElementName(allKeys[i]));
                                }
                            }
                        }
                    }
//                    allViewIds.add("TIME");
//                    allViewNames.add("Time");
                }
                if (allselectedViewIds.isEmpty()) {
                    allselectedViewIds = new ArrayList();
                    allselectedViewNames = new ArrayList();
                    allselectedViewIds.addAll(allViewIds);
                    allselectedViewNames.addAll(allViewNames);
                }
//                rowViewIdList = collect.reportRowViewbyValues;
//                colViewIdList = collect.reportColViewbyValues;
//                if (rowViewIdList != null && rowViewIdList.size() != 0) {
//                    for (int i = 0; i < rowViewIdList.size(); i++) {
//                        rowName = (String) rowViewIdList.get(i);
//                        if (rowName.equalsIgnoreCase("Time")) {
//                            rowNamesLst.add("Time");
//                        } else {
//                            rowNamesLst.add(collect.getParameterDispName(rowName));
//                        }
//                    }
//                }
//                if (colViewIdList != null && colViewIdList.size() != 0) {
//                    for (int i = 0; i < colViewIdList.size(); i++) {
//                        colName = (String) colViewIdList.get(i);
//                        if (colName.equalsIgnoreCase("Time")) {
//                            colNamesLst.add("Time");
//                        } else {
//                            colNamesLst.add(collect.getParameterDispName(colName));
//                        }
//                    }
//                }

                session.setAttribute("allViewIds", allViewIds);
                session.setAttribute("allViewNames", allViewNames);
//                session.setAttribute("rowViewIdList", rowViewIdList);
//                session.setAttribute("colViewIdList", colViewIdList);
//                session.setAttribute("rowNamesLst", rowNamesLst);
//                session.setAttribute("colNamesLst", colNamesLst);
                GenerateDragAndDrophtml dragAndDrophtml = new GenerateDragAndDrophtml("Drag values from here", "Drop values here", allselectedViewIds, allViewIds, request.getContextPath());
                dragAndDrophtml.setDragableListNames(allViewNames);
                dragAndDrophtml.setDropedmesNames(allselectedViewNames);
                String htmlStr = dragAndDrophtml.getDragAndDropDiv();
                PrintWriter out = null;
                out = response.getWriter();
                out.print(htmlStr);
            }
        }

        return null;
    }

    public ActionForward saveViewFilters(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        Container container = null;
        HashMap map = null;
        String query = "";
        String reportId = request.getParameter("REPORTID");
        String paramIdsArray = request.getParameter("paramIdsArray");
        PbReportCollection collect = new PbReportCollection();
        HashMap ParameterMap = new HashMap();
        ReportTemplateDAO rdao = new ReportTemplateDAO();
        String selectedParams = "";
        boolean result = rdao.saveSelectedParamDetails(reportId, paramIdsArray);
        if (result == true) {
            selectedParams = rdao.getSelectedParamDetails(reportId);
        }
        //update PRG_AR_REPORT_PARAM_DETAILS set SELECTED_PARAM_DETAILS = '&' where ELEMENT_ID = '&' and REPORT_ID = '&'
        if (session != null) {
            if (session.getAttribute("PROGENTABLES") != null) {
                map = (HashMap) session.getAttribute("PROGENTABLES");
                container = (Container) map.get(reportId);
            }
            if (container != null) {
                if (selectedParams != null && !selectedParams.equalsIgnoreCase("")) {
                    container.setSelectedParameterIds(selectedParams);
                }
            }
        }
        PrintWriter out = null;
        out = response.getWriter();
        out.print(result);
        return null;
    }

    public ActionForward designGraphInViewer(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        String reportId = request.getParameter("reportId");
        HttpSession session = request.getSession(false);
        HashMap GraphTypesHashMap = null;
        HashMap GraphSizesDtlsHashMap = null;
        String[] graphTypesArray = null;
        String[] grpTypeskeys = new String[0];
        GraphTypesHashMap = (HashMap) session.getAttribute("GraphTypesHashMap");
        GraphSizesDtlsHashMap = (HashMap) session.getAttribute("GraphSizesDtlsHashMap");
        grpTypeskeys = (String[]) GraphTypesHashMap.keySet().toArray(new String[0]);
        graphTypesArray = (String[]) (new TreeSet(GraphTypesHashMap.values())).toArray(new String[0]);
        ProGenChartUtilities utilities = new ProGenChartUtilities();
        String str = utilities.buildGraphTypesForRD(request.getContextPath(), grpTypeskeys, GraphTypesHashMap, "getGraphName1");
        PrintWriter out = response.getWriter();
        out.print(str);
        return null;
    }

    public ActionForward saveInitializeReport(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        HttpSession session = request.getSession(false);
        if (session != null) {
            String reportId = request.getParameter("reportId");
            String checkViewbyId = request.getParameter("CheckViewbyId");
            String checkdepentReportIds = request.getParameter("checkdepentReportIds");
            String[] viewbyNames = request.getParameterValues("initviewByName");
            String[] viewbyIds = request.getParameterValues("initviewByID");
            String[] depRepIds = request.getParameterValues("initreportName");
            String[] checkedVIds = checkViewbyId.split(",");
            String[] checkedRIds = checkdepentReportIds.split(",");
            HashMap assignedMap = new HashMap();
            for (int i = 0; i < checkedVIds.length; i++) {
                String key = checkedVIds[i].trim();
                String val = checkedRIds[i].trim();
                assignedMap.put(key, val);

            }
            PbReportViewerDAO savedao = new PbReportViewerDAO();
            boolean flag = savedao.saveInitializeReportValues(reportId, assignedMap, viewbyIds);
        }
        return null;
    }

    public ActionForward getRelatedMeasureDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        HttpSession session = request.getSession(false);
        String reportId = request.getParameter("reportId");
        String elementId = request.getParameter("elementId");
        elementId = elementId.replace("A_", "").replace("_percentwise", "");
        HashMap map = null;
        StringBuilder kpiheadsbuilder = new StringBuilder();
        String UserId = "";
        String[] relatedMeasNamesArr = null;
        PbReturnObject pbretObjForTime = null;
        DashboardViewerDAO dao = new DashboardViewerDAO();
        ArrayList QueryCols = new ArrayList();
        ArrayList QueryAggs = new ArrayList();
        List<String> measureIdVal = new ArrayList<String>();
        Container container = null;
        if (session != null) {
            if (session.getAttribute("PROGENTABLES") != null) {
                map = (HashMap) session.getAttribute("PROGENTABLES");
                container = (Container) map.get(reportId);
            }
            UserId = String.valueOf(session.getAttribute("USERID"));
        }
        ArrayList<String> timeInfo = null;
        if (container != null) {
            container = (Container) map.get(reportId);
            PbReportCollection collect = new PbReportCollection();
            collect = container.getReportCollect();
            timeInfo = collect.timeDetailsArray;
            ArrayList alist = new ArrayList();
            if (elementId != null && !elementId.equalsIgnoreCase("")) {
                DashboardViewerDAO ddao = new DashboardViewerDAO();
                ArrayList relatedMeasReult = ddao.getRelatedMeasures(elementId);
                if (relatedMeasReult != null && !relatedMeasReult.isEmpty()) {
                    String measIds = (String) relatedMeasReult.get(0);
                    String measNames = (String) relatedMeasReult.get(1);
                    String refTypes = (String) relatedMeasReult.get(2);
                    String[] relatedMeasReultArr = measIds.split(",");
                    relatedMeasNamesArr = measNames.split(",");
                    String[] refTypesArr = refTypes.split(",");
                    for (int i = 0; i < relatedMeasReultArr.length; i++) {
                        measureIdVal.add(relatedMeasReultArr[i]);
                    }
                }
            }
            List<KPIElement> kpiElements = dao.getKPIElements(measureIdVal, new HashMap<String, String>());
            if (kpiElements != null) {
                for (KPIElement elem : kpiElements) {
                    if (elem.getElementName() != null) {
                        QueryCols.add(elem.getElementId());
                    }
                    QueryAggs.add(elem.getAggregationType());
                }
            }

            PbReportQuery timequery = new PbReportQuery();
            if (QueryCols != null && !QueryCols.isEmpty()) {
                timequery.setRowViewbyCols(new ArrayList());
                timequery.setColViewbyCols(new ArrayList());
                timequery.setColViewbyCols(new ArrayList());
                timequery.setQryColumns(QueryCols);
                timequery.setColAggration(QueryAggs);
                timequery.setTimeDetails(timeInfo);
                timequery.setDefaultMeasure(String.valueOf(QueryCols.get(0)));
                timequery.setDefaultMeasureSumm(String.valueOf(QueryAggs.get(0)));
                timequery.isKpi = true;
                timequery.setBizRoles(container.getReportCollect().reportBizRoles[0]);
                timequery.setUserId(UserId);

                String nbrSymbol = container.getNumberSymbol("A_" + elementId);
                int precision = container.getRoundPrecisionForMeasure("A_" + elementId);
                pbretObjForTime = timequery.getPbReturnObject(String.valueOf(QueryCols.get(0)));
                if (pbretObjForTime != null) {
                    NumberFormat formatter = NumberFormat.getInstance(new Locale("en_US"));
                    ArrayList valArray = new ArrayList();
                    kpiheadsbuilder.append("<table style='table-layout:fixed; width:100%; border-spacing: 15px;'>");
                    for (int j = 0; j < measureIdVal.size(); j++) {
                        double currVal = 0.0;
                        if (!pbretObjForTime.getFieldValueString(0, ("A_" + measureIdVal.get(j)).toString()).equalsIgnoreCase("")) {
                            currVal = Double.parseDouble((pbretObjForTime.getFieldValueString(0, ("A_" + measureIdVal.get(j)).toString())));
                        }
                        int decimalPlaces = 0;
                        BigDecimal curval = new BigDecimal(currVal);
                        BigDecimal val = curval;
                        curval = curval.setScale(decimalPlaces, BigDecimal.ROUND_HALF_UP);
                        valArray.add(curval);
                        BigDecimal maxBigDecimal = new BigDecimal(currVal);
                        String Value1 = NumberFormatter.getModifiedNumber(maxBigDecimal, nbrSymbol, precision);
                        kpiheadsbuilder.append("<tr><td>" + relatedMeasNamesArr[j] + ":</td><td>" + Value1 + "</td></tr>");
                    }
                    kpiheadsbuilder.append("</table>");
                }
            }
        }
        PrintWriter out = response.getWriter();
        out.print(kpiheadsbuilder.toString());
        return null;
    }

    public ActionForward getReportsforMsrDrill(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        String reportId = request.getParameter("reportId");
        ArrayList<String> droppableList = new ArrayList<String>();
        ArrayList<String> reportIdlist = new ArrayList<String>();
        ArrayList<String> draggableList = new ArrayList<String>();
        ArrayList<String> droppableListnames = new ArrayList<String>();
        ArrayList<String> draggableListNames = new ArrayList<String>();
        GenerateDragAndDrophtml dragAndDrophtml = null;
        HttpSession session = request.getSession(false);
        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
        HashMap map = new HashMap();
        Container container = null;
        map = (HashMap) session.getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);
        PbReportViewerDAO getrepIds = new PbReportViewerDAO();
        HashMap<String, ArrayList> reportDetails = getrepIds.getAllReportsRelatedtoRole(reportId, userId, container);
        reportIdlist = (ArrayList) reportDetails.get("reportIds");
        // draggableList=(ArrayList)reportDetails.get("reportIds");
        draggableListNames = (ArrayList) reportDetails.get("reportNames");
        for (int i = 0; i < reportIdlist.size(); i++) {
            draggableList.add(reportIdlist.get(i) + "###" + draggableListNames.get(i));
        }
        dragAndDrophtml = new GenerateDragAndDrophtml("Select columns from below", "Drag columns to here", droppableList, draggableList, request.getContextPath());
        dragAndDrophtml.setDragableListNames(draggableListNames);
        dragAndDrophtml.setDropedmesNames(droppableListnames);
        String htmlData = dragAndDrophtml.getDragAndDropDiv();
        response.getWriter().print(htmlData);

        return null;
    }

    public ActionForward getMultiSelectReportNames(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        String msrId = request.getParameter("msrId");
        String reportId = request.getParameter("reportId");
        Container container = null;
        HashMap<String, HashMap<String, String>> msrDrillReportIdandnames = new HashMap<String, HashMap<String, String>>();
        HashMap<String, String> reportIdandnames = new HashMap<String, String>();
        HashMap AssignReportMap = new HashMap();
        ArrayList repIdlist = new ArrayList();
        ArrayList repNamelist = new ArrayList();
        HashMap map = (HashMap) request.getSession(false).getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);
        msrDrillReportIdandnames = container.getMsrDrillReportIdandnames();
        if (msrDrillReportIdandnames != null && msrDrillReportIdandnames.containsKey("A_" + msrId)) {
            reportIdandnames = msrDrillReportIdandnames.get("A_" + msrId);
        } else {
            PbReportViewerDAO dao = new PbReportViewerDAO();
            reportIdandnames = dao.getReportIdndNamesforMultiSelectDrill(reportId, msrId, container, String.valueOf(request.getSession(false).getAttribute("USERID")));
        }
        String[] assignReportIds = (String[]) (reportIdandnames.keySet()).toArray(new String[0]);
        for (int i = 0; i < assignReportIds.length; i++) {
            repIdlist.add(assignReportIds[i]);
            repNamelist.add(reportIdandnames.get(assignReportIds[i]));
        }
        AssignReportMap.put("reportIds", repIdlist);
        AssignReportMap.put("reportNames", repNamelist);
        AssignReportMap.put("msrId", msrId);
        Gson gson = new Gson();
        String gsonString = gson.toJson(AssignReportMap);
        response.getWriter().print(gsonString);
        return null;
    }

    public ActionForward getAllParams(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        Container container = null;
        HashMap map = null;
        StringBuilder result = new StringBuilder();
        if (session != null) {
            StringBuilder paramName = new StringBuilder();
            StringBuilder paramIds = new StringBuilder();
//            paramName.append("{ ParameterNames:[");
            paramIds.append(" ParameterIds:[");
//            Parameters
//            ParametersNames
            ArrayList<String> reportParamNames = new ArrayList<String>();
            ArrayList<String> reportParamIds = new ArrayList<String>();
            try {
                String reportId = request.getParameter("REPORTID");
                if (session.getAttribute("PROGENTABLES") != null) {
                    map = (HashMap) session.getAttribute("PROGENTABLES");
                    container = (Container) map.get(reportId);

                    reportParamNames = (ArrayList) container.getParametersHashMap().get("ParametersNames");
                    reportParamIds = (ArrayList) container.getParametersHashMap().get("Parameters");

//                    if (reportParamNames.size() == reportParamIds.size()) {
//                        for (int i = 0; i < reportParamNames.size(); i++) {
//                            paramName.append("\"").append(reportParamNames.get(i)).append("\"");
//                            paramIds.append("\"").append(reportParamIds.get(i)).append("\"");
//                            if(i!=reportParamNames.size()-1 ){
//                                paramName.append(",");
//                                paramIds.append(",");
//                            }
//                        }
//                    }
                }
                paramName.append("<ul id='removeDimValues' class='sortable'>");
                paramName.append(new PbReportViewerDAO().deleteViewBys(reportParamIds, reportParamNames, "removeDim", request.getContextPath()));
                paramName.append("</ul>");
                paramName.append("<br><center><table><tr><td><input type='button' class='navtitle-hover' value='Done' onclick=\"submitval('" + request.getContextPath() + "')\"></td></tr></table></center>");

//                paramName.append("],").append(paramIds).append("]}");
                response.getWriter().print(paramName.toString());
            } catch (Exception e) {
                logger.error("Exception: ", e);
            }

        }
        return null;
    }

    public ActionForward saveSplitBy(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        if (session != null) {
            String reportId = request.getParameter("reportId");
            String isSplitBy = request.getParameter("isSplitBy");
            String splitByVal = request.getParameter("splitValue");
            HashMap map = (HashMap) session.getAttribute("PROGENTABLES");
            HashMap reportSplitMap = new HashMap();
            ArrayList splitValues = new ArrayList();
            Container container = null;
            if (map != null) {
                container = (Container) map.get(reportId);
                if (isSplitBy != null && Boolean.parseBoolean(isSplitBy) && isSplitBy != null) {
                    container.setIsSplitBy(true);
                    container.setSplitBy(splitByVal.trim());
                    splitValues.add(true);
                    splitValues.add(splitByVal.trim());
                } else {
                    container.setIsSplitBy(false);
                    splitValues.add(false);
                }
                reportSplitMap.put(reportId, splitValues);
                session.setAttribute("REPOTSPLITMAP", reportSplitMap);
            }
        }
        return null;
    }

    public ActionForward viewReportPopUp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        if (session != null) {
            String parentReportId = request.getParameter("parentReportId");
            String UserId = String.valueOf(session.getAttribute("USERID"));
            String REPORTID = request.getParameter("REPORTID");
            String url = request.getRequestURL().toString();
            PbReportViewerBD reportViewerBD = new PbReportViewerBD();
            String reportName = "";
            String drillDim = "";
            String drillMeasVal = "";
            if (REPORTID != null) {

                //.println("reportid in vieweraction after is : " + ReportId);
                url = url + "?reportBy=viewReport;REPORTID=" + REPORTID + "&action=open";
                request.setAttribute("url", url);
                request.setAttribute("REPORTID", REPORTID);

                reportViewerBD.prepareReport(REPORTID, UserId, request, response,false);
                if (session.getAttribute("PROGENTABLES") != null) {
                    HashMap map = (HashMap) session.getAttribute("PROGENTABLES");
                    if (map.get(REPORTID) != null) {
                        Container container = (Container) map.get(REPORTID);
                        if (container != null) {
                            reportName = container.getReportName();
                            PbReportCollection collect = container.getReportCollect();
                            for (int i = 0; i < collect.reportParamIds.size(); i++) {
                                if (collect.reportIncomingParameters.get("CBOARP" + collect.reportParamIds.get(i)) != null) {
                                    drillDim = collect.reportParamNames.get(i).toString();
                                    drillMeasVal = collect.reportParametersValues.get(collect.reportParamIds.get(i)).toString();
                                }
                            }
                        }
                    }
                }
            }
            JSONObject jsonMap = new JSONObject();
            jsonMap.put("ReportId", REPORTID);
            jsonMap.put("RepName", reportName);
            jsonMap.put("DrillDim", drillDim);
            jsonMap.put("DrillMasVal", drillMeasVal);
            response.getWriter().print(jsonMap);
        } else {
        }
        return null;
    }

    public ActionForward saveDateFormula(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, Exception {

//        ProgenLog.log(ProgenLog.FINE, this, "saveDateFormula", "Enter Method");
        logger.info("Enter Method");
        PrintWriter out = response.getWriter();
        PbDb pbdb = new PbDb();
        String finalQuery = "";
        ArrayList list = new ArrayList();
        String elementId = "";
        String bussColId;
        try {
            String columnFormula = request.getParameter("txt2");
            columnFormula = columnFormula.replace("@", "+");
            columnFormula = columnFormula.replace("|_|", "%");
            columnFormula = columnFormula.replace("||chr(38)||", "&");

            String folderIds = request.getParameter("folderIds");
            String columnName = request.getParameter("columnName");
            String iscalculate = request.getParameter("iscalculate");
            String tArea = request.getParameter("tArea");
            String tArea1 = request.getParameter("tArea1");
            boolean fromEdit = Boolean.parseBoolean(request.getParameter("fromEdit"));
            String measElementIdString = request.getParameter("elementId");
            String aggrType = request.getParameter("aggrType");
            String formulaType = request.getParameter("formulaType");
            String basicOp = request.getParameter("basicOp");

            int measElementId = 0;
            if (measElementIdString != "") {
                measElementId = Integer.parseInt(request.getParameter("elementId"));
            }

            String displayFormula = columnFormula.toUpperCase();

            String a = tArea1.trim();
            if (a.startsWith(",")) {
                a = a.substring(1);
            }

            String eleList2[] = a.split(",");

            String eleList1 = "";

            if (eleList2.length > 1) {
                for (int j = 0; j < eleList2.length - 1; j++) {
                    int count = 0;
                    for (int j1 = j + 1; j1 < eleList2.length; j1++) {
                        if (eleList2[j].equalsIgnoreCase(eleList2[j1])) {
                            count = 1;
                            break;
                        }
                    }
                    if (count == 0) {
                        eleList1 += "," + eleList2[j];
                    }
                    if (j == eleList2.length - 2) {
                        eleList1 += "," + eleList2[j + 1];
                    }
                }

                if (!eleList1.equalsIgnoreCase("")) {
                    if (eleList1.startsWith(",")) {
                        eleList1 = eleList1.substring(1);
                    }
                }
            } else {
                eleList1 = eleList2[0];
            }
            String eleList3[] = eleList1.split(",");

            String dependenteleids = "";
            String dependenteleid = "";
            for (int p = 0; p < eleList3.length; p++) {
                boolean check = tArea.contains(eleList3[p]);
                //////////////////.println("check==" + check);
                if (check == true) {
                    //////////////////.println("in if");
                    dependenteleids += "," + eleList3[p];
                }
                if (p == eleList3.length - 1) {
                    if (dependenteleids.startsWith(",")) {
                        dependenteleids = dependenteleids.substring(1);
                    }
                }
            }

            String aggType = "";
            String colType = "";
            columnFormula = columnFormula.toUpperCase();
            //rule 1 if formula doesn't have sum count avg etc. colType is Calculated
            if (columnFormula.indexOf("SUM(") >= 0 || columnFormula.indexOf("COUNT(") >= 0 || columnFormula.indexOf("COUNT(*") >= 0 || columnFormula.indexOf("AVG(") >= 0 || columnFormula.indexOf("MIN(") >= 0 || columnFormula.indexOf("MAX(") >= 0 || columnFormula.indexOf("POWER(") >= 0 || columnFormula.indexOf("SQRT(") >= 0 || columnFormula.indexOf("ROUND(") > 0 || columnFormula.indexOf("ABS(") >= 0) {
                colType = "CALCULATED";
            } else {
                colType = "CALCULATED";
            }
//            if(formulaType.equalsIgnoreCase("DATEFORMULA")){
//                colType = "calculated";
//            }

            if (columnFormula.indexOf("SUM(") >= 0) {
                aggType = "sum";
            } else if (columnFormula.indexOf("COUNT(") >= 0) {
                aggType = "count";
            } else if (columnFormula.indexOf("COUNT(*") >= 0) {
                aggType = "count(*)";
            } else if (columnFormula.indexOf("COUNT(DISTINCT") >= 0) {
                aggType = "count";
            } else if (columnFormula.indexOf("AVG(") >= 0) {
                aggType = "avg";
            } else if (columnFormula.indexOf("MIN(") >= 0) {
                aggType = "min";
            } else if (columnFormula.indexOf("MAX(") >= 0) {
                aggType = "max";
            } else if (columnFormula.indexOf("POWER(") >= 0) {
                aggType = "avg";
            } else if (columnFormula.indexOf("SQRT(") >= 0) {
                aggType = "min";
            } else if (columnFormula.indexOf("ABS(") >= 0) {
                aggType = "max";
            } else if (columnFormula.indexOf("ROUND(") >= 0) {
                aggType = "max";
            }
            if (columnFormula.indexOf("SUM(") >= 0 && columnFormula.indexOf("COUNT(") >= 0) {
                aggType = "avg";
            } else {
                aggType = "sum";
            }
            if (aggrType.equalsIgnoreCase("none")) {
                aggType = "";
            } else if (!aggrType.equalsIgnoreCase("default")) {
                aggType = aggrType;
            }

            String summarisationList[] = {"SUM", "AVG", "COUNT", "MAX", "MIN", "ROUND"};

            int bussTableId = 0;
            int subFolderTabId = 0;
            String bussTableName = "";
            String displayName = "";
            String tableDispName = "";

            //rule 2 check if measures are from two different fact tables
            String checkDistFactsQry = " SELECT distinct BUSS_TABLE_ID,SUB_FOLDER_TAB_ID FROM PRG_USER_SUB_FOLDER_ELEMENTS  where element_id in(" + dependenteleids + ")";
            ////.println("doubleExistQuery---" + doubleExistQuery);
            PbReturnObject checkDistFactsRO = pbdb.execSelectSQL(checkDistFactsQry);

            //Elements from a Single Fact
            if (!(checkDistFactsRO.getRowCount() > 1)) {
//yes
                String doubleExistQuery1 = " SELECT distinct BUSS_TABLE_ID,SUB_FOLDER_TAB_ID FROM PRG_USER_SUB_FOLDER_ELEMENTS  where element_id in(" + dependenteleids + ") AND BUSS_TABLE_ID!=0";
                PbReturnObject doubleExistQuerypbro1 = pbdb.execSelectSQL(doubleExistQuery1);
                if (doubleExistQuerypbro1.getRowCount() > 0) {
                    String nameQuery = "";
                    String nameQuery1 = "";
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                        //filter with element_id
//                        nameQuery = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                        nameQuery = "SELECT BUSS_TABLE_NAME,BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID,isnull(isnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                        //filter with element_id and user col type is 'calculated' or 'summarized' or 'summarised'
//                        nameQuery1 = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") and user_col_type in('calculated','summarized','summarised') order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                        nameQuery1 = "SELECT BUSS_TABLE_NAME,BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID,isnull(isnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP    FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") and user_col_type in('calculated','summarized','summarised') order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                    } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                        //filter with element_id
//                        nameQuery = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
                        nameQuery = "SELECT BUSS_TABLE_NAME,BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID,ifnull(ifnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
                        //filter with element_id and user col type is 'calculated' or 'summarized' or 'summarised'
//                        nameQuery1 = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") and user_col_type in('calculated','summarized','summarised') order by LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
                        nameQuery1 = "SELECT BUSS_TABLE_NAME,BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID,ifnull(ifnull(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP    FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") and user_col_type in('calculated','summarized','summarised') order by LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
                    } else {
//                        nameQuery = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME),element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by length(nvl(USER_COL_DESC, user_col_name)) desc";
                        nameQuery = "SELECT BUSS_TABLE_NAME,BUSS_COL_NAME,element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID,NVL(NVL(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP    FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by length(nvl(USER_COL_DESC, user_col_name)) desc";
//                        nameQuery1 = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME),element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID    FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") and user_col_type in('calculated','summarized','summarised') order by length(nvl(USER_COL_DESC, user_col_name)) desc";
                        nameQuery1 = "SELECT BUSS_TABLE_NAME,BUSS_COL_NAME,element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name)),BUSS_COL_ID,REF_DIM_TAB_ID,NVL(NVL(TABLE_DISP_NAME,DISP_NAME),BUSS_TABLE_NAME) TABLE_DISP     FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") and user_col_type in('calculated','summarized','summarised') order by length(nvl(USER_COL_DESC, user_col_name)) desc";
                    }

                    PbReturnObject pbro = pbdb.execSelectSQL(nameQuery);
                    PbReturnObject pbro1 = pbdb.execSelectSQL(nameQuery1);
                    String bussNamecolName = "";
                    String onlyColName = "";
                    String formulaold = "";
                    String actual_col_formula = "";
                    int count = 0;
                    int count1 = 0;
                    for (int n = 0; n < pbro.getRowCount(); n++) {
                        //buss_table_name.nvl(user_col_name.buss_col_name)
                        bussNamecolName = pbro.getFieldValueString(n, 0) + "." + pbro.getFieldValueString(n, 1);
                        //  onlyColName = String.valueOf(pbro.getFieldValueInt(n, 2));
                        onlyColName = pbro.getFieldValueString(n, 3);
                        bussNamecolName = bussNamecolName.toUpperCase();
                        onlyColName = onlyColName.toUpperCase();
                        bussColId = pbro.getFieldValueString(n, 9);
                        actual_col_formula = pbro.getFieldValueString(n, 5);
                        displayName = pbro.getFieldValueString(n, 11);
//                        if (actual_col_formula == null||actual_col_formula.equalsIgnoreCase("null")||actual_col_formula=="")  {
                        if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("calculated") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarized") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
//                           nooooooooooooo
//                            colType = "SUMMARIZED";
                            String agg = pbro.getFieldValueString(n, 7);
                            String a1 = pbro.getFieldValueString(n, 7).toUpperCase() + "(" + onlyColName + ")";
                            String a2[] = new String[summarisationList.length];

//                            for (int m = 0; m < summarisationList.length; m++) {
//                                a2[m] = summarisationList[m].toUpperCase() + "(" + onlyColName + ")";
//                            }
//                            if (columnFormula.contains(a1)) {
//                                bussNamecolName = pbro.getFieldValueString(n, 0) + "." + pbro.getFieldValueString(n, 1);
//                            }
//                            else {
//                                    int testcount = 0;
//                                    for (int m = 0; m < a2.length; m++) {
//                                        if (columnFormula.contains(a2[m])) {
//                                            testcount = 1;
//                                        }
//                                    }
//                                    if (testcount == 0) {
                            if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
                                agg = "SUM";
                            }
                            if (agg.equalsIgnoreCase(" ") || agg.equalsIgnoreCase("null") || agg == null) {
                                agg = "";
                            }
                            String a3 = agg + "(" + pbro.getFieldValueString(n, 1) + ")";
//                                        if (bussColId.equals("0") && "".equals(pbro.getFieldValueString(n, 10))) {
//                                            bussNamecolName = "(" + pbro.getFieldValueString(n, 5) + ")";
//                                        }
//                                        else {
//                                            bussNamecolName = agg + "(" + pbro.getFieldValueString(n, 1) + ")";
//                                        }
//                                    }
//                                    else {
//                                        bussNamecolName = pbro.getFieldValueString(n, 1);
//                                    }
//                                }
                            if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("SUMMARIZED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                                columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                            } else if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("CALCULATED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("calculated")) {
                                columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                            } else {
                                columnFormula = columnFormula.replace(onlyColName, a3);
                            }
                            displayFormula = displayFormula.replace(onlyColName, a3);

                            if (!(pbro.getFieldValueString(n, 6).equalsIgnoreCase(""))) {
                                dependenteleids = dependenteleids + "," + pbro.getFieldValueString(n, 6);
                            }
                            count++;
                            //   if(count1>0){
                            //   colType="calculated";
                            //  }
                        } //NUMBER Column
                        else {
                            //yyyyyyyyyyyyyyyyyyy
                            //////// ////.println("in if else ");
                            if (pbro1.getRowCount() == pbro.getRowCount()) {
                                //nnnnnnnnnnnnnnnnn
                                if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("SUMMARIZED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                                    columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                                } else {
                                    columnFormula = columnFormula.replace(onlyColName, bussNamecolName);
                                }
                            } else {
//yyyyyyyyyyyyyyyyyyyyy
                                //aggtype,
                                String agg = pbro.getFieldValueString(n, 7);
                                String a1 = pbro.getFieldValueString(n, 7).toUpperCase() + "(" + onlyColName + ")";
                                String a2[] = new String[summarisationList.length];
//                                String a3 = pbro.getFieldValueString(n, 7).toUpperCase() + "(" + pbro.getFieldValueString(n, 1) + ")";
//                                for (int m = 0; m < summarisationList.length; m++) {
//                                    a2[m] = summarisationList[m].toUpperCase() + "(" + onlyColName + ")";
//                                }
                                if (columnFormula.contains(a1)) {
                                    //.println("==");
                                    bussNamecolName = pbro.getFieldValueString(n, 0) + "." + pbro.getFieldValueString(n, 1);
                                }
//                                else {
//                                    int testcount = 0;
//                                    for (int m = 0; m < a2.length; m++) {
//                                        if (columnFormula.contains(a2[m])) {
//                                            testcount = 1;
//                                        }
//                                    }
//                                    if (testcount == 0) {
//                                        String agg = pbro.getFieldValueString(n, 7);
//                                        if(agg.contains("#")){
//                                            String result[] = agg.split("#");
//                                            agg = result[0];
//                                        }
//                                        if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
//                                            agg = "SUM";
//                                        }
//                                        bussNamecolName = agg + "(" + pbro.getFieldValueString(n, 1) + ")";
//                                    } else {
//                                        bussNamecolName = pbro.getFieldValueString(n, 1);
//                                    }
//
//                                    //.println("====y");
//
//                                }    ////.println("bussNamecolName=="+bussNamecolName);
//                                columnFormula = columnFormula.replace(onlyColName, bussNamecolName);
//                                colType = "SUMMARIZED";
                                if (agg.contains("#")) {
                                    String result[] = agg.split("#");
                                    agg = result[0];
                                }
                                if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
                                    agg = "SUM";
                                }
                                if (agg.contains(" ") || agg.equalsIgnoreCase("null") || agg == null) {
                                    agg = "";
                                }
                                String a3 = agg + "(" + pbro.getFieldValueString(n, 1) + ")";
                                if (formulaType.equalsIgnoreCase("DATEFORMULA")) {
                                    a3 = "(" + bussNamecolName + ")";
                                }
                                if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("SUMMARIZED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                                    columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                                } else if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("CALCULATED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("calculated")) {
                                    columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                                } else {
                                    columnFormula = columnFormula.replace(onlyColName, a3);
                                }
                                displayFormula = displayFormula.replace(onlyColName, a3);
                            }

//                            colType = "SUMMARIZED";
                            //columnFormula = columnFormula.replace(onlyColName, bussNamecolName);
                            // if(count>0){
                            // colType="calculated";
                            // }
                            count1++;
                        }
//                        } else {
//
//                            columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
//
//                        }

                    }

                    bussTableId = checkDistFactsRO.getFieldValueInt(0, 0);
                    subFolderTabId = checkDistFactsRO.getFieldValueInt(0, 1);
                    if (colType.equalsIgnoreCase("summarized")) {
                        bussTableName = "";
                    } else {
                        bussTableName = pbro.getFieldValueString(0, 0);
                    }
                    tableDispName = pbro.getFieldValueString(0, 11);
                } else {
//nnnnnnnnnnnnnnnnnnnnnn
                    //Business Table 0 case
                    String formulaold = "";
                    String nameQuery = "";

                    // columnFormula = tArea;
                    //  String nameQuery = " SELECT t.DISP_NAME,NVL(e.BUSS_COL_NAME,e.user_col_name),e.element_id   FROM PRG_USER_SUB_FOLDER_ELEMENTS e, " +
                    //              " PRG_USER_SUB_FOLDER_TABLES t   WHERE e.element_id in(" + dependenteleids + ") AND t.sub_folder_tab_id = e.sub_folder_tab_id";
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                        nameQuery = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name))   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by  DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                    } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                        nameQuery = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name))   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by  LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
                    } else {
                        nameQuery = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME),element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name))   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by  length(nvl(USER_COL_DESC, user_col_name)) desc";
                    }

                    PbReturnObject pbro = pbdb.execSelectSQL(nameQuery);
                    String bussNamecolName = "";
                    String onlyColName = "";
                    String actual_col_formula = "";
                    for (int n = 0; n < pbro.getRowCount(); n++) {
                        if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarized") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                            colType = "SUMMARIZED";
                        }
                        bussNamecolName = pbro.getFieldValueString(n, 1);
                        //  onlyColName = String.valueOf(pbro.getFieldValueInt(n, 2));
                        onlyColName = String.valueOf(pbro.getFieldValueString(n, 3));
                        bussNamecolName = bussNamecolName.toUpperCase();
                        String a1 = pbro.getFieldValueString(n, 7).toUpperCase() + "(" + onlyColName + ")";
//                        String a3 = pbro.getFieldValueString(n, 7).toUpperCase() + "(" + pbro.getFieldValueString(n, 1) + ")";
                        onlyColName = onlyColName.toUpperCase();
                        actual_col_formula = pbro.getFieldValueString(n, 5);
                        if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("calculated") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarized") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                            String nameQuery2 = "";
                            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                                nameQuery2 = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + pbro.getFieldValueInt(n, 2) + ")";
                            } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                                nameQuery2 = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + pbro.getFieldValueInt(n, 2) + ")";
                            } else {
                                nameQuery2 = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME),element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + pbro.getFieldValueInt(n, 2) + ")";
                            }

                            PbReturnObject pbro2 = pbdb.execSelectSQL(nameQuery2);
                            //////// ////.println("NAMEQUERY2==="+nameQuery2);
                            if (!(pbro2.getFieldValueString(0, 6).equalsIgnoreCase(""))) {
                                dependenteleids = dependenteleids + "," + pbro2.getFieldValueString(0, 6);
                            }
                            //////// ////.println("dependenteleids---"+dependenteleids);

                            bussNamecolName = "(" + String.valueOf(pbro2.getFieldValueString(0, 5)) + ")";
                            //.println("----summarised 2-");
                        }
                        //else{
                        //////// ////.println("----in else--2-");
//                        columnFormula = columnFormula.replace(onlyColName, bussNamecolName);
                        //  }

                        String agg = pbro.getFieldValueString(n, 7);
                        if (agg.contains("#")) {
                            String result[] = agg.split("#");
                            agg = result[0];
                        }
                        if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
                            agg = "SUM";
                        }
                        if (agg.equalsIgnoreCase(" ") || agg.equalsIgnoreCase("null") || agg == null) {
                            agg = "";
                        }
                        String a3 = agg + "(" + pbro.getFieldValueString(n, 1) + ")";

                        if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("SUMMARIZED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                            columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                        } else if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("CALCULATED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("calculated")) {
                            columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                        } else {
                            columnFormula = columnFormula.replace(onlyColName, a3);
                        }
                        displayFormula = displayFormula.replace(onlyColName, a3);
                    }

                }
            } //From multiple Facts
            else {
                //nnnnnnnnnnnnnnnnnn
                String formulaold = "";

                subFolderTabId = checkDistFactsRO.getFieldValueInt(0, 1);
                String doubleExistQuery1 = " SELECT distinct BUSS_TABLE_ID,SUB_FOLDER_TAB_ID FROM PRG_USER_SUB_FOLDER_ELEMENTS  where element_id in(" + dependenteleids + ") AND BUSS_TABLE_ID!=0";
                //////// ////.println("doubleExistQuery-22--" + doubleExistQuery1);
                PbReturnObject doubleExistQuerypbro1 = pbdb.execSelectSQL(doubleExistQuery1);
                if (doubleExistQuerypbro1.getRowCount() == checkDistFactsRO.getRowCount()) {
                    String nameQuery = "";
                    String nameQuery1 = "";
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                        nameQuery = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name))  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                        nameQuery1 = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name))  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") and user_col_type in('calculated','summarized','summarised') order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                    } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                        nameQuery = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name))  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
                        nameQuery1 = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name))  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") and user_col_type in('calculated','summarized','summarised') order by LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
                    } else {
                        nameQuery = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME),element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name))  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by length(nvl(USER_COL_DESC, user_col_name)) desc";
                        nameQuery1 = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME),element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name))  FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") and user_col_type in('calculated','summarized','summarised') order by length(nvl(USER_COL_DESC, user_col_name)) desc";
                    }

                    PbReturnObject pbro = pbdb.execSelectSQL(nameQuery);
                    PbReturnObject pbro1 = pbdb.execSelectSQL(nameQuery1);
                    String bussNamecolName = "";
                    String onlyColName = "";
                    String actual_col_formula = "";
                    for (int n = 0; n < pbro.getRowCount(); n++) {
//                        if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarized") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
//                            colType = "SUMMARIZED";
//                        }
                        bussNamecolName = pbro.getFieldValueString(n, 1);
                        //  onlyColName = String.valueOf(pbro.getFieldValueInt(n, 2));
                        onlyColName = String.valueOf(pbro.getFieldValueString(n, 3));
                        bussNamecolName = bussNamecolName.toUpperCase();
                        onlyColName = onlyColName.toUpperCase();
                        actual_col_formula = pbro.getFieldValueString(n, 5);

                        if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("calculated") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarized") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                            if (!(pbro.getFieldValueString(n, 6).equalsIgnoreCase(""))) {
                                dependenteleids = dependenteleids + "," + pbro.getFieldValueString(n, 6);
                            }

                            String a1 = "SUM(" + onlyColName + ")";
                            String a2[] = new String[summarisationList.length];
                            for (int m = 0; m < summarisationList.length; m++) {
                                a2[m] = summarisationList[m].toUpperCase() + "(" + onlyColName + ")";
                            }
                            if (columnFormula.contains(a1)) {
                                bussNamecolName = pbro.getFieldValueString(n, 1);
                                //}else{
                            } else {

                                int testcount = 0;
                                for (int m = 0; m < a2.length; m++) {
                                    if (columnFormula.contains(a2[m])) {
                                        testcount = 1;
                                    }
                                }
                                if (testcount == 0) {
                                    bussNamecolName = "SUM(" + pbro.getFieldValueString(n, 1) + ")";
                                } else {
                                    bussNamecolName = pbro.getFieldValueString(n, 1);
                                }

                            }
                            String agg = pbro.getFieldValueString(n, 7);

                            if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
                                agg = "SUM";
                            }
                            if (agg.contains(" ") || agg.equalsIgnoreCase("null") || agg == null) {
                                agg = "";
                            }
                            String a3 = agg + "(" + pbro.getFieldValueString(n, 1) + ")";

                            if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("SUMMARIZED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                                columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                            } else if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("CALCULATED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("calculated")) {
                                columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                            } else {
                                columnFormula = columnFormula.replace(onlyColName, a3);
                            }
                            displayFormula = displayFormula.replace(onlyColName, a3);

                        } else {

                            colType = "SUMMARIZED";
                            String a1 = pbro.getFieldValueString(n, 7).toUpperCase() + "(" + onlyColName + ")";
//                            String a3 = pbro.getFieldValueString(n, 7).toUpperCase() + "(" + pbro.getFieldValueString(n, 1) + ")";
                            //   //.println("columnFormula"+columnFormula);
                            //  //.println("a1=="+a1);
                            String a2[] = new String[summarisationList.length];
                            for (int m = 0; m < summarisationList.length; m++) {
                                a2[m] = summarisationList[m].toUpperCase() + "(" + onlyColName + ")";
                            }
//                            if (columnFormula.contains(a1)) {
//                                bussNamecolName = pbro.getFieldValueString(n, 1);
//                            } else {
//
//
//                                int testcount = 0;
//                                for (int m = 0; m < a2.length; m++) {
//                                    if (columnFormula.contains(a2[m])) {
//                                        testcount = 1;
//                                    }
//                                }
//                                if (testcount == 0) {
//                                    String agg = pbro.getFieldValueString(n, 7);
//                                    if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
//                                        agg = "SUM";
//                                    }
//                                    bussNamecolName = agg + "(" + pbro.getFieldValueString(n, 1) + ")";
//                                } else {
//                                    bussNamecolName = pbro.getFieldValueString(n, 1);
//                                }
//
//
//
//                            }
                            String agg = pbro.getFieldValueString(n, 7);
                            if (agg.contains("#")) {
                                String result[] = agg.split("#");
                                agg = result[0];
                            }

                            if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
                                agg = "SUM";
                            }
                            if (agg.equalsIgnoreCase(" ") || agg.equalsIgnoreCase("null") || agg == null) {
                                agg = "";
                            }
                            String a3 = agg + "(" + pbro.getFieldValueString(n, 1) + ")";

//                        columnFormula = columnFormula.replace(onlyColName, bussNamecolName);
                            if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("SUMMARIZED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                                columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                            } else if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("CALCULATED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("calculated")) {
                                columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                            } else {
                                columnFormula = columnFormula.replace(onlyColName, a3);
                            }
                            displayFormula = displayFormula.replace(onlyColName, a3);
                        }
                    }
                } else {

                    //Business Table Id 0 for multi table Facts
                    String nameQuery = "";
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                        nameQuery = "SELECT BUSS_TABLE_NAME,isnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,isnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,DATALENGTH(isnull(USER_COL_DESC, user_col_name))   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by DATALENGTH(isnull(USER_COL_DESC, user_col_name)) desc";
                    }
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                        nameQuery = "SELECT BUSS_TABLE_NAME,ifnull(USER_COL_NAME,BUSS_COL_NAME) BUSS_COL_NAME,element_id,ifnull(USER_COL_DESC, user_col_name) USER_COL_DESC,user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,LENGTH(ifnull(USER_COL_DESC, user_col_name))   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by LENGTH(ifnull(USER_COL_DESC, user_col_name)) desc";
                    } else {
                        nameQuery = "SELECT BUSS_TABLE_NAME,NVL(USER_COL_NAME,BUSS_COL_NAME),element_id,nvl(USER_COL_DESC, user_col_name),user_col_type,ACTUAL_COL_FORMULA,REFFERED_ELEMENTS,AGGREGATION_TYPE,length(nvl(USER_COL_DESC, user_col_name))   FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id IN(" + dependenteleids + ") order by length(nvl(USER_COL_DESC, user_col_name)) desc";
                    }

                    PbReturnObject pbro = pbdb.execSelectSQL(nameQuery);
                    String bussNamecolName = "";
                    String onlyColName = "";
                    String actual_col_formula = "";
                    for (int n = 0; n < pbro.getRowCount(); n++) {
                        if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarized") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                            colType = "SUMMARIZED";
                        }
                        bussNamecolName = pbro.getFieldValueString(n, 1);
                        //  onlyColName = String.valueOf(pbro.getFieldValueInt(n, 2));
                        onlyColName = String.valueOf(pbro.getFieldValueString(n, 3));
                        bussNamecolName = bussNamecolName.toUpperCase();
                        onlyColName = onlyColName.toUpperCase();
                        actual_col_formula = pbro.getFieldValueString(n, 5);
//                        String a3 = pbro.getFieldValueString(n, 7).toUpperCase() + "(" + pbro.getFieldValueString(n, 1) + ")";
//                        if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("calculated") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarized") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
//                            formulaold = "(" + pbro.getFieldValueString(n, 5) + ")";
//                            columnFormula = columnFormula.replace(onlyColName, formulaold);
                        if (!(pbro.getFieldValueString(n, 6).equalsIgnoreCase(""))) {
                            dependenteleids = dependenteleids + "," + pbro.getFieldValueString(n, 6);
                        }
                        //////// ////.println("----in if---");
//                        } else {
//                            String a1 = pbro.getFieldValueString(n, 7).toUpperCase() + "(" + onlyColName + ")";
//                            String a2[] = new String[summarisationList.length];
//                            for (int m = 0; m < summarisationList.length; m++) {
//                                a2[m] = summarisationList[m].toUpperCase() + "(" + onlyColName + ")";
//                            }
//                            if (columnFormula.contains(a1)) {
//                                bussNamecolName = pbro.getFieldValueString(n, 1);
//                            } else {
//
//                                int testcount = 0;
//                                for (int m = 0; m < a2.length; m++) {
//                                    if (columnFormula.contains(a2[m])) {
//                                        testcount = 1;
//                                    }
//                                }
//                                if (testcount == 0) {
//                                    String agg = pbro.getFieldValueString(n, 7);
//                                    if(agg.contains("#")){
//                                       agg = agg.split("#")[0];
//                                    }
//                                    if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
//                                        agg = "SUM";
//                                    }
//                                    bussNamecolName = agg + "(" + pbro.getFieldValueString(n, 1) + ")";
//
//                                } else {
//                                    bussNamecolName = pbro.getFieldValueString(n, 1);
//                                }
//
//                                //.println("====y");
//
//                            }
//                            columnFormula = columnFormula.replace(onlyColName, bussNamecolName);

                        String agg = pbro.getFieldValueString(n, 7);
                        if (agg.contains("#")) {
                            String result[] = agg.split("#");
                            agg = result[0];
                        }
                        if (agg.equalsIgnoreCase("COUNT") || agg.equalsIgnoreCase("COUNTDISTINCT")) {
                            agg = "SUM";
                        }
                        if (agg.contains(" ") || agg.equalsIgnoreCase("null") || agg == null) {
                            agg = "";
                        }
                        String a3 = agg + "(" + pbro.getFieldValueString(n, 1) + ")";
                        if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("SUMMARIZED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("summarised")) {
                            columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                        } else if (pbro.getFieldValueString(n, 4).equalsIgnoreCase("CALCULATED") || pbro.getFieldValueString(n, 4).equalsIgnoreCase("calculated")) {
                            columnFormula = columnFormula.replace(onlyColName, actual_col_formula);
                        } else {
                            columnFormula = columnFormula.replace(onlyColName, a3);
                        }
                        displayFormula = displayFormula.replace(onlyColName, a3);
//                        }
                    }

                }
                bussTableId = checkDistFactsRO.getFieldValueInt(0, 0);
                subFolderTabId = checkDistFactsRO.getFieldValueInt(0, 1);
            }

            //   string folderIdQuery="SELECT  FOLDER_ID, FOLDER_NAME, ELEMENT_ID FROM PRG_USER_ALL_INFO_DETAILS where element_id in("++")";
            String folderId = folderIds.split(",")[0];
            String folderdets = "select distinct GRP_ID, FOLDER_ID, FOLDER_NAME,CONNECTION_ID from PRG_USER_ALL_INFO_DETAILS where FOLDER_ID=" + folderId;
            // String folderdets = "select distinct GRP_ID, FOLDER_ID, FOLDER_NAME,CONNECTION_ID from PRG_USER_ALL_INFO_DETAILS where FOLDER_ID in( select distinct folder_id from prg_user_all_info_details where element_id in ("+dependenteleids+")";
            PbReturnObject pbrofolderdet = pbdb.execSelectSQL(folderdets);
            String folderName = pbrofolderdet.getFieldValueString(0, 2);
            String connectionId = pbrofolderdet.getFieldValueString(0, 3);
            String grpId = String.valueOf(pbrofolderdet.getFieldValueInt(0, 0));
            columnFormula = columnFormula.toUpperCase();

            if (columnFormula.indexOf("SUM(") >= 0 || columnFormula.indexOf("COUNT(*") >= 0 || columnFormula.indexOf("AVG(") >= 0 || columnFormula.indexOf("MIN(") >= 0 || columnFormula.indexOf("MAX(") >= 0 || columnFormula.indexOf("POWER(") >= 0 || columnFormula.indexOf("SQRT(") >= 0 || columnFormula.indexOf("ROUND(") > 0 || columnFormula.indexOf("ABS(") >= 0) {
                colType = "CALCULATED";
            } else {
                // Forced CALCULATED
//                colType = "SUMMARIZED";
                colType = "CALCULATED";
            }

            String existFolderQuery = "SELECT Distinct SUB_FOLDER_ID, SUB_FOLDER_NAME, SUB_FOLDER_TYPE FROM PRG_USER_FOLDER_DETAIL where folder_id =" + folderId + " and SUB_FOLDER_TYPE='Facts'";
            PbReturnObject pbroext = pbdb.execSelectSQL(existFolderQuery);
            int subfolderId = 0;
            String subFolderName = "";
            String subFolderType = "";
            if (fromEdit == false) {
                if (pbroext.getRowCount() > 0) {
                    subfolderId = pbroext.getFieldValueInt(0, 0);
                    subFolderName = pbroext.getFieldValueString(0, 1);
                    subFolderType = pbroext.getFieldValueString(0, 2);
                }
            }

            String finalUserIds[] = dependenteleids.split(",");
            String dependenteleids1 = "";
            for (int j = 0; j < finalUserIds.length - 1; j++) {
                int count = 0;
                for (int j1 = j + 1; j1 < finalUserIds.length; j1++) {
                    //
                    if (finalUserIds[j].equalsIgnoreCase(finalUserIds[j1])) {
                        //////////////////////////////////////////////////////.println("equal");
                        count = 1;
                        break;
                    }
                }
                if (count == 0) {

                    dependenteleids1 += "," + finalUserIds[j];
                }
                if (j == finalUserIds.length - 2) {

                    dependenteleids1 += "," + finalUserIds[j + 1];
                }

            }

            if (!dependenteleids1.equalsIgnoreCase("")) {
                dependenteleids1 = dependenteleids1.substring(1);
                dependenteleids = dependenteleids1;
            }

            columnName = columnName.trim();
            columnName = columnName.replace("#", "_");
            columnName = columnName.replace("&", "_");
            columnName = columnName.replace("!", "_");
            columnName = columnName.replace("@", "_");
            columnName = columnName.replace("(", "_");
            columnName = columnName.replace(")", "_");
            columnName = columnName.replace("[", "_");
            columnName = columnName.replace("]", "_");
            columnName = columnName.replace("{", "_");
            columnName = columnName.replace("}", "_");
            columnName = columnName.replace(" ", "_");
            columnName = columnName.replace("-", "_");
            columnName = columnName.replace("+", "_");
            columnName = columnName.replace("*", "_");
            columnName = columnName.replace("/", "_");

            String columnNamesList[] = new String[4];
            columnNamesList[0] = columnName;
            columnNamesList[1] = "Prior_" + columnName;
            columnNamesList[2] = "Change_" + columnName;
            columnNamesList[3] = "Change%_" + columnName;

            String columnDescList[] = new String[4];
            columnDescList[0] = columnName.replace("_", " ");
            columnDescList[1] = "Prior " + columnName.replace("_", " ");
            columnDescList[2] = "Change " + columnName.replace("_", " ");
            columnDescList[3] = "Change% " + columnName.replace("_", " ");

            String refEleTypes[] = new String[4];
            refEleTypes[0] = "1";
            refEleTypes[1] = "2";
            refEleTypes[2] = "3";
            refEleTypes[3] = "4";

            int ref_element_id = 0;
            int len = 1;
            if (iscalculate.equalsIgnoreCase("Y") || colType.equalsIgnoreCase("summarised") || colType.equalsIgnoreCase("summarized")) {
                len = 4;
            }

            //if formula contains ' it should be replaced with ''
            columnFormula = columnFormula.replace("'", "''").replace("PROGEN_ST_DATE", "@PROGENTIME@@ST_DATE").replace("PROGENT_END_DATE", "@PROGENTIME@@ED_DATE");

            dependenteleid = dependenteleids;
            if (colType.equalsIgnoreCase("calculated")) {
                dependenteleids = "";
//                aggType = "";
                displayFormula = columnFormula;
            }
            if (basicOp.equalsIgnoreCase("CONCAT") || basicOp.equalsIgnoreCase("INTER")) {
                colType = "VARCHAR";
            }

            //adding to subfolder element types
            String ref_elementId = "";
            PbReturnObject pbrofolderelement = null;
            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                String str = "select ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                pbrofolderelement = pbdb.execSelectSQL(str);
                ref_element_id = Integer.parseInt(String.valueOf(pbrofolderelement.getFieldValueInt(0, 0)));
                ref_element_id++;
            }
            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                String str = "select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1";
                pbrofolderelement = pbdb.execSelectSQL(str);
                ref_element_id = Integer.parseInt(String.valueOf(pbrofolderelement.getFieldValueInt(0, 0)));
                ref_element_id++;
            }
            for (int k = 0; k < len; k++) {
                // //////.println("------------------------------------" + k + "-----------------------");
                int last_element_Id = 0;
                String addSubFolderElements = getResourceBundle().getString("addSubFolderElements");

                String elementIdQuery = "";

                if (fromEdit == true) {
                    String updateSubFolderElemnets = getResourceBundle().getString("updateSubFolderElements");

                    Object obj[] = new Object[8];
                    obj[0] = columnName;
                    obj[1] = "E_" + measElementId;
                    obj[2] = columnDescList[k];
                    obj[3] = colType;
//                    obj[4] = aggType;
                    obj[5] = dependenteleids;
                    obj[6] = displayFormula;
                    obj[7] = measElementId;
                    finalQuery = pbdb.buildQuery(updateSubFolderElemnets, obj);
                    list.add(finalQuery);

                } else {
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                        //                     String elementIdQuery = "select PRG_USER_SUB_FLDR_ELEMENTS_SEQ.nextval from dual";

                        Object obj1[] = new Object[14];
                        //                    obj1[0] = elementId;
                        obj1[0] = subfolderId;
                        obj1[1] = bussTableId;
                        obj1[2] = "0";
                        obj1[3] = columnName;
                        obj1[4] = columnNamesList[k];
                        obj1[5] = columnDescList[k];
                        obj1[6] = colType;
                        obj1[7] = subFolderTabId;
                        obj1[8] = ref_element_id;
                        obj1[9] = refEleTypes[k];
                        obj1[10] = aggType;
                        obj1[11] = "Y";
                        obj1[12] = dependenteleids;
                        obj1[13] = displayFormula;
                        finalQuery = pbdb.buildQuery(addSubFolderElements, obj1);

                        String updateQuery1 = "update PRG_USER_SUB_FOLDER_ELEMENTS set USER_COL_NAME='E_'+cast(IDENT_CURRENT('PRG_USER_SUB_FOLDER_ELEMENTS') as varchar(258)) where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                        list.add(finalQuery);
                        list.add(updateQuery1);
                    } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {

                        String queryId = "select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1";
                        pbrofolderelement = pbdb.execSelectSQL(queryId);
                        last_element_Id = pbrofolderelement.getFieldValueInt(0, 0);
                        last_element_Id = last_element_Id + 1 + k;
                        if (k == 0) {
                            ref_element_id = last_element_Id;
                        }
//                        String element_Id = String.valueOf(element_Id1+1);
                        Object obj1[] = new Object[14];
                        //obj1[0] = elementId;
                        obj1[0] = subfolderId;
                        obj1[1] = bussTableId;
                        obj1[2] = "0";
                        obj1[3] = columnName;
                        obj1[4] = columnNamesList[k];
                        obj1[5] = columnDescList[k];
                        obj1[6] = colType;
                        obj1[7] = subFolderTabId;
                        obj1[8] = ref_element_id;
                        //obj1[8] =element_Id1;
                        obj1[9] = refEleTypes[k];
                        obj1[10] = aggType;
                        obj1[11] = "Y";
                        obj1[12] = dependenteleids;
                        obj1[13] = displayFormula;
                        finalQuery = pbdb.buildQuery(addSubFolderElements, obj1);

                        //String updateQuery1 = "update PRG_USER_SUB_FOLDER_ELEMENTS set USER_COL_NAME='E_'+cast(IDENT_CURRENT('PRG_USER_SUB_FOLDER_ELEMENTS') as varchar(258)) where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                        String updateQuery1 = "update PRG_USER_SUB_FOLDER_ELEMENTS set USER_COL_NAME=concat('E_','" + last_element_Id + "') where ELEMENT_ID='" + last_element_Id + "'";
                        list.add(finalQuery);
                        list.add(updateQuery1);
                    } else {
                        elementIdQuery = "select PRG_USER_SUB_FLDR_ELEMENTS_SEQ.nextval from dual";
                        pbrofolderelement = pbdb.execSelectSQL(elementIdQuery);
                        elementId = String.valueOf(pbrofolderelement.getFieldValueInt(0, 0));
                        if (k == 0) {
                            ref_elementId = elementId;
                        }
                        Object obj1[] = new Object[16];
                        obj1[0] = elementId;
                        obj1[1] = subfolderId;
                        obj1[2] = bussTableId;
                        obj1[3] = "0";
                        obj1[4] = columnName;
                        obj1[5] = "E_" + elementId;
                        obj1[6] = columnDescList[k];
                        obj1[7] = colType;
                        obj1[8] = subFolderTabId;
                        obj1[9] = elementId;
                        obj1[10] = refEleTypes[k];
                        obj1[11] = aggType;
                        obj1[12] = "";
                        obj1[13] = "Y";
                        obj1[14] = dependenteleids;
                        obj1[15] = displayFormula;
                        finalQuery = pbdb.buildQuery(addSubFolderElements, obj1);
                        //////.println("finalQuery---" + finalQuery);
                        list.add(finalQuery);

                    }
                }
                if (fromEdit == true) {
                    String updateUserAllInfoDets = getResourceBundle().getString("updateUserAllInfoDetails");

                    Object object[] = new Object[9];
                    object[0] = columnName;
                    object[1] = "E_" + measElementId;
                    object[2] = columnDescList[k];
                    object[3] = colType;
                    object[4] = aggType;
                    object[5] = columnFormula;
                    object[6] = dependenteleids;
                    object[7] = displayFormula;
                    object[8] = measElementId;
                    finalQuery = pbdb.buildQuery(updateUserAllInfoDets, object);
                    list.add(finalQuery);
                } else {
                    //adding to user all Info
                    String addUserAllInfoDets = getResourceBundle().getString("addUserAllInfoDets");
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {

                        Object obj2[] = new Object[33];
                        obj2[0] = grpId;
                        obj2[1] = folderId;
                        obj2[2] = folderName;
                        obj2[3] = subfolderId;
                        obj2[4] = subFolderName;//"Formula";
                        obj2[5] = subFolderType;//"Formula";
                        obj2[6] = subFolderTabId;
                        obj2[7] = "N";
                        obj2[8] = "Y";
                        obj2[9] = "N";
                        obj2[10] = "0";
                        obj2[11] = "0";
                        obj2[12] = "0";
                        obj2[13] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                        obj2[14] = bussTableId;
                        obj2[15] = "0";
                        obj2[16] = columnName;
                        obj2[17] = columnNamesList[k];
                        obj2[18] = columnDescList[k];
                        obj2[19] = colType;
//                        obj2[20] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                        obj2[20] = ref_element_id;
                        obj2[21] = refEleTypes[k];
                        obj2[22] = "0";
                        obj2[23] = bussTableName;
                        obj2[24] = connectionId;
                        obj2[25] = aggType;
                        obj2[26] = columnFormula;
                        obj2[27] = dependenteleids;
                        obj2[28] = displayFormula;
                        obj2[29] = "Y";
                        obj2[30] = displayName;
                        obj2[31] = tableDispName;
                        obj2[32] = tableDispName;
                        finalQuery = pbdb.buildQuery(addUserAllInfoDets, obj2);
                        String finalQuery1 = "update prg_user_all_info_details set USER_COL_NAME='E_'+cast(IDENT_CURRENT('PRG_USER_SUB_FOLDER_ELEMENTS') as varchar(258)) where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                        //.println("finalQuery---" + finalQuery);
                        list.add(finalQuery);
                        list.add(finalQuery1);

                    } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                        //String queryId="select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1";
                        //pbrofolderelement = pbdb.execSelectSQL(queryId);
                        //String element_Id = String.valueOf(pbrofolderelement.getFieldValueInt(0, 0));
//                        int element_Id1 = pbrofolderelement.getFieldValueInt(0, 0);
//                        String element_Id = String.valueOf(element_Id1+1);
                        Object obj2[] = new Object[33];
                        obj2[0] = grpId;
                        obj2[1] = folderId;
                        obj2[2] = folderName;
                        obj2[3] = subfolderId;
                        obj2[4] = subFolderName;//"Formula";
                        obj2[5] = subFolderType;//"Formula";
                        obj2[6] = subFolderTabId;
                        obj2[7] = "N";
                        obj2[8] = "Y";
                        obj2[9] = "N";
                        obj2[10] = "0";
                        obj2[11] = "0";
                        obj2[12] = "0";
                        //obj2[13] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                        obj2[13] = last_element_Id;
                        obj2[14] = bussTableId;
                        obj2[15] = "0";
                        obj2[16] = columnName;
                        obj2[17] = columnNamesList[k];
                        obj2[18] = columnDescList[k];
                        obj2[19] = colType;
//                        obj2[20] = "ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                        obj2[20] = ref_element_id;
                        obj2[21] = refEleTypes[k];
                        obj2[22] = "0";
                        obj2[23] = bussTableName;
                        obj2[24] = connectionId;
                        obj2[25] = aggType;
                        obj2[26] = columnFormula;
                        obj2[27] = dependenteleids;
                        obj2[28] = displayFormula;
                        obj2[29] = "Y";
                        obj2[30] = displayName;
                        obj2[31] = tableDispName;
                        obj2[32] = tableDispName;
                        finalQuery = pbdb.buildQuery(addUserAllInfoDets, obj2);
                        //String finalQuery1 = "update prg_user_all_info_details set USER_COL_NAME='E_'+cast(IDENT_CURRENT('PRG_USER_SUB_FOLDER_ELEMENTS') as varchar(258)) where ELEMENT_ID=ident_current('PRG_USER_SUB_FOLDER_ELEMENTS')";
                        String finalQuery1 = "update prg_user_all_info_details set USER_COL_NAME=concat('E_','" + last_element_Id + "')where ELEMENT_ID='" + last_element_Id + "'";
                        //.println("finalQuery---" + finalQuery);
                        list.add(finalQuery);
                        list.add(finalQuery1);
                    } else {
                        Object obj2[] = new Object[35];
                        obj2[0] = grpId;
                        obj2[1] = folderId;
                        obj2[2] = folderName;
                        obj2[3] = subfolderId;
                        obj2[4] = subFolderName;//"Formula";
                        obj2[5] = subFolderType;//"Formula";
                        obj2[6] = subFolderTabId;
                        obj2[7] = "N";
                        obj2[8] = "Y";
                        obj2[9] = "N";
                        obj2[10] = displayName;
                        obj2[11] = "0";
                        obj2[12] = "0";
                        obj2[13] = "0";
                        obj2[14] = "";
                        obj2[15] = elementId;
                        obj2[16] = bussTableId;
                        obj2[17] = "0";
                        obj2[18] = columnName;
                        obj2[19] = "E_" + elementId;
                        obj2[20] = columnDescList[k];
                        obj2[21] = colType;
                        obj2[22] = ref_elementId;
                        obj2[23] = refEleTypes[k];
                        obj2[24] = "0";
                        obj2[25] = "";
                        obj2[26] = "";
                        obj2[27] = bussTableName;
                        obj2[28] = connectionId;
                        obj2[29] = aggType;
                        obj2[30] = columnFormula;
                        obj2[31] = dependenteleids;
                        obj2[32] = displayFormula;
                        obj2[33] = tableDispName;
                        obj2[34] = tableDispName;
                        finalQuery = pbdb.buildQuery(addUserAllInfoDets, obj2);
                        ////.println("finalQuery---" + finalQuery);
                        list.add(finalQuery);
                    }
                }
            }

            boolean check = pbdb.executeMultiple(list);
            if (check) {
                if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                    String getRefElId = getResourceBundle().getString("getRefElId");
                    PbReturnObject refElIdObject = pbdb.execSelectSQL(getRefElId);
                    ref_elementId = refElIdObject.getFieldValueString(0, 0);
//                    //.println("ref_elementId\t" + ref_elementId);
                }
                if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                    String getRefElId = getResourceBundle().getString("getRefElId");
                    String queryId = "select LAST_INSERT_ID(ELEMENT_ID) from PRG_USER_SUB_FOLDER_ELEMENTS order by 1 desc limit 1";
                    PbReturnObject pbro = pbdb.execSelectSQL(queryId);
                    String lastElementId = String.valueOf(pbro.getFieldValueInt(0, 0));
                    Object obj2[] = new Object[1];
                    obj2[0] = lastElementId;
                    String finalqueryt = pbdb.buildQuery(getRefElId, obj2);
                    PbReturnObject refElIdObject = pbdb.execSelectSQL(finalqueryt);
                    ref_elementId = refElIdObject.getFieldValueString(0, 0);
//                    //.println("ref_elementId\t" + ref_elementId);
                }
            }
//            ArrayList list1 = new ArrayList();
//            PbReturnObject queryPrior =null;
//            PbReturnObject queryPrior1 =null;
//            String query="";
//            String eleId="";
//            String actual_formula="";
//            String prior_reff_elements="";
//            String change_reff_elements="";
//            String reffered_ele="";
//
////            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
//                String updatePrior = "update PRG_USER_ALL_INFO_DETAILS set actual_col_formula = '&', reffered_elements = '&' where ref_element_id=& and ref_element_type =2";
//                String updateChangeChangePer = "update PRG_USER_ALL_INFO_DETAILS set reffered_elements = '&' where ref_element_id=& and ref_element_type in(3,4)";
//                if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
//               query="select A.ELEMENT_ID,A.USER_COL_NAME,A.REFFERED_ELEMENTS,B.REF_ELEMENT_ID,B.prior_ELEMENT_ID,B.prior_USER_COL_NAME,B.prior_REFFERED_ELEMENTS "
//                       + " from (SELECT ELEMENT_ID ELEMENT_ID,USER_COL_NAME USER_COL_NAME,REFFERED_ELEMENTS REFFERED_ELEMENTS,REF_ELEMENT_ID REF_ELEMENT_ID,null  prior_ELEMENT_ID,"
//                       + " null prior_USER_COL_NAME,null prior_REFFERED_ELEMENTS FROM PRG_USER_ALL_INFO_DETAILS WHERE ref_element_id IN("+dependenteleid+") AND ref_element_type  =1) A ,"
//                       + " (SELECT null ELEMENT_ID,null USER_COL_NAME,null REFFERED_ELEMENTS,REF_ELEMENT_ID REF_ELEMENT_ID,element_id prior_ELEMENT_ID,USER_COL_NAME prior_USER_COL_NAME,"
//                       + " REFFERED_ELEMENTS prior_REFFERED_ELEMENTS FROM PRG_USER_ALL_INFO_DETAILS WHERE ref_element_id IN("+dependenteleid+") AND ref_element_type  =2) B "
//                       + " where A.REF_ELEMENT_ID = B.REF_ELEMENT_ID ORDER BY DATALENGTH(isnull(A.USER_COL_NAME, A.user_col_name)) DESC " ;
//                }
//            else if(ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
//               query="select A.ELEMENT_ID,A.USER_COL_NAME,A.REFFERED_ELEMENTS,B.REF_ELEMENT_ID,B.prior_ELEMENT_ID,B.prior_USER_COL_NAME,B.prior_REFFERED_ELEMENTS "
//                       + " from (SELECT ELEMENT_ID ELEMENT_ID,USER_COL_NAME USER_COL_NAME,REFFERED_ELEMENTS REFFERED_ELEMENTS,REF_ELEMENT_ID REF_ELEMENT_ID,null  prior_ELEMENT_ID,"
//                       + " null prior_USER_COL_NAME,null prior_REFFERED_ELEMENTS FROM PRG_USER_ALL_INFO_DETAILS WHERE ref_element_id IN("+dependenteleid+") AND ref_element_type  =1) A ,"
//                       + " (SELECT null ELEMENT_ID,null USER_COL_NAME,null REFFERED_ELEMENTS,REF_ELEMENT_ID REF_ELEMENT_ID,element_id prior_ELEMENT_ID,USER_COL_NAME prior_USER_COL_NAME,"
//                       + " REFFERED_ELEMENTS prior_REFFERED_ELEMENTS FROM PRG_USER_ALL_INFO_DETAILS WHERE ref_element_id IN("+dependenteleid+") AND ref_element_type  =2) B "
//                       + " where A.REF_ELEMENT_ID = B.REF_ELEMENT_ID ORDER BY LENGTH(ifnull(A.USER_COL_NAME, A.user_col_name)) DESC " ;
//                }
//                else {
//                    query="select A.ELEMENT_ID,A.USER_COL_NAME,A.REFFERED_ELEMENTS,B.REF_ELEMENT_ID,B.prior_ELEMENT_ID,B.prior_USER_COL_NAME,B.prior_REFFERED_ELEMENTS "
//                       + " from (SELECT ELEMENT_ID ELEMENT_ID,USER_COL_NAME USER_COL_NAME,REFFERED_ELEMENTS REFFERED_ELEMENTS,REF_ELEMENT_ID REF_ELEMENT_ID,null  prior_ELEMENT_ID,"
//                       + " null prior_USER_COL_NAME,null prior_REFFERED_ELEMENTS FROM PRG_USER_ALL_INFO_DETAILS WHERE ref_element_id IN("+dependenteleid+") AND ref_element_type  =1) A ,"
//                       + " (SELECT null ELEMENT_ID,null USER_COL_NAME,null REFFERED_ELEMENTS,REF_ELEMENT_ID REF_ELEMENT_ID,element_id prior_ELEMENT_ID,USER_COL_NAME prior_USER_COL_NAME,"
//                       + " REFFERED_ELEMENTS prior_REFFERED_ELEMENTS FROM PRG_USER_ALL_INFO_DETAILS WHERE ref_element_id IN("+dependenteleid+") AND ref_element_type  =2) B "
//                       + " where A.REF_ELEMENT_ID = B.REF_ELEMENT_ID ORDER BY length(nvl(A.USER_COL_NAME, A.user_col_name)) DESC " ;
//               }
//               queryPrior = pbdb.execSelectSQL(query);
//                if (queryPrior.getRowCount() > 0) {
//                    query="select element_id,actual_col_formula,reffered_elements from prg_user_all_info_details where ref_element_id="+ref_elementId+" and ref_element_type=2";
//                    queryPrior1 = pbdb.execSelectSQL(query);
//                    eleId = queryPrior1.getFieldValueString(0, 0);
//                    actual_formula=queryPrior1.getFieldValueString(0, 1);
//                    reffered_ele=queryPrior1.getFieldValueString(0, 2);
//                    for(int i=0;i<queryPrior.rowCount;i++){
//                        if(actual_formula.contains(queryPrior.getFieldValueString(i,1))){
//                            actual_formula=actual_formula.replace(queryPrior.getFieldValueString(i,1), queryPrior.getFieldValueString(i,5));
//                        }
////                        if(!queryPrior.getFieldValueString(i,6).contains("")){
////                            prior_reff_elements=prior_reff_elements+","+queryPrior.getFieldValueString(i,4)+","+queryPrior.getFieldValueString(i,6);
////                        }
////                        else {
//                            prior_reff_elements=prior_reff_elements+","+queryPrior.getFieldValueString(i,4);
////                        }
//                    }
//
//                    prior_reff_elements=prior_reff_elements.substring(1);
//                    change_reff_elements=reffered_ele+","+prior_reff_elements;
//                    //update for prior
//                    Object obj3[] = new Object[3];
//                        obj3[0] = actual_formula;
//                        obj3[1] = prior_reff_elements;
//                        obj3[2] = ref_elementId;
//                     finalQuery = pbdb.buildQuery(updatePrior, obj3);
//                     list1.add(finalQuery);
//                    //update for change and change%
//                     Object obj4[] = new Object[2];
//                        obj4[0] = change_reff_elements;
//                        obj4[1] = ref_elementId;
//                     finalQuery = pbdb.buildQuery(updateChangeChangePer, obj4);
//                     list1.add(finalQuery);
//                     boolean check1 = pbdb.executeMultiple(list1);
//                }
//            }

            if (!fromEdit) {
                out.print(ref_elementId);
            } else {
                out.print(measElementId);
            }
        } catch (Exception ex) {
            out.print("");
//            ProgenLog.log(ProgenLog.SEVERE, this, "saveDateFormula", "Exception " + ex.getMessage());
            logger.error("Exception:", ex);
        }
//        ProgenLog.log(ProgenLog.FINE, this, "saveDateFormula", "Exit Method");
        logger.info("Exit Method");
        return null;
    }

    //by gopesh for dimension script
    public ActionForward executeDimensionScript(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, Exception {
        PbDb pbdb = new PbDb();
        String truncatetable = " truncate table PRG_USER_DIM_REL_MST_V ";
        pbdb.execUpdateSQL(truncatetable);
        StringBuffer sqlstr = new StringBuffer("insert into PRG_USER_DIM_REL_MST_V   SELECT M.INFO_FOLDER_ID,  M.INFO_ELEMENT_ID,M.INFO_BUSS_COL_ID,"
                + "M.REL_LEVEL,M.INFO_DIM_ID,M.INFO_DIM_NAME,M.INFO_MEMBER_ID,M.INFO_MEMBER_NAME,D.LEVEL1,D.KEY_ELEMENT_ID,D.KEY_COL_TYPE,"
                + "D.VAL_ELEMENT_ID,D.KEY_BUSS_COL_ID,D.VAL_BUSS_COL_ID,D.KEY_BUSS_COL_NAME,D.VAL_BUSS_COL_NAME,D.KEY_BUSS_TABLE_ID,D.VAL_BUSS_TABLE_ID,"
                + "D.VAL_COL_TYPE,D.KEY_MEMBER_NAME,D.VAL_MEMBER_NAME,D.KEY_SUB_FOLDER_ID,D.VAL_SUB_FOLDER_ID,"
                + "D.KEY_SUB_FOLDER_NAME,D.VAL_SUB_FOLDER_NAME,D.KEY_DISP_NAME,D.KEY_DIM_ID,D.KEY_DIM_NAME,D.VAL_DISP_NAME,D.VAL_DIM_ID,D.KEY_DIM_NAME,"
                + " D.KEY_FOLDER_ID,D.KEY_FOLDER_NAME,D.REL_NAME, D.IS_DEFAULT  FROM PRG_USER_ALL_ADIM_DETAILS M ,PRG_USER_ALL_ADIM_KEY_VAL_ELE D"
                + " WHERE M.INFO_ELEMENT_ID = D.KEY_ELEMENT_ID AND M.INFO_FOLDER_ID    =D.KEY_FOLDER_ID  AND D.Key_DIM_NAME     !='Time';");
        pbdb.execInsert(sqlstr.toString());
        return null;
    }
    //add by sumeet start

    public ActionForward modifyMeasure(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        String reportid = request.getParameter("reportid");
        PbReportViewerBD viewerBd = new PbReportViewerBD();
        String Measure = viewerBd.modifyMeasure(reportid);
//        
        response.getWriter().print(Measure);
        return null;
    }

    public ActionForward saveModifyMeasures(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        String reportId = request.getParameter("reportId");
//      String[] measureId=request.getParameterValues("measureId");
        String[] Symbols = request.getParameterValues("Symbols");

        String[] Alignment = request.getParameterValues("Alignment");
        String[] Font = request.getParameterValues("Font");
        String[] BG = request.getParameterValues("BG");
        String[] Negativevalue = request.getParameterValues("Negativevalue");
        String[] NbrFormat = request.getParameterValues("NbrFormat");
        String[] Round = request.getParameterValues("Round");
        PbReportViewerDAO modifyMeasure = new PbReportViewerDAO();
        modifyMeasure.saveModifyMeasures(reportId, Symbols, Alignment, Font, BG, Negativevalue, NbrFormat, Round);
        return null;
    }
    //add by sumeet end

    public ActionForward getSequnceParams(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        Container container = null;
        HashMap map = null;
        StringBuilder result = new StringBuilder();
        if (session != null) {
            StringBuilder paramName = new StringBuilder();
            StringBuilder paramIds = new StringBuilder();
            paramIds.append(" ParameterIds:[");
            ArrayList<String> reportParamNames = new ArrayList<String>();
            ArrayList<String> reportParamIds = new ArrayList<String>();
            try {
                String reportId = request.getParameter("REPORTID");
                if (session.getAttribute("PROGENTABLES") != null) {
                    map = (HashMap) session.getAttribute("PROGENTABLES");
                    container = (Container) map.get(reportId);

                    reportParamNames = (ArrayList) container.getParametersHashMap().get("ParametersNames");
                    reportParamIds = (ArrayList) container.getParametersHashMap().get("Parameters");
                }
                paramName.append("<ul id='sortable2' class='ui-sortable' unselectable='on' style='-moz-user-select: none;'>");
                paramName.append(new PbReportViewerDAO().deleteViewBys(reportParamIds, reportParamNames, "sequenceDim", request.getContextPath()));
                paramName.append("</ul>");
                paramName.append("<br><center><table><tr><td><input type='button' class='navtitle-hover' value='Done' onclick=\"submitval1('" + request.getContextPath() + "')\"></td></tr></table></center>");

                response.getWriter().print(paramName.toString());
            } catch (Exception e) {
                logger.error("Exception: ", e);
            }

        }
        return null;
    }

    public ActionForward chkforBackupfiles(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, Exception {
        String REPORTID = request.getParameter("REPORTID");

        Container cont = Container.getContainerFromSession(request, REPORTID);
        PbReportCollection collect = cont.getReportCollect();
        collect.setCheckOverWrite(true);
//    boolean test = collect.isCheckOverWrite();
        return null;

    }

    public ActionForward designGraphInDesigner(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        String reportId = request.getParameter("reportId");
        HttpSession session = request.getSession(false);
        HashMap GraphTypesHashMap = null;
        HashMap GraphSizesDtlsHashMap = null;
        String[] graphTypesArray = null;
        String[] grpTypeskeys = new String[0];
        GraphTypesHashMap = (HashMap) session.getAttribute("GraphTypesHashMap");
        GraphSizesDtlsHashMap = (HashMap) session.getAttribute("GraphSizesDtlsHashMap");
        grpTypeskeys = (String[]) GraphTypesHashMap.keySet().toArray(new String[0]);
        graphTypesArray = (String[]) (new TreeSet(GraphTypesHashMap.values())).toArray(new String[0]);
        ProGenChartUtilities utilities = new ProGenChartUtilities();
        int str = utilities.buildGraphTypesForDesigner();
        PrintWriter out = response.getWriter();
        out.print(str);
        return null;
    }

    public ActionForward refreshHomePage(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, Exception {
        PbReportViewerBD reportViewerBD = new PbReportViewerBD();
        HttpSession session = request.getSession(false);
        String hotFilePath = (String) session.getAttribute("reportAdvHtmlFileProps");
        reportViewerBD.homePageRefresh(hotFilePath, null);
        return mapping.findForward("startPage");

    }

    public ActionForward getOperatorFilters(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        String theamcolour = (String) session.getAttribute("theme");//addaed by sruthi
        logger.info("Enter");
        if (session != null) {
            String reportId = request.getParameter("REPORTID");
            String dimId = request.getParameter("dimId");
            Container container = null;
            HashMap map = null;
            String resultHtml = "";
            try {
                if (session.getAttribute("PROGENTABLES") != null) {
                    map = (HashMap) session.getAttribute("PROGENTABLES");
                    container = (Container) map.get(reportId);
                    if (container != null) {
                        PbReportCollection collect = container.getReportCollect();
                        ProgenParam paramGen = new ProgenParam();
                        resultHtml = paramGen.getOperatorFiltersHtml(collect, dimId, reportId, theamcolour);//changed by sruthi
                        response.getWriter().print(resultHtml);
                    }

                }
            } catch (IOException e) {
                logger.error("Exception: ", e);
            }
        }
        return null;
    }

    public ActionForward setOperatorFilters(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session != null) {
            String reportId = request.getParameter("REPORTID");
            String dimId = request.getParameter("dimId");
            String notInStr = request.getParameter("NOTIN");
            String likeStr = request.getParameter("LIKE");
            String globalfilter = request.getParameter("globalfilter");
            String notLikeStr = request.getParameter("NOTLIKE");
            if (globalfilter != null && globalfilter.equalsIgnoreCase("true")) {
                notInStr = request.getParameter("gblNOTIN");
            }
            Container container = null;
            HashMap map = null;
            try {
                if (session.getAttribute("PROGENTABLES") != null) {
                    map = (HashMap) session.getAttribute("PROGENTABLES");
                    container = (Container) map.get(reportId);
                    Gson gson = new Gson();
                    Type tarType = new TypeToken<ArrayList<String>>() {
                    }.getType();
                    if (container != null) {
                        PbReportCollection collect = container.getReportCollect();
                        List<String> notInList = gson.fromJson(notInStr, tarType);
                    if (!likeStr.equalsIgnoreCase("undefined") && !likeStr.equalsIgnoreCase("")) {
                        List<String> likeList = gson.fromJson(likeStr, tarType);
                        collect.operatorFilters.get("LIKE").put(dimId, likeList);
                    }
                     if (!notLikeStr.equalsIgnoreCase("undefined") && !notLikeStr.equalsIgnoreCase("")) {
                        List<String> notLikeList = gson.fromJson(notLikeStr, tarType);
                        collect.operatorFilters.get("NOTLIKE").put(dimId, notLikeList);
                     }

                        collect.operatorFilters.get("NOTIN").put(dimId, notInList);
                        
                   

                    }
                }
            } catch (Exception e) {
                logger.error("Exception: ", e);
            }

        }
        return null;
    }

    public ActionForward getSubtotal(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
        HttpSession session = request.getSession(false);
        Container container = null;
        String reportId = request.getParameter("reportId");
        HashMap map = null;
        map = (HashMap) session.getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);

        String subRegion = container.getGrandTotalSectionDisplay();
//        ArrayList<String> MeasureVals =new ArrayList();// container.getReportMeasureNames();
//        ArrayList measureIdsList = container.getTableDisplayMeasures();
//
//        for(int i=0;i<measureIdsList.size();i++){
//        MeasureVals.add((String.valueOf(container.getsubGtVal((String)measureIdsList.get(i)))));
//        }

//        Gson json=new Gson();
//        String jsonString=json.toJson(subRegion);
        response.getWriter().print(subRegion);
//        out.print(jsonString);
        return null;
    }

    public ActionForward getMultiRetObj(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
        HttpSession session = request.getSession(false);
        Container container = null;
        PbReportViewerBD viewerbd = new PbReportViewerBD();
        String reportId = request.getParameter("reportId");
        String UserId = String.valueOf(session.getAttribute("USERID"));
        HashMap map = null;
        map = (HashMap) session.getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);
        viewerbd.generateMutliPeriodReturnObject(reportId, container, UserId);
        HashMap topbottommap = new HashMap();
        Gson gson = new Gson();
        if (container.isTopBottomTableEnable() && container.getTopBottomTableHashMap() != null && container.getTopBottomTableHashMap().size() > 0) {
            topbottommap.put("TopBottomVal", (String) container.getTopBottomTableHashMap().get("TopBottomVal"));
            topbottommap.put("TopBottomMsr", (String) container.getTopBottomTableHashMap().get("TopBottomMsr"));
        } else {
            topbottommap.put("TopBottomVal", "");
            topbottommap.put("TopBottomMsr", "");
        }
        String gsonString = gson.toJson(topbottommap);
        response.getWriter().print(gsonString);
//        }

        return null;
    }

    public ActionForward modifyMeasureAttr(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        HttpSession session = request.getSession(false);
        Container container = null;
        String reportid = request.getParameter("reportid");
        String chngeattr = request.getParameter("changeattr");
        HashMap map = new HashMap();
        map = (HashMap) session.getAttribute("PROGENTABLES");
        if (map.get(reportid) != null) {
            container = (Container) map.get(reportid);
        }
        PbReportViewerBD viewerBd = new PbReportViewerBD();
        boolean ischngattr = Boolean.parseBoolean(chngeattr);
        String Measure = null;
        if (ischngattr == true) {
            String elmntid = request.getParameter("elementid");
            Measure = viewerBd.modifyMeasureAttrchnge(reportid, elmntid, container);

        } else {
            Measure = viewerBd.modifyMeasureAttr(reportid, container);
//        
        }
        response.getWriter().print(Measure);
        return null;
    }

//start of code by sandeep on 20/12/2014 for row adding of kpidashboard
    public ActionForward rowAddingKpi(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        HashMap map = new HashMap();
        Container container = null;
        HashMap<String, String> rowdetails = new HashMap<String, String>();

        String measureId = request.getParameter("msrname");
        String Ref_element = request.getParameter("Ref_element");
        String position = request.getParameter("position");
        String type = request.getParameter("type");
        String isrowadded = request.getParameter("isrowadded");

        if (session != null && session.getAttribute("PROGENTABLES") != null) {
            map = (HashMap) session.getAttribute("PROGENTABLES");
            String REPORTID = request.getParameter("REPORTID");
            container = (Container) map.get(REPORTID);
            //  container.isNewRowAdded=isrowadded;

            if (position != null && position.equalsIgnoreCase("delete")) {
//             container.rowAddingids(measureId, position);
                rowdetails.put("position", position);
                rowdetails.put("type", type);
                container.rowAddingids(measureId, rowdetails);
            } else {
//            container.rowAddingids(measureId, position);
//            container.rowAddingids(measureId, type);
                rowdetails.put("position", position);
                rowdetails.put("type", type);
                container.rowAddingids(measureId, rowdetails);
//            container.rowaddingmapc.put(measureId, rowdetails);
            }
            container.setaddrowenable(true);
            PbReportViewerBD KPIDashboardBD = new PbReportViewerBD();
            PrintWriter out = response.getWriter();
            StringBuilder result = KPIDashboardBD.DisplayKpiDashBoard(container);
//        out.print(result);
            out.print(result.toString());
        }

        return null;
    }
    //sandeep

    public ActionForward updatenumbrformat(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        String No_Format = request.getParameter("Nfrmt");
        String measureId = request.getParameter("msrname");
        String Ref_element = request.getParameter("Ref_element");
        Container container = null;
        HashMap TableHashMap = null;
        HashMap NFMap = null;
        HttpSession session = request.getSession(false);
        HashMap map = new HashMap();
        if (session != null && session.getAttribute("PROGENTABLES") != null) {
            map = (HashMap) session.getAttribute("PROGENTABLES");
            String REPORTID = request.getParameter("REPORTID");

            container = (Container) map.get(REPORTID);
            TableHashMap = container.getTableHashMap();

            container.setNo_format(measureId, No_Format);
            NFMap = (TableHashMap.get("NFMap") == null) ? new HashMap() : (HashMap) TableHashMap.get("NFMap");
            NFMap.put(measureId, No_Format);
            TableHashMap.put("NFMap", NFMap);
//            HashMap nfmap = (HashMap) container.getTableHashMap().get("NFMap");
//            nfmap.remove(measureId);
//            nfmap.put(measureId, No_Format);
//            container.getTableHashMap().put("NFMap", nfmap);
//            PbDb db = new PbDb();
//            String qry2 = "update PRG_USER_SUB_FOLDER_ELEMENTS set no_format='" + No_Format + "' where REF_ELEMENT_ID='" + Ref_element + "' and REF_ELEMENT_TYPE IN (1 , 2)";
//            db.execUpdateSQL(qry2);
////String qry ="update PRG_USER_SUB_FOLDER_ELEMENTS set no_format='"+No_Format+"' where REF_ELEMENT_ID='"+REPORTID+"' and REF_ELEMENT_TYPE IN (1 , 2)";
//            String qryy1 = "UPDATE PRG_AR_REPORT_TABLE_DETAILS SET  NUMBER_FORMAT='" + No_Format + "' WHERE QRY_COL_ID IN(SELECT QRY_COL_ID FROM PRG_AR_QUERY_DETAIL WHERE ELEMENT_ID IN (SELECT ELEMENT_ID FROM PRG_USER_ALL_INFO_DETAILS WHERE REF_ELEMENT_ID='" + Ref_element + "' AND REF_ELEMENT_TYPE in (1,2)))";
//            db.execUpdateSQL(qryy1);
            HashMap conmap = new HashMap();
            conmap.put(REPORTID, container);
            session.setAttribute("PROGENTABLES", conmap);
        }
        return null;
    }
    //sandeep

    public ActionForward updategttype(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {

        String aggrtype = request.getParameter("Aggregation");
        String Refement = request.getParameter("Refement");
        String measureId = request.getParameter("msrname");
        String isGtReq = request.getParameter("isGtReq");
        Container container = null;
        HttpSession session = request.getSession(false);
        HashMap map = new HashMap();
        HashMap map2 = new HashMap();
        HashMap map3 = new HashMap();
        measureId = measureId.replace("A_", "");
        if (session != null && session.getAttribute("PROGENTABLES") != null) {
            map = (HashMap) session.getAttribute("PROGENTABLES");
            String REPORTID = request.getParameter("REPORTID");
            container = (Container) map.get(REPORTID);
            container.setGrandTotalReqForkpi(Boolean.parseBoolean(request.getParameter("isGtReq")));
            HashMap<String, String> crosstabMeasureId = ((PbReturnObject) container.getRetObj()).crosstabMeasureId;
            PbDb db = new PbDb();
            if (container.isReportCrosstab()) {
                measureId = crosstabMeasureId.get(measureId);
            }
            String qryy1 = "update PRG_USER_ALL_INFO_DETAILS set aggregation_type='" + aggrtype + "' where REF_ELEMENT_ID='" + measureId + "'";
            db.execUpdateSQL(qryy1);
            if (Refement != null && (Refement == null ? "" != null : !Refement.equals(""))) {
                String qry2 = "update prg_ar_query_detail set  AGGREGATION_TYPE='" + aggrtype + "' where ELEMENT_ID in (select element_id from PRG_USER_ALL_INFO_DETAILS where ref_element_id = '" + Refement + "' ) and report_id='" + REPORTID + "'";
                db.execUpdateSQL(qry2);
            }
//String qry ="update PRG_USER_SUB_FOLDER_ELEMENTS set no_format='"+No_Format+"' where REF_ELEMENT_ID='"+REPORTID+"' and REF_ELEMENT_TYPE IN (1 , 2)";
            map3.put("aggregation", aggrtype);
            map2.put(measureId, map3);
            container.setmodifymeasureAttrChnge(map2);
            HashMap conmap = new HashMap();
            conmap.put(REPORTID, container);
            session.setAttribute("PROGENTABLES", conmap);
        }
        return null;
    }

    public ActionForward editDbTableProperties(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {

        Container container = null;
        HttpSession session = request.getSession(false);
        HashMap map = new HashMap();

        if (session != null && session.getAttribute("PROGENTABLES") != null) {
            map = (HashMap) session.getAttribute("PROGENTABLES");
            String REPORTID = request.getParameter("REPORTID");
            container = (Container) map.get(REPORTID);

            container.setGrandTotalReqForkpi(Boolean.parseBoolean(request.getParameter("isGtReq")));
            container.setNetTotalReqForkpi(Boolean.parseBoolean(request.getParameter("isStReq")));

        }
        return null;
    }

    public ActionForward saveModifyMeasuresAttr(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        String reportId = request.getParameter("reportId");
        String measureId = request.getParameter("msrname");
//     String measurename=request.getParameter("msrname");
        String Rename = request.getParameter("rename");
        String datatype = request.getParameter("Dtype");
        String No_Format = request.getParameter("Nfrmt");
        String Aggregation = request.getParameter("Aggr");
        String Round = request.getParameter("Round");
        if (Round != null && !Round.equalsIgnoreCase("null") && Round.equalsIgnoreCase("")) {
            Round = "0";
        }
        String preffix = request.getParameter("preffix");
        String suffix = request.getParameter("suffix");
        String Msrtype = request.getParameter("msrtyp");
        String changeolderrep = request.getParameter("oldrep");
        String dateFormat = request.getParameter("dateFrmt");
        if (changeolderrep == null) {
            changeolderrep = "N";
        }
        HttpSession session = request.getSession(false);
        Container container = null;
        HashMap map = new HashMap();
        map = (HashMap) session.getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);
//       String changeolderrep=request.getParameter("olderreports");
        PbReportViewerBD repViewerBD = new PbReportViewerBD();
        repViewerBD.updateTableMeasureName(container, "A_" + measureId, Rename);
        HashMap nfmap = (HashMap) container.getTableHashMap().get("NFMap");
        nfmap.remove("A_" + measureId);
        nfmap.put("A_" + measureId, No_Format);
        container.getTableHashMap().put("NFMap", nfmap);
        container.symbol.remove("A_" + measureId);
        container.symbol.put("A_" + measureId, preffix);

        if (Round != null && !Round.equalsIgnoreCase("")) {
            container.measRoundingPrecisions.remove("A_" + measureId);
            container.measRoundingPrecisions.put("A_" + measureId, Integer.parseInt(Round));
        }

        container.getReportCollect().measureTypes.remove("A_" + measureId);
        container.getReportCollect().measureTypes.put("A_" + measureId, Msrtype);

        if (dateFormat != null && !dateFormat.equalsIgnoreCase("")) {
            container.setDateFormatt("A_" + measureId, dateFormat);
        }

        //repViewerBD.saveTableRegion(container, Integer.parseInt(reportId));
        PbReportViewerDAO modifyMeasure = new PbReportViewerDAO();
        HashMap conmap = modifyMeasure.saveModifyMeasuresAttr(reportId, measureId, Rename, No_Format, Aggregation, Round, preffix, suffix, Msrtype, dateFormat, datatype, changeolderrep, container);
        session.setAttribute("PROGENTABLES", conmap);
        return null;
    }

    public ActionForward lockDataset(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        String elemId = request.getParameter("elementId");
        String reportId = request.getParameter("reportId");
        HttpSession session = request.getSession(false);
        String islockdataset = request.getParameter("islockset");
        Container container = null;
        String lockedQuery = "";
        HashMap map = null;
        map = (HashMap) session.getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);
        ArrayList<String> searchColumns = new ArrayList<String>();
        ArrayList<String> searchCondition = new ArrayList<String>();
        ArrayList<Object> searchValue = new ArrayList<Object>();
        searchColumns = container.getSearchColumns();
        searchCondition = container.getSearchConditions();
        searchValue = container.getSearchValues();
        PbReportCollection collect = container.getReportCollect();
        if (islockdataset != null && islockdataset.equalsIgnoreCase("true")) {
            collect.lockdatasetmap.put(elemId.replace("A_", "").trim(), islockdataset);
            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                int size = collect.getRepQry().indexOf("OT1");
                collect.dependentviewbyIdQry.put(elemId.replace("A_", "").trim(), collect.getRepQry().substring(0, size + 3));
            } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.ORACLE)) {
                lockedQuery = collect.getRepQry();
            } else {
                lockedQuery = collect.getRepQry();
            }

            //applying search filters in locked query
            if (searchColumns != null && !searchColumns.isEmpty()) {
                for (int i = 0; i < searchColumns.size(); i++) {
                    String condtn = searchCondition.get(i);
                    if (condtn.equalsIgnoreCase("GE")) {
                        condtn = ">=";
                    } else if (condtn.equalsIgnoreCase("GT")) {
                        condtn = ">";
                    } else if (condtn.equalsIgnoreCase("EQ")) {
                        condtn = "=";
                    } else if (condtn.equalsIgnoreCase("LT")) {
                        condtn = "<";
                    } else if (condtn.equalsIgnoreCase("LE")) {
                        condtn = "<=";
                    } else if (condtn.equalsIgnoreCase("BT")) {
                        condtn = "between";
                    } else if (condtn.equalsIgnoreCase("Exclude")) {
                        condtn = "!=";
                    }

                    if (i == 0) {
                        if (condtn.equalsIgnoreCase("between")) {
                            String searchvals = searchValue.get(i).toString();
                            String[] searchArr = searchvals.replace("[", " ").replace("]", " ").trim().split(",");
                            lockedQuery = lockedQuery + " WHERE " + searchColumns.get(i) + condtn + searchArr[0] + " and " + searchArr[1];
                        } else {
                            lockedQuery = lockedQuery + " WHERE " + searchColumns.get(i) + condtn + searchValue.get(i);
                        }

                    } else {
                        if (condtn.equalsIgnoreCase("between")) {
                            String searchvals = searchValue.get(i).toString();
                            String[] searchArr = searchvals.replace("[", " ").replace("]", " ").trim().split(",");
                            lockedQuery = lockedQuery + " AND " + searchColumns.get(i) + condtn + searchArr[0] + " and " + searchArr[1];
                        } else {
                            lockedQuery = lockedQuery + " AND " + searchColumns.get(i) + condtn + searchValue.get(i);
                        }

                    }
                }
            }
            collect.dependentviewbyIdQry.put(elemId.replace("A_", "").trim(), lockedQuery);
        }
        return null;
    }
    //added by Nazneeen

    public ActionForward getRoleIds(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        String roleId = request.getParameter("roleId");
        PbReportViewerDAO viewerBd = new PbReportViewerDAO();
        try {
            response.getWriter().print(viewerBd.getRoleIds(roleId));
        } catch (Exception ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward quickRefresh(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws ParseException {
        String reportId = request.getParameter("reportId");
        boolean quickRefreshEnable = Boolean.parseBoolean(request.getParameter("refreshEnable"));
        HttpSession session = request.getSession(false);
        Container container = null;
        HashMap map = new HashMap();
        map = (HashMap) session.getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);
        String localPath = (String) session.getAttribute("reportAdvHtmlFileProps");
        container.getReportCollect().setReportAdvHtmlFileProps(localPath);
        PbReportViewerBD viewerBd = new PbReportViewerBD();
        String UserId = String.valueOf(session.getAttribute("USERID"));
        boolean autoRefresh = Boolean.parseBoolean(request.getParameter("refreshId"));
        ReportSchedule schedule = new ReportSchedule();
        if (autoRefresh) {
            String startDate = request.getParameter("startdate");
            String endDate = request.getParameter("enddate");
            String hrs = request.getParameter("hours");
            String mins = request.getParameter("mints");
            String frequency = request.getParameter("refreshFrequency");
            String refreshparticularDay = request.getParameter("refreshparticularDay");
            String refreshmonthParticularDay = request.getParameter("refreshmonthParticularDay");
            String hourlyParticularDay = request.getParameter("hourlyParticularDay");
            String scheduledTime = hrs.concat(":").concat(mins);
            String value = "";
            String valu = "";
            String mont = "";
            String CurrValue = "";
            value = startDate;
            int slashval = value.indexOf("/");
            int slashLast = value.lastIndexOf("/");
            valu = value.substring(0, slashval);
            mont = value.substring(slashval + 1, slashLast + 1);
            CurrValue = mont.concat(valu).concat(value.substring(slashLast));
            startDate = CurrValue;

            value = endDate;
            int slashval1 = value.indexOf("/");
            int slashLast1 = value.lastIndexOf("/");
            valu = value.substring(0, slashval1);
            mont = value.substring(slashval1 + 1, slashLast1 + 1);
            CurrValue = mont.concat(valu).concat(value.substring(slashLast1));
            endDate = CurrValue;
            Date sDate, eDate;
            DateFormat formatter;
            formatter = new SimpleDateFormat("MM/dd/yyyy");
            sDate = formatter.parse(startDate);
            eDate = formatter.parse(endDate);

            schedule.setStartDate(sDate);
            schedule.setEndDate(eDate);
            schedule.setScheduledTime(scheduledTime);
            schedule.setFrequency(frequency);
            if (frequency.equalsIgnoreCase("Weekly")) {
                schedule.setParticularDay(refreshparticularDay);
            } else if (frequency.equalsIgnoreCase("Monthly")) {
                schedule.setParticularDay(refreshmonthParticularDay);
            } else if (frequency.equalsIgnoreCase("Hourly")) {
                schedule.setParticularDay(hourlyParticularDay);
            }
            schedule.setQuickRefreshReport(true);
            schedule.setReportId(Integer.parseInt(reportId));
            schedule.setReportScheduledId(Integer.parseInt(reportId));
            schedule.setUserId(UserId);
            schedule.setReportAdvHtmlFileProps(localPath);
        }

        try {
            viewerBd.insertQuickRefreshOption(reportId, quickRefreshEnable, container, UserId, schedule, autoRefresh);
            if (autoRefresh) {
                SchedulerBD bd = new SchedulerBD();
                bd.scheduleReport(schedule, false);
            }
            response.getWriter().print("true");
        } catch (FileNotFoundException ex) {
            logger.error("Exception:", ex);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        } catch (Exception ex) {
            logger.error("Exception:", ex);
        }

        return null;
    }

    public ActionForward disableQuickRefresh(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws ParseException {
        String reportId = request.getParameter("reportId");
        PbReportViewerDAO dao = new PbReportViewerDAO();
        dao.disableQuickRefreshOption(reportId);
        return null;
    }

    public ActionForward hideMeasuresinTable(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        String reportId = request.getParameter("reportid");
        HttpSession session = request.getSession(false);
        HashMap map = new HashMap();
        Container container = null;
        map = (HashMap) session.getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);
        ArrayList<String> droppableList = new ArrayList<String>();
        ArrayList<String> draggableList = new ArrayList<String>();
        ArrayList<String> droppableListnames = new ArrayList<String>();
        ArrayList<String> draggableListNames = new ArrayList<String>();
        GenerateDragAndDrophtml dragAndDrophtml = null;
//   ArrayList<String> msrIdlist=new ArrayList<String>();
//   msrIdlist=(ArrayList)container.getTableMeasure();
        draggableList = (ArrayList) container.getTableMeasure();
        draggableListNames = (ArrayList) container.getTableMeasureNames();
        droppableList = container.getReportCollect().getHideMeasures();
        if (droppableList != null && droppableList.size() > 0) {
            for (int i = 0; i < droppableList.size(); i++) {
                if (draggableList.contains(droppableList.get(i))) {
                    droppableListnames.add((String) draggableListNames.get(draggableList.indexOf(droppableList.get(i))));
                }
            }
        }
        if (droppableList != null && !droppableList.isEmpty() && droppableList.size() == 1) {
            if (droppableList.get(0).equalsIgnoreCase("")) {
                droppableList = new ArrayList<String>();
            }
        }
        dragAndDrophtml = new GenerateDragAndDrophtml("Select columns from below", "Drag columns to here", droppableList, draggableList, request.getContextPath());
        dragAndDrophtml.setDragableListNames(draggableListNames);
        dragAndDrophtml.setDropedmesNames(droppableListnames);
        String htmlData = dragAndDrophtml.getDragAndDropDiv();
        try {
            response.getWriter().print(htmlData);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }

        return null;
    }

    public ActionForward saveHideTableMeasures(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        HashMap map = new HashMap();
        ArrayList<String> msrlist = new ArrayList<String>();
        Container container = null;
        String reportId = request.getParameter("reportId");
        String hideMsr = request.getParameter("hideMsrs");
        String[] hideMsrArr = hideMsr.split(",");
        map = (HashMap) session.getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);
        msrlist.addAll(Arrays.asList(hideMsrArr));
        container.getReportCollect().setHideMeasures(msrlist);
        return null;
    }
//code added by bhargavi

    public ActionForward oneviewGlobalFilter(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws FileNotFoundException, IOException, ClassNotFoundException {
        String oneviewId = request.getParameter("oneviewId");
        HttpSession session = request.getSession(false);
        HashMap map = new HashMap();
        PbDb pbdb = new PbDb();
        String[] colNames = null;
        ReportTemplateDAO DAO = new ReportTemplateDAO();
        OnceViewContainer onecontainer = null;
        map = (HashMap) session.getAttribute("ONEVIEWDETAILS");
        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
        String oldAdvHtmlFileProps = (String) request.getSession(false).getAttribute("oldAdvHtmlFileProps");
        String advHtmlFileProps = (String) request.getSession(false).getAttribute("advHtmlFileProps");
        ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
        String fileName = reportTemplateDAO.getOneviewFileName(oneviewId);
        File file = null;
        String bizzRoleName = "";
        file = new File(oldAdvHtmlFileProps + "/" + fileName);
        if (file.exists()) {
            FileInputStream fis = new FileInputStream(oldAdvHtmlFileProps + "/" + fileName);
            ObjectInputStream ois = new ObjectInputStream(fis);
            onecontainer = (OnceViewContainer) ois.readObject();
            ois.close();
        }
        ArrayList<String> droppableList = new ArrayList<String>();
        ArrayList<String> draggableList = new ArrayList<String>();
        ArrayList<String> droppableListnames = new ArrayList<String>();
        ArrayList<String> draggableListNames = new ArrayList<String>();
        GenerateDragAndDrophtml dragAndDrophtml = null;

        String busroleid = "";
        List<OneViewLetDetails> oneviewletDetails = onecontainer.onviewLetdetails;
        for (int i = 0; i < oneviewletDetails.size(); i++) {
            OneViewLetDetails detail = oneviewletDetails.get(i);
            if (detail.getReptype() != null && detail.getReptype().equalsIgnoreCase("repGraph")) {
                busroleid = detail.getRoleId();
            }

        }
        PbReturnObject PbRetObj = null;
        String sql = DAO.getResourceBundle1().getString("getUserDims");
        Object obj[] = new Object[1];
        String finalQuery = null;
        if (busroleid != null && !"".equalsIgnoreCase(busroleid)) {
            obj[0] = busroleid;
        } else {
            obj[0] = "null";
        }
        finalQuery = pbdb.buildQuery(sql, obj);
        try {
            PbRetObj = pbdb.execSelectSQL(finalQuery);
        } catch (Exception ex) {
        }
        colNames = PbRetObj.getColumnNames();
        for (int i = 0; i < PbRetObj.getRowCount(); i++) {
            draggableList.add(PbRetObj.getFieldValueString(i, colNames[0]));
            draggableListNames.add(PbRetObj.getFieldValueString(i, colNames[1]));
        }
        droppableList = onecontainer.getFilterParameters();
        if (droppableList != null && droppableList.size() > 0) {
            for (int i = 0; i < droppableList.size(); i++) {
                if (draggableList.contains(droppableList.get(i))) {
                    droppableListnames.add((String) draggableListNames.get(draggableList.indexOf(droppableList.get(i))));
                }
            }
        }
        if (droppableList != null && !droppableList.isEmpty() && droppableList.size() == 1) {
            if (droppableList.get(0).equalsIgnoreCase("")) {
                droppableList = new ArrayList<String>();
            }
        }
        dragAndDrophtml = new GenerateDragAndDrophtml("Select columns from below", "Drag columns to here", droppableList, draggableList, request.getContextPath());
        dragAndDrophtml.setDragableListNames(draggableListNames);
        dragAndDrophtml.setDropedmesNames(droppableListnames);
//        String htmlData = dragAndDrophtml.getDragAndDropDivForOneview();
//        try {
//            response.getWriter().print(htmlData);
//        } catch (IOException ex) {
//            logger.error("Exception:",ex);
//        }

        return null;
    }
//   public ActionForward saveGlobalFilterOneview(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws FileNotFoundException, IOException, ClassNotFoundException {
//        HttpSession session = request.getSession(false);
//        HashMap map = new HashMap();
//        ArrayList<String> parameterlist = new ArrayList<String>();
//        ArrayList<String> parameterlistNames = new ArrayList<String>();
//        OnceViewContainer onecontainer = null;
//        String oneviewId = request.getParameter("oneviewId");
//        StringBuilder stringbuilder = new StringBuilder();
//
//        map = (HashMap) session.getAttribute("ONEVIEWDETAILS");
//        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
//        String oldAdvHtmlFileProps=(String) request.getSession(false).getAttribute("oldAdvHtmlFileProps");
//            String advHtmlFileProps=(String) request.getSession(false).getAttribute("advHtmlFileProps");
//            ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
//            String fileName = reportTemplateDAO.getOneviewFileName(oneviewId);
//            File file=null;
//            String bizzRoleName="";
//            file = new File(oldAdvHtmlFileProps+"/"+fileName);
//            if(file.exists()){
//            FileInputStream fis = new FileInputStream(oldAdvHtmlFileProps+"/"+fileName);
//            ObjectInputStream ois = new ObjectInputStream(fis);
//            onecontainer = (OnceViewContainer) ois.readObject();
//            ois.close();
//        }
//
//        String filterParamIds = request.getParameter("filterParameterIDS");
//        String filterParamNames = request.getParameter("filterParameterNames");
//        String[] filterParametersArr = filterParamIds.split(",");
//        String[] filterParametersArrNames = filterParamNames.split(",");
//        parameterlist.addAll(Arrays.asList(filterParametersArr));
//        parameterlistNames.addAll(Arrays.asList(filterParametersArrNames));
//        onecontainer.setFilterParameters(parameterlist);
//
//        if (!parameterlist.isEmpty()) {
//            for(int i=0;i<parameterlist.size();i++){
//            stringbuilder.append("<table><tr style=\"width:100px\"><td align=\"left\" style=\"width:15px\">" + parameterlistNames.get(i) + "</td>");
//            stringbuilder.append("<td><select id='dataDisplay' style='font-size:9pt'><option value='' ></option></td></tr>");}
//           // stringbuilder.append("<td></td>")
//        } else {
//            stringbuilder.append("");
//        }
//
//
//        stringbuilder.append("</table>");
//        stringbuilder.append(userId);
//        PrintWriter out = response.getWriter();
//        out.print(stringbuilder);
//        return null;
//    }
//end of code by Bhargavi

    public static void main(String[] a) throws Exception {
        //ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
        //boolean flag = reportTemplateDAO.DeleteReport(Integer.parseInt("2809"));
        String url = "http://localhost/piEE/reportViewer.do?reportBy=viewReport&REPORTID=2822&CBOARP31152=All&CBOARP31150=All&CBOARP31149=All&CBOARP31158=All&CBOARP31163=All&CBOARP31159=All&CBOARP31164=All&CBOVIEW_BY2143=31150&isSnapShot=true&SnapShotId=513";

        //String[] urlSplit=url[]
    }

    public ActionForward checkSchedulerPermission(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws ParseException {
        String scheduleId = request.getParameter("scheduleId");
        String userType = request.getParameter("userType");
        String userId = "";
        HttpSession session = request.getSession(false);
        if (session.getAttribute("USERID") != null) {
            userId = String.valueOf(session.getAttribute("USERID"));
        }
        PbReportViewerDAO dao = new PbReportViewerDAO();
        try {
            response.getWriter().print(dao.checkSchedulerPermission(scheduleId, userType, userId));
        } catch (Exception ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }
    //added by Nazneen to get Dimension Members for Dimension Dependent

    public ActionForward getDimensionMembersForDimDep(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        String measEleId = (String) request.getParameter("measEleId");
        TreeMap map = new TreeMap();
        ReportTemplateDAO dao = new ReportTemplateDAO();
        map = dao.getDimensionMembersForDimDep(measEleId);
        Gson gson = new Gson();
        String gsonString = gson.toJson(map);
        response.getWriter().print(gsonString);
        return null;
    }

    public ActionForward disableTopbottomEnable(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        HttpSession session = request.getSession(false);
        Container container = null;
        String reportId = request.getParameter("reportId");
        boolean topbottomenable = Boolean.parseBoolean((String) request.getParameter("topbottomenable"));
//        String UserId = String.valueOf(session.getAttribute("USERID"));
        HashMap map = null;
        map = (HashMap) session.getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);
        container.setTopBottomTableEnable(topbottomenable);
        return null;
    }

    public ActionForward getViewbysfromReport(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        HttpSession session = request.getSession(false);
        Container container = null;
        PbReportCollection collect = null;
        String reportId = request.getParameter("drillrepId");
        String CntxtPath = request.getParameter("CntxtPath");
        String drillurl = request.getParameter("drillurl");
//       
        String cboviewbyid = request.getParameter("cboviewbyid");
        HashMap vewbyhashmap = new HashMap();
        String currentviewby = "";
        HashMap repParamHashMap = new HashMap();
        String currentviewbyvalues = "";//CBOARP values
        HashMap map = null;
        DashboardTemplateDAO dao = new DashboardTemplateDAO();
        StringBuilder sb = new StringBuilder();
        map = (HashMap) session.getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);
//        if(container!=null)
        HashMap ParametersHashMap = container.getParametersHashMap();
        ArrayList Parameters = (ArrayList) ParametersHashMap.get("Parameters");
        ArrayList ParametersNames = (ArrayList) ParametersHashMap.get("ParametersNames");
        collect = container.getReportCollect();
//        if(collect!=null)
//         repParamHashMap=  collect.reportParameters;

        currentviewby = dao.getCurrentViewbysofRep(reportId);//CBOVIEWBY values
        currentviewbyvalues = dao.getViewbyvaluesorep(reportId);//CBOARP values
        Set elementidSet = repParamHashMap.keySet();
        ArrayList<String> paramnames = collect.paramValueList;

        sb.append("<table  width=\"100%\">");

        for (int i = 0; i < Parameters.size(); i++) {
            String viewby = (String) ParametersNames.get(i);
            String viewbyId = (String) Parameters.get(i);
            sb.append("<tr align=\"left\">");
            String url = "reportViewer.do?reportBy=viewReport&REPORTID=" + reportId + drillurl + "&CBOVIEW_BY" + cboviewbyid + "=" + viewbyId;
            sb.append("<Td width=\"70%\" align=\"left\"><a href=\"javascript:submiturls1('" + java.net.URLEncoder.encode(url) + "')\">");
            sb.append("" + viewby + "");
            sb.append("</a></td>");
            sb.append("</tr>");
            sb.append("<tr>&nbsp;</tr>");

        }

        sb.append("</table>");

        PrintWriter out = response.getWriter();
        out.print(sb);

        //currentviewbyvalues = dao.getViewbyvaluesorep(drillrepId);//CBOARP values
        return null;
    }

    public ActionForward saveHideTableViewbys(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
//     HttpSession session=request.getSession(false);
        ArrayList<String> viewbylist = new ArrayList<String>();
        String reportId = request.getParameter("reportId");
        String hideViewbys = request.getParameter("hideViewbys");
        String[] hideViewbyArr = hideViewbys.split(",");
        viewbylist.addAll(Arrays.asList(hideViewbyArr));
        Container container = Container.getContainerFromSession(request, reportId);
        container.getReportCollect().setHideViewbys(viewbylist);
        return null;
    }

//   public ActionForward importExcelFile(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws  Exception{
//     String reportId = request.getParameter("reportid");
//     ReportTemplateBD templateBd=new ReportTemplateBD();
//     templateBd.generateExcelreturnObject(request,reportId);
//       return null;
//
//   }
    public ActionForward checkforDimensionType(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, Exception {
        String elementId = (String) request.getParameter("elementId");
        elementId = elementId.replace("A_", "");
        PbReportViewerDAO dao = new PbReportViewerDAO();
        int cnt = dao.checkforDimensionType(elementId);
        response.getWriter().print(cnt);
        return null;
    }
    //added by Nazneen for saving Global ParamDetails

    public ActionForward saveGblParamDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String reportTitleSize = request.getParameter("reportTitleSize");
        String reportTitleAlign = request.getParameter("reportTitleAlign");
        String fromDateToDate = request.getParameter("fromDateToDate"); //added by sandeep for oneview date type
        String colorOnGrp = request.getParameter("colorOnGrp");
        String piTheme = request.getParameter("piTheme");
        String isYearCal = request.getParameter("isYearCal");
        String piVersion = request.getParameter("piVersion");
        String reportTab = request.getParameter("reportTab"); //added by krishan
        String defaultPageSize = request.getParameter("defaultPageSize");
        String Filters = request.getParameter("Filters");
        String Comparison = request.getParameter("Comparison");  //added by krishan
        String datashow = request.getParameter("datashow");      //added by krishan
        String layoutVar = request.getParameter("layoutVar");     //added by Prabal Pratap Singh
        String openReportTab = request.getParameter("openReportTab"); //added by Prabal Pratap Singh
        String my_CurrencyAs = request.getParameter("my_CurrencyAs");//added by Prabal Pratap Singh
        String headerFont = request.getParameter("headerFont");
        String headerLength = request.getParameter("headerLength");
        String favReportAsTag = request.getParameter("favReportAsTag");//added by Prabal Pratap Singh
        String recentlyReportsAsTag = request.getParameter("recentlyTag");//added by Prabal Pratap Singh
        String customReportAsTag = request.getParameter("customReportAsTag");//added by Prabal Pratap Singh
        String customTagSequence = request.getParameter("customTagSequence");//added by Prabal Pratap Singh
        String footerOption = request.getParameter("Footeroption");
         String dateheader = request.getParameter("dateheader");
        Map<String, String> currencyAsMap = new Gson().fromJson(my_CurrencyAs, new TypeToken<HashMap<String, String>>() {
        }.getType());
        PbReportViewerDAO dao = new PbReportViewerDAO();
        int result = 1;
        PrintWriter out = response.getWriter();
        HttpSession session = request.getSession(false); //Added by Faiz Ansari
        result = dao.saveGblParamDetails(session, openReportTab, layoutVar, reportTitleSize, reportTitleAlign, colorOnGrp, piTheme, fromDateToDate, isYearCal, piVersion, reportTab, defaultPageSize, Filters, Comparison, datashow, currencyAsMap, headerFont, headerLength, favReportAsTag, recentlyReportsAsTag, customReportAsTag, footerOption, customTagSequence,dateheader);
        if (result == 1) {
            out.println("1");
        } else {
            out.println("2");
        }
        return mapping.findForward(null);
    }
    //ended by Nazneen for saving Global ParamDetails
// code added by Amar

    public ActionForward exportReportsIntoExcelsheets(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {

        String ReportId = "";
        String UserId = "";
        String reportIds = "";
        String sheetNme = "";
        String lineNmr = "";
        String colNmr = "";
        String header = "";
        String gTotal = "";
        String[] reportID = null;
        String[] sheetNumbers = null;
        String[] lineNumbers = null;
        String[] colNumbers = null;
        String[] headerValues = null;
        String[] gtValues = null;
        String fileName = "";
        int formCounter = 0;
        reportIds = request.getParameter("reportIds");
        fileName = request.getParameter("fileName");
        if (!reportIds.equalsIgnoreCase("")) {
            reportID = reportIds.split(",");
        }
        // String opType = request.getParameter("Download").toString();
        for (int k = 1; k < reportID.length; k++) {
            String aa = request.getParameter("chkusers" + k);
            //if("on".equalsIgnoreCase(request.getParameter("chkusers"+k))){
            //  reportIds=reportIds+","+request.getParameter("report"+k);
            sheetNme = sheetNme + "," + request.getParameter(reportID[k] + "_sheetName");
            lineNmr = lineNmr + "," + request.getParameter(reportID[k] + "_lineName");
            colNmr = colNmr + "," + request.getParameter(reportID[k] + "_colName");
            header = header + "," + request.getParameter(reportID[k] + "_headName");
            gTotal = gTotal + "," + request.getParameter(reportID[k] + "_gtName");
            //}
        }
        HttpSession session = request.getSession(false);
        PbReportViewerBD reportViewerBD = new PbReportViewerBD();
        PbReportViewerDAO DAO = new PbReportViewerDAO();
        boolean invalidReportAccess = false;
        if (session != null) {
            try {
                int count = 0;
                int totalValRepCount = 0;
//                    if (!reportIds.equalsIgnoreCase("")) {
//                            reportID=reportIds.split(",");
//                    }
                if (!sheetNme.equalsIgnoreCase("")) {
                    sheetNumbers = sheetNme.split(",");
                }
                if (!lineNmr.equalsIgnoreCase("")) {
                    lineNumbers = lineNmr.split(",");
                }
                if (!colNmr.equalsIgnoreCase("")) {
                    colNumbers = colNmr.split(",");
                }
                if (!header.equalsIgnoreCase("")) {
                    headerValues = header.split(",");
                }
                if (!gTotal.equalsIgnoreCase("")) {
                    gtValues = gTotal.split(",");
                }
                if (session.getAttribute("USERID") != null) {
                    UserId = String.valueOf(session.getAttribute("USERID"));
                    String filePath = (String) session.getAttribute("reportAdvHtmlFileProps") + "/importExcel";
                    filePath = filePath + "/" + fileName;
                    //String fileName = session.getAttribute("fileName").toString();
                    for (int repCounter = 1; repCounter < reportID.length; repCounter++) {
                        invalidReportAccess = DAO.checkUserReportAccess(reportID[repCounter], UserId);
                        if (!invalidReportAccess) {
                            totalValRepCount++;
                        }
                    }
                    for (int i = 1; i < reportID.length; i++) {
                        invalidReportAccess = DAO.checkUserReportAccess(reportID[i], UserId);
                        request.setAttribute("REPORTID", reportID[i]);
                        if (!invalidReportAccess) {
                            PbReportViewerDAO dao = new PbReportViewerDAO();

                            //ArrayList dependentlist= dao.getDependentViewByidsandReps(ReportId);
                            HashMap Viewbyhashmap = new HashMap();
                            session.setAttribute(reportID[i], Viewbyhashmap);
                            request.setAttribute("isDepentReport", false);
                            request.setAttribute("exportReport", true);
                            reportViewerBD.prepareReport(reportID[i], UserId, request, response,false);
                            Container container = Container.getContainerFromSession(request, reportID[i]);
                            ArrayList filterValues = new ArrayList();
                            PbExcelGenerator driver1 = new PbExcelGenerator();//
                            String viewbyvalues = "";
                            String reportName = "";
                            int counter = 0;
                            String[] columns = null;
                            String[] disColumns = null;
                            String[] types = null;
                            ArrayList cols = container.getDisplayColumns();
                            ArrayList disCols = container.getDisplayLabels();
                            ArrayList dTypes = container.getDataTypes();
                            // Added by Amar for hide measures
                            ArrayList<String> hiddenCols = container.getReportCollect().getHideMeasures();
                            for (Object hiddenCol : hiddenCols) {
                                int index = cols.indexOf("A_" + hiddenCol.toString());
                                if (index != -1) {
                                    cols.remove(index);
                                    disCols.remove(index);
                                    dTypes.remove(index);
                                }
                            }
                            // end of code for hide measures

                            if (container.getReportName() != null) {
                                reportName = container.getReportName();
                                reportName = reportName.trim().replace(" ", "_");
                                reportName = reportName.replaceAll("\\s", "");
                            }
                            count++;
                            int fromRow = container.getFromRow();
                            int toRow = container.getRetObj().getViewSequence().size();
                            if (cols.contains("CBX")) {
                                columns = new String[cols.size() - 1];
                                disColumns = new String[cols.size() - 1];
                                types = new String[cols.size() - 1];
                            } else {
                                columns = new String[cols.size()];
                                disColumns = new String[cols.size()];
                                types = new String[cols.size()];
                            }
                            for (int j = 0; j < cols.size(); j++) {
                                if (!"CBX".equals(String.valueOf(cols.get(j)))) {
                                    columns[counter] = String.valueOf(cols.get(j));
                                    disColumns[counter] = String.valueOf(disCols.get(j));
                                    if (dTypes.size() <= j) {
                                        types[counter] = "N";
                                    } else {
                                        types[counter] = String.valueOf(dTypes.get(j));
                                    }
                                    counter++;
                                }
                            }
                            String[] values = new String[container.getReportCollect().paramValueList.size()];
                            if (container.getReportCollect().paramValueList != null) {
                                for (int k = 0; k < container.getReportCollect().paramValueList.size(); k++) {
                                    values = container.getReportCollect().paramValueList.get(k).toString().split(":");
                                    viewbyvalues = values[1];
                                    if (!viewbyvalues.contains("[All]")) {
                                        String value = (String) container.getReportCollect().paramValueList.get(k);
                                        if (!filterValues.contains(value)) {
                                            filterValues.add(value);
                                        }
                                    }
                                }
                            }
                            String paramType = request.getParameter("paramType");
                            //driver1.setColorCodeMap(ColorCodeMap);
                            driver1.setFilterValues(filterValues);
                            driver1.setParamType(paramType);
                            //driver1.setTimeDetailsArray(timeDetailsArray);
                            driver1.setResponse(response);
                            driver1.setTypes(types);
                            driver1.setDisplayColumns(columns);
                            driver1.setDisplayLabels(disColumns);
                            //driver1.setDisplayType(displayType);
                            driver1.setRequest(request);
                            driver1.setFilePaths(container.getImgPaths());
                            driver1.setContainer(container);
                            driver1.setFromRow(fromRow);
                            driver1.setToRow(toRow);
                            //driver1.setLogoPath(this.getServletContext().getRealPath("/").replace("\\.\\", "\\") + "images\\pi_logo.gif");
                            driver1.setRet(container.getRetObj());
                            //driver1.setHeaderTitle(headerTitle);
                            driver1.setColorGroup(container.getColorGroup());
                            driver1.setRepParameter(container.getReportParameter());
                            driver1.setSortColumns(container.getSortColumns());
                            driver1.setSortTypes(container.getSortTypes());
                            driver1.setSortDataTypes(container.getSortDataTypes());
                            driver1.setTotalValidReport(totalValRepCount);
                            driver1.setSheetNumber(Integer.parseInt(sheetNumbers[i]) - 1);
                            driver1.setLineNumber(Integer.parseInt(lineNumbers[i]) - 1);
                            driver1.setColNumber(Integer.parseInt(colNumbers[i]) - 1);
                            driver1.setHeader(headerValues[i]);
                            driver1.setGTotal(gtValues[i]);
                            if (reportName != null && !"".equalsIgnoreCase(reportName)) {
                                reportName = reportName.replaceAll("\\s", "");
                                driver1.setReportName(reportName);
                                // driver1.setFileName(reportName + ".xls");
                                String ext = fileName.substring(fileName.lastIndexOf('.') + 1);//Added by Dinanath for accepting any type of file
                                driver1.setFileName(reportName + "." + ext);
                                //driver1.setFileName(reportName + ".xls");
                                if (ext.equalsIgnoreCase("xls")) {
                                    driver1.createExcelForReportsXLS(count, filePath, fileName);
                                } else if (ext.equalsIgnoreCase("xlsm")) {
                                    driver1.createExcelForReportsXLSM(count, filePath, fileName);
                                } else if (ext.equalsIgnoreCase("xlsx")) {
                                    driver1.createExcelForReportsXLSX(count, filePath, fileName);
                                } else {
                                    logger.info("Wrong file format because File name is : " + fileName);
                                }
                                //driver1.createExcelForReports(count, filePath, fileName);
                            } else {
                                driver1.setReportName("Excel Report");
                                driver1.setFileName("downloadExcel.xls");
                                String ext = fileName.substring(fileName.lastIndexOf('.') + 1);//Added by Dinanath for accepting any type of file
                                //driver1.setFileName(reportName + "." + ext);
                                //driver1.setFileName(reportName + ".xls");
                                if (ext.equalsIgnoreCase("xls")) {
                                    driver1.createExcelForReportsXLS(count, filePath, fileName);
                                } else if (ext.equalsIgnoreCase("xlsm")) {
                                    driver1.createExcelForReportsXLSM(count, filePath, fileName);
                                } else if (ext.equalsIgnoreCase("xlsx")) {
                                    driver1.createExcelForReportsXLSX(count, filePath, fileName);
                                } else {
                                    logger.info("Wrong file format because File name is : " + fileName);
                                }
                                // driver1.createExcelForReports(count, filePath, fileName);
                            }
                        }
                        if (session.getAttribute("exportReport") != null) {
                            session.removeAttribute("exportReport");
                        }
                    }

                }
            } catch (Exception exp) {
                logger.error("Exception: ", exp);
                return mapping.findForward("exceptionPage");
            }
        } else {
            return mapping.findForward("sessionExpired");
        }
        return null;
    }

    public ActionForward exportScheduleReportsInExcels(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {

        HttpSession session = request.getSession();
        //int formCounter = Integer.parseInt(request.getParameter("Counter"));
        // String opType = request.getParameter("Download").toString();
        String reportIds = "";
        String sheetNme = "";
        String lineNmr = "";
        String colNmr = "";
        String header = "";
        String gTotal = "";
        String[] reportID = null;
        String[] lineNumbers = null;
        String[] sheetNumbers = null;
        String[] colNumbers = null;
        String[] headerValues = null;
        String[] gtValues = null;
        String[] finalReportIds = null;
        String[] finalSheetNumbers = null;
        String[] finalLineNumbers = null;
        String[] finalColNumbers = null;
        String[] finalHeaderValues = null;
        String[] finalGTValues = null;
        String fileName = "";
        PbReportViewerDAO DAO = new PbReportViewerDAO();
        boolean invalidReportAccess = false;

        reportIds = request.getParameter("reportIds");
        fileName = request.getParameter("fileName");

        if (!reportIds.equalsIgnoreCase("")) {
            reportID = reportIds.split(",");
        }
        // String opType = request.getParameter("Download").toString();
        for (int k = 1; k < reportID.length; k++) {
            sheetNme = sheetNme + "," + request.getParameter(reportID[k] + "_sheetName");
            lineNmr = lineNmr + "," + request.getParameter(reportID[k] + "_lineName");
            colNmr = colNmr + "," + request.getParameter(reportID[k] + "_colName");
            header = header + "," + request.getParameter(reportID[k] + "_headName");
            gTotal = gTotal + "," + request.getParameter(reportID[k] + "_gtName");
        }
//            for(int k=0;k<formCounter;k++){
//                if("on".equalsIgnoreCase(request.getParameter("chkusers"+k))){
//                    reportIds=reportIds+","+request.getParameter("report"+k);
//                    sheetNme=sheetNme+","+request.getParameter("sheetName"+k);
//                    lineNmr = lineNmr+","+request.getParameter("lineNo"+k);
//
//                }
//        }
        int count = 0;
        int totalValRepCount = 0;
//                    if (!reportIds.equalsIgnoreCase("")) {
//                            reportID=reportIds.split(",");
//                    }
        if (!sheetNme.equalsIgnoreCase("")) {
            sheetNumbers = sheetNme.split(",");
        }
        if (!lineNmr.equalsIgnoreCase("")) {
            lineNumbers = lineNmr.split(",");
        }
        if (!colNmr.equalsIgnoreCase("")) {
            colNumbers = colNmr.split(",");
        }
        if (!header.equalsIgnoreCase("")) {
            headerValues = header.split(",");
        }
        if (!gTotal.equalsIgnoreCase("")) {
            gtValues = gTotal.split(",");
        }
        String UserId = String.valueOf(session.getAttribute("USERID"));
        // String filePath=session.getAttribute("excelpath").toString();
        String filePath = (String) session.getAttribute("reportAdvHtmlFileProps") + "/importExcel/" + fileName;
        filePath = filePath.replace("\\", "/");
        //String fileName = session.getAttribute("fileName").toString();
        int validRepCount = 0;
        for (int repCounter = 1; repCounter < reportID.length; repCounter++) {
            invalidReportAccess = DAO.checkUserReportAccess(reportID[repCounter], UserId);
            if (!invalidReportAccess) {
                totalValRepCount++;
                //finalReportIds[validRepCount]=reportID[repCounter];
                //validRepCount++;
            }
        }
        if (totalValRepCount > 0) {
            finalReportIds = new String[totalValRepCount];
            finalSheetNumbers = new String[totalValRepCount];
            finalLineNumbers = new String[totalValRepCount];
            finalColNumbers = new String[totalValRepCount];
            finalHeaderValues = new String[totalValRepCount];
            finalGTValues = new String[totalValRepCount];
            for (int repCounter = 1; repCounter < reportID.length; repCounter++) {
                invalidReportAccess = DAO.checkUserReportAccess(reportID[repCounter], UserId);
                if (!invalidReportAccess) {
                    finalReportIds[validRepCount] = reportID[repCounter];
                    finalSheetNumbers[validRepCount] = sheetNumbers[repCounter];
                    finalLineNumbers[validRepCount] = lineNumbers[repCounter];
                    finalColNumbers[validRepCount] = colNumbers[repCounter];
                    finalHeaderValues[validRepCount] = headerValues[repCounter];
                    finalGTValues[validRepCount] = gtValues[repCounter];
                    validRepCount++;
                }
            }
        }
        //String reportId=request.getParameter("reportIds");
        String completeurl = request.getParameter("url");
        String schedulerName = request.getParameter("scheduleName");
        String mailIds = request.getParameter("usertextarea");
        String contentType = request.getParameter("fileType");
        String startDate = request.getParameter("startdate");
        String endDate = request.getParameter("enddate");
        String hrs = request.getParameter("hrs");
        String mins = request.getParameter("mins");
        String periodType = request.getParameter("Data");
        String schedulerId = request.getParameter("schedulerId");
        // String frequency="Daily";
        String frequency = request.getParameter("frequency");
        //added by Dinanath for header logo and footer logo as on 19/9/2015
        String headerLogo = request.getParameter("headerLogo");
        String footerLogo = request.getParameter("footerLogo");
        String optionalHeader = request.getParameter("optionalHeader");
        String optionalFooter = request.getParameter("optionalFooter");
        String htmlSignature = request.getParameter("htmlSignature");
        //end of code
        String scheduledTime = hrs.concat(":").concat(mins);
        PbDb pbDB = new PbDb();
        PbReturnObject PbRetObj;
        PbReturnObject PbRetObj1 = null;
        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
        String particularDay = request.getParameter("particularDay");
        String monthParticularDay = request.getParameter("monthParticularDay");
        Date sDate, eDate;
        DateFormat formatter;
        //added by Nazneen
        String sql1 = "select * from PRG_AR_PERSONALIZED_REPORTS where PRG_REPORT_CUST_NAME='" + schedulerName + "'";
        try {
            PbRetObj1 = pbDB.execSelectSQL(sql1);
        } catch (SQLException ex) {
            logger.error("Exception:", ex);
        }
        if (PbRetObj1.rowCount > 0) {

            PrintWriter out = response.getWriter();
            out.println("1");
        } else {
            String value = "";
            String valu = "";
            String mont = "";
            String CurrValue = "";
            String value1 = "";
            String valu1 = "";
            String mont1 = "";
            String CurrValue1 = "";
            value = startDate;
            int slashval = value.indexOf("/");
            int slashLast = value.lastIndexOf("/");
            valu = value.substring(0, slashval);
            mont = value.substring(slashval + 1, slashLast + 1);
            CurrValue = mont.concat(valu).concat(value.substring(slashLast));
            startDate = CurrValue;

            value1 = endDate;
            int slashval1 = value1.indexOf("/");
            int slashLast1 = value1.lastIndexOf("/");
            valu1 = value1.substring(0, slashval1);
            mont1 = value1.substring(slashval1 + 1, slashLast1 + 1);
            CurrValue1 = mont1.concat(valu1).concat(value1.substring(slashLast1));
            endDate = CurrValue1;

            formatter = new SimpleDateFormat("MM/dd/yyyy");
            sDate = formatter.parse(startDate);
            eDate = formatter.parse(endDate);
            if (schedulerId != null) {
                PbReportViewerDAO dao = new PbReportViewerDAO();
                dao.deleteScheduledReport(schedulerId);
            }
            // SnapshotDesigner SSDesigner = new SnapshotDesigner();
            //String sql= "select PRG_REPORT_CUST_NAME from PRG_AR_PERSONALIZED_REPORTS where PRG_REPORT_ID=" + reportId + " and PRG_REPORT_CUST_NAME='" + schedulerName + "'";
            //PbRetObj = pbDB.execSelectSQL(sql);
            // if (!(PbRetObj.getRowCount() > 0 && PbRetObj != null)) {
            int repCounter = 0;
            String[] snapshotUrls = null;
            snapshotUrls = new String[totalValRepCount];
            String snapshotTemp = "";
            for (int repCt = 0; repCt < totalValRepCount; repCt++) {
                repCounter++;
                snapshotTemp = "";
                SnapshotDesigner SSDesigner = new SnapshotDesigner();
                if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                    snapshotTemp = SSDesigner.createCollectDocument(finalReportIds[repCt], completeurl, request, response, "now()", "", userId, schedulerName, "exportScheduler", repCounter, totalValRepCount);
                } else {
                    snapshotTemp = SSDesigner.createCollectDocument(finalReportIds[repCt], completeurl, request, response, "sysdate", "", userId, schedulerName, "exportScheduler", repCounter, totalValRepCount);
                }
                snapshotUrls[repCt] = snapshotTemp;
            }
            //}
            ReportTemplateDAO reportDAO = new ReportTemplateDAO();
            String SchedulerId = reportDAO.getSchedulerID(Integer.parseInt(finalReportIds[0]), schedulerName);
            //String SchedulerId="";
            ReportSchedule schedule = new ReportSchedule();
            //schedule.setReportId(Integer.parseInt(reportId));
            schedule.setReportIds(finalReportIds);
            schedule.setSnashotUrls(snapshotUrls);
            schedule.setSheetNumbers(finalSheetNumbers);
            schedule.setLineNumbers(finalLineNumbers);
            schedule.setColNumbers(finalColNumbers);
            schedule.setHeaderValues(finalHeaderValues);
            schedule.setGTValues(finalGTValues);
            schedule.setSchedulerName(schedulerName);
            schedule.setReportmailIds(mailIds);
            schedule.setContenType(contentType);
            schedule.setScheduledTime(scheduledTime);
            schedule.setReportScheduledId(Integer.parseInt(SchedulerId));
            schedule.setFrequency(frequency);
            schedule.setStartDate(sDate);
            schedule.setEndDate(eDate);
            schedule.setDataSelection(periodType);
            schedule.setIsExportReportSchedule(true);
            schedule.setUploadedFilePath(filePath);
            schedule.setUploadedFileName(fileName);
            //code added by Dinanath for header logo and footer logo as on 19/09/2015
            schedule.setIsHeaderLogoOn(headerLogo);
            schedule.setIsFooterLogoOn(footerLogo);
            schedule.setIsOptionalHeaderTextOn(optionalHeader);
            schedule.setIsOptionalFooterTextOn(optionalFooter);
            schedule.setIsHtmlSignatureOn(htmlSignature);
            //end of code
            schedule.setUserId((request.getSession(false).getAttribute("USERID")).toString());
            if (frequency.equalsIgnoreCase("Weekly")) {
                schedule.setParticularDay(particularDay);
            } else {
                schedule.setParticularDay(monthParticularDay);
            }
            reportDAO.updateSchedulerDetails(SchedulerId, schedule);
            SchedulerBD bd = new SchedulerBD();
            bd.scheduleReport(schedule, false);
        }
        return null;
    }
    // Modified by Dinanath

    public ActionForward updateExportReportScheduleDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws ParseException, IOException {
        HttpSession session = request.getSession(false);
        String reportId = request.getParameter("reportId");
        String isUpdReport = request.getParameter("isUpdReport");
        String[] reportIds;
        String[] sheetNumbers;
        String[] lineNumbers;
        String[] snapUrlList;
        String[] colNumbers;
        String[] headerValues;
        String[] gtValues;
        String repId = request.getParameter("repIds").toString();
        String snapUrls = request.getParameter("snapUrls").toString();
        reportIds = repId.split(",");
        snapUrlList = snapUrls.split(",");
        String folderPath = (String) session.getAttribute("reportAdvHtmlFileProps") + "/collectStore";
        String reportFileName[] = snapUrlList;

        //added by Dinanath
        String userIdd = (request.getSession(false).getAttribute("USERID")).toString();
        String scheduleName = request.getParameter("scheduleName");
        String completeurl = request.getParameter("url");
        int totalValRepCount = reportIds.length;
        String[] finalReportIds = new String[totalValRepCount];
        finalReportIds = reportIds;
        int repCounter = 0;
        String[] snapshotUrls = null;

        snapshotUrls = new String[totalValRepCount];
        String snapshotTemp = "";
        for (int repCt = 0; repCt < totalValRepCount; repCt++) {

            repCounter++;
            snapshotTemp = "";
            SnapshotDesigner SSDesigner = new SnapshotDesigner();
            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                try {
                    snapshotTemp = SSDesigner.createCollectDocument(finalReportIds[repCt], completeurl, request, response, "now()", "", userIdd, scheduleName, "exportScheduler", repCounter, totalValRepCount);
                } catch (Exception ex) {
                    logger.error("Exception: ", ex);
                }
            } else {
                try {
                    snapshotTemp = SSDesigner.createCollectDocument(finalReportIds[repCt], completeurl, request, response, "sysdate", "", userIdd, scheduleName, "exportScheduler", repCounter, totalValRepCount);
                } catch (Exception ex) {
                    logger.error("Exception: ", ex);
                }
            }
            snapshotUrls[repCt] = snapshotTemp;
        }

//         if (snapshotTemp!=null && !snapshotTemp.toString().isEmpty()) {
//                
//                String filePathSnapExists = folderPath + "/" + reportFileName;
//                File tempFile = new File(filePathSnapExists);
//                if (tempFile != null) {
//                    if (tempFile.exists() && tempFile.isFile()) {
//                        tempFile.delete();
//                    }
//                }
//            } else {
//
//            }
        //end of code by Dinanath
        String sheetNum = request.getParameter("sheetNumber");
        String lineNum = request.getParameter("lineNumber");
        String colNum = request.getParameter("colNumber");
        String header = request.getParameter("header");
        String gTotal = request.getParameter("gtNames");
        sheetNumbers = sheetNum.split(",");
        lineNumbers = lineNum.split(",");
        colNumbers = colNum.split(",");
        headerValues = header.split(",");
        gtValues = gTotal.split(",");
        String filePath = request.getParameter("filePath");
        String fileName = request.getParameter("fileName");
//        String completeurl = request.getParameter("url");
        String schedulerName = request.getParameter("scheduleName");
        String mailIds = request.getParameter("usertextarea");
        String contentType = request.getParameter("fileType");
        String startDate = request.getParameter("startdate");
        String endDate = request.getParameter("enddate");
        String hrs = request.getParameter("hrs");
        String mins = request.getParameter("mins");
        String periodType = request.getParameter("Data");
        String schedulerId = request.getParameter("schedulerId");
        // String frequency="Daily";
        String frequency = request.getParameter("frequency");
        String scheduledTime = hrs.concat(":").concat(mins);
        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
        String particularDay = request.getParameter("particularDay");
        String monthParticularDay = request.getParameter("monthParticularDay");
        Date sDate, eDate;
        DateFormat formatter;
        String value = "";
        String valu = "";
        String mont = "";
        String CurrValue = "";
        String value1 = "";
        String valu1 = "";
        String mont1 = "";
        String CurrValue1 = "";
        value = startDate;
        int slashval = value.indexOf("/");
        int slashLast = value.lastIndexOf("/");
        valu = value.substring(0, slashval);
        mont = value.substring(slashval + 1, slashLast + 1);
        CurrValue = mont.concat(valu).concat(value.substring(slashLast));
        startDate = CurrValue;

        value1 = endDate;
        int slashval1 = value1.indexOf("/");
        int slashLast1 = value1.lastIndexOf("/");
        valu1 = value1.substring(0, slashval1);
        mont1 = value1.substring(slashval1 + 1, slashLast1 + 1);
        CurrValue1 = mont1.concat(valu1).concat(value1.substring(slashLast1));
        endDate = CurrValue1;

        formatter = new SimpleDateFormat("MM/dd/yyyy");
        sDate = formatter.parse(startDate);
        eDate = formatter.parse(endDate);
        ReportTemplateDAO reportDAO = new ReportTemplateDAO();
//         String SchedulerId=reportDAO.getSchedulerID(Integer.parseInt(reportId),schedulerName);
        ReportSchedule schedule = new ReportSchedule();
        schedule.setReportId(Integer.parseInt(reportId));
        schedule.setSchedulerName(schedulerName);
        schedule.setReportmailIds(mailIds);
        schedule.setContenType(contentType);
        schedule.setScheduledTime(scheduledTime);
        schedule.setReportScheduledId(Integer.parseInt(schedulerId));
        schedule.setFrequency(frequency);
        schedule.setStartDate(sDate);
        schedule.setEndDate(eDate);
        schedule.setDataSelection(periodType);
        //schedule.setIsReportSchedule();
        schedule.setReportIds(reportIds);
        schedule.setSnashotUrls(snapshotUrls);
        schedule.setSheetNumbers(sheetNumbers);
        schedule.setLineNumbers(lineNumbers);
        schedule.setColNumbers(colNumbers);
        schedule.setHeaderValues(headerValues);
        schedule.setGTValues(gtValues);
        schedule.setIsExportReportSchedule(true);
        schedule.setUploadedFilePath(filePath);
        schedule.setUploadedFileName(fileName);
        //
        schedule.setUserId((request.getSession(false).getAttribute("USERID")).toString());
        if (frequency.equalsIgnoreCase("Weekly")) {
            schedule.setParticularDay(particularDay);
        } else {
            schedule.setParticularDay(monthParticularDay);
        }
        //Added By Ram
        if (isUpdReport.equalsIgnoreCase("true")) {
            reportDAO.updateSchedulerDetails(schedulerId, schedule);
        } else {
            reportDAO.updateDashboardSchedulerDetails(schedulerId, schedule);
        }
        //End of Code
        SchedulerBD bd = new SchedulerBD();
        bd.scheduleReport(schedule, false);
        return null;
    }

    public ActionForward refreshProgentable(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws ParseException, IOException {

        HttpSession session = request.getSession(false);
        HashMap map = new HashMap();
        String path = request.getParameter("path");

        String[] StrList = path.split("&");
        for (int k = 0; k < StrList.length; k++) {
            String Sr = StrList[k];
            if (Sr.contains("REPORTID")) {
                String Repid = Sr.split("=")[1];

                if (session.getAttribute("PROGENTABLES") != null) {
                    map = (HashMap) session.getAttribute("PROGENTABLES");

                    if (map.get(Repid.trim()) != null) {
                        map.remove(Repid);
                        session.setAttribute("PROGENTABLES", map);
                    }
                }

            }
        }

        return null;
    }

    public ActionForward buildKpiDashboard(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws ParseException, IOException, Exception {
        HttpSession session = request.getSession(false);
        Container container = null;
        String reportId = request.getParameter("reportId");
        String UserId = String.valueOf(session.getAttribute("USERID"));
        HashMap map = null;
        map = (HashMap) session.getAttribute("PROGENTABLES");
        container = (Container) map.get(reportId);
        PrintWriter out = response.getWriter();
        StringBuilder KpiDashboardHTML = new StringBuilder();
        PbReportViewerBD KPIDashboardBD = new PbReportViewerBD();
        com.progen.users.UserLayerDAO userdao = new com.progen.users.UserLayerDAO();
        HashMap paramhashmapPA = new HashMap();
        int USERID = Integer.parseInt((String) session.getAttribute("USERID"));
        String userType = userdao.getUserTypeForFeatures(USERID);
        paramhashmapPA = userdao.getFeatureListAnaLyzer(userType, USERID);
        container.setParamSectionDisplay(KPIDashboardBD.getParameterRegionDisplay(container.getReportCollect(), UserId, request.getContextPath(), container.getSelectedParameterIds(), paramhashmapPA, userType, reportId, container));
        KpiDashboardHTML = KPIDashboardBD.DisplayKpiDashBoard(container);
        out.print(KpiDashboardHTML.toString());
        return null;
    }
//    public ActionForward buildTimeDashboard(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws ParseException, IOException, Exception {
//        HttpSession session = request.getSession(false);
//        Container container = null;
//        String reportId = request.getParameter("reportId");
//        String UserId = String.valueOf(session.getAttribute("USERID"));
//        HashMap map = null;
//        map = (HashMap) session.getAttribute("PROGENTABLES");
//        container = (Container) map.get(reportId);
//        PrintWriter out = response.getWriter();
//        StringBuilder KpiDashboardHTML = new StringBuilder();
//        PbReportViewerBD KPIDashboardBD = new PbReportViewerBD();
//        com.progen.users.UserLayerDAO userdao = new com.progen.users.UserLayerDAO();
//        HashMap paramhashmapPA = new HashMap();
//        int USERID = Integer.parseInt((String) session.getAttribute("USERID"));
//        String userType = userdao.getUserTypeForFeatures(USERID);
//        paramhashmapPA = userdao.getFeatureListAnaLyzer(userType, USERID);
//        container.setParamSectionDisplay(KPIDashboardBD.getParameterRegionDisplay(container.getReportCollect(), UserId, request.getContextPath(), container.getSelectedParameterIds(), paramhashmapPA, userType, reportId, container));
//        KpiDashboardHTML = KPIDashboardBD.DisplayKpiDashBoard(container);
//        out.print(KpiDashboardHTML.toString());
//        return null;
//    }

    public ActionForward getCSV(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        HttpSession session = request.getSession(false);
        String reportId = request.getParameter("reportId");
        String userId = request.getParameter("userId");
        Container container = Container.getContainerFromSession(request, reportId);

        int fromrow = container.getFromRow();
        int toRow = container.getRetObj().getViewSequence().size();
        String ctxPath = request.getContextPath();
        PbCSVGenerator CSVGen = new PbCSVGenerator(response, session);
        CSVGen.setFromRow(fromrow);
        CSVGen.setToRow(toRow);
        CSVGen.createCSVObj(container, userId, "CSV");
        return null;
    }
    //started by nazneen for getting blocks based on clicked tag on 4Dec 2014 edited By Prabal

    public ActionForward getDataCall(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        PbDb pbdb = new PbDb();
        String userId = request.getParameter("userId");
//        CacheLayer cacheLayer = CacheLayer.getCacheInstance();// ByPrabal
        PbReturnObject tagObj = null;
        try {
//            if (cacheLayer.getdata("getDataCall" + userId) == null) {
                String tagQuery = "select distinct TAG_ID,TAG_NAME,TAG_DESC,FONT_SIZE,SEQUENCE_ID from PRG_TAG_MASTER  where user_id = " + userId + " order by SEQUENCE_ID";
                tagObj = pbdb.execSelectSQL(tagQuery);
//                cacheLayer.setdata("getDataCall" + userId, tagObj);
//            } else {
//                tagObj = (PbReturnObject) cacheLayer.getdata("getDataCall" + userId);
//            }
        } catch (SQLException e) {
            logger.error("Exception: ", e);
        }
        //PbReturnObject tagObj = pbdb.execSelectSQL(tagQuery);
        ArrayList al = new ArrayList();
        if (tagObj != null && tagObj.rowCount > 0) {
            for (int i = 0; i < tagObj.rowCount; i++) {
// HashMap map = new HashMap();
                HashMap<String, String> map = new HashMap();
                map.put("Id", tagObj.getFieldValueString(i, 0));
                map.put("NetValue", "1");
                map.put("Region", tagObj.getFieldValueString(i, 1));
                map.put("titleValue", tagObj.getFieldValueString(i, 2));
                map.put("fontSize", tagObj.getFieldValueString(i, 3));
                al.add(map);
            }
        }
        Gson gson = new Gson();
        PrintWriter out = response.getWriter();
        out.print(gson.toJson(al));
        return null;
    }

    public ActionForward getTagsBlocks(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        HttpSession session = request.getSession(false);
        String userId = request.getParameter("userId");
        String tagId = request.getParameter("tagId");
        PbReportViewerDAO pbDao = new PbReportViewerDAO();
        try {
            if (tagId.equalsIgnoreCase("0000")) {
                String reportMap = pbDao.getReportMaster();
                response.getWriter().print(reportMap);
            } else {
                String jsonstring = pbDao.getTagsBlocks(userId, tagId, session);
                response.getWriter().print(jsonstring);
            }
        } catch (Exception e) {
        }
        return null;
    }
    //ended by nazneen for getting blocks based on clicked tag on 4Dec 2014
    //gopesh

    public ActionForward saveXtCharts(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        boolean publish = false;
        if (request.getParameter("publish") != null) {
            publish = Boolean.valueOf(request.getParameter("publish").toString());
        }
        PbReportViewerDAO pbdao = new PbReportViewerDAO();
        HttpSession session = request.getSession(false);
        String reportId = request.getParameter("graphsId");
        String reportName = request.getParameter("graphName");
        String userId = request.getParameter("usersId");
        String numOfRecords = request.getParameter("numOfCharts");
        String filePath = "";
        if (session != null) {
            filePath = pbdao.getFilePath(session);
        } else {
            filePath = "/usr/local/cache";
        }
        Container container = Container.getContainerFromSession(request, reportId);

        Type tarType = new TypeToken<Map<String, String>>() {
        }.getType();

        Type tarType1 = new TypeToken<Map<String, DashboardChartData>>() {
        }.getType();
        Gson gson = new Gson();
        String bizzRoleId = container.getReportCollect().reportBizRoles[0];
        String bizzRoleName = container.getReportCollect().getReportBizRoleName(bizzRoleId);
        Map<String, DashboardChartData> chartData = gson.fromJson(request.getParameter("chartData"), tarType1);
        Map<String, String> lines = gson.fromJson(request.getParameter("lines"), tarType);

        FileReadWrite fileReadWrite = new FileReadWrite();
        String data = "";
        String type = "chart";
        String key = request.getParameter("currType");
        ReportManagementDAO reportDao = new ReportManagementDAO();
        XtendReportMeta reportMeta = reportDao.setReportForm(request);
        container.setReportMeta(reportMeta);
        String chartType = reportMeta.getChartType();
        if (session.getAttribute("graphselectdata") != null) {
            reportMeta.setgraphfiltersize(session.getAttribute("graphselectdata").toString());
        }
        reportMeta.setTimedetails(container.getReportCollect().timeDetailsArray);
        if (request.getParameter("type") != null && request.getParameter("type").equalsIgnoreCase("advance")) {
            if (chartType.equalsIgnoreCase("overlay")) {
                data = gson.toJson(container.getOverlayData());
            } else if (chartType.equalsIgnoreCase("tree-map") || chartType.equalsIgnoreCase("CoffeeWheel") || chartType.equalsIgnoreCase("fish-eye") || chartType.equalsIgnoreCase("tree-map-single")) {
                data = gson.toJson(container.getTreeData());
            } else {
                data = gson.toJson(container.getDbrdData());
            }
            type = "visual";
        } else if (request.getParameter("type") != null && request.getParameter("type").equalsIgnoreCase("trend")) {
            data = gson.toJson(container.getDbrdData());
            type = "trend";
        } else {
            data = gson.toJson(container.getDbrdData());
        }
        if (request.getParameter("filtersmapgraph") != null) {

            tarType1 = new TypeToken<Map<String, List<String>>>() {
            }.getType();
            Map<String, List<String>> map = gson.fromJson(request.getParameter("filtersmapgraph"), tarType1);

            //by Ram for Removing default initialize filter
            HashMap defaultFilterMap = container.getInitilizeFilterElement();
            ArrayList<String> viewByElementIds = new ArrayList();
            for (Object keyVal : defaultFilterMap.keySet()) {
                viewByElementIds.add(keyVal.toString());
            }
            ArrayList<String> filterList = new ArrayList<String>();
            String defaultFilterVal = "";
            if (defaultFilterMap != null && !defaultFilterMap.isEmpty()) {
                filterList = (ArrayList<String>) defaultFilterMap.get(viewByElementIds.get(0));
                defaultFilterVal = filterList.get(0).toString();

                //getting orinal map value
                List originalFilterList = map.get(viewByElementIds.get(0));
                if (originalFilterList.contains(defaultFilterVal)) {
                    originalFilterList.remove(defaultFilterVal);
                    map.put(viewByElementIds.get(0), originalFilterList);
                }
            }
            //End Ram code

            List<String> listVal;
            if (map != null && !map.isEmpty()) {
                Set keySet = map.keySet();
                Iterator itr = keySet.iterator();
                String keygbl = "";
                Type targetType = new TypeToken<List<String>>() {
                }.getType();
                PbDb pbdb = new PbDb();
                while (itr.hasNext()) {
                    keygbl = itr.next().toString();
                    listVal = map.get(keygbl);
                    String defaultVal = "";
                    if (!listVal.isEmpty() && !listVal.get(0).equalsIgnoreCase("All")) {
                        List<String> listValr = new ArrayList<String>();
                        defaultVal = gson.toJson(listVal, targetType);
                    } else {
                        listVal.add("ALL");
                        defaultVal = gson.toJson(listVal, targetType);
                    }
//                String gblvalue="";
//                for(int i=0; i<listVal.size();i++){
//                    if(i==0) {
//                        gblvalue=listVal.get(i).toString();
//
//                    }else{
//                        gblvalue+=","+listVal.get(i).toString();
//                    }
//String value=listVal.get(i).toString();
//                }
//
////                gblvalue+="]";
//                listValr.add(gblvalue);

                    if (keygbl != null && !keygbl.equalsIgnoreCase("") && !keygbl.equalsIgnoreCase("TIME")) {
                        String query = "update PRG_AR_REPORT_PARAM_DETAILS set DEFAULT_VALUE='" + defaultVal + "' where ELEMENT_ID=" + keygbl + " and REPORT_ID=" + reportId + " ";
                        pbdb.execUpdateSQL(query);
                    }

                }
            }

        }
        String currentPage = request.getParameter("currentPage");
        pbdao.saveChartProp(reportId, reportName, userId, reportMeta, data, bizzRoleName, type, chartType, key, filePath, publish, session, currentPage);
        return null;
    }
    // Code Added by amar to add intermediate report filters on 5th dec 2014

    public ActionForward setIntermediateFilters(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        HttpSession session = request.getSession(false);
        HashMap<String, List> inMap = (HashMap) session.getAttribute("IN");
        //PrintWriter out = response.getWriter();
        String map = request.getParameter("viewMap").toString();
        String url = "reportViewer.do?reportBy=viewReport&REPORTID=30481&action=open";
        request.setAttribute("url", url);
        Gson gson = new Gson();
        Type tarType = new TypeToken<HashMap<String, ArrayList<String>>>() {
        }.getType();
        HashMap<String, ArrayList<String>> notInList = gson.fromJson(map, tarType);
        Set keySet = notInList.keySet();
        Iterator itr = keySet.iterator();
        String key = "";
        while (itr.hasNext()) {
            key = itr.next().toString();
            inMap.put(key, notInList.get(key));
        }
        session.removeAttribute("IN");
        session.setAttribute("IN", inMap);
        session.setAttribute("intMedFltr", "true");
        //out.print(true);
        return null;
    }
    //added by Nazneen for tagReport

    public ActionForward getSearchReports(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        String userId = String.valueOf(session.getAttribute("USERID"));
        //edited by manik
        String valSearch = request.getParameter("ValSearchh");
        //    
        PbReportViewerDAO dao = new PbReportViewerDAO();
        //edited by manik
        //String  searchReportDetails=dao.getSearchRept(userId);
        String searchReportDetails = dao.getSearchRept(userId, valSearch);
        PrintWriter out = null;
        try {
            response.getWriter().print(searchReportDetails);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }

        return null;
    }

    //sandeep
    public ActionForward getAvailableCharts1(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws FileNotFoundException, IOException, ClassNotFoundException {
        PbReportViewerDAO dao = new PbReportViewerDAO();
        String reportId = request.getParameter("reportId");
        String reportName = request.getParameter("reportName");
        String fromoneview = request.getParameter("fromoneview");
        String busrolename = request.getParameter("busrolename");
        String busroleid = request.getParameter("busroleid");
        String oneviewid = request.getParameter("oneviewid");
        String chartname = request.getParameter("chartname");
        String oneviewName = request.getParameter("oneviewName");
        String chartname1 = request.getParameter("graphName");
        String filterenabe = request.getParameter("filterenable");
        String timeenable = request.getParameter("timeenable");
        String name = request.getParameter("rename");
        String localfilterMap = request.getParameter("localfilterMap");
        boolean oneviewtime = Boolean.parseBoolean(request.getParameter("oneviewtime"));
        String regid = request.getParameter("regid");
        String action = request.getParameter("action");
        String fromviewer = request.getParameter("fromviewer");
        request.setAttribute("fromoneview", fromoneview);
        request.setAttribute("busrolename", busrolename);
        Container container = Container.getContainerFromSession(request, reportId);
        DashboardTemplateBD dashboardTemplateBD = new DashboardTemplateBD();
        OnceViewContainer onecontainer1 = null;
        HttpSession session = request.getSession(false);
        String report = "";
        String filePath = "";
        ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
        if (session != null) {
            filePath = dao.getFilePath(session);
        } else {
            filePath = "/usr/local/cache";
        }
        ArrayList Timedetails = new ArrayList();
        Type tarType1 = new TypeToken<Map<String, String>>() {
        }.getType();
        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
        String oldAdvHtmlFileProps = null;
        String advHtmlFileProps = null;
//            ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
        String fileName = null;
        File file = null;
        String bizzRoleName = "";
        HashMap map = new HashMap();
        HashMap map1 = new HashMap();
        Gson gson = new Gson();
        XtendReportMeta reportMeta = new XtendReportMeta();
        if (action != null && action.equalsIgnoreCase("open") || action.equalsIgnoreCase("Go") || action.equalsIgnoreCase("localfilter") || action.equalsIgnoreCase("customtimeaggre")
                || action.equalsIgnoreCase("enablefilter") || action.equalsIgnoreCase("enabletime") || action.equalsIgnoreCase("disabletime") || action.equalsIgnoreCase("localrefresh") || action.equalsIgnoreCase("disablefilter")
                || action.equalsIgnoreCase("refresh") || action.equalsIgnoreCase("rename") || action.equalsIgnoreCase("save") || (fromviewer != null && fromviewer.equalsIgnoreCase("true"))) {
            if (session.getAttribute("ONEVIEWDETAILS") != null) {
                map = (HashMap) session.getAttribute("ONEVIEWDETAILS");
                if (map != null) {
                    onecontainer1 = (OnceViewContainer) map.get(oneviewid);
                }
            } else {
                oldAdvHtmlFileProps = (String) request.getSession(false).getAttribute("oldAdvHtmlFileProps");
                advHtmlFileProps = (String) request.getSession(false).getAttribute("advHtmlFileProps");
                String isseurity = (String) request.getSession(false).getAttribute("isseurity");

                PbReturnObject securityfilters = null;
                securityfilters = (PbReturnObject) request.getSession(false).getAttribute("securityfilters");
                fileName = reportTemplateDAO.getOneviewFileName(oneviewid);

                PbDb pbdb = new PbDb();
                if (fromviewer != null && fromviewer.equalsIgnoreCase("true") || action != null && (action.equalsIgnoreCase("customtimeaggre") || action.equalsIgnoreCase("Go") || action.equalsIgnoreCase("enabletime") || action.equalsIgnoreCase("disabletime") || action.equalsIgnoreCase("save"))) {
                    String fileName1 = session.getAttribute("tempFileName").toString();
                    file = new File(advHtmlFileProps + "/" + fileName1);
                    if (file.exists()) {

                        FileInputStream fis2 = new FileInputStream(advHtmlFileProps + "/" + fileName1);
                        ObjectInputStream ois2 = new ObjectInputStream(fis2);
                        onecontainer1 = (OnceViewContainer) ois2.readObject();
                        ois2.close();
                    }
                } else {
                    file = new File(oldAdvHtmlFileProps + "/" + fileName);
                    if (file.exists()) {
                        FileInputStream fis = new FileInputStream(oldAdvHtmlFileProps + "/" + fileName);
                        ObjectInputStream ois = new ObjectInputStream(fis);
                        onecontainer1 = (OnceViewContainer) ois.readObject();
                        ois.close();
                    }
                }
            }
        }
        if (action != null && action.equalsIgnoreCase("add") || (fromviewer != null && fromviewer.equalsIgnoreCase("true"))) {

            if (session.getAttribute("ONEVIEWDETAILS") != null) {
                map = (HashMap) session.getAttribute("ONEVIEWDETAILS");
                if (map != null) {
                    onecontainer1 = (OnceViewContainer) map.get(oneviewid);
                }
            } else {
                ArrayList prevRows = new ArrayList();
//            OnceViewContainer onecontainer = null;
                if (fromviewer != null && fromviewer.equalsIgnoreCase("true")) {
                } else {
                    onecontainer1 = new OnceViewContainer();
                }
                //maintaining default time details in designer of oneview written by swati
                ProgenParam paramdate = new ProgenParam();
                String value1 = paramdate.getdateforpage();
                ArrayList alist = new ArrayList();
                alist.add("Day");
                alist.add("PRG_STD");
                alist.add(value1);
                alist.add("Month");
                alist.add("Last Period");
                onecontainer1.timedetails = alist;

            }
            OneViewLetDetails detail = null;
            detail = new OneViewLetDetails();
            detail.setNoOfViewLets(regid);
            detail.setOneviewId(oneviewid);
            detail.setRepId(reportId);
            detail.setRepName(reportName);
            detail.setchartname(chartname);
            detail.setRolename(busrolename);
            detail.setRoleId(busroleid);
            detail.setOneviewReportTimeDetails(true);
            onecontainer1.addDashletDetail(detail);
            onecontainer1.oneviewId = oneviewid;
            onecontainer1.oneviewName = oneviewName;
//                detail.setRoleId(roleId);
            if (fromviewer != null && fromviewer.equalsIgnoreCase("true")) {

                advHtmlFileProps = (String) request.getSession(false).getAttribute("advHtmlFileProps");
//                ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
                fileName = session.getAttribute("tempFileName").toString();
                FileOutputStream fos = new FileOutputStream(advHtmlFileProps + "/" + fileName);
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                oos.writeObject(onecontainer1);
                oos.flush();
                oos.close();
            } else {
                map.put(oneviewid, onecontainer1);
                session.setAttribute("ONEVIEWDETAILS", map);
            }

        }
//              List<OneViewLetDetails> oneviewletDetails = onecontainer1.onviewLetdetails;
        if (action != null && action.equalsIgnoreCase("add")) {

            if (request.getParameter("type") != null && request.getParameter("type").equalsIgnoreCase("advance")) {
                report = dao.getVisuals(reportId, reportName, container, filePath);
            } else {
                report = dao.getReports(reportId, reportName, container, fromoneview, busrolename, filePath, session, request);

            }
            PrintWriter out = null;
            try {
                response.getWriter().print(report);
            } catch (IOException ex) {
                logger.error("Exception: ", ex);
            }
        } else {
            List<OneViewLetDetails> oneviewletDetails = onecontainer1.onviewLetdetails;
            for (int i = 0; i < oneviewletDetails.size(); i++) {
                OneViewLetDetails detail = oneviewletDetails.get(i);
                String regionid = detail.getNoOfViewLets();
                if (regionid != null && regionid.equalsIgnoreCase(regid)) {
                    busrolename = detail.getRolename();
                    if (!detail.isOneviewReportTimeDetails()) {

                        if (action != null && action.equalsIgnoreCase("open")) {
                            report = dao.geroneviewcharts(reportId, reportName, container, detail.getOneviewId(), detail.getNoOfViewLets());
                            Timedetails = (ArrayList) onecontainer1.timedetails;
                            map1 = gson.fromJson(report, tarType1);
                            String meta = (String) map1.get("meta");
                            String data = (String) map1.get("data");
                            map.put("meta", meta);
                            map.put("data", data);
                            map.put("Timedetails", Timedetails);
                            report = gson.toJson(map);
                        } else if (action != null && action.equalsIgnoreCase("save")) {
                            dao.savextchartoneview(request, reportId, detail.getRepName(), container, "true", busrolename, userId, detail);
                            report = dao.geroneviewcharts(reportId, reportName, container, detail.getOneviewId(), detail.getNoOfViewLets());
                            fileName = reportTemplateDAO.getOneviewFileName(oneviewid);
                            // fileName = retObj.getFieldValueString(0, "ONEVIEW_FILE");
                            FileOutputStream fos = new FileOutputStream(oldAdvHtmlFileProps + "/" + fileName);
                            ObjectOutputStream oos = new ObjectOutputStream(fos);
                            oos.writeObject(onecontainer1);
                            oos.flush();
                            oos.close();
                        } else {
                            if (detail.isoneviewcustomtimedetails()) {
                                onecontainer1.timedetails = detail.getCustomTimeDetails();
                                Timedetails = detail.getCustomTimeDetails();
                            } else {
                                ArrayList timedetails = (ArrayList) onecontainer1.timedetails;
                                detail.setCustomTimeDetails(timedetails);
                                Timedetails = (ArrayList) onecontainer1.timedetails;
                            }
//                            request.setAttribute("OneviewTiemDetails",detail.getCustomTimeDetails());
                            String result1 = "";
                            try {
                                result1 = dashboardTemplateBD.getGraphDetailsData(request, response, session, detail, onecontainer1.timedetails, onecontainer1);
                            } catch (Exception ex) {
                                logger.error("Exception: ", ex);
                            }
                            map = (HashMap) session.getAttribute("PROGENTABLES");

                            container = (Container) map.get(reportId);

                            report = dao.getoneview(request, reportId, reportName, container, fromoneview, busrolename, userId, detail);
                        }

                        session.setAttribute("timedetails", Timedetails);
//        oneviewlet.setContainer(container);
                    } else {
//                      if( !detail.isOneviewReportTimeDetails()){
                        if (action != null && action.equalsIgnoreCase("localrefresh")) {
                            reportId = detail.getRepId();
                            reportName = detail.getRepName();
                            chartname = detail.getchartname();
                        }
// if(request.getParameter("type")!=null && request.getParameter("type").equalsIgnoreCase("advance")){
//       report = dao.getVisuals(reportId,reportName,container);
//                   }else{
//                       report = dao.getReports(reportId,reportName,container,fromoneview,busrolename);
                        if (action != null && action.equalsIgnoreCase("refresh") || action.equalsIgnoreCase("save") || action.equalsIgnoreCase("disablefilter") || action.equalsIgnoreCase("enabletime") || action.equalsIgnoreCase("disabletime") || action.equalsIgnoreCase("enablefilter") || (action.equalsIgnoreCase("rename") && name != null)) {

                            busrolename = detail.getRolename();
                            String chartid = detail.getchartname();
                            report = dao.getReports(reportId, reportName, container, fromoneview, busrolename, filePath, session, request);

                            Type localfiltertype = new TypeToken<Map<String, List<String>>>() {
                            }.getType();
                            Map<String, List<String>> localFilterMap = new HashMap<String, List<String>>();
                            map = gson.fromJson(report, tarType1);
                            if (localfilterMap != null) {
                                localFilterMap = gson.fromJson(localfilterMap, localfiltertype);
                            }
                            String meta = (String) map.get("meta");
                            String data = (String) map.get("data");
                            String datafilter = (String) map.get("data");
                            List<String> filtevalues = new ArrayList<String>();
                            Map<String, List<String>> FilterMap = new HashMap<String, List<String>>();
                            FilterMap = onecontainer1.getFilterMap();
                            String reportdata = "true";
                            if (FilterMap != null) {
                                Set keySet = FilterMap.keySet();
                                Iterator itr = keySet.iterator();
                                String key = "";
                                while (itr.hasNext()) {
                                    key = itr.next().toString();
                                    filtevalues = FilterMap.get(key);
                                    if (!filtevalues.isEmpty()) {
                                        reportdata = "false";
                                        break;
                                    }
                                }
                            }
                            if (action != null & action.equalsIgnoreCase("disablefilter") || action.equalsIgnoreCase("disabletime")) {
                                reportdata = "true";
//      detail.setenableFilter("false");
                            } else {
//       detail.setenableFilter("true");
                            }

                            XtendReportMeta reportMeta1 = new XtendReportMeta();
                            Type metaType = new TypeToken<XtendReportMeta>() {
                            }.getType();
                            Map<String, DashboardChartData> chartData1;
                            Map<String, DashboardChartData> chartData;

                            String report1 = dao.geroneviewcharts(reportId, reportName, container, detail.getOneviewId(), detail.getNoOfViewLets());
                            map1 = gson.fromJson(report1, tarType1);
                            String metadata = (String) map1.get("meta");
                            reportMeta = gson.fromJson(metadata, metaType);
                            reportMeta1 = gson.fromJson(meta, metaType);
                            chartData1 = reportMeta.getChartData();

                            chartData = reportMeta1.getChartData();
                            DashboardChartData chartvale = chartData1.get(chartid);
                            DashboardChartData chartvale1 = chartData.get(chartid);
                            chartvale1.setRow(chartvale.getRow());
                            chartvale1.setCol(chartvale.getCol());
                            chartvale1.setSize_x(chartvale.getSize_x());
                            chartvale1.setSize_y(chartvale.getSize_y());
                            if (action != null && action.equalsIgnoreCase("rename") && name != null) {
                                chartvale1.setName(name);
                            } else {
                                chartvale1.setName(chartvale.getName());
                            }
                            List<String> filtevalues1 = new ArrayList<String>();
                            Map<String, List<String>> FilterMap1 = new HashMap<String, List<String>>();
                            FilterMap1 = chartvale.getFilters();

                            if (FilterMap1 != null) {
                                Set keySet = FilterMap1.keySet();
                                Iterator itr = keySet.iterator();
                                String key = "";
                                while (itr.hasNext()) {
                                    key = itr.next().toString();
                                    filtevalues1 = FilterMap1.get(key);
                                    if (!filtevalues1.isEmpty()) {
                                        reportdata = "false";
                                        break;
                                    }
                                }
                            }
                            if (action != null && action.equalsIgnoreCase("save")) {
                                if (localFilterMap != null) {
                                    chartvale1.setFilters(localFilterMap);
                                } else {
                                    chartvale1.setFilters(FilterMap1);
                                }
                            }
                            chartData.put(chartid, chartvale1);
                            reportMeta1.setChartData(chartData);
                            if (action != null && action.equalsIgnoreCase("save")) {
                                if (filterenabe != null && filterenabe.equalsIgnoreCase("disablefilter") || timeenable != null && timeenable.equalsIgnoreCase("disabletime")) {
                                    reportMeta1.setenablefilter(filterenabe);
                                    reportdata = "true";
                                }
                            }
                            meta = gson.toJson(reportMeta1);
                            if (reportdata != null && reportdata.equalsIgnoreCase("false")) {
                                data = (String) map1.get("data");
                            }
                            if (action != null & action.equalsIgnoreCase("disablefilter") || action.equalsIgnoreCase("enablefilter")) {
                                ReportManagementDAO daomg = new ReportManagementDAO();
                                request.setAttribute("filtertype", action);
                                if (action != null & action.equalsIgnoreCase("enablefilter")) {
                                    request.setAttribute("FilterMap", FilterMap);
                                }
                                if (!reportMeta.getTimedetails().isEmpty()) {
                                    for (int i1 = 0; i1 < reportMeta.getTimedetails().size(); i1++) {
                                        Timedetails.add(reportMeta.getTimedetails().get(i1));
                                    }
                                }
                                session.setAttribute("timedetails", Timedetails);
                                try {
                                    data = daomg.getChartsDataDrills(request, filePath);
                                } catch (Exception e) {
                                    logger.error("Exception: ", e);
                                }
                            }

                            if (action != null && action.equalsIgnoreCase("save") || (action.equalsIgnoreCase("rename") && name != null)) {
                                XtendAdapter adapter = new XtendAdapter();
                                if (filterenabe != null && filterenabe.equalsIgnoreCase("disablefilter")) {
//                 data=  (String) map1.get("data");
                                } else if (filterenabe != null && filterenabe.equalsIgnoreCase("localfilter") || filterenabe.equalsIgnoreCase("disablefilter") || filterenabe.equalsIgnoreCase("enablefilter")) {
                                    Map<String, String> dataMapgblsave = new HashMap<String, String>();
                                    if (request.getSession(false).getAttribute("dataMapgblsave") != null) {
                                        dataMapgblsave = (Map<String, String>) request.getSession(false).getAttribute("dataMapgblsave");
//              }
                                        if (dataMapgblsave.get(regid) != null) {
                                            data = dataMapgblsave.get(regid);
                                        }
                                    }
                                }
                                adapter.saveoneviewChartMeta(reportName, reportId, meta, data, oneviewid, regid, "null", "null", chartname);
                                fileName = reportTemplateDAO.getOneviewFileName(oneviewid);
                                // fileName = retObj.getFieldValueString(0, "ONEVIEW_FILE");
                                FileOutputStream fos = new FileOutputStream(oldAdvHtmlFileProps + "/" + fileName);
                                ObjectOutputStream oos = new ObjectOutputStream(fos);
                                oos.writeObject(onecontainer1);
                                oos.flush();
                                oos.close();

                            }
                            map.put("meta", meta);
                            map.put("data", data);
                            report = gson.toJson(map);
                        } else {

                            Type metaType = new TypeToken<XtendReportMeta>() {
                            }.getType();
                            report = dao.geroneviewcharts(reportId, reportName, container, detail.getOneviewId(), detail.getNoOfViewLets());
                            if (action != null && action.equalsIgnoreCase("localrefresh")) {
                                if (report.equalsIgnoreCase("false")) {
                                    report = dao.getReports(reportId, reportName, container, fromoneview, busrolename, filePath, session, request);
                                }
                            }
                            map1 = gson.fromJson(report, tarType1);
                            String metadata = (String) map1.get("meta");
                            String data = (String) map1.get("data");
                            reportMeta = gson.fromJson(metadata, metaType);
                            if (!reportMeta.getTimedetails().isEmpty()) {
                                for (int i1 = 0; i1 < reportMeta.getTimedetails().size(); i1++) {
                                    Timedetails.add(reportMeta.getTimedetails().get(i1));
                                }
                                session.setAttribute("timedetails", Timedetails);
                            }

                            if (action != null && action.equalsIgnoreCase("localrefresh")) {
//    map.put("meta",metadata);
//        map.put("data",data);
                                data = data;
                                map.put("chartname", chartname);
//        report = gson.toJson(map);
                            }
                            if (action != null & action.equalsIgnoreCase("open")) {
                                String value = reportMeta.getenablefilter();
                                if (value != null && value.equalsIgnoreCase("disablefilter")) {
                                    report = dao.getReports(reportId, reportName, container, fromoneview, busrolename, filePath, session, request);
                                    map1 = gson.fromJson(report, tarType1);
                                    data = (String) map1.get("data");

                                    data = data;
//                            map.put("meta",metadata);
//        map.put("data",data);
//        report = gson.toJson(map);
                                }
                            }
                            XtendAdapter adapter = new XtendAdapter();
                            String reportData = adapter.getFilters(reportId, filePath, request);
                            map.put("meta", metadata);
                            map.put("data", data);
                            map.put("getFilters", reportData);
                            map.put("Timedetails", Timedetails);
                            report = gson.toJson(map);
                        }
                    }
                    PrintWriter out = null;
                    try {
                        response.getWriter().print(report);
                    } catch (IOException ex) {
                        logger.error("Exception: ", ex);
                    }
                    break;
//                   }
                }
            }
        }

        return null;
    }

    public ActionForward getAvailableCharts(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        PbReportViewerDAO dao = new PbReportViewerDAO();
        String reportId = request.getParameter("reportId");
        String reportName = request.getParameter("reportName");
        String fromoneview = request.getParameter("fromoneview");
        String busrolename = request.getParameter("busrolename");
        String filePath = "";
        request.setAttribute("fromoneview", fromoneview);
        request.setAttribute("busrolename", busrolename);
        Container container = Container.getContainerFromSession(request, reportId);
        HttpSession session = request.getSession(false);
        if (session != null) {
            filePath = dao.getFilePath(session);
        } else {
            filePath = "/usr/local/cache";
        }

        String report = "";
        if (request.getParameter("type") != null && request.getParameter("type").equalsIgnoreCase("advance")) {
            String visual = request.getParameter("visual");
            if (visual != null && !visual.equalsIgnoreCase("")) {
                try {
                    report = dao.getVisualsChange(reportId, reportName, container, visual, filePath);
                } catch (Exception e) {
                    report = dao.getVisuals(reportId, reportName, container, filePath);
                }
            } else {
                report = dao.getVisuals(reportId, reportName, container, filePath);
            }
        } else if (request.getParameter("type") != null && request.getParameter("type").equalsIgnoreCase("trend")) {
            report = dao.getReportsT(reportId, reportName, container, filePath);
        } else {
            report = dao.getReports(reportId, reportName, container, fromoneview, busrolename, filePath, session, request);
        }
//       HashMap map1 = new HashMap();
//          Map<String, List<String>> FilterMap = new HashMap<String, List<String>>();
//          Map<String, List<String>> advFilterMap = new HashMap<String, List<String>>();
//          Map<String, List<String>> TrendFilterMap = new HashMap<String, List<String>>();
//        Type tarType1 = new TypeToken<Map<String, String>>() {
//        }.getType();
//
//         Type metaType = new TypeToken<XtendReportMeta>() {
//        }.getType();
//                  XtendReportMeta reportMeta1 = new XtendReportMeta();
//                 Gson gson = new Gson();
//       if(report!=null && (report == null ? "" != null : !report.equals(""))  &&  (!report.equalsIgnoreCase("false"))){
//          map1 = gson.fromJson(report, tarType1);
//          String metadata=(String) map1.get("meta");
//reportMeta1 = gson.fromJson(metadata, metaType);
//FilterMap=reportMeta1.getFilterMap();
//session.setAttribute("FilterMap", FilterMap);
//
//        }

        PrintWriter out = null;
        try {
            response.getWriter().print(report);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward getSortingCharts(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        ReportManagementDAO dao = new ReportManagementDAO();
        PbReportViewerDAO pbDAO = new PbReportViewerDAO();
        String reportId = request.getParameter("chartID");
        String reportName = request.getParameter("reportName");
        String fileLocation = "";
        HttpSession session = request.getSession(false);
        if (session != null) {
            fileLocation = pbDAO.getFilePath(session);
        } else {
            fileLocation = "/usr/local/cache";
        }
        Container container = Container.getContainerFromSession(request, reportId);
        String report = "";
        try {
            report = dao.getChartsDataDrills(request, fileLocation);
        } catch (Exception ex) {
            logger.error("Exception:", ex);
        }

        PrintWriter out = null;
        try {
            response.getWriter().print(report);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward drillCharts(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
//       PbReportViewerDAO dao=new PbReportViewerDAO();
        String reportId = request.getParameter("reportId");
        String aoAsGoId = request.getParameter("aoAsGoId");
        PbReportViewerDAO pbDAO = new PbReportViewerDAO();
        String fileLocation = "";
        HttpSession session = request.getSession(false);
        if (session != null) {
            fileLocation = pbDAO.getFilePath(session);
        } else {
            fileLocation = "/usr/local/cache";
        }
        String reportName = request.getParameter("reportName");
        String fromoneview = request.getParameter("fromoneview");
        String busrolename = request.getParameter("busrolename");
        String oneviewid = request.getParameter("oneviewID");
        String regid = request.getParameter("regid");
        String drillregid = request.getParameter("drillregid");
//       String reportName = request.getParameter("reportName");
        Container container = Container.getContainerFromSession(request, reportId);
        ReportManagementDAO report = new ReportManagementDAO();
//       PbReportCollection collect = container.getReportCollect();
//     String bizzRoleId = container.getReportCollect().reportBizRoles[0];
//        String bizzRoleName = collect.getReportBizRoleName(bizzRoleId);
        String bizzRoleName = "";

        String data = null;
        OnceViewContainer onecontainer1 = null;
        ReportManagementDAO dao = new ReportManagementDAO();
        if (fromoneview != null && fromoneview.equalsIgnoreCase("true")) {
            String report1 = "";
            String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
            String oldAdvHtmlFileProps = (String) request.getSession(false).getAttribute("oldAdvHtmlFileProps");
            String advHtmlFileProps = (String) request.getSession(false).getAttribute("advHtmlFileProps");
            String isseurity = (String) request.getSession(false).getAttribute("isseurity");
            ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
            PbReturnObject securityfilters = null;
            securityfilters = (PbReturnObject) request.getSession(false).getAttribute("securityfilters");
            String fileName = reportTemplateDAO.getOneviewFileName(oneviewid);
            File file = null;

            ArrayList viewbys = new ArrayList();
            ArrayList viewbygblname = new ArrayList();
            String viewvlaue = null;
            if (request.getParameter("viewbygblids") != null) {
                String[] viewbys1 = request.getParameter("viewbygblids").split(",");
                String[] viewbygblname1 = request.getParameter("viewbygblname").split(",");
                for (int i = 0; i < viewbys1.length; i++) {
                    viewvlaue = viewbys1[0].replace("[", "").replace("]", "").replace("\"", "'").replace("'", "");
                    viewbys.add(viewbys1[i].replace("[", "").replace("]", "").replace("\"", "'").replace("'", ""));
                    viewbygblname.add(viewbygblname1[i].replace("[", "").replace("]", "").replace("\"", "'"));
                }
            }
//        request.getSession(false).setAttribute("selectglobalval", viewbygblname);
//            String bizzRoleName="";
            PbDb pbdb = new PbDb();
            file = new File(oldAdvHtmlFileProps + "/" + fileName);
            if (file.exists()) {
                FileInputStream fis = null;
                {
                    ObjectInputStream ois = null;
                    try {
                        fis = new FileInputStream(oldAdvHtmlFileProps + "/" + fileName);
                        ois = new ObjectInputStream(fis);
                        try {
                            onecontainer1 = (OnceViewContainer) ois.readObject();
                        } catch (ClassNotFoundException ex) {
                            logger.error("Exception:", ex);
                        }
                        ois.close();
                    } catch (IOException ex) {
                        logger.error("Exception:", ex);
                    } finally {
                        try {
                            fis.close();
                        } catch (IOException ex) {
                            logger.error("Exception:", ex);
                        }
                        try {
                            ois.close();
                        } catch (IOException ex) {
                            logger.error("Exception:", ex);
                        }
                    }
                }
            }
            List<OneViewLetDetails> oneviewletDetails = onecontainer1.onviewLetdetails;

            for (int i = 0; i < oneviewletDetails.size(); i++) {
                OneViewLetDetails detail = oneviewletDetails.get(i);
                String regionid = detail.getNoOfViewLets();
                if (regionid != null && regionid.equalsIgnoreCase(regid)) {
//if( !detail.isOneviewReportTimeDetails()){
//try {
//    if( viewvlaue == null ? "" != null : !viewvlaue.equals("")){
//            data = dao.getChartsDataDrills(request);
//    }else{
//         PbReportViewerDAO dao1=new PbReportViewerDAO();
//       data = dao1.geroneviewcharts(reportId,reportName,container,detail.getOneviewId(),detail.getNoOfViewLets(),"false");
//  Map map = new HashMap();
//     Gson gson = new Gson();
//      Type tarType1 = new TypeToken<Map<String, String>>() {
//        }.getType();
//    map = gson.fromJson(data, tarType1);
//  data=  (String) map.get("data");
//    }
//        } catch (FileNotFoundException ex) {
//            logger.error("Exception:",ex);
//        }
//
//}else{
//    if(isseurity!=null && isseurity.equalsIgnoreCase("true")){
//                            try {
//                                request.setAttribute("isseurity", isseurity);
//                                dao.setgblfilter(request);
//                                data = dao.getChartsDataDrills(request);
//                            } catch (FileNotFoundException ex) {
//                                logger.error("Exception:",ex);
//                            }
//
//           }else{
                    PbReportViewerDAO dao1 = new PbReportViewerDAO();
                    try {
//                              Map<String, List<String>> filterMap = new HashMap<String, List<String>>();
                        Type tarType1 = new TypeToken<Map<String, List<String>>>() {
                        }.getType();
                        Gson gson = new Gson();
                        if (request.getParameter("filterMap") != null) {
                            Map<String, List<String>> map = gson.fromJson(request.getParameter("filterMap"), tarType1);
                            request.setAttribute("filterMap", map);
                        }
//        if( viewvlaue == null ? "" != null : !viewvlaue.equals("")){
                        if (drillregid != null && drillregid.equalsIgnoreCase(regid)) {
                            data = "false";
                        } else {
                            data = dao.getChartsDataDrills(request, fileLocation);
                        }
                        if (data == null ? "false" == null : data.equals("false")) {
                            data = dao1.geroneviewcharts(reportId, reportName, container, detail.getOneviewId(), detail.getNoOfViewLets());
//                                    Map map = new HashMap();
////     Gson gson = new Gson();
//      Type tarType11 = new TypeToken<Map<String, String>>() {
//        }.getType();
//    map = gson.fromJson(data, tarType11);
//  data=  (String) map.get("data");
                        }
//                                }
                    } catch (Exception ex) {
                        logger.error("Exception:", ex);
                    }
//     if(data==null){
// data = dao1.getReports(reportId,reportName,container,fromoneview,busrolename);
//  Map map = new HashMap();
//     Gson gson = new Gson();
//      Type tarType1 = new TypeToken<Map<String, String>>() {
//        }.getType();
//    map = gson.fromJson(data, tarType1);
//  data=  (String) map.get("data");
//        }
//    }
//}
                }
            }

        } else {
//        String reportData = report.chartRequestHandlerDrills(request,bizzRoleName);

            try {
                data = dao.getChartsDataDrills(request, fileLocation);
            } catch (Exception ex) {
                logger.error("Exception:", ex);
            }
        }
        PrintWriter out = null;
        try {
            out = response.getWriter();
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        out.print(data);
//       PrintWriter out =null;
//        try {
//            response.getWriter().print(reportData);
//        } catch (IOException ex) {
//            logger.error("Exception:",ex);
//        }
        return null;
    }

    public ActionForward drillSingleCharts(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
//       PbReportViewerDAO dao=new PbReportViewerDAO();
        String reportId = request.getParameter("reportId");
        PbReportViewerDAO pbDAO = new PbReportViewerDAO();
        String fileLocation = "";
        HttpSession session = request.getSession(false);
        if (session != null) {
            fileLocation = pbDAO.getFilePath(session);
        } else {
            fileLocation = "/usr/local/cache";
        }
//       String reportName = request.getParameter("reportName");
        Container container = Container.getContainerFromSession(request, reportId);
        ReportManagementDAO report = new ReportManagementDAO();
        PbReportCollection collect = container.getReportCollect();
        String bizzRoleId = container.getReportCollect().reportBizRoles[0];
        String bizzRoleName = collect.getReportBizRoleName(bizzRoleId);
        String reportData = null;
        try {
            reportData = report.getChartsDataDrills(request, fileLocation);
        } catch (Exception ex) {
            logger.error("Exception:", ex);
        }

        PrintWriter out = null;
        try {
            response.getWriter().print(reportData);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }
    //sandeep

    public ActionForward drilloneviewCharts(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws FileNotFoundException, IOException, ClassNotFoundException, Exception {
//       PbReportViewerDAO dao=new PbReportViewerDAO();
        HttpSession session = request.getSession(false);
        DashboardTemplateBD dashboardTemplateBD = new DashboardTemplateBD();
        OnceViewContainer onecontainer1 = null;
        Container container = null;
        String result1 = "";
        HashMap<String, String> map = new HashMap<String, String>();
        String oneviewid = request.getParameter("oneviewID");
        String regid = request.getParameter("regid");
        String idArr = request.getParameter("idArr");
//        Map<String, List<String>> map =  new HashMap<String, List<String>>();
        String id1 = request.getParameter("id1");
        String viewbydrill = request.getParameter("viewbydrill");
//       String reportName = request.getParameter("reportName");
        String oldAdvHtmlFileProps = (String) request.getSession(false).getAttribute("oldAdvHtmlFileProps");
        String advHtmlFileProps = (String) request.getSession(false).getAttribute("advHtmlFileProps");
        ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
        String fileName = reportTemplateDAO.getOneviewFileName(oneviewid);
        File file = null;
        String bizzRoleName = "";
        file = new File(oldAdvHtmlFileProps + "/" + fileName);
        if (file.exists()) {
            FileInputStream fis = new FileInputStream(oldAdvHtmlFileProps + "/" + fileName);
            ObjectInputStream ois = new ObjectInputStream(fis);
            onecontainer1 = (OnceViewContainer) ois.readObject();
            ois.close();
        }
        List<OneViewLetDetails> oneviewletDetails = onecontainer1.onviewLetdetails;

        for (int i = 0; i < oneviewletDetails.size(); i++) {
            OneViewLetDetails detail = oneviewletDetails.get(i);
            String regionid = detail.getNoOfViewLets();
            if (regionid != null && regionid.equalsIgnoreCase(regid)) {

                container = detail.getContainer();
                bizzRoleName = detail.getRolename();
                detail.setchartdrills(idArr);
                detail.setchartrefreshdrills(detail.getchartrefreshdrills());
                Gson gson = new Gson();
//                     Type tarType1 = new TypeToken<Map<String, List<String>>>() {
//                }.getType();
//                Map<String, List<String>> map1 = gson.fromJson(request.getParameter("drills"), tarType1);
//                for (String drillviewby : map1.keySet()) {
                detail.setdrillviewby(viewbydrill);
//                }
//                String id1=request.getParameter("id1");
                if (id1 != null && id1.equalsIgnoreCase("OLAPGraphRegion")) {
                } else {
                    result1 = dashboardTemplateBD.getGraphDetailsData(request, response, session, detail, onecontainer1.timedetails, onecontainer1);
                }
            }

        }
        String fileLocation = "/usr/local/cache";
        ReportManagementDAO report = new ReportManagementDAO();
//       PbReportCollection collect = container.getReportCollect();
//     String bizzRoleId = container.getReportCollect().reportBizRoles[0];
//
//        String bizzRoleName = collect.getReportBizRoleName(bizzRoleId);
        String reportData = report.getChartsDataDrills(request, fileLocation);

//       PrintWriter out =null;
        try {
//            response.getWriter().print(reportData);
            if (id1 != null && id1.equalsIgnoreCase("OLAPGraphRegion")) {
            } else {
                map.put("result1", result1);
            }
            map.put("reportData", reportData);

            Gson json = new Gson();
            String jsonString = json.toJson(map);
            PrintWriter out = response.getWriter();
            out.print(jsonString);
        } catch (IOException ex) {
            logger.error("Exception: ", ex);
        }
        return null;
    }

    public ActionForward globalfileteroneview(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws FileNotFoundException, IOException, ClassNotFoundException, Exception {
//       PbReportViewerDAO dao=new PbReportViewerDAO();
        HttpSession session = request.getSession(false);
        DashboardTemplateBD dashboardTemplateBD = new DashboardTemplateBD();
        OnceViewContainer onecontainer1 = null;
        Container container = null;
        String result1 = "";
        HashMap<String, String> map = new HashMap<String, String>();
        String oneviewid = request.getParameter("oneviewID");
        String regid = request.getParameter("regid");
        String idArr = request.getParameter("idArr");
//        Map<String, List<String>> map =  new HashMap<String, List<String>>();
        String id1 = request.getParameter("id1");
        String viewbydrill = request.getParameter("viewbydrill");
//       String reportName = request.getParameter("reportName");
        String oldAdvHtmlFileProps = (String) request.getSession(false).getAttribute("oldAdvHtmlFileProps");
        String advHtmlFileProps = (String) request.getSession(false).getAttribute("advHtmlFileProps");
        ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
        String fileName = reportTemplateDAO.getOneviewFileName(oneviewid);
        File file = null;
        String bizzRoleName = "";
        file = new File(oldAdvHtmlFileProps + "/" + fileName);
        if (file.exists()) {
            FileInputStream fis = new FileInputStream(oldAdvHtmlFileProps + "/" + fileName);
            ObjectInputStream ois = new ObjectInputStream(fis);
            onecontainer1 = (OnceViewContainer) ois.readObject();
            ois.close();
        }
        List<OneViewLetDetails> oneviewletDetails = onecontainer1.onviewLetdetails;

        for (int i = 0; i < oneviewletDetails.size(); i++) {
            OneViewLetDetails detail = oneviewletDetails.get(i);
            String regionid = detail.getNoOfViewLets();
            if (regionid != null && regionid.equalsIgnoreCase(regid)) {

                container = detail.getContainer();
                bizzRoleName = detail.getRolename();
                detail.setchartdrills(idArr);
                detail.setchartrefreshdrills(detail.getchartrefreshdrills());
                Gson gson = new Gson();
//                     Type tarType1 = new TypeToken<Map<String, List<String>>>() {
//                }.getType();
//                Map<String, List<String>> map1 = gson.fromJson(request.getParameter("drills"), tarType1);
//                for (String drillviewby : map1.keySet()) {
                detail.setdrillviewby(viewbydrill);
//                }
//                String id1=request.getParameter("id1");
                if (id1 != null && id1.equalsIgnoreCase("OLAPGraphRegion")) {
                } else {
                    result1 = dashboardTemplateBD.getGraphDetailsData(request, response, session, detail, onecontainer1.timedetails, onecontainer1);
                }
            }

        }
        String fileLocation = "/usr/local/cache";
        ReportManagementDAO report = new ReportManagementDAO();
//       PbReportCollection collect = container.getReportCollect();
//     String bizzRoleId = container.getReportCollect().reportBizRoles[0];
//
//        String bizzRoleName = collect.getReportBizRoleName(bizzRoleId);
        String reportData = report.getChartsDataDrills(request, fileLocation);

//       PrintWriter out =null;
        try {
//            response.getWriter().print(reportData);
            if (id1 != null && id1.equalsIgnoreCase("OLAPGraphRegion")) {
            } else {
                map.put("result1", result1);
            }
            map.put("reportData", reportData);

            Gson json = new Gson();
            String jsonString = json.toJson(map);
            PrintWriter out = response.getWriter();
            out.print(jsonString);
        } catch (IOException ex) {
            logger.error("Exception: ", ex);
        }
        return null;
    }

    public ActionForward editCharts(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, FileNotFoundException, SQLException {
        String reportId = request.getParameter("reportId");
//        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
        PbReportViewerDAO pbDAO = new PbReportViewerDAO();
        String fileLocation = "";
        HttpSession session = request.getSession(false);
        if (session != null) {
            fileLocation = pbDAO.getFilePath(session);
        } else {
            fileLocation = "/usr/local/cache";
        }
        Type tarType = new TypeToken<ArrayList<String>>() {
        }.getType();
        Gson gson = new Gson();
//        String[] viewBys = request.getParameter("rowViewByArray").split(",");
//        String[] rowViewNamesArr = request.getParameter("rowViewNamesArr").split(",");
//        String[] measBys = request.getParameter("rowMeasArray").split(",");
//        String[] rowMeasNamesArr = request.getParameter("rowMeasNamesArr").split(",");

        Container container = Container.getContainerFromSession(request, reportId);
        //commmented for cache
//        PbReportCollection collect = container.getReportCollect();
//     String bizzRoleId = container.getReportCollect().reportBizRoles[0];
//        String bizzRoleName = collect.getReportBizRoleName(bizzRoleId);
//        PbReportViewerDAO dao = new PbReportViewerDAO();
//        String jsonData=null;
//        if(request.getParameter("chartId")==null){
////        jsonData=dao.addNewCharts(container,reportId,userId,viewBys,rowViewNamesArr,"Local");
//        }
//        else{
//        jsonData=dao.addNewCharts(container,reportId,userId,viewBys,rowViewNamesArr,measBys,rowMeasNamesArr,String.valueOf(request.getParameter("chartId")));
//        }

        //edit
        ReportManagementDAO dao = new ReportManagementDAO();
        String data = dao.getChartsDataDrills(request, fileLocation);
//        XtendReportMeta cloneReportMeta = container.getReportMeta();
//        ReportManagementDAO report = new ReportManagementDAO();
//        String reportData = report.singleChartRequestHandler(request,bizzRoleName);
//            XtendReportMeta reportMeta = container.getReportMeta();
//        Set<String> charts = reportMeta.getChartData().keySet();
//            for (String chart : charts) {
//               cloneReportMeta.getChartData().put(chart,reportMeta.getChartData().get(chart));
//            }
//         cloneReportMeta.setChartData(cloneReportMeta.getChartData());
//        container.setReportMeta(cloneReportMeta);
        PrintWriter out = response.getWriter();
//        out.print(jsonData);
        out.print(data);
        return null;
    }

    public ActionForward buildCharts(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
        String reportId = request.getParameter("reportId");
        Container container = Container.getContainerFromSession(request, reportId);
        PbReportCollection collect = container.getReportCollect();
        String bizzRoleId = container.getReportCollect().reportBizRoles[0];
        String bizzRoleName = collect.getReportBizRoleName(bizzRoleId);
        ReportManagementDAO report = new ReportManagementDAO();
        String reportData = "";
        if (request.getParameter("type") != null && request.getParameter("type").equalsIgnoreCase("advance")) {
            reportData = report.advanceChartRequestHandler(request, bizzRoleName);
        } else {
            reportData = report.singleChartRequestHandler(request, bizzRoleName);
        }
        PrintWriter out = response.getWriter();
        out.print(reportData);
        return null;
    }
    // for get selected ViewBys

    public ActionForward getViewBys(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        HashMap map = null;
        HashMap allViewBys = new HashMap();
        ArrayList<String> allViewIds = new ArrayList<String>();
        ArrayList<String> allViewNames = new ArrayList<String>();
        ArrayList<String> rowViewIdList = new ArrayList<String>();
        ArrayList<String> colViewIdList = new ArrayList<String>();
        ArrayList<String> rowNamesLst = new ArrayList<String>();
        ArrayList<String> colNamesLst = new ArrayList<String>();
        String rowName = "";
        String colName = "";
        String ViewFrom = String.valueOf(session.getAttribute("ViewFrom"));
        Container container = null;
        String reportId = request.getParameter("REPORTID");
        String fromdesigner = request.getParameter("fromdesigner");
        if (fromdesigner == null) {
            fromdesigner = "";
        }
        PbReportCollection collect = new PbReportCollection();
        HashMap ParameterMap = new HashMap();
        String selectedParams = "";

        if (session != null) {
            if (session.getAttribute("PROGENTABLES") != null) {
                map = (HashMap) session.getAttribute("PROGENTABLES");
                container = (Container) map.get(reportId);
            }
            if (container != null) {
                selectedParams = container.getSelectedParameterIds();
                ArrayList alist = new ArrayList();
                String[] selectedParamsArray = null;
                if (selectedParams != null && !selectedParams.equalsIgnoreCase("")) {
                    selectedParamsArray = selectedParams.split(",");
                }
                if (selectedParamsArray != null) {
                    for (int i = 0; i < selectedParamsArray.length; i++) {
                        alist.add(selectedParamsArray[i]);
                    }
                }
                if (ViewFrom.equalsIgnoreCase("Designer") && !fromdesigner.equalsIgnoreCase("fromdesigner")) {
                    ParameterMap = container.getParametersHashMap();
                    allViewIds = (ArrayList<String>) ParameterMap.get("Parameters");
                    allViewNames = (ArrayList<String>) ParameterMap.get("ParametersNames");
                } else {
                    collect = container.getReportCollect();
                    allViewBys = collect.getReportParameters();
                    String[] allKeys = (String[]) (allViewBys.keySet()).toArray(new String[0]);
                    for (int i = 0; i < allViewBys.size(); i++) {
                        allViewIds.add(allKeys[i]);
                        allViewNames.add(collect.getElementName(allKeys[i]));
                    }
                    for (int i = 0; i < alist.size(); i++) {
                        allViewIds.remove(alist.get(i));
                        allViewNames.remove(collect.getElementName((String) alist.get(i)));

                    }
                    allViewIds.add("TIME");
                    allViewNames.add("Time");
                }
                rowViewIdList = collect.reportRowViewbyValues;
                colViewIdList = collect.reportColViewbyValues;
                if (rowViewIdList != null && rowViewIdList.size() != 0) {
                    for (int i = 0; i < rowViewIdList.size(); i++) {
                        rowName = (String) rowViewIdList.get(i);
                        if (rowName.equalsIgnoreCase("Time")) {
                            rowNamesLst.add("Time");
                        } else {
                            rowNamesLst.add(collect.getParameterDispName(rowName));
                        }
                    }
                }
                if (colViewIdList != null && colViewIdList.size() != 0) {
                    for (int i = 0; i < colViewIdList.size(); i++) {
                        colName = (String) colViewIdList.get(i);
                        if (colName.equalsIgnoreCase("Time")) {
                            colNamesLst.add("Time");
                        } else {
                            colNamesLst.add(collect.getParameterDispName(colName));
                        }
                    }
                }

                //by gopesh for test add measures in change view by section
                ArrayList nameListName = (ArrayList) (container.getTableHashMap().get("MeasuresNames"));
                ArrayList nameListIds = (ArrayList) (container.getTableHashMap().get("Measures"));
                ArrayList aggregationType = collect.reportQryAggregations;
                try {
//                  for (Object nameList11 : nameListIds) {
//                    allViewIds.add(nameList11.toString());
//                }
//                  for (Object nameList12 : nameListName) {
//                    allViewNames.add(nameList12.toString());
//                }
                } catch (Exception e) {
                    logger.error("Exception: ", e);
                }
//                PbReportCollection collect = container.getReportCollect();
                String folderName = collect.getReportBizRoleName(collect.reportBizRoles[0]);

                XtendReportMeta reportMeta = new XtendReportMeta();
                FileReadWrite readWrite = new FileReadWrite();
                String metaString = readWrite.loadJSON("/usr/local/cache/" + folderName.replaceAll("\\W", "").trim() + "/" + collect.reportName.replaceAll("\\W", "").trim() + "_" + collect.reportId + "/" + collect.reportName.replaceAll("\\W", "").trim() + "_" + collect.reportId + "_data.json");
                Type tarType = new TypeToken<XtendReportMeta>() {
                }.getType();
                Gson gson = new Gson();
                reportMeta = gson.fromJson(metaString, tarType);
                ArrayList<String> allViewIdsAfter = new ArrayList<String>();
                ArrayList<String> allViewNamesAfter = new ArrayList<String>();
                allViewIdsAfter.addAll(0, reportMeta.getViewbys());
                allViewIdsAfter.addAll(allViewIdsAfter.size(), reportMeta.getMeasures());
//         for(int i=0;i<allViewIds.size();i++){
//             for(int j=0;j<reportMeta.getViewbys().size();j++){
//             if(reportMeta.getViewbys().get(j).equalsIgnoreCase(allViewNames.get(i))){
//             allViewIdsAfter.add(allViewIds.get(i));
//             allViewNamesAfter.add(allViewNames.get(i));
//             }
//             }
//         }
//         for(int i=0;i<allViewIds.size();i++){
//             for(int j=0;j<reportMeta.getMeasures().size();j++){
//             if(reportMeta.getMeasures().get(j).equalsIgnoreCase(allViewNames.get(i))){
//             allViewIdsAfter.add(allViewIds.get(i));
//             allViewNamesAfter.add(allViewNames.get(i));
//             }
//             }
//         }

                session.setAttribute("allViewIds", allViewIdsAfter);
                session.setAttribute("allViewNames", allViewIdsAfter);
//                session.setAttribute("allViewIds", allViewIds);
//                session.setAttribute("allViewNames", allViewNames);
                session.setAttribute("aggType", aggregationType);
                if (fromdesigner == null || fromdesigner.equalsIgnoreCase("")) {
                    session.setAttribute("rowViewIdList", rowViewIdList);
                    session.setAttribute("rowMeasIdList", nameListIds);
                    session.setAttribute("colViewIdList", colViewIdList);
                    session.setAttribute("rowNamesLst", rowNamesLst);
                    session.setAttribute("rowMeasNamesLst", nameListName);
                    session.setAttribute("colNamesLst", colNamesLst);
                }
                if (fromdesigner != null || !fromdesigner.equalsIgnoreCase("")) {
                    if (allViewIds == null || allViewIds.isEmpty() || allViewBys.size() == 0) {
                        PrintWriter out = null;
                        out = response.getWriter();
                        out.print("NoViewBys");

                    }

                }
            }
        }

        return null;
    }

    public ActionForward addNewTrendUI(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
        String reportId = request.getParameter("reportId");
        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
        Type tarType = new TypeToken<ArrayList<String>>() {
        }.getType();
        Gson gson = new Gson();
        String[] viewBys = request.getParameter("rowViewByArray").split(",");
        String[] rowViewNamesArr = request.getParameter("rowViewNamesArr").split(",");
        String[] measBys = request.getParameter("rowMeasArray").split(",");
        String[] rowMeasNamesArr = request.getParameter("rowMeasNamesArr").split(",");

        Container container = Container.getContainerFromSession(request, reportId);
        PbReportCollection collect = container.getReportCollect();
        String bizzRoleId = container.getReportCollect().reportBizRoles[0];
        String bizzRoleName = collect.getReportBizRoleName(bizzRoleId);
        PbReportViewerDAO dao = new PbReportViewerDAO();
        String jsonData = null;
//        if(request.getParameter("chartId")==null){
////        jsonData=dao.addNewCharts(container,reportId,userId,viewBys,rowViewNamesArr,"Local");
//        }
//        else{
        jsonData = dao.addNewTrend(container, reportId, userId, viewBys, rowViewNamesArr, measBys, rowMeasNamesArr, String.valueOf(request.getParameter("chartId")));
//        }

        ReportManagementDAO report = new ReportManagementDAO();
        String reportData = report.trendRequestHandler(request, bizzRoleName);

        PrintWriter out = response.getWriter();
//        out.print(jsonData);
        out.print(reportData);
        return null;
    }

    public ActionForward saveXtTrend(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        HttpSession session = request.getSession(false);
        String reportId = request.getParameter("graphsId");
        String reportName = request.getParameter("graphName");
        String userId = request.getParameter("usersId");
        String numOfRecords = request.getParameter("numOfCharts");

        Container container = Container.getContainerFromSession(request, reportId);

//        HashMap<String,List<Map<String, String>>> currChartData = container.getChartData();
        Type dataType = new TypeToken<HashMap<String, List<Map<String, String>>>>() {
        }.getType();

        Type tarType = new TypeToken<Map<String, String>>() {
        }.getType();

        Type tarType1 = new TypeToken<Map<String, DashboardChartData>>() {
        }.getType();
        Gson gson = new Gson();
        String bizzRoleId = container.getReportCollect().reportBizRoles[0];
        String bizzRoleName = container.getReportCollect().getReportBizRoleName(bizzRoleId);
        Map<String, DashboardChartData> chartData = gson.fromJson(request.getParameter("chartData"), tarType1);
        Map<String, String> lines = gson.fromJson(request.getParameter("lines"), tarType);
        PbReportViewerDAO pbdao = new PbReportViewerDAO();
        FileReadWrite fileReadWrite = new FileReadWrite();
        String data = gson.toJson(container.getDbrdData());
        ReportManagementDAO reportDao = new ReportManagementDAO();
        XtendReportMeta reportMeta = reportDao.setReportForm(request);
        container.setTrendReportMeta(reportMeta);
//       fileReadWrite.writeToFile("/usr/local/cache/Sales/"+reportName+"_"+reportId+"_data.json", gson.toJson(currChartData, dataType));
        pbdao.saveTrendProp(reportId, reportName, userId, chartData, numOfRecords, lines, data, bizzRoleName);
        return null;
    }

    public ActionForward getAvailableTrend(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        PbReportViewerDAO dao = new PbReportViewerDAO();
        String reportId = request.getParameter("reportId");
        String reportName = request.getParameter("reportName");
        Container container = Container.getContainerFromSession(request, reportId);
        String report = dao.getTrendReports(reportId, reportName, container);

        PrintWriter out = null;
        try {
            response.getWriter().print(report);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward buildTrend(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
        String reportId = request.getParameter("reportId");
        Container container = Container.getContainerFromSession(request, reportId);
//        PbReportCollection collect = container.getReportCollect();
//        String bizzRoleId = container.getReportCollect().reportBizRoles[0];
//        String bizzRoleName = collect.getReportBizRoleName(bizzRoleId);
        ReportManagementDAO dao = new ReportManagementDAO();
        PbReportViewerDAO pbDao = new PbReportViewerDAO();
        String filePath = "";
        HttpSession session = request.getSession(false);
        if (session != null) {
            filePath = pbDao.getFilePath(session);
        } else {
            filePath = "/usr/local/cache";
        }
//      trend reports
        String data = dao.getChartsData(request, filePath);
//        String reportData = "";
//        String reportData = report.trendRequestHandler(request,bizzRoleName);

        PrintWriter out = response.getWriter();
        out.print(data);
        return null;
    }

    public ActionForward editTrend(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
        String reportId = request.getParameter("reportId");
//        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
        Type tarType = new TypeToken<ArrayList<String>>() {
        }.getType();
        Gson gson = new Gson();
//        String[] viewBys = request.getParameter("rowViewByArray").split(",");
//        String[] rowViewNamesArr = request.getParameter("rowViewNamesArr").split(",");
//        String[] measBys = request.getParameter("rowMeasArray").split(",");
//        String[] rowMeasNamesArr = request.getParameter("rowMeasNamesArr").split(",");

        Container container = Container.getContainerFromSession(request, reportId);
        PbReportCollection collect = container.getReportCollect();
        String bizzRoleId = container.getReportCollect().reportBizRoles[0];
        String bizzRoleName = collect.getReportBizRoleName(bizzRoleId);
//        PbReportViewerDAO dao = new PbReportViewerDAO();
//        String jsonData=null;
//        if(request.getParameter("chartId")==null){
////        jsonData=dao.addNewCharts(container,reportId,userId,viewBys,rowViewNamesArr,"Local");
//        }
//        else{
//        jsonData=dao.addNewCharts(container,reportId,userId,viewBys,rowViewNamesArr,measBys,rowMeasNamesArr,String.valueOf(request.getParameter("chartId")));
//        }
        XtendReportMeta cloneReportMeta = container.getTrendReportMeta();
        ReportManagementDAO report = new ReportManagementDAO();
        String reportData = report.trendRequestHandler(request, bizzRoleName);
        XtendReportMeta reportMeta = container.getTrendReportMeta();
        Set<String> charts = reportMeta.getChartData().keySet();
        for (String chart : charts) {
            cloneReportMeta.getChartData().put(chart, reportMeta.getChartData().get(chart));
        }
        cloneReportMeta.setChartData(cloneReportMeta.getChartData());
        container.setTrendReportMeta(cloneReportMeta);
        PrintWriter out = response.getWriter();
//        out.print(jsonData);
        out.print(reportData);
        return null;
    }

    public ActionForward drillSingleTrend(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
//       PbReportViewerDAO dao=new PbReportViewerDAO();
        String reportId = request.getParameter("reportId");
        PbReportViewerDAO pbDAO = new PbReportViewerDAO();
        String fileLocation = "";
        HttpSession session = request.getSession(false);
        if (session != null) {
            fileLocation = pbDAO.getFilePath(session);
        } else {
            fileLocation = "/usr/local/cache";
        }
//       String reportName = request.getParameter("reportName");
        ReportManagementDAO report = new ReportManagementDAO();
        String data = null;
        try {
            data = report.getChartsDataDrills(request, fileLocation);
        } catch (Exception ex) {
            logger.error("Exception:", ex);
        }

        PrintWriter out = null;
        try {
            response.getWriter().print(data);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward getTrendMeasures(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {

        String reportId = request.getParameter("REPORTID");
        ReportObjectMeta reportMeta = new ReportObjectMeta();
        FileReadWrite readWrite = new FileReadWrite();

        String metaString = readWrite.loadJSON("/usr/local/cache/analyticalobject/R_GO_" + reportId + ".json");
        Gson gson = new Gson();
        Type tarType = new TypeToken<ReportObjectMeta>() {
        }.getType();

        reportMeta = gson.fromJson(metaString, tarType);
        List allViewIds = new ArrayList<String>();
        List allViewNames = new ArrayList<String>();
        List allMeasIds = new ArrayList<String>();
        List allMeasNames = new ArrayList<String>();
        Map trendMeasure = new HashMap();

//allViewIds=reportMeta.getViewIds();
//allViewNames=reportMeta.getViewNames();
        allMeasIds = reportMeta.getMeasIds();
        allMeasNames = reportMeta.getMeasNames();
        allViewIds.add("TIME");
        allViewNames.add("TIME");

        if (allViewIds.contains("Time")) {
            trendMeasure.put("viewbys", "Time");
        } else if (allViewIds.contains("Year")) {
            trendMeasure.put("viewbys", "Year");
        } else if (allViewIds.contains("Month Year") || allViewIds.contains("Month - Year")) {
            trendMeasure.put("viewbys", "Month Year");
        } else if (allViewIds.contains("Qtr Year") || allViewIds.contains("Qtr - Year")) {
            trendMeasure.put("viewbys", "Qtr Year");
        } else if (allViewIds.contains("Month")) {
            trendMeasure.put("viewIds", "Month");
            trendMeasure.put("view", "Month");
        } else if (allViewIds.contains("Qtr")) {
            trendMeasure.put("viewIds", "Qtr");
            trendMeasure.put("view", "Qtr");
        }
// else {
//trendMeasure.put("viewIds","TIME");
//        trendMeasure.put("view","TIME");
// }

        trendMeasure.put("measure", allMeasNames);
        trendMeasure.put("measureId", allMeasIds);
        trendMeasure.put("viewIds", allViewIds);
        trendMeasure.put("view", allViewNames);

        String measureData = gson.toJson(trendMeasure);
        PrintWriter out = response.getWriter();
        out.print(measureData);
        return null;

    }

    public ActionForward getFilters(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        PbReportViewerDAO dao = new PbReportViewerDAO();
        String reportId = request.getParameter("graphsId");
        String fromajaxtype = request.getParameter("fromajaxtype");
        String elementid = request.getParameter("elementid");
        String fileLocation = "";
        String reportData = "";
        String startValue = "";
        HttpSession session = request.getSession(false);
        if (session != null) {
            fileLocation = dao.getFilePath(session);
        } else {
            fileLocation = "/usr/local/cache";
        }
        XtendAdapter adapter = new XtendAdapter();
        if (fromajaxtype != null && fromajaxtype.equalsIgnoreCase("true")) {
            reportData = adapter.getAjaxFilters(reportId, fileLocation, request, startValue);
        } else {

            reportData = adapter.getFilters(reportId, fileLocation, request);

            //sandeep
            Gson gson = new Gson();
            Map<String, List<String>> allFilters = new HashMap<String, List<String>>();
            Type type = new TypeToken<Map<String, List<String>>>() {
            }.getType();
            allFilters = gson.fromJson(reportData, type);
            session.setAttribute("newfilterdata", allFilters);

//end of sandeep code
        }
        PrintWriter out = null;
        try {
            response.getWriter().print(reportData);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward generateFilters(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        String reportId = request.getParameter("graphsId");
        String reportName = request.getParameter("graphName");
        HttpSession session = request.getSession(false);
//       XtendAdapter adapter = new XtendAdapter();
        PbReportViewerDAO pbDao = new PbReportViewerDAO();
        Container container = Container.getContainerFromSession(request, reportId);
        String bizzRoleId = container.getReportCollect().reportBizRoles[0];
        String bizzRoleName = container.getReportCollect().getReportBizRoleName(bizzRoleId);
        Type tarType = new TypeToken<List<String>>() {
        }.getType();
        Gson gson = new Gson();
        String views = request.getParameter("viewbyIds");
        List<String> viewBys = gson.fromJson(views, tarType);
        String filesPath = "";
//               Container container = Container.getContainerFromSession(request, reportId);
        if (session != null) {
            filesPath = pbDao.getFilePath(session);
        } else {
            filesPath = "/usr/local/cache";
        }
//        adapter.createFilter(viewBys,reportName,reportId,bizzRoleName);
        pbDao.generateFilter(container, viewBys, reportName, reportId, bizzRoleName, filesPath);
        PrintWriter out = null;
//        try {
////            response.getWriter().print(reportData);
//        } catch (IOException ex) {
//            logger.error("Exception:",ex);
//        }
        return null;
    }

    //added by Dinanath for drag and drop dialog for tagReportName
    public ActionForward showViewByTag(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        String reportId = (String) request.getParameter("REPORTID");
        String userId = String.valueOf(session.getAttribute("USERID"));
        PbReportViewerDAO dao = new PbReportViewerDAO();

        Map<String, List<String>> searcher = dao.getSearchRept2(userId);
        for (Map.Entry<String, List<String>> entry : searcher.entrySet()) {
            String key = (String) entry.getKey();
            List<String> values = entry.getValue();
            session.setAttribute(key, values);
        }

        Map<String, List<String>> getTagIdAssignment = dao.getTagIdOfAssignmentTable(userId, reportId);
        for (Map.Entry<String, List<String>> entry : getTagIdAssignment.entrySet()) {
            String key3 = (String) entry.getKey();
            List<String> values3 = entry.getValue();
            session.setAttribute(key3, values3);
        }//end for
        return null;
    }

    public ActionForward saveDescInAssignment(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        String shortDesc = request.getParameter("shortDesc");
        String longDesc = request.getParameter("longDesc");
        String tagType = request.getParameter("tagType");
        String repId = request.getParameter("rId");
        String uId = request.getParameter("uid");
        String tagId = request.getParameter("taggId");
        String[] t = tagId.split(",");
        PbReportViewerDAO dao = new PbReportViewerDAO();
        CacheLayer ca=CacheLayer.getCacheInstance();
        ca.setdata("getTagsBlocks" + uId + tagId, null);
        dao.saveTagDescofAssign(uId, t, shortDesc, longDesc, tagType, repId);
        return null;
    }

    public ActionForward getObjectMap(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        PbReportViewerDAO pbDao = new PbReportViewerDAO();
        XtendReportMeta reportMeta1 = new XtendReportMeta();
        HashMap map = null;
        HashMap allViewBys = new HashMap();
        List allViewIds = new ArrayList<String>();
        List allViewNames = new ArrayList<String>();
        List rowViewIdList = new ArrayList<String>();
        List colViewIdList = new ArrayList<String>();
        List rowNamesLst = new ArrayList<String>();
        List colNamesLst = new ArrayList<String>();
        List runtimeMeasure = new ArrayList<String>();
        Gson gson = new Gson();
        String reportId = request.getParameter("REPORTID");
        String fromdesigner = request.getParameter("fromdesigner");
        String chartId = request.getParameter("chartId");
        Container container = null;
        container = Container.getContainerFromSession(request, reportId);
        String fileLocation = "";
//        String runtimeMeasure = request.getParameter("runtimeMeasure");
        if (chartId != null) {
            Type tarType1 = new TypeToken<Map<String, DashboardChartData>>() {
            }.getType();
            Map<String, DashboardChartData> chartData = gson.fromJson(request.getParameter("chartData"), tarType1);
            reportMeta1 = container.getReportMeta();
            DashboardChartData chartDetails = reportMeta1.getChartData().get(chartId);
            if (chartData != null) {
                runtimeMeasure = chartDetails.getRuntimeMeasure();
            }
        }
        if (session != null) {
            fileLocation = pbDao.getFilePath(session);
        } else {
            fileLocation = "/usr/local/cache";
        }
        if (fromdesigner == null) {
            fromdesigner = "";
        }

        List aggregationType = new ArrayList();
//

        ReportObjectMeta reportMeta = new ReportObjectMeta();
        FileReadWrite readWrite = new FileReadWrite();
//if(container.getReportCollect().AOId!=null && !container.getReportCollect().AOId.equalsIgnoreCase("") )
// {
//
//}
        Gson gsonread = new Gson();
        String metaString = readWrite.loadJSON(fileLocation + "/analyticalobject/R_GO_" + reportId + ".json");
        Type tarType = new TypeToken<ReportObjectMeta>() {
        }.getType();

        reportMeta = gsonread.fromJson(metaString, tarType);

        ArrayList<String> allViewIdsAfter = new ArrayList<String>();
        ArrayList<String> allViewNamesAfter = new ArrayList<String>();
        rowViewIdList = reportMeta.getViewIds();
        rowNamesLst = reportMeta.getViewNames();
        allViewIds = rowViewIdList;
        allViewNames = rowNamesLst;
        List nameListName = reportMeta.getMeasNames();
        List nameListIds = reportMeta.getMeasIds();

        for (int i = 0; i < nameListIds.size(); i++) {
            allViewNames.add(nameListName.get(i));
            allViewIds.add(nameListIds.get(i));
        }
        allViewIdsAfter.addAll(0, reportMeta.getViewIds());
        allViewIdsAfter.addAll(allViewIdsAfter.size(), reportMeta.getMeasIds());
        aggregationType = reportMeta.getAggregations();

        session.setAttribute("allViewIds", allViewIdsAfter);
        session.setAttribute("allViewNames", allViewIdsAfter);
        session.setAttribute("allViewIds", allViewIds);
        session.setAttribute("allViewNames", allViewNames);
        session.setAttribute("aggType", aggregationType);
        if (fromdesigner == null || fromdesigner.equalsIgnoreCase("")) {
            session.setAttribute("rowViewIdList", rowViewIdList);
            session.setAttribute("rowMeasIdList", nameListIds);
            session.setAttribute("colViewIdList", colViewIdList);
            session.setAttribute("rowNamesLst", rowNamesLst);
            session.setAttribute("rowMeasNamesLst", nameListName);
            if (chartId != null) {

                session.setAttribute("runtimeMeasNamesLst", runtimeMeasure);
            }
            session.setAttribute("colNamesLst", colNamesLst);
        }
        if (fromdesigner != null || !fromdesigner.equalsIgnoreCase("")) {
            if (allViewIds == null || allViewIds.isEmpty() || allViewBys.size() == 0) {
                PrintWriter out = null;
                out = response.getWriter();
                out.print("NoViewBys");

            }

        }
//            }

        return null;
    }

    public ActionForward buildchartsWithObject(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        ReportManagementDAO dao = new ReportManagementDAO();
        PbReportViewerDAO pbDao = new PbReportViewerDAO();
        String filePath = "";
        HttpSession session = request.getSession(false);
        if (session != null) {
            filePath = pbDao.getFilePath(session);
        } else {
            filePath = "/usr/local/cache";
        }
        String data = dao.getChartsData(request, filePath);

        PrintWriter out = response.getWriter();
        out.print(data);
        return null;
    }

    public ActionForward getLocalChart(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        String userId = request.getParameter("userID").toString();
        PbReportViewerDAO dao = new PbReportViewerDAO();
        String reportId = request.getParameter("graphsId");
        String reportName = request.getParameter("graphName");
        String chartId = request.getParameter("chartId");
        Container container = Container.getContainerFromSession(request, reportId);
        String bizzRoleId = container.getReportCollect().reportBizRoles[0];
        String type = "";
        String filePath = "";
        HttpSession session = request.getSession(false);
        if (session != null) {
            filePath = dao.getFilePath(session);
        } else {
            filePath = "/usr/local/cache";
        }
        if (request.getParameter("type") != null && request.getParameter("type").equalsIgnoreCase("trend")) {
            type = request.getParameter("type");
        }
        String reportData = dao.getLocalChart(reportId, reportName, chartId, container, type, filePath, userId, request);
        PrintWriter out = null;
        try {
            response.getWriter().print(reportData);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward getchangeVisual(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        PbReportViewerDAO dao = new PbReportViewerDAO();
        String reportId = request.getParameter("reportId");
        String reportName = request.getParameter("reportName");
        String visual = request.getParameter("visual");
        Container container = Container.getContainerFromSession(request, reportId);
        String report = "";
        String filePath = "";
        HttpSession session = request.getSession(false);

        if (session != null) {
            filePath = dao.getFilePath(session);
        } else {
            filePath = "/usr/local/cache";
        }
//       if(request.getParameter("type")!=null && request.getParameter("type").equalsIgnoreCase("advance")){
        report = dao.getVisualsChange(reportId, reportName, container, visual, filePath);
//       }else{
//       report = dao.getReports(reportId,reportName,container);
//        }
        PrintWriter out = null;
        try {
            response.getWriter().print(report);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }
//added by Dinanath for update short and Long desc for Taggin.jsp

    public ActionForward updateFontSizeChangeOfTag(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        String userId = String.valueOf(session.getAttribute("USERID"));
        String fontsize = request.getParameter("fontSizeTag");
        PbReportViewerDAO dao = new PbReportViewerDAO();
        dao.updateFontSizeChangeOfTags(fontsize, userId);
        return null;
    }

    public ActionForward updateSequence(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        String sequence = "";
        sequence = request.getParameter("visualChartType");
        String flag = request.getParameter("flag");
        if (flag != null && flag.equalsIgnoreCase("graphSequence")) {
            sequence = request.getParameter("viewby");
        }
        String reportId = request.getParameter("graphsId");
        String reportName = request.getParameter("graphName");
        Container container = Container.getContainerFromSession(request, reportId);
        String bizzRoleId = container.getReportCollect().reportBizRoles[0];
        String bizzRoleName = container.getReportCollect().getReportBizRoleName(bizzRoleId);
        PbReportViewerDAO dao = new PbReportViewerDAO();
        String respponse = dao.updateSequence(sequence, bizzRoleName, reportId, reportName);
        response.getWriter().print(respponse);
        return null;
    }

    public ActionForward sendSchedulerNow(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws ParseException, IOException {
        ReportSchedule schedule;
        HttpSession session = request.getSession(false);
        String schedulerId = request.getParameter("schedulerId");
        String reportId = request.getParameter("reportId");
        boolean isReport = Boolean.parseBoolean(request.getParameter("isReport"));
        PbReportViewerDAO dao = new PbReportViewerDAO();
        if (isReport) {
            schedule = dao.getSchedulerDetails(schedulerId);
        } else {
            schedule = dao.getSchedulerDetailsDashboard(schedulerId);
        }
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        Calendar cal = Calendar.getInstance();
        String startDate = dateFormat.format(cal.getTime()).toString().substring(0, 10);
        String endDate = startDate;
        String fullDate = dateFormat.format(cal.getTime()).toString();
        String timeArrTmp[] = fullDate.split(" ");
        String timeArr[] = timeArrTmp[1].toString().split(":");
        String requestUrl1 = request.getRequestURL().toString();//added by sruhti for schedular
        String hrs = timeArr[0];
        String mins = timeArr[1];
        int hrsT = Integer.parseInt(hrs);
        int minsT = Integer.parseInt(mins);
        minsT = minsT + 1;
        String mailIds = request.getParameter("emailIds");
        String usrMesg = request.getParameter("usrMesg");
        String scheduledTime = Integer.toString(hrsT).concat(":").concat(Integer.toString(minsT));
        String userId = String.valueOf(request.getSession(false).getAttribute("USERID"));
        Date sDate, eDate;
        DateFormat formatter;
        String value = "";
        String valu = "";
        String mont = "";
        String CurrValue = "";
        String value1 = "";
        String valu1 = "";
        String mont1 = "";
        String CurrValue1 = "";
//        value = startDate;
//        int slashval = value.indexOf("/");
//        int slashLast = value.lastIndexOf("/");
//        valu = value.substring(0, slashval);
//        mont = value.substring(slashval + 1, slashLast + 1);
//        CurrValue = mont.concat(valu).concat(value.substring(slashLast));
//        startDate = CurrValue;
//
//        value1 = endDate;
//        int slashval1 = value1.indexOf("/");
//        int slashLast1 = value1.lastIndexOf("/")+1;
//        valu1 = value1.substring(0, slashval1);
//        mont1 = value1.substring(slashval1 + 1, slashLast1 + 1);
//        int day = Integer.parseInt(valu1);
//        value1 = Integer.toString(day+1);
//        CurrValue1 = mont1.concat(valu1).concat(value1.substring(slashLast1));
//        endDate = CurrValue1;

        String endDateArr[] = endDate.split("/");
        String months = endDateArr[0].toString();
        String days = endDateArr[1].toString();
        String years = endDateArr[2].toString();
        int daysVal = Integer.parseInt(days);
        daysVal++;
        days = Integer.toString(daysVal);
        if (days.length() == 1) {
            days = "0" + days;
        }
        endDate = months + "/" + days + "/" + years;
        formatter = new SimpleDateFormat("MM/dd/yyyy");
        sDate = formatter.parse(startDate);
        eDate = formatter.parse(endDate);
//        ReportTemplateDAO reportDAO = new ReportTemplateDAO();

        schedule.setReportmailIds(mailIds);
        //Added by Amar to add user message in scheduler
        schedule.setUserMessage(usrMesg);
        //end of code
        schedule.setScheduledTime(scheduledTime);
        schedule.setReportScheduledId(Integer.parseInt(schedulerId));
        schedule.setStartDate(sDate);
        schedule.setEndDate(eDate);
        schedule.setReportId(Integer.parseInt(reportId));
        schedule.setIsReportSchedule(true);
        String filePath = null;
        PbReportViewerDAO pbDAO = new PbReportViewerDAO();
        if (session != null) {
            filePath = pbDAO.getFilePath(session);
        } else {
            filePath = "/usr/local/cache";
        }
        schedule.setadvHtmlFileProps(filePath);
        schedule.setrequestUrl(requestUrl1);//added by Sruthi
        schedule.setUserId((request.getSession(false).getAttribute("USERID")).toString());
        String frequency = schedule.getFrequency();
//        reportDAO.updateSchedulerDetails(schedulerId, schedule);
        SchedulerBD bd = new SchedulerBD();
        //bd.scheduleReport(schedule, false);
        bd.scheduleReportNow(schedule, false);
        return null;
    }
    //added by Dinanath for sequence of Tag Header for LandingPage.jsp

    public ActionForward updateAccordingSequence(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        String userId = String.valueOf(session.getAttribute("USERID"));
        String tagIdforUpd = request.getParameter("tagIdforUpd");
        String tagSequenceIdForUpd = request.getParameter("tagSequenceIdForUpd");
        PbReportViewerDAO dao = new PbReportViewerDAO();
        dao.updateTagAccordingToSequence(tagIdforUpd, tagSequenceIdForUpd, userId);
        session.setAttribute("currentSelectedTag", "");// for clearing the history of tags
        return null;
    }
    //added by Dinanath for sequence of Description Header for LandingPage.jsp

    public ActionForward updateTagReportAssignmentSequence(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        String currentSelectedTagId=request.getParameter("currentSelectedTagId");
        String userId = String.valueOf(session.getAttribute("USERID"));
        String tagAssignIdforUpds = request.getParameter("tagAssignIdforUpd");
        String tagAssginSequenceIdForUpds = request.getParameter("tagAssginSequenceIdForUpd");
        PbReportViewerDAO dao = new PbReportViewerDAO();
        dao.updateTagAccordingToSequenceSecond(tagAssignIdforUpds, tagAssginSequenceIdForUpds, userId,currentSelectedTagId);
        return null;
    }
    //        added by manik

    public ActionForward getAvailableChartsForLogin(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        logger.info("Enter");
        PbReportViewerDAO dao = new PbReportViewerDAO();
        String reportId = request.getParameter("reportId");
        String reportName = request.getParameter("reportName");
        String bizzRoleName = request.getParameter("bizzRoleName");
        String fromLogin = request.getParameter("fromLogin");
        String username = request.getParameter("username");
        String currentTab = request.getParameter("currentTab");
        String graphId = request.getParameter("graphId");
        String chartId = request.getParameter("chartId");
        Container container = Container.getContainerFromSession(request, reportId);
        String report = "";
        report = dao.getReportsLogin(reportId, reportName, bizzRoleName, fromLogin, username, session, currentTab, graphId, chartId);
        PrintWriter out = null;
        try {
            response.getWriter().print(report);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward getChartsForWall(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        PbReportViewerDAO dao = new PbReportViewerDAO();
        String username = request.getParameter("username");
        String report = "";
        report = dao.getWallReports(username, session);
        PrintWriter out = null;
        try {
            response.getWriter().print(report);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }
    //        added by manik

    public ActionForward saveLoginCharts(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        HttpSession session = request.getSession(false);
//        String reportId = request.getParameter("graphsId");
        Type tarType1 = new TypeToken<Map<String, DashboardChartData>>() {
        }.getType();
        Gson gson = new Gson();
        String tabdetail = request.getParameter("tabdetail");
        String usernameLog = request.getParameter("usernameLog");
        String data = "";
//         Map<String,LoginReportMeta> loginDataDetails = new HashMap<String,LoginReportMeta>();
        FileReadWrite fileReadWrite = new FileReadWrite();
//        if(session.getAttribute("loginDataDetails")!=null){
//            Type sessionDataType = new TypeToken<LoginReportMeta>(){ }.getType();
////        loginDataDetails = gson.fromJson(String.valueOf(session.getAttribute("loginDataDetails")),sessionDataType);
//        data = String.valueOf(session.getAttribute("loginDataDetails"));
//        }
//        String numOfRecords = request.getParameter("numOfCharts");

//        Container container = Container.getContainerFromSession(request, reportId);
//        HashMap<String,List<Map<String, String>>> currChartData = container.getChartData();
//             Type dataType = new TypeToken<HashMap<String,List<Map<String, String>>>>() {
//            }.getType();
//
//             Type tarType = new TypeToken<Map<String, String>>() {
//            }.getType();
        String tagfilePath = "/usr/local/cache/loginPageCharts/tag_details.json";
        try {
            File file = new File(tagfilePath);
            if (file.exists()) {
            };

        } catch (Exception e) {
             logger.error("Exception:", e);
        }
        fileReadWrite.writeToFile("usr/local/cache/loginPageCharts/tag_details.json", gson.toJson(tabdetail));
        Map<String, Map<String, Map<String, WallData>>> wallData = (Map<String, Map<String, Map<String, WallData>>>) session.getAttribute("wallData");
        WallData wall = new WallData();
        if (session.getAttribute("wallData") != null) {
            wallData = (Map<String, Map<String, Map<String, WallData>>>) session.getAttribute("wallData");
        }
//       Container container = Container.getContainerFromSession(request, reportId);
//       String report ="";
//       report = dao.getReportsLogin(reportId,reportName,bizzRoleName,fromLogin,username);
//String bizzRoleId = container.getReportCollect().reportBizRoles[0];
//        String bizzRoleName =  container.getReportCollect().getReportBizRoleName(bizzRoleId);
//            Map<String, DashboardChartData> chartData = gson.fromJson(gson.toJson(wallData), tarType1);
//            Map<String, String> lines = gson.fromJson(request.getParameter("lines"), tarType);
//       FileReadWrite fileReadWrite = new FileReadWrite();
        ReportManagementDAO reportDao = new ReportManagementDAO();
//       LoginReportMeta layoutDetails = reportDao.setLoginchartForm(request);
//       String reportId = request.getParameter("reportId");
//       String reportName = request.getParameter("reportName");
//       String bizzRoleName = request.getParameter("bizzRoleName");
//       String fromLogin = request.getParameter("fromLogin");
//       String username = request.getParameter("username");
        PbReportViewerDAO pbdao = new PbReportViewerDAO();
        pbdao.saveChartforLogin(usernameLog, gson.toJson(wallData));
        return null;
    }

    public ActionForward GTKPICalculateFunction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        Gson gson = new Gson();
        Type tarType = new TypeToken<List<String>>() {
        }.getType();
        PbReportViewerDAO dao = new PbReportViewerDAO();
        ReportObjectQuery objectQuery = new ReportObjectQuery();
        String repId = request.getParameter("repId");
        if(repId==null){
            repId=request.getParameter("graphsId");
        }
        String action=request.getParameter("action");
        HttpSession session = request.getSession(false);
        String userid = String.valueOf(session.getAttribute("USERID"));
        String[] measId=null,aggType=null,measName=null;
        if(action!=null && action.equalsIgnoreCase("template")){
        }
        else{
            measId = request.getParameter("measId").split(",");
            aggType = request.getParameter("aggType").split(",");
            measName = request.getParameter("measName").split(",");
        }
        List<String> viewbyIds = gson.fromJson(request.getParameter("viewbyIds"), tarType);
        String chartId = request.getParameter("chartId");
//        List<String> viewByIds = new ArrayList<String>();
//       if(viewbyIds!=null){
//        for(int i=0; i<viewbyIds.length;i++){
//            viewByIds.add(viewbyIds[i].replace("[", "").replace("]", ""));
//        }
//       }
//       ArrayList<String> viewList = new ArrayList<>();
//       viewList.add(viewByIds.get(0));
        String timeClause = "";
        String dimSecClause = "";
        Container container = Container.getContainerFromSession(request, repId);
        if(action==null || (!action.equalsIgnoreCase("template"))){
        timeClause = objectQuery.getCalenderTime(container, measId[0].toString());
        dimSecClause = objectQuery.getDimSecClause(viewbyIds, userid,new HashMap<String, List>());
        }
        
        String result = dao.GTKPICalculateFunction(request, repId, measId, measName, aggType, chartId, timeClause, dimSecClause, container);
        try {
            response.getWriter().print(result);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward enableComparisionInKpiDash(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        logger.info("Enter Method");
        HttpSession session = request.getSession(false);
        ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
        PbReportViewerBD repViewerBD = new PbReportViewerBD();
        String eleId = "";
        PbDb pbdb = new PbDb();
        HashMap map = null;
        Container container = null;
        String REPORTID = null;
        String tableMsrs = null;
        boolean qryReq = false;
        String ComparisionMsr = null;
        PrintWriter out = response.getWriter();
        if (session != null && session.getAttribute("PROGENTABLES") != null) {
            map = (HashMap) session.getAttribute("PROGENTABLES");
            REPORTID = request.getParameter("REPORTID");

            container = (Container) map.get(REPORTID);
            HashMap<String, String> crosstabMeasureId = ((PbReturnObject) container.getRetObj()).crosstabMeasureId;

            if (container.isReportCrosstab()) {
                ComparisionMsr = crosstabMeasureId.get(request.getParameter("CmprenableMsr")).replace("A_", "");
            } else {
                ComparisionMsr = request.getParameter("CmprenableMsr");
            }
            String isdisable = request.getParameter("isdisable");
            ArrayList<String> dependentmsrIds = new ArrayList<String>();
            ArrayList<String> AutohidemsrIds = new ArrayList<String>();
            tableMsrs = "";
            //PbDb pbdb = new PbDb();
            PbReturnObject retobj = null;
            PbReturnObject pbro2 = null;
            ArrayList<String> DisplayColumns = container.getDisplayColumns();
            container.setisComparisionEnabled(true);
            if (isdisable != null && isdisable.equalsIgnoreCase("false")) {
                for (int k = container.getViewByCount(); k < DisplayColumns.size(); k++) {
                    String msr = "";
                    if (container.isReportCrosstab()) {
                        msr = crosstabMeasureId.get(DisplayColumns.get(k)).replace("A_", "");
                    } else {
                        msr = DisplayColumns.get(k).replace("A_", "");
                    }
                    String Prior_element_id = "";
                    if (msr.equals(ComparisionMsr)) {
                        eleId = "select REF_ELEMENT_ID from prg_user_all_info_details where ELEMENT_ID=" + ComparisionMsr;
                        PbReturnObject pbro = pbdb.execSelectSQL(eleId);
                        for (int i = 0; i < pbro.getRowCount(); i++) {
                            String Ref_element = pbro.getFieldValueString(i, 0);
                            String Query = "select ELEMENT_ID from prg_user_all_info_details where REF_ELEMENT_ID=" + Ref_element + " and REF_ELEMENT_TYPE=2";
                            pbro2 = pbdb.execSelectSQL(Query);
                            if (pbro2 != null && pbro2.rowCount > 0) {
                                Prior_element_id = pbro2.getFieldValueString(0, 0);
                                for (int k1 = container.getViewByCount(); k1 < DisplayColumns.size(); k1++) {
                                    String msr1 = null;
                                    if (container.isReportCrosstab()) {
                                        msr1 = crosstabMeasureId.get(DisplayColumns.get(k1)).replace("A_", "");
                                    } else {
                                        msr1 = DisplayColumns.get(k1).replace("A_", "");
                                    }
                                    if (msr1.equals(Prior_element_id)) {
                                        container.addispriorcoloumn(Prior_element_id, "priorcoloumn");
                                    }
                                }
                                container.addComparisionEnabledmsr(msr, Prior_element_id);
                            }
                            if (k == DisplayColumns.size() - 1) {
                                tableMsrs = tableMsrs + msr + "," + Prior_element_id;
                            } else {
                                tableMsrs = tableMsrs + msr + "," + Prior_element_id + ",";
                            }
                        }
                    } else {
                        if (k == DisplayColumns.size() - 1) {
                            tableMsrs = tableMsrs + msr;
                        } else {
                            tableMsrs = tableMsrs + msr + ",";
                        }
                    }
                }
            } else {
                HashMap<String, String> CmpareMap = null;
                HashMap<String, String> CmpareMap1 = null;
                ArrayList<String> CmprEnabledMsrs = null;
                ArrayList<String> CmprEnabledMsrs1 = null;
                ArrayList<String> PriorMsrs = null;
                CmpareMap = container.getComparisionEnabledmsr();
// CmpareMap1=container.getComparisionEnabledmsr();
                CmprEnabledMsrs = new ArrayList(CmpareMap.keySet());
                if (CmpareMap != null) {
                    CmpareMap1 = (HashMap) CmpareMap.clone();
                    CmprEnabledMsrs1 = new ArrayList(CmpareMap1.keySet());
                    CmpareMap.clear();
                }
                for (int p = 0; p < CmprEnabledMsrs.size(); p++) {
                    if (!CmprEnabledMsrs.get(p).equals(ComparisionMsr)) {
                        container.addComparisionEnabledmsr(CmprEnabledMsrs.get(p), CmpareMap1.get(CmprEnabledMsrs.get(p)));
                    }
                }
                PriorMsrs = new ArrayList<String>();
//    CmpareMap=container.getComparisionEnabledmsr();
//    CmprEnabledMsrs=new ArrayList(CmpareMap1.keySet());
                for (int p = 0; p < CmprEnabledMsrs1.size(); p++) {
                    PriorMsrs.add(CmpareMap1.get(CmprEnabledMsrs1.get(p)));
                }
                for (int k = container.getViewByCount(); k < DisplayColumns.size(); k++) {
                    String msr = null;
                    if (container.isReportCrosstab()) {
                        msr = crosstabMeasureId.get(DisplayColumns.get(k)).replace("A_", "");
                    } else {
                        msr = DisplayColumns.get(k).replace("A_", "");
                    }
                    String Prior_element_id = "";
                    if (PriorMsrs.contains(msr)) {
                        HashMap<String, String> priorcoloumn = null;
                        priorcoloumn = container.getispriorcoloumn();
                        if (priorcoloumn != null) {
                            String enablevllue = priorcoloumn.get(msr);
                            if (enablevllue != null && enablevllue.equalsIgnoreCase("priorcoloumn")) {
                                tableMsrs = tableMsrs + msr + ",";
                            } else {
                            }
                        }
                    } else {
                        if (k == DisplayColumns.size() - 1) {
                            tableMsrs = tableMsrs + msr;
                        } else {
                            tableMsrs = tableMsrs + msr + ",";
                        }
                    }
                }
                qryReq = repViewerBD.tableMeasureChanges(container, tableMsrs);
            }
            if (AutohidemsrIds != null && AutohidemsrIds.size() > 0) {
                container.getReportCollect().getHideMeasures().addAll(AutohidemsrIds);
            }
//            container.getReportCollect().setHideMeasures(AutohidemsrIds);
            if (pbro2 != null && pbro2.rowCount > 0) {
                qryReq = repViewerBD.tableMeasureChanges(container, tableMsrs);
            }
            PbReportCollection collect = container.getReportCollect();
            out.print(qryReq);
            logger.info("Exit Method");
            return null;
        } else {
            return mapping.findForward("sessionExpired");
        }

    }

    public ActionForward getStatistics(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        String mainMeasure = request.getParameter("columnName");
        String reportId = request.getParameter("reportId");
        String statType = request.getParameter("type");
        PrintWriter out;
        try {
            out = response.getWriter();
            Container container = Container.getContainerFromSession(request, reportId);
            DataFacade facade = new DataFacade(container);
            double statisticValue = 0.0f;
            ArrayList<BigDecimal> statData = facade.retrieveMeasureData(mainMeasure);
            if (statType != null && statType.equalsIgnoreCase("deviation")) {
                statisticValue = StatUtil.STAT_HELPER.StandardDeviation(statData);
            } else if (statType != null && statType.equalsIgnoreCase("mean")) {
                statisticValue = StatUtil.STAT_HELPER.Mean(statData);
            } else if (statType != null && statType.equalsIgnoreCase("median")) {
                statisticValue = StatUtil.STAT_HELPER.Median(statData);
            } else if (statType != null && statType.equalsIgnoreCase("variance")) {
                statisticValue = StatUtil.STAT_HELPER.Variance(statData);
            }
            out.print(statisticValue);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    public ActionForward comparableCharts(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        String reportId = request.getParameter("reportId");
        PbReportViewerDAO pbDAO = new PbReportViewerDAO();
        String fileLocation = "";
        HttpSession session = request.getSession(false);
        if (session != null) {
            fileLocation = pbDAO.getFilePath(session);
        } else {
            fileLocation = "/usr/local/cache";
        }
        String reportName = request.getParameter("reportName");
        String data = null;
        PrintWriter out = null;
        try {
            out = response.getWriter();
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        ReportManagementDAO dao = new ReportManagementDAO();
        try {
//            data = dao.getComparableChartData(request,fileLocation);
        } catch (Exception ex) {
            logger.error("Exception:", ex);
        }
        out.print(data);
        return null;
    }

// added by krishan pratap
    public ActionForward getToggle(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        PrintWriter out;
        String ReportId = request.getParameter("reportid");
        try {
            out = response.getWriter();
            ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
            String ComparisonDate = reportTemplateDAO.comparisonDate(ReportId);
            out.print(ComparisonDate);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
        return null;
    }

    //Added by shobhit fro multi dashboard on 22/09/15
    public ActionForward getSelectedDimsFacts(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception {
        HttpSession session = request.getSession(false);
        PbReportViewerDAO pbDao = new PbReportViewerDAO();
        HashMap map = null;
        HashMap allViewBys = new HashMap();
        List allViewIds = new ArrayList<String>();
        List allViewNames = new ArrayList<String>();
        List rowViewIdList = new ArrayList<String>();
        List colViewIdList = new ArrayList<String>();
        List rowNamesLst = new ArrayList<String>();
        List colNamesLst = new ArrayList<String>();
        String reportId = request.getParameter("REPORTID");
        String fromdesigner = request.getParameter("fromdesigner");
        String fileLocation = "";
        if (session != null) {
            fileLocation = pbDao.getFilePath(session);
        } else {
            fileLocation = "/usr/local/cache";
        }
        if (fromdesigner == null) {
            fromdesigner = "";
        }
        List aggregationType = new ArrayList();
        ReportObjectMeta reportMeta = new ReportObjectMeta();
        FileReadWrite readWrite = new FileReadWrite();
        String metaString = readWrite.loadJSON(fileLocation + "/analyticalobject/R_GO_" + reportId + ".json");
        Gson gson = new Gson();
        Type tarType = new TypeToken<ReportObjectMeta>() {
        }.getType();
        reportMeta = gson.fromJson(metaString, tarType);

        Type goTypedash = new TypeToken<XtendReportMeta>() {
        }.getType();
        FileReadWrite fileReadWrite = new FileReadWrite();
        Container container = Container.getContainerFromSession(request, reportId);
        String bizzRoleId = container.getReportCollect().reportBizRoles[0];
        String bizzRoleName = container.getReportCollect().getReportBizRoleName(bizzRoleId);
        String reportName = container.getReportName();
//        String reportName=
        XtendReportMeta xtendsReportMeta = new XtendReportMeta();
        String visualName = request.getParameter("visualName");
        String metaFilePath = "/usr/local/cache/" + bizzRoleName.replaceAll("\\W", "").trim() + "/" + reportName.replaceAll("\\W", "").trim() + "_" + reportId + "/" + reportName.replaceAll("\\W", "").trim() + "_" + reportId + "_" + visualName + ".json";
        String gimeta = "";
        gimeta = fileReadWrite.loadJSON(metaFilePath);
        xtendsReportMeta = gson.fromJson(gimeta, goTypedash);
        List<String> viewBys = xtendsReportMeta.getViewbys();
        List<String> viewByIds = xtendsReportMeta.getViewbysIds();
        List<String> measBys = xtendsReportMeta.getMeasures();
        List<String> measByIds = xtendsReportMeta.getMeasuresIds();
        List<String> selectedViewBys = new ArrayList<String>();
        List<String> selectedViewByIds = new ArrayList<String>();
        List<String> dimIds = xtendsReportMeta.getSelectedViewBys();
        List<String> selectedMeasBys = new ArrayList<String>();
        List<String> selectedMeasIds = xtendsReportMeta.getSelectedMeasBys();
//        List<String> aggType = xtendsReportMeta.getAggregations();
        for (int i = 0; i < dimIds.size(); i++) {
            int j = 0;
            for (j = 0; j < viewByIds.size(); j++) {
                if (dimIds.get(i).equalsIgnoreCase(viewByIds.get(j))) {
                    break;
                }
            }
            selectedViewBys.add(viewBys.get(j));
            selectedViewByIds.add(viewByIds.get(j));
        }
        for (int i = 0; i < selectedMeasIds.size(); i++) {
            int j = 0;
            for (j = 0; j < measByIds.size(); j++) {
                if (selectedMeasIds.get(i).equalsIgnoreCase(measByIds.get(j))) {
                    break;
                }
            }
            selectedMeasBys.add(measBys.get(j));
        }
        for (int i = 0; i < selectedViewByIds.size(); i++) {
            allViewIds.add(selectedViewByIds.get(i));
            allViewNames.add(selectedViewBys.get(i));
        }
        for (int i = 0; i < selectedMeasIds.size(); i++) {
            allViewIds.add(selectedMeasIds.get(i));
            allViewNames.add(selectedMeasBys.get(i));
        }
        session.setAttribute("allViewIds", allViewIds);
        session.setAttribute("allViewNames", allViewNames);
        return null;
    }
    //end

    // added by krishan pratap for report download in template
    public ActionForward exportReportsIntoExcelsheetsTemp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {   
        String ReportId = "";
        String UserId = "";
        String reportIds = "";
        String sheetNme = "";
        String lineNmr = "";
        String colNmr = "";
        String header = "";
        String gTotal = "";
        String[] reportID = null;
        String[] sheetNumbers = null;
        String[] lineNumbers = null;
        String[] colNumbers = null;
        String[] headerValues = null;
        String[] gtValues = null;
        String fileName = "";
        int formCounter = 0;
        reportIds = request.getParameter("reportIds");
        fileName = request.getParameter("fileName");
        if (!reportIds.equalsIgnoreCase("")) {
            reportID = reportIds.split(",");
        }
        // String opType = request.getParameter("Download").toString();
        for (int k = 0; k < reportID.length; k++) {
            String aa = request.getParameter("chkusers" + k);
            //if("on".equalsIgnoreCase(request.getParameter("chkusers"+k))){
            //  reportIds=reportIds+","+request.getParameter("report"+k);
            sheetNme = sheetNme + "," + request.getParameter(reportID[k] + "_sheetName");
            lineNmr = lineNmr + "," + request.getParameter(reportID[k] + "_lineName");
            colNmr = colNmr + "," + request.getParameter(reportID[k] + "_colName");
            header = header + "," + request.getParameter(reportID[k] + "_headName");
            gTotal = gTotal + "," + request.getParameter(reportID[k] + "_gtName");
            //}
        }
        HttpSession session = request.getSession(false);
        PbReportViewerBD reportViewerBD = new PbReportViewerBD();
        PbReportViewerDAO DAO = new PbReportViewerDAO();
        boolean invalidReportAccess = false;
        if (session != null) {
            try {
                int count = 0;
                int totalValRepCount = 0;
//                    if (!reportIds.equalsIgnoreCase("")) {
//                            reportID=reportIds.split(",");
//                    }
                if (!sheetNme.equalsIgnoreCase("")) {
                    sheetNumbers = sheetNme.split(",");
                }
                if (!lineNmr.equalsIgnoreCase("")) {
                    lineNumbers = lineNmr.split(",");
                }
                if (!colNmr.equalsIgnoreCase("")) {
                    colNumbers = colNmr.split(",");
                }
                if (!header.equalsIgnoreCase("")) {
                    headerValues = header.split(",");
                }
                if (!gTotal.equalsIgnoreCase("")) {
                    gtValues = gTotal.split(",");
                }
                if (session.getAttribute("USERID") != null) {
                    UserId = String.valueOf(session.getAttribute("USERID"));
                    String filePath = (String) session.getAttribute("reportAdvHtmlFileProps") + "/importTemplate" + "/" + reportIds;
                    filePath = filePath + "/" + fileName;
                    //String fileName = session.getAttribute("fileName").toString();
                    //   for (int repCounter = 1; repCounter <= reportID.length; repCounter++) {
                    invalidReportAccess = DAO.checkUserReportAccess(reportIds, UserId);
                    if (!invalidReportAccess) {
                        totalValRepCount++;
                        //   }
                    }
                    for (int i = 1; i <= reportID.length; i++) {
                        invalidReportAccess = DAO.checkUserReportAccess(reportIds, UserId);
                        request.setAttribute("REPORTID", reportIds);
                        if (!invalidReportAccess) {
                            PbReportViewerDAO dao = new PbReportViewerDAO();

                            //ArrayList dependentlist= dao.getDependentViewByidsandReps(ReportId);
                            HashMap Viewbyhashmap = new HashMap();
                            session.setAttribute(reportIds, Viewbyhashmap);
                            request.setAttribute("isDepentReport", false);
                            request.setAttribute("exportReport", true);
                            reportViewerBD.prepareReport(reportIds, UserId, request, response,false);
                            Container container = Container.getContainerFromSession(request, reportIds);
                            ArrayList filterValues = new ArrayList();
                            PbExcelGenerator driver1 = new PbExcelGenerator();//
                            String viewbyvalues = "";
                            String reportName = "";
                            int counter = 0;
                            String[] columns = null;
                            String[] disColumns = null;
                            String[] types = null;
                            ArrayList cols = container.getDisplayColumns();
                            ArrayList disCols = container.getDisplayLabels();
                            ArrayList dTypes = container.getDataTypes();

                            ArrayList<String> hiddenCols = container.getReportCollect().getHideMeasures();
                            for (Object hiddenCol : hiddenCols) {
                                int index = cols.indexOf("A_" + hiddenCol.toString());
                                if (index != -1) {
                                    cols.remove(index);
                                    disCols.remove(index);
                                    dTypes.remove(index);
                                }
                            }
                            // end of code for hide measures

                            if (container.getReportName() != null) {
                                reportName = container.getReportName();
                                reportName = reportName.trim().replace(" ", "_");
                                reportName = reportName.replaceAll("\\s", "");
                            }
                            count++;
                            int fromRow = container.getFromRow();
                            int toRow = container.getRetObj().getViewSequence().size();
                            if (cols.contains("CBX")) {
                                columns = new String[cols.size() - 1];
                                disColumns = new String[cols.size() - 1];
                                types = new String[cols.size() - 1];
                            } else {
                                columns = new String[cols.size()];
                                disColumns = new String[cols.size()];
                                types = new String[cols.size()];
                            }
                            for (int j = 0; j < cols.size(); j++) {
                                if (!"CBX".equals(String.valueOf(cols.get(j)))) {
                                    columns[counter] = String.valueOf(cols.get(j));
                                    disColumns[counter] = String.valueOf(disCols.get(j));
                                    if (dTypes.size() <= j) {
                                        types[counter] = "N";
                                    } else {
                                        types[counter] = String.valueOf(dTypes.get(j));
                                    }
                                    counter++;
                                }
                            }
                            String[] values = new String[container.getReportCollect().paramValueList.size()];
                            if (container.getReportCollect().paramValueList != null) {
                                for (int k = 0; k < container.getReportCollect().paramValueList.size(); k++) {
                                    values = container.getReportCollect().paramValueList.get(k).toString().split(":");
                                    viewbyvalues = values[1];
                                    if (!viewbyvalues.contains("[All]")) {
                                        String value = (String) container.getReportCollect().paramValueList.get(k);
                                        if (!filterValues.contains(value)) {
                                            filterValues.add(value);
                                        }
                                    }
                                }
                            }
                            String paramType = request.getParameter("paramType");
                            //driver1.setColorCodeMap(ColorCodeMap);
                            driver1.setFilterValues(filterValues);
                            driver1.setParamType(paramType);
                            //driver1.setTimeDetailsArray(timeDetailsArray);
                            driver1.setResponse(response);
                            driver1.setTypes(types);
                            driver1.setDisplayColumns(columns);
                            driver1.setDisplayLabels(disColumns);
                            //driver1.setDisplayType(displayType);
                            driver1.setRequest(request);
                            driver1.setFilePaths(container.getImgPaths());
                            driver1.setContainer(container);
                            driver1.setFromRow(fromRow);
                            driver1.setToRow(toRow);
                            //driver1.setLogoPath(this.getServletContext().getRealPath("/").replace("\\.\\", "\\") + "images\\pi_logo.gif");
                            driver1.setRet(container.getRetObj());
                            //driver1.setHeaderTitle(headerTitle);
                            driver1.setColorGroup(container.getColorGroup());
                            driver1.setRepParameter(container.getReportParameter());
                            driver1.setSortColumns(container.getSortColumns());
                            driver1.setSortTypes(container.getSortTypes());
                            driver1.setSortDataTypes(container.getSortDataTypes());
                            driver1.setTotalValidReport(totalValRepCount);
                            driver1.setSheetNumber(Integer.parseInt(sheetNumbers[i]) - 1);
                            driver1.setLineNumber(Integer.parseInt(lineNumbers[i]) - 1);
                            driver1.setColNumber(Integer.parseInt(colNumbers[i]) - 1);
                            driver1.setHeader(headerValues[i]);
                            driver1.setGTotal(gtValues[i]);
                            if (reportName != null && !"".equalsIgnoreCase(reportName)) {
                                reportName = reportName.replaceAll("\\s", "");
                                driver1.setReportName(reportName);
                                // driver1.setFileName(reportName + ".xls");
                                String ext = fileName.substring(fileName.lastIndexOf('.') + 1);//Added by Dinanath for accepting any type of file
                                driver1.setFileName(reportName + "." + ext);
                                //driver1.setFileName(reportName + ".xls");
                                if (ext.equalsIgnoreCase("xls")) {
                                    driver1.createExcelForReportsXLS(count, filePath, fileName);
                                } else if (ext.equalsIgnoreCase("xlsm")) {
                                    driver1.createExcelForReportsXLSM(count, filePath, fileName);
                                } else if (ext.equalsIgnoreCase("xlsx")) {
                                    driver1.createExcelForReportsXLSX(count, filePath, fileName);
                                } else {
                                    logger.warn("Wrong file format because File name is : " + fileName);
                                }
                                //driver1.createExcelForReports(count, filePath, fileName);
                            } else {
                                driver1.setReportName("Excel Report");
                                driver1.setFileName("downloadExcel.xls");
                                String ext = fileName.substring(fileName.lastIndexOf('.') + 1);//Added by Dinanath for accepting any type of file
                                //driver1.setFileName(reportName + "." + ext);
                                //driver1.setFileName(reportName + ".xls");
                                if (ext.equalsIgnoreCase("xls")) {
                                    driver1.createExcelForReportsXLS(count, filePath, fileName);
                                } else if (ext.equalsIgnoreCase("xlsm")) {
                                    driver1.createExcelForReportsXLSM(count, filePath, fileName);
                                } else if (ext.equalsIgnoreCase("xlsx")) {
                                    driver1.createExcelForReportsXLSX(count, filePath, fileName);
                                } else {
                                    logger.warn("Wrong file format because File name is : " + fileName);
                                }
                                // driver1.createExcelForReports(count, filePath, fileName);
                            }
                        }
                        if (session.getAttribute("exportReport") != null) {
                            session.removeAttribute("exportReport");
                        }
                    }
                }
            } catch (Exception exp) {
                logger.error("Exception: ", exp);
                return mapping.findForward("exceptionPage");
            }
        } else {
            return mapping.findForward("sessionExpired");
        }
        return null;
    }

    public ActionForward setSelectedDefaultCompanyId(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws ParseException, IOException {
//        Container container=new Container();
        String ReportId = null;
        PbDisplayLabel dispLab = PbDisplayLabel.getPbDisplayLabel();
        HttpSession session = request.getSession();
        String companyId = request.getParameter("companyId");
        if (request.getParameter("reportId") != null && dispLab != null) {
            ReportId = String.valueOf(request.getParameter("reportId"));
            Container container = null;
            container = Container.getContainerFromSession(request, ReportId);
            container.setDefaultCompanyId(companyId);
            session.setAttribute("Def_Company", companyId);
            dispLab.setDefaultCompanyId(companyId);
            container.setCompanyChangedFlag(true);
            PrintWriter out = response.getWriter();
            out.print("Default Company has set.");
        }
        return null;
    }
    //added By Ram 28NOv15 for unable dimensions

    public ActionForward unableLookup(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String dimName = request.getParameter("getval");
        ReportTemplateDAO dao = new ReportTemplateDAO();
        String msg = dao.unableLookup(dimName);
        PrintWriter out = response.getWriter();
        out.print(msg);
        return null;

    }

    public ActionForward enableLookup(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String dimName = request.getParameter("getval");
        ReportTemplateDAO dao = new ReportTemplateDAO();
        String msg = dao.enableLookup(dimName);
        PrintWriter out = response.getWriter();
        out.print(msg);
        return null;

    }
    //Ended By Ram

    public ActionForward TimeBasedReschedulingReports(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        String stTime = request.getParameter("stTime");
        String endTime = request.getParameter("endTime");
        PbReportViewerDAO dao = new PbReportViewerDAO();
        try {
            SchedulerBD objPlugin = new SchedulerBD();
            // code modified by Amar
            //PbReturnObject retobj=dao.getAllSchedulerdetails();
            PbReturnObject retobj = dao.getAllSchedulerdetailsWithoutETL();
            //end of code mofification by Amar
            ReportSchedule schedule = null;
            Date today = new Date();
            Calendar currentDate = Calendar.getInstance();
            int sysHr = currentDate.get(Calendar.HOUR_OF_DAY);
            int sysMin = currentDate.get(Calendar.MINUTE);
            int tmpHr = 0;
            int tmpMin = 0;
            int sCnt = 1;
            if (retobj != null && retobj.getRowCount() > 0) {
                for (int i = 0; i < retobj.getRowCount(); i++) {
                    tmpHr = 0;
                    tmpMin = 0;
                    Gson json = new Gson();
                    java.lang.reflect.Type type = new TypeToken<List<ReportSchedule>>() {
                    }.getType();
                    schedule = new ReportSchedule();
                    List<ReportSchedule> scheduleList = json.fromJson(retobj.getFieldValueString(i, "SCHEDULER_DETAILS"), type);
                    Date sdate = retobj.getFieldValueDate(i, "SCHEDULE_START_DATE");
                    Date edate = retobj.getFieldValueDate(i, "SCHEDULE_END_DATE");
                    if (scheduleList != null && !scheduleList.isEmpty()) {
                        for (ReportSchedule schedule1 : scheduleList) {
                            schedule = schedule1;
                            schedule.setStartDate(sdate);
                            schedule.setEndDate(edate);
                        }
                    }
                    //  schedule=json.fromJson(retobj.getFieldValueString(i,14), ReportSchedule.class);

                    if (today.before(edate)) {

                        try {
                            //String string1 = "20:11:13";
                            Date time1 = new SimpleDateFormat("HH:mm").parse(stTime);
                            Calendar calendar1 = Calendar.getInstance();
                            calendar1.setTime(time1);

                            //String string2 = "14:49:";
                            Date time2 = new SimpleDateFormat("HH:mm").parse(endTime);
                            Calendar calendar2 = Calendar.getInstance();
                            calendar2.setTime(time2);
                            calendar2.add(Calendar.DATE, 0);

                            String someRandomTime = schedule.getScheduledTime();
                            Date d = new SimpleDateFormat("HH:mm").parse(someRandomTime);
                            Calendar calendar3 = Calendar.getInstance();
                            calendar3.setTime(d);
                            calendar3.add(Calendar.DATE, 0);
                            Date x = calendar3.getTime();
                            if (x.after(calendar1.getTime()) && x.before(calendar2.getTime())) {
                                //checkes whether the current time is between 14:49:00 and 20:11:13.
                                String[] splitScheduleTime = someRandomTime.split(":");
                                tmpMin = sysMin + 2 * sCnt;
                                //int tmpHr = 0;
                                //int tmpMin = Integer.parseInt(splitScheduleTime[1]) + 2 * sCnt;
                                if (tmpMin >= 60) {
                                    tmpHr = sysHr + tmpMin / 60;
                                    tmpMin = tmpMin % 60;
                                } else {
                                    tmpHr = sysHr;
                                }
                                someRandomTime = String.valueOf(tmpHr).concat(":").concat(String.valueOf(tmpMin));
                                logger.info(" " + someRandomTime);
                                schedule.setScheduledTime(someRandomTime);
                                SchedulerBD schedBD = new SchedulerBD();
                                objPlugin.scheduleReport(schedule, true);
                                sCnt++;
                                logger.info(true);
                            }
                        } catch (ParseException e) {
                            logger.error("Exception: ", e);
                        }
                    }
                }
            }
        } catch (Exception e) {
            logger.error("Exception: ", e);
        }

        return null;
    }
    //Code adde by Dina

    public ActionForward downloadZipFile(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        try {
            String zipFile = request.getParameter("fileName");
            response.setContentType("text/html");
            PrintWriter out = response.getWriter();
            String filepath = File.separator + "usr" + File.separator + "local" + File.separator + "cache" + File.separator + "downloadZip" + File.separator;
            String filename = zipFile;
            String finalFileName = filename.replace("Temp", "");
            response.setContentType("APPLICATION/OCTET-STREAM");
            response.setHeader("Content-Disposition", "attachment; filename=\"" + finalFileName + "\"");
            FileInputStream fileInputStream = new FileInputStream(filepath + filename);
            int i;
            while ((i = fileInputStream.read()) != -1) {
                out.write(i);
            }
            fileInputStream.close();
            out.close();
        } catch (Exception e) {
            logger.error("Exception: ", e);
        }
        return null;
    }
    
    public ActionForward callThisEveryXMinute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws ParseException, IOException {
        //added by Dinanath for
        try {
            Writer output;
            File tempFile = null;
            String filePath = null;
            //filePath = "c://usr/local/cache";
            filePath = File.separator + "usr" + File.separator + "local" + File.separator + "cache";
            tempFile = new File(filePath);
            if (tempFile.exists()) {
            } else {
                tempFile.mkdirs();
            }
            tempFile = new File(filePath + "/SystemMemoryInfo.txt");
            String fileStr = "usr" + File.separator + "local" + File.separator + "cache" + File.separator + "SystemMemoryInfo.txt";
            File f = new File(fileStr);
            if (!tempFile.exists()) {
                tempFile.createNewFile();
            }
            output = new BufferedWriter(new FileWriter(tempFile, true)); //clears file every time
            output.append("\r\n**********************************************************************\r\n");
            java.util.Date d = new java.util.Date();
            output.append("*** Informations about the Memory at :").append(d.toString()).append(" ***\r\n");
            output.append("**********************************************************************\r\n ");
            Sigar sigar = new Sigar();
            Mem mem = null;
            CpuPerc cpuPerc = null;
            try {
                mem = sigar.getMem();
                cpuPerc = sigar.getCpuPerc();
            } catch (SigarException se) {
                logger.error("Exception: ", se);
            }

            output.append("Actual total free system memory: " + mem.getActualFree() / 1024 / 1024 + " MB\r\n");
            output.append("Actual total used system memory: " + mem.getActualUsed() / 1024 / 1024 + " MB\r\n");
            output.append("Total free system memory ......: " + mem.getFree() / 1024 / 1024 + " MB\r\n");
            output.append("System Random Access Memory....: " + mem.getRam() + " MB\r\n");
            output.append("Total system memory............: " + mem.getTotal() / 1024 / 1024 + " MB\r\n");
            output.append("Total used system memory.......: " + mem.getUsed() / 1024 / 1024 + " MB\r\n");
            //puPerc cpuPerc = cpu.getCpuPerc();
            output.append("Cpu percentage usage combined: " + cpuPerc.getCombined() * 100 + "\r\n");
            output.append("Cpu percentage usage system: " + cpuPerc.getSys() * 100 + "\r\n");
            output.append("Cpu percentage usage user: " + cpuPerc.getUser() * 100 + "\r\n");
            output.append("Free CPU percentage : " + cpuPerc.getIdle() * 100 + "\r\n\r\n\r\n");
            output.close();
//         try {
//        String line;
//        //Process p = Runtime.getRuntime().exec("ps -p 29492 -L -o pid,tid,psr,pcpu");
//         Process p = Runtime.getRuntime().exec(System.getenv("windir") +"\\system32\\"+"tasklist.exe");
//        BufferedReader input =new BufferedReader(new InputStreamReader(p.getInputStream()));
//        while ((line = input.readLine()) != null) {
//            System.out.println(line); //<-- Parse data here.
//        }
//        input.close();
//    } catch (Exception err) {
//        logger.error("Exception: ", err);
//    }

        } catch (java.lang.UnsatisfiedLinkError usfle) {
            logger.error("Exception: ", usfle);
        } catch (Exception e) {
            logger.error("Exception: ", e);
        }
        return null;
    }
    //added by Dinanath

    public ActionForward delayAllSchedulerByGivenTime(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
        String stTime = request.getParameter("stTime");
        String prepost = request.getParameter("preOrPostMode");
        String schedulerIdsArr = request.getParameter("schedulerIdsArr");
        logger.info(prepost);
        PbReportViewerDAO dao = new PbReportViewerDAO();
        if (stTime != null && !stTime.isEmpty() && schedulerIdsArr != null && !schedulerIdsArr.isEmpty()) {
            try {
                SchedulerBD objPlugin = new SchedulerBD();
                PbReturnObject retobj = dao.getAllSelectedSchedules(schedulerIdsArr);
                ReportSchedule schedule = null;
                Date today = new Date();
                Calendar currentDate = Calendar.getInstance();
                int sysHr = currentDate.get(Calendar.HOUR_OF_DAY);
                int sysMin = currentDate.get(Calendar.MINUTE);
                int tmpHr = 0;
                int tmpMin = 0;
                int sCnt = 1;
                if (retobj != null && retobj.getRowCount() > 0) {
                    for (int i = 0; i < retobj.getRowCount(); i++) {
                        tmpHr = 0;
                        tmpMin = 0;
                        Gson json = new Gson();
                        java.lang.reflect.Type type = new TypeToken<List<ReportSchedule>>() {
                        }.getType();
                        schedule = new ReportSchedule();
                        List<ReportSchedule> scheduleList = json.fromJson(retobj.getFieldValueString(i, "SCHEDULER_DETAILS"), type);
                        Date sdate = retobj.getFieldValueDate(i, "SCHEDULE_START_DATE");
                        Date edate = retobj.getFieldValueDate(i, "SCHEDULE_END_DATE");
                        Date lastSentDate = retobj.getFieldValueDate(i, "LAST_SENT_DATE");
                        if (scheduleList != null && !scheduleList.isEmpty()) {
                            for (ReportSchedule schedule1 : scheduleList) {
                                schedule = schedule1;
                                schedule.setStartDate(sdate);
                                schedule.setEndDate(edate);
                            }
                        }
                        if (today.before(edate)) {

                            String someRandomTime = schedule.getScheduledTime();
                            logger.info("Old schedule Time: " + someRandomTime);
                            String newStartTimeToAdd[] = stTime.split(":");
                            String oldStartTimeToAdd[] = someRandomTime.split(":");
                            int newOldHour = 0;
                            int newOldMinutes = 0;
                            if (prepost.equalsIgnoreCase("plus")) {
                                int OldHoursInMinutes = Integer.parseInt(oldStartTimeToAdd[0]) * 60 + Integer.parseInt(oldStartTimeToAdd[1]);
                                int newHoursInMinutes = Integer.parseInt(newStartTimeToAdd[0]) * 60 + Integer.parseInt(newStartTimeToAdd[1]);
                                newOldMinutes = Math.abs(OldHoursInMinutes + newHoursInMinutes);
                                newOldHour = 0;
                            } else if (prepost.equalsIgnoreCase("minus")) {
                                int OldHoursInMinutes = Integer.parseInt(oldStartTimeToAdd[0]) * 60 + Integer.parseInt(oldStartTimeToAdd[1]);
                                int newHoursInMinutes = Integer.parseInt(newStartTimeToAdd[0]) * 60 + Integer.parseInt(newStartTimeToAdd[1]);
                                newOldMinutes = Math.abs(OldHoursInMinutes - newHoursInMinutes);
                                newOldHour = 0;
                            }
                            if (newOldMinutes >= 60) {
                                newOldHour = newOldHour + newOldMinutes / 60;
                                newOldMinutes = newOldMinutes % 60;
                            }
                            if (newOldHour >= 24) {
                                int noOfDay = newOldHour / 24;//day
                                int noOfHours = newOldHour % 24;//hour
                                newOldHour = noOfHours;
                            }
                            someRandomTime = String.valueOf(newOldHour).concat(":").concat(String.valueOf(newOldMinutes));
                            logger.info("New Schedule Time: " + someRandomTime);
                            schedule.setScheduledTime(someRandomTime);
                            ReportTemplateDAO reportDAO = new ReportTemplateDAO();
                            int schedulerId = schedule.getReportScheduledId();
                            reportDAO.updateSchedulerDetails(String.valueOf(schedulerId), schedule);
                            SchedulerBD schedBD = new SchedulerBD();
                            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                            Date date = new Date();
                            String todaydt = sdf.format(date);
                            String lstsentDate1 = null;
                            if (lastSentDate != null) {
                                lstsentDate1 = sdf.format(lastSentDate);
                            }
                            if (lstsentDate1 == null) {
                                schedBD.scheduleReport(schedule, true);
                            } else if (!String.valueOf(lstsentDate1).equalsIgnoreCase(todaydt)) {
                                schedBD.scheduleReport(schedule, true);
                            } else {
                            }
                        }
                    }
                    response.getWriter().println("All Schedule Report has delayed by " + stTime);
                } else {
                    response.getWriter().println("Something went wrong!!!Please check. ");
                }
            } catch (Exception e) {
                try {
                    response.getWriter().println("All schedule time has not changed and exception is at :" + e);
                    logger.error("Exception: ", e);
                } catch (IOException ex) {
                    logger.error("Exception: ", ex);
                }
            }
        } else {
            response.getWriter().println("Please select delay time or scheduler which you want to delay");
        }
        return null;
    }
    //added by Dinanath

    public ActionForward sendMultiSchedulerNowAtOnce(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
        String mailIds = request.getParameter("emailIds");
        String schedulerIdsArr = request.getParameter("schedulerIdsArr");
        logger.info(mailIds);
        logger.info(schedulerIdsArr);
        PbReportViewerDAO dao = new PbReportViewerDAO();
        if (mailIds != null && !mailIds.isEmpty() && schedulerIdsArr != null && !schedulerIdsArr.isEmpty()) {
            try {
                SchedulerBD objPlugin = new SchedulerBD();
                PbReturnObject retobj = dao.getAllSelectedSchedules(schedulerIdsArr);
                ReportSchedule schedule = null;
                Date today = new Date();
                Calendar currentDate = Calendar.getInstance();
                int tmpHr = 0;
                int tmpMin = 0;
                int sCnt = 1;
                if (retobj != null && retobj.getRowCount() > 0) {
                    for (int i = 0; i < retobj.getRowCount(); i++) {
                        tmpHr = 0;
                        tmpMin = 0;
                        Gson json = new Gson();
                        java.lang.reflect.Type type = new TypeToken<List<ReportSchedule>>() {
                        }.getType();
                        schedule = new ReportSchedule();
                        List<ReportSchedule> scheduleList = json.fromJson(retobj.getFieldValueString(i, "SCHEDULER_DETAILS"), type);
                        Date sdate = retobj.getFieldValueDate(i, "SCHEDULE_START_DATE");
                        Date edate = retobj.getFieldValueDate(i, "SCHEDULE_END_DATE");
                        Date lastSentDate = retobj.getFieldValueDate(i, "LAST_SENT_DATE");
                        if (scheduleList != null && !scheduleList.isEmpty()) {
                            for (ReportSchedule schedule1 : scheduleList) {
                                schedule = schedule1;
                                schedule.setStartDate(sdate);
                                schedule.setEndDate(edate);
                            }
                        }
                        if (today.before(edate)) {

                            String someRandomTime = schedule.getScheduledTime();
                            logger.info("Old schedule Time: " + someRandomTime);
                            int sysHr = currentDate.get(Calendar.HOUR_OF_DAY);
                            int sysMin = currentDate.get(Calendar.MINUTE);
                            sysMin = sysMin + i;
                            if (sysMin >= 60) {
                                sysHr = sysHr + sysMin / 60;
                                sysMin = sysMin % 60;
                            }
                            if (sysHr >= 24) {
                                int noOfDay = sysHr / 24;//day
                                int noOfHours = sysHr % 24;//hour
                                sysHr = noOfHours;
                            }
                            someRandomTime = String.valueOf(sysHr).concat(":").concat(String.valueOf(sysMin));
                            schedule.setScheduledTime(someRandomTime);
                            schedule.setReportmailIds(mailIds);
                            int schedulerId = schedule.getReportScheduledId();
                            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                            Date date = new Date();
                            String todaydt = sdf.format(date);
                            objPlugin.scheduleReportNow(schedule, false);
                        }
                    }
                    response.getWriter().println("Selected Report has scheduled at interval of 2 minute");
                } else {
                    response.getWriter().println("Something went wrong!!!Please check. ");
                }
            } catch (Exception e) {
                try {
                    response.getWriter().println("All schedule time has not changed and exception is at :" + e);
                    logger.error("Exception: ", e);
                } catch (IOException ex) {
                    logger.error("Exception: ", ex);
                }
            }
        } else {
            response.getWriter().println("Please select scheduler which you want to send now");
        }
        return null;
    }
}
