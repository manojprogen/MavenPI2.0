/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.progen.reportview.bd;

import com.google.common.base.Joiner;
import static com.google.common.base.Predicates.*;
import com.google.common.base.Splitter;
import com.google.common.collect.Iterables;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.progen.action.BreadCurmbBean;
import com.progen.cache.ReportCacheManager;
import com.progen.charts.GraphProperty;
import com.progen.charts.JqplotGraphProperty;
import com.progen.charts.ProgenChartDatasets;
import com.progen.charts.ProgenChartDisplay;
import com.progen.datasnapshots.DataSnapshotGenerator;
import com.progen.db.POIDataSet;
import com.progen.db.ProgenDataSet;
import com.progen.jqplot.ProGenJqPlotProperties;
import com.progen.oneView.bd.OneViewBD;
import com.progen.query.RTDimensionElement;
import com.progen.query.RTMeasureElement;
import com.progen.report.bd.PbReportTableBD;
import com.progen.report.charts.PbGraphDisplay;
import com.progen.report.colorgroup.ColorCode;
import com.progen.report.colorgroup.ColorCodeBuilder;
import com.progen.report.colorgroup.ColorCodeRule;
import com.progen.report.colorgroup.ColorGroup;
import com.progen.report.data.DataFacade;
import com.progen.report.display.DisplayParameters;
import com.progen.report.display.util.NumberFormatter;
import com.progen.report.excel.*;
import com.progen.report.insights.InsightsBD;
import com.progen.report.map.MapBD;
import com.progen.report.*;
import com.progen.report.query.PbDashBoardQuery;
import com.progen.report.query.PbReportQuery;
import com.progen.report.query.PbTimeRanges;
import com.progen.report.query.QueryExecutor;
import com.progen.report.segmentation.DimensionSegmentBuilder;
import com.progen.report.segmentation.DimensionSegmentHelper;
import com.progen.report.segmentation.Segment;
import com.progen.report.segmentation.SegmentType;
import com.progen.report.whatIf.WhatIfScenario;
import com.progen.report.whatIf.WhatIfScenarioBD;
import com.progen.report.whatIf.WhatIfScenarioBuilder;
import com.progen.reportdesigner.bd.ReportTemplateBD;
import com.progen.reportdesigner.db.ReportTemplateDAO;
import com.progen.reportview.action.SnapshotDesigner;
import com.progen.reportview.db.PbReportViewerDAO;
import com.progen.reportview.db.ProgenReportViewerDAO;
import com.progen.scheduler.ReportSchedule;
import com.progen.userlayer.db.LogReadWriter;
import com.progen.userlayer.db.UserLayerDAO;
import com.progen.xml.pbXmlUtilities;
import com.sun.org.apache.xerces.internal.parsers.DOMParser;
import java.io.*;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.ArrayList;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import prg.db.ContainerConstants.SortOrder;
import prg.db.*;
import prg.reportscheduler.ReportSchedulerJob;
import prg.util.PbExcelGenerator;
import prg.util.ProgenTimeDefinition;
import utils.db.ProgenConnection;
import utils.db.ProgenParam;

public class PbReportViewerBD extends PbDb {

    public static Logger logger = Logger.getLogger(PbReportViewerBD.class);
    PbReportViewerDAO reportViewerDAO = new PbReportViewerDAO();
    ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
    PbReportCollection reportCollect = new PbReportCollection();
//    PbReportQuery reportQuery = new PbReportQuery();
    ReportTemplateDAO DAO = new ReportTemplateDAO();
    private String userId = null;
    private String bizRoles = null;
    ReportTemplateBD reportBD = new ReportTemplateBD();
    private boolean isSnapShot = false;
    private String snapShotId = null;
    private boolean TimeSeries = false;
    private String reportId = null;
    private boolean overWriteExistingReport = false;
    private boolean hideShowColumns = false;
    private String showGraphTable;
    private boolean overWriteReport = false;
    private String displayFiltersGlobal;
     private ArrayList<String> rowViewIdNames;
    private ArrayList<String> rowViewIds;
    private ArrayList<String> colViewIds;
    private ArrayList<String> timeDetails;
    private ArrayList<String> oneviewtimedetails;
    private ArrayList<String> tempTimeDetails;
    private ArrayList paramwe = new ArrayList();
    private ArrayList<String> pa;
    private String requestCtxPath;
    private BigDecimal d;
    private String measureElementId = "";
    Boolean isCrosstab = false;
    boolean isDepentReport = false;
    String adhocChangeViewby = null;
    pbDashboardCollection dbrdcollect = null;
    String fromBeckup = null;
    String kpidashboard = null;
    boolean adhocviewby = false;
    boolean adhocTime = false;
    public PbReportCollection lockedcollectObj;
    String lockedrepId = null;
    String lockedelemId = null;
    DataFacade facade;
    String filesPath = "";
    String kpiglobal = "";
    String qtrdate = "";
    boolean exportReport = false;
    boolean isonespeedreduce = false;
    boolean fromoneviewschedule = false;
    boolean reporttime = false;
    boolean isAOGOoneview = false;
    HashMap<String, Container> refreshconatinerMap = new HashMap<String, Container>();
    Container lockedContainer = null;
    String fromreport = null;
    String drillreport = null;
    String oneviewid = null;
    public Container container1;
    public Map<String, String> gtCTAvgType = new HashMap<String, String>();
    boolean isAOEnable = true;
    public ArrayList rowViewBys;
    public ArrayList ColViewBys;
    public ArrayList qryColumns;
    public int totalViewBys;
    public int rowViewCount;
    public int NoOfDays;
    public HashMap NonViewByMap;
    HashMap<String, ArrayList<String>> finalMap = null;
    public boolean isfromLocSavedCollect = false;
    ProgenReportViewerBD progenBD = new ProgenReportViewerBD();
    public static String fileLocation="";

    public void prepareReport(String pbReportId, String pbUserId, HttpServletRequest request, HttpServletResponse response,boolean zeroFlag) throws Exception {

        int repPrevStateCnt = 0;
        boolean ShowPrevState = false;
        boolean drillViewCheck = false;
        String drillfromrepId = "0";
        String fromBKP = request.getParameter("fromBKP");
        fromBeckup = fromBKP;
        String istranseposse = request.getParameter("istranseposse");
        qtrdate = request.getParameter("qtrdate");
        String newUIyear = request.getParameter("newUIyear");
        String isdrilltype = request.getParameter("isdrilltype");
        String isreportdrilltype = request.getParameter("reportDrill");
        String dateenable = request.getParameter("dateenable");
        String regIdValue = request.getParameter("regId");
        String saveAsNewFlag = request.getParameter("saveAsnew");
        HashMap inMap; //Added by Amar
        if (request.getParameter("fromoneviewspeedreduce") != null && !request.getParameter("fromoneviewspeedreduce").equalsIgnoreCase("null")) {
            isonespeedreduce = Boolean.parseBoolean(request.getParameter("fromoneviewspeedreduce"));
        }
//        
        HttpSession session = request.getSession(false);
        if (request.getAttribute("isDepentReport") != null) {
            isDepentReport = Boolean.parseBoolean(request.getAttribute("isDepentReport").toString());
        }
        lockedrepId = request.getParameter("fromlockedrep");
        lockedelemId = request.getParameter("lockedElem");
//        Container lockedContainer = null;
// String reporttime=request.getParameter("reporttime");
        String iskpidashboard = (String) request.getAttribute("isKPIDashboard");
        String isTimedashboard = (String) request.getAttribute("isTIMEDashboard");
        String globalkpifilter = (String) request.getParameter("globalkpifilter");
        if (globalkpifilter != null && (globalkpifilter.equalsIgnoreCase("true") || globalkpifilter.equalsIgnoreCase("globalleft"))) {
            kpiglobal = globalkpifilter;
        }
        kpidashboard = iskpidashboard;
        if (isdrilltype != null && isdrilltype.equalsIgnoreCase("true")) {
            session.removeAttribute("fromreport");
        }
        //code added by anitha
        String globalDateFlagForheader = (String) session.getAttribute("dateheader");
        //end of code by anitha
        String isoneview = (String) request.getAttribute("isoneview");
        if (isoneview != null && isoneview.equalsIgnoreCase("true")) {
            isAOGOoneview = true;
        }
        String oneviewtypedate = (String) session.getAttribute("oneviewdatetype");
        String action = request.getParameter("action");
        String action2 = action;
        //added by Dinanath
        String isToggleDate=(String)request.getParameter("isToggle");
        
        if (request.getAttribute("exportReport") != null) {
            exportReport = Boolean.parseBoolean((String) request.getAttribute("exportReport"));
        }
        if (action != null && action.equalsIgnoreCase("datetoggle")) {
            action = "GO";
        }
        if ((action != null && !action.equalsIgnoreCase("null") && action.equalsIgnoreCase("save")) || (action != null && !action.equalsIgnoreCase("null") && action.equalsIgnoreCase("GO"))) {
            action = "open";
        }
        Container container = null;
        adhocChangeViewby = request.getParameter("adhocChangeViewby");

        if (request.getParameter("drillViewCheck") != null) {
            drillViewCheck = true;
        }
        if (request.getParameter("adhocviewby") != null) {
            adhocviewby = true;

        }
        if (request.getParameter("adhocTime") != null) {
            adhocTime = true;

        }
        if (request.getParameter("repPrevStateCnt") != null && !request.getParameter("repPrevStateCnt").equalsIgnoreCase("null")) {
            repPrevStateCnt = Integer.parseInt(request.getParameter("repPrevStateCnt"));
        }
        if (request.getParameter("ShowPrevState") != null && !request.getParameter("ShowPrevState").equalsIgnoreCase("null") && !request.getParameter("ShowPrevState").equalsIgnoreCase("false")) {
            ShowPrevState = Boolean.parseBoolean(request.getParameter("ShowPrevState"));
        }

        if (request.getParameter("drillfromrepId") != null) {
            drillfromrepId = request.getParameter("drillfromrepId").toString();
        }
        ReportTemplateDAO rdao = new ReportTemplateDAO();
        String selectedParams = rdao.getSelectedParamDetails(pbReportId);
        fromreport = (String) session.getAttribute("fromreport");
        //Start of code by Dinanath in Jan2016 for multiple savepoint
        String fileLocation = null;
        PbReportViewerDAO pbDao = new PbReportViewerDAO();
        if (session != null) {
            fileLocation = pbDao.getFilePath(session);
        } else {
            fileLocation = "/usr/local/cache";
        }
        PbReportViewerBD.fileLocation=fileLocation;
        String isRepChanges=request.getParameter("isRepChanges");
        HashMap map;
        if (session != null) {
            //Start of code by Dinanath in Jan2016 for multiple savepoint
            long startTime = System.currentTimeMillis();
            System.out.println("*********************************** startTime to read collect***********************************************  :" + startTime);
            if(isToggleDate!=null && isToggleDate.equalsIgnoreCase("Y")){
                
            }else if (isRepChanges != null && isRepChanges.equalsIgnoreCase("Y")) {
            
            }else if (isreportdrilltype != null && isreportdrilltype.equalsIgnoreCase("Y")) {
            
            }else if (action == null || "open".equals(action2) || "reset".equals(action2)) {
                long startTime2 = System.currentTimeMillis();
                System.out.println("*********************************** startTime to take filename fromdb***********************************************  :" + startTime2);
                String currpath= null;
                String currpath1=null;
                //String currpath = (String) session.getAttribute("COLLECT_OBJPATH_" + pbUserId + "_" + pbReportId);
                //String currpath1 = (String) session.getAttribute("CONTAINER_OBJPATH_" + pbUserId + "_" + pbReportId);
                if (currpath == null) {
                    String currpath2[] = rdao.getCurrentLocalSavePointPath(pbUserId, pbReportId);
                    if (currpath2 != null && currpath2.length != 0 && currpath2.length == 2) {
                        currpath = currpath2[0];
                        currpath1 = currpath2[1];
                    }
                }
                File tempFile = null;
                String filePath = null;
                filePath = fileLocation + File.separator + pbUserId + File.separator + pbReportId;
                if (currpath1 != null && !currpath1.isEmpty()) {
                    try {
                        tempFile = new File(filePath + File.separator + currpath1);
                        if (tempFile.isFile()) {
                           // session.setAttribute("CONTAINER_OBJPATH_" + pbUserId + "_" + pbReportId, currpath1);
                            FileInputStream fileIn2 = new FileInputStream(tempFile);
                            ObjectInputStream in2 = new ObjectInputStream(fileIn2);
                            container = (Container) in2.readObject();
                            in2.close();
                            fileIn2.close();
                        }
                    } catch (Exception ex) {
                        logger.error("Exception:", ex);
                    }
                }
                if (currpath != null && !currpath.isEmpty()) {
                    try {
                        tempFile = new File(filePath + File.separator + currpath);
                        if (tempFile.isFile()) {
                           // session.setAttribute("COLLECT_OBJPATH_" + pbUserId + "_" + pbReportId, currpath);
                            FileInputStream fileIn = new FileInputStream(tempFile);
                            ObjectInputStream in = new ObjectInputStream(fileIn);
                            PbReportCollection collection2 = (PbReportCollection) in.readObject();
                            in.close();
                            fileIn.close();
                            container.setReportCollect(collection2);
                            isfromLocSavedCollect = true;
                            container.setFromLocalCollect(isfromLocSavedCollect);
                        }
                    } catch (Exception ex) {
                        logger.error("Exception:", ex);
                    }
                }
            }//End of code by Dinanath in Jan2016 for multiple savepoint
            long endTime = System.currentTimeMillis();
            System.out.println("*********************************** endTime to read collect***********************************************  :" + endTime);
            System.out.println("*********************************** total time to read collect ***********************************************  :" + (endTime - startTime));
            if (session.getAttribute("PROGENTABLES") != null) {
                map = (HashMap) session.getAttribute("PROGENTABLES");
            } else {
                map = new HashMap();
            }
            if (!isfromLocSavedCollect) {//added by Dinanath
                if (map.get(pbReportId) != null) {
                    container = (Container) map.get(pbReportId);
                    if (session.getAttribute("Def_Company") != null) {
                        container.setDefaultCompanyId(session.getAttribute("Def_Company").toString());
                    }
                } else {
                    action = "open";
                    container = new Container();
                    container.repclctcnt = 0;
                    if (session.getAttribute("Def_Company") != null && !container.getCompanyChangedFlag()) {
                        container.setDefaultCompanyId(session.getAttribute("Def_Company").toString());
                    }
                }
                container.setFromLocalCollect(false);
            }
            if (lockedrepId != null && lockedelemId != null) {
                lockedContainer = (Container) map.get(lockedrepId);
                lockedcollectObj = lockedContainer.getReportCollect();
            }

//Start of code by Nazneen in March14 for Dimension Segmentation
            if (!container.getFromLocalCollect()) {//added by Dinanath
                PbReportViewerDAO pb = new PbReportViewerDAO();
                filesPath = pb.getFilePath(session);
                container.setFilesPath(filesPath);
                container.ReportLayout = (String) session.getAttribute("ReportLayout");
            }
//End of code by Nazneen in March14 for Dimension Segmentation
            // code written by swathi purpose of from oneview olaptable to report in RD
            container.isPrevStateRep(ShowPrevState);
            container.setRepPreStateCnt(repPrevStateCnt);
            container.setfromBKP(fromBKP);
            if (istranseposse != null && istranseposse.equalsIgnoreCase("true")) {
                container.setfromBKP(istranseposse);
            }
            if (!isfromLocSavedCollect) {//added by Dinanath
                if ("open".equals(action)) {
                    if (map.get(pbReportId) != null) {
                        action = "reset";
                    }
                }

                if ("ChangeViewBy".equals(action)) {
                     rowViewIdNames=(ArrayList<String>) session.getAttribute("rowViewByLstName") ;                   
                    rowViewIds = (ArrayList<String>) session.getAttribute("rowViewByLst");
                    colViewIds = (ArrayList<String>) session.getAttribute("colViewByLst");
                } else if ("reset".equals(action)) {
                    container = new Container();
                }
            }
            if (container.getReportCollect() == null) {
                PbReportCollection collect = new PbReportCollection();
                container.setReportCollect(collect);
            }
            //added By Mohit Gupta for setting language access from java files
            Locale locale = null;
            locale = (Locale) session.getAttribute("UserLocaleFormat");
            container.setLocale(locale);
            //ended By mohit gupta
            if (!container.getFromLocalCollect()) {//added by Dinanath
                String ddfroma = null;
                if (session.getAttribute("dateFormat") != null) {
                    ddfroma = session.getAttribute("dateFormat").toString();
                    container.setDateFormat(ddfroma);
                }
                LinkedHashMap onemap1 = new LinkedHashMap();

                if (request.getAttribute("OneviewGraphTimeDetails") != null) {
                    container.setOneviewGraphTimedetails((List<String>) request.getAttribute("OneviewGraphTimeDetails"));
                } else {
                    container.getOneviewGraphTimedetails().clear();
                    if (oneviewtypedate != null && oneviewtypedate.equalsIgnoreCase("true")) {
                        if ((isdrilltype != null && isdrilltype.equalsIgnoreCase("true")) || (isreportdrilltype != null && isreportdrilltype.equalsIgnoreCase("Y"))) {
//                     map = (HashMap) session.getAttribute("ONEVIEWDETAILS");
                            if (fromreport != null && fromreport.equalsIgnoreCase("report")) {
                                container.getoneviewdrilltimedetails().clear();

                            } else {
                                boolean val = container.isReportAccessible();
                                OnceViewContainer onecontainer = null;
                                String advHtmlFileProps = (String) request.getSession(false).getAttribute("advHtmlFileProps");
                                String fileName = request.getSession(false).getAttribute("tempFileName").toString();
                                FileInputStream fis2 = new FileInputStream(advHtmlFileProps + "/" + fileName);
                                ObjectInputStream ois2 = new ObjectInputStream(fis2);
                                onecontainer = (OnceViewContainer) ois2.readObject();
                                List<OneViewLetDetails> oneviewletDetails = onecontainer.onviewLetdetails;
//                                         onevieLet = onecontainer.onviewLetdetails.get(Integer.parseInt(request.getParameter(regIdValue)));
                                ois2.close();
                                if (isdrilltype != null && isdrilltype.equalsIgnoreCase("true")) {
                                    for (int i = 0; i < oneviewletDetails.size(); i++) {
                                        OneViewLetDetails detail = oneviewletDetails.get(i);
                                        String regid = detail.getNoOfViewLets();
                                        String reptype = detail.getReptype();
                                        if (regid != null && regid.equalsIgnoreCase(regIdValue)) {
                                            if (!detail.isOneviewReportTimeDetails() || (reptype != null && reptype.equalsIgnoreCase("measures"))) {
                                                ArrayList timedetails = new ArrayList();
                                                timedetails = (ArrayList) onecontainer.timedetails;
                                                container.setoneviewdrilltimedetails(timedetails);
                                                session.removeAttribute("fromreport");
                                            } else {
                                                drillreport = "reporttime";
                                                fromreport = "report";
                                                session.setAttribute("drillreport", drillreport);
                                                session.setAttribute("fromreport", fromreport);

                                            }
                                        }
                                    }

                                }
                                if (fileName != null) {
                                    if (isreportdrilltype != null && isreportdrilltype.equalsIgnoreCase("Y")) {
                                        String drilltime = (String) session.getAttribute("drillreport");
                                        if (drilltime != null && drilltime.equalsIgnoreCase("reporttime")) {
                                        } else {
                                            request.setAttribute("OneviewGraphTimeDetails", onecontainer.timedetails);
                                            ArrayList timedetails = new ArrayList();

                                            timedetails = (ArrayList) onecontainer.timedetails;
                                            container.setoneviewdrilltimedetails(timedetails);
                                        }

                                    } else if (onecontainer.getFilterBusinessRole() != null && !onecontainer.getFilterBusinessRole().equalsIgnoreCase("select")) {
                                        for (int i = 0; i < oneviewletDetails.size(); i++) {
                                            OneViewLetDetails detail = oneviewletDetails.get(i);
                                            String regid = detail.getNoOfViewLets();
                                            if (regid != null && regid.equalsIgnoreCase(regIdValue)) {
                                                if (!detail.isOneviewReportTimeDetails()) {

                                                    if (onecontainer.getReportParameterValues() != null && !onecontainer.getReportParameterValues().isEmpty()) {
                                                        request.setAttribute("reportParameterVals", onecontainer.getReportParameterValues());
                                                    }
                                                }
                                            }
                                        }
                                        //if(oneviewParams){
                                        onemap1 = (LinkedHashMap) request.getAttribute("reportParameterVals");
                                    }
                                }
                            }
                        } else {
                            container.getoneviewdrilltimedetails().clear();
                        }
                    }
                }
                if (request.getAttribute("OneviewgraphDate") != null) {
                    container.setOneviewGraphDate((String) request.getAttribute("OneviewgraphDate"));
                } else {
                    container.setOneviewGraphDate(null);
                }
                if (request.getAttribute("OneviewtableDate") != null) {
                    container.setOneviewTableDate((String) request.getAttribute("OneviewtableDate"));
                } else {
                    container.setOneviewTableDate(null);
                }
                if (request.getAttribute("OneviewTableTimeDetails") != null) {
                    container.setOneviewTableTimedetails((List<String>) request.getAttribute("OneviewTableTimeDetails"));
                } else {
                    container.getOneviewTableTimedetails().clear();
                }
                container.setDrillViewByCheck(drillViewCheck);
                container.setDrillfromRepId(drillfromrepId);
                if (container.isDrillViewByCheck()) {
                    if (drillfromrepId != null && !drillfromrepId.equalsIgnoreCase("0")) {
                        Container dbrdcontainer = Container.getContainerFromSession(request, container.getDrillfromRepId());
                        dbrdcollect = (pbDashboardCollection) dbrdcontainer.getReportCollect();
                    }
                }
                container.isDependentReport = isDepentReport;
                requestCtxPath = request.getContextPath();
                PbReportRequestParameter reportReqParams = new PbReportRequestParameter(request);
                reportReqParams.setParametersHashMap();
                // Code Added by Amar
                if (session.getAttribute("intMedFltr") != null && session.getAttribute("intMedFltr").toString().equalsIgnoreCase("true")) {
                    inMap = (HashMap) session.getAttribute("IN");
                    container.setIntermediateFilters(inMap);
                    container.setIsIntermediateFilters(true);
                    session.removeAttribute("intMedFltr");
                }
                //End of Code
                if (oneviewtypedate != null && oneviewtypedate.equalsIgnoreCase("true")) {
                    if (isdrilltype != null && isdrilltype.equalsIgnoreCase("true")) {
//              LinkedHashMap onemap1 = new LinkedHashMap();
//            //if(oneviewParams){
//               onemap1 = (LinkedHashMap) request.getAttribute("reportParameterVals");
                        if (onemap1 != null) {
                            Set<String> keys = onemap1.keySet();
                            for (String key : keys) {
                                String keyid = key;
                                String keyforoneviewfilter = "CBOARP" + keyid;
                                Object paramvalone = onemap1.get(keyid);
                                reportReqParams.requestParamValues.put("CBOARP" + keyid, paramvalone);
                            }
                        }
                    }
                }
                if (reportReqParams.requestParamValues.get("isKpiDashboard") != null && reportReqParams.requestParamValues.get("isKpiDashboard").toString().equalsIgnoreCase("true")) {
                    if (reportReqParams.requestParamValues.get("reportDrill") != null && reportReqParams.requestParamValues.get("reportDrill").toString().equalsIgnoreCase("Y")) {
                        action = "open";
                    }
                }
                container.setdateenable(Boolean.parseBoolean(dateenable));
                String parentid = request.getAttribute("REPORTID").toString();
                container.parentid = parentid;
                if (session.getAttribute(parentid) != null) {
                    String dependentReportQuery = null;
                    HashMap dependentViewbyhashmap = null;
                    HashMap Viewbyhashmap = (HashMap) session.getAttribute(parentid);
                    if (Viewbyhashmap != null && !Viewbyhashmap.isEmpty()) {
                        if (Viewbyhashmap.get("dependentReportQuery") != null) {
                            dependentReportQuery = Viewbyhashmap.get("dependentReportQuery").toString();
                        }
                        if (Viewbyhashmap.get("dependentviewbyHashMap") != null) {
                            dependentViewbyhashmap = (HashMap) Viewbyhashmap.get("dependentviewbyHashMap");
                        }
                        if (dependentReportQuery != null && !dependentReportQuery.isEmpty()) {
                            HashMap dependentDetsmap = new HashMap();
                            HashMap viewbyCondiHashMap = new HashMap();
                            dependentDetsmap.put(Viewbyhashmap.get("dependentVieByid"), Viewbyhashmap.get("dependentReportQuery"));
                            container.setDependentviewbyIdQry(dependentDetsmap);
                            container.setDepViewByConditionsmap((HashMap) Viewbyhashmap.get("dependentviewbyHashMap"));
                        } else if (dependentViewbyhashmap != null && !dependentViewbyhashmap.isEmpty()) {
                            container.setDepViewByConditionsmap(dependentViewbyhashmap);
                        } else {
                        }
                    }
                }
                LinkedHashMap onemap = new LinkedHashMap();
                //if(oneviewParams){
                onemap = (LinkedHashMap) request.getAttribute("reportParameterVals");
                // }
                container.setOneviewRepParamDetails(onemap);
                if ("open".equalsIgnoreCase(action)) {
                    HashMap reportSplitMap = new HashMap();
                    ReportTemplateDAO dao = new ReportTemplateDAO();
                    ArrayList splitValues = dao.getSplitValuesForTranspoce(pbReportId);
                    if (splitValues != null && !splitValues.isEmpty()) {
                        if ((Boolean) splitValues.get(0)) {
                            container.setIsSplitBy(true);
                            container.setSplitBy(splitValues.get(1).toString());
                        } else {
                            container.setIsSplitBy(false);
                        }
                    }
                    reportSplitMap.put(pbReportId, splitValues);
                    session.setAttribute("REPOTSPLITMAP", reportSplitMap);
                } else {
                    HashMap reportSplitMap = (HashMap) session.getAttribute("REPOTSPLITMAP");
                    if (reportSplitMap != null) {
                        ArrayList splitValues = (ArrayList) reportSplitMap.get(pbReportId);
                        if (splitValues != null && !splitValues.isEmpty()) {
                            if (Boolean.parseBoolean(splitValues.get(0).toString())) {
                                container.setIsSplitBy(true);
                                container.setSplitBy(splitValues.get(1).toString());
                            } else {
                                container.setIsSplitBy(false);
                            }
                        }

                    }
                }

                if (selectedParams != null && !selectedParams.isEmpty()) {
                    container.setSelectedParameterIds(selectedParams);
                }

                /*
                 * added by srikanth.p for reportDrillPopUp
                 */
                if (request.getParameter("parentReportId") != null) {
                    String parentReportId = request.getParameter("parentReportId");
                    if (map.get(parentReportId) != null) {
                        Container parentContainer = (Container) map.get(parentReportId);
                        if (parentContainer != null) {
                            container.setParentContainerMap(parentReportId, parentContainer);
                        }
                    }

                }

                double version = new PbReportViewerDAO().getReportVersion(pbReportId);
                container.getReportCollect().setReportVersion(version);
                String gtAverage = new PbReportViewerDAO().getGtAverage(pbReportId);
                container.setgTAverage(gtAverage);
                double currentVersion = Double.parseDouble(session.getAttribute("REPORTVERSION").toString());
                container.getReportCollect().setCurrentRepVersion(currentVersion);
                String gTAverage = (String) reportReqParams.requestParamValues.get("GTAverage");
                String actionOf = (String) reportReqParams.requestParamValues.get("action");
                if (actionOf == null) {
                    actionOf = "open";
                }
                if (!actionOf.equalsIgnoreCase("open")) {
                    if (gTAverage != null) {
                        container.setgTAverage(gTAverage);
                    } else {
                        container.setgTAverage(container.getgTAverage());
                    }
                } else {
                    container.setgTAverage(container.getgTAverage());
                }
                //added by Nazneen for multi calander
                if (session.getAttribute("denomTable") != null) {
                    String denomTable = session.getAttribute("denomTable").toString();
                    container.setdenomTable(denomTable);
                }
//             if (reportReqParams.requestParamValues.get("isKpiDashboard") != null && reportReqParams.requestParamValues.get("isKpiDashboard").toString().equalsIgnoreCase("true")){
                String qry = "SELECT ISTIMEDASH from PRG_AR_REPORT_MASTER WHERE REPORT_ID=" + pbReportId;
                PbReturnObject tretobj = new PbReturnObject();
                tretobj = super.execSelectSQL(qry);
                String istimedash = tretobj.getFieldValueString(0, 0);
                boolean timedash = Boolean.parseBoolean(istimedash);
                container.setIsTimedasboard(timedash);
//            }
                //End of Code by Nazneen for multi calander

//            if(isDepentReport){
//                if(session.getAttribute(parentid)==null){
//                  this.prepareReport(action,container,pbReportId,pbUserId,reportReqParams.requestParamValues);
//                }
//            }else{
                String adhocDrillType = request.getParameter("adhocDrillType");
                String nextViewById = request.getParameter("nextViewById");
//              
//              
                String facadePath;
                boolean quickAutorefresh = false;
                if (request.getAttribute("quickAutoRefresh") != null) {
                    quickAutorefresh = Boolean.parseBoolean(request.getAttribute("quickAutoRefresh").toString());
                }
                // 
                if (container.isQuickRefreshEnabled() && container.isRefreshCompareFlag() && container.getViewByCount() < 2
                        && container.getReportCollect().reportColViewbys.isEmpty()) {
                    facadePath = container.getFacadePath();
                    // 
                    facade = (DataFacade) readFileDetails(facadePath);
                    refreshconatinerMap = facade.refreshconatinerMap;
                }
                
//  
                String aoidqry = "select ao_id from prg_ar_report_details where report_id=" + pbReportId;
                PbReturnObject roleobj = super.execSelectSQL(aoidqry);
                String aosid = roleobj.getFieldValueString(0, 0);
                container.AOId = aosid;
//              
                if (!"open".equalsIgnoreCase(action) && container.isQuickRefreshEnabled() && container.isRefreshCompareFlag()
                        && adhocDrillType != null && adhocDrillType.equalsIgnoreCase("drilldown") && container.getViewByCount() < 2
                        && container.getReportCollect().reportColViewbys.isEmpty() && refreshconatinerMap.containsKey(nextViewById)) {
                    container = (Container) refreshconatinerMap.get(nextViewById);
                    container.getReportCollect().updateCollection(true);
                } else if (quickAutorefresh) {
                    //
                } else if (!isDepentReport) {

                    //By Ram
                    String drillVariable = request.getParameter("reportDrill");
                    if(saveAsNewFlag!=null && saveAsNewFlag.equalsIgnoreCase("true")){
                    container.setSaveAsNewRepFlag(true);
                    }

                    if (drillVariable != null && drillVariable.equalsIgnoreCase("Y")) {
                        container.setReportDrill(true);
                        finalMap = new HashMap<String, ArrayList<String>>();
                    } else {
                        finalMap = reportTemplateDAO.getDefaultFilterElementId(request, response, parentid);
                    }
                    container.setInitilizeFilterElement(finalMap);
                    //End by Ram

                    container.ReportLayout = (String) session.getAttribute("ReportLayout");    //added by mohit for kpi and none
                   container.zeroFlag = zeroFlag;       // added by mayank for zero flag
                    if (container.getFromLocalCollect()) {
                    } else {
                        this.prepareReport(action, container, pbReportId, pbUserId, reportReqParams.requestParamValues);
                    }
//                  ProgenTimeDefinition.getInstance(pbReportId,container);
                    ProgenTimeDefinition.instance = new ProgenTimeDefinition(pbReportId, container,pbUserId);
                }
                if (container.getReportCollect().reportIncomingParameters.get("reportDrill") != null && container.getReportCollect().reportIncomingParameters.get("reportDrill").toString().equalsIgnoreCase("Y")) {
                    if ((container.getReportCollect().reportIncomingParameters.get("DDrill") != null && container.getReportCollect().reportIncomingParameters.get("DDrill").toString().equalsIgnoreCase("Y"))) {

                        if ((container.getReportCollect().reportIncomingParameters.get("DrillYear") != null)) {
                            container.setNewUIyr(container.getReportCollect().reportIncomingParameters.get("DrillYear").toString());
                        }
                        if ((container.getReportCollect().reportIncomingParameters.get("DrillQtr") != null)) {
                            container.getReportCollect().Qtrtype = container.getReportCollect().reportIncomingParameters.get("DrillQtr").toString().split("-")[0];
                            container.setNewUiqr(container.getReportCollect().reportIncomingParameters.get("DrillQtr").toString().split("-")[1]);
                        }
                    }
                }
            }//if if(container.getFromLocalCollect()){ closed
            session.setAttribute("oneviewtimedetails", oneviewtimedetails);
            com.progen.users.UserLayerDAO userdao = new com.progen.users.UserLayerDAO();
            HashMap paramhashmapPA = new HashMap();
            int USERID = Integer.parseInt((String) session.getAttribute("USERID"));
            String userType = userdao.getUserTypeForFeatures(USERID);

            paramhashmapPA = userdao.getFeatureListAnaLyzer(userType, USERID);
            if (!isDepentReport) {
                if (container.getReportCollect() != null) {
                    container.setSessionContext(session, container);
                    request.setAttribute("currentURL", container.getReportCollect().completeUrl);
                    request.setAttribute("REPORTID", pbReportId);
                    container.setReportParamDrillAssis(this.getParameterDrillAssistance(container.getReportCollect(), request.getSession(false)));
                    container.setParamSectionDisplay(this.getParameterRegionDisplay(container.getReportCollect(), pbUserId, request.getContextPath(), selectedParams, paramhashmapPA, userType, pbReportId, container));
                    container.setDisplayFiltersGlobal(this.displayFiltersGlobal(container.getReportCollect(), pbReportId));
                    this.updateParameterDrillMapDisplay(container);
                }

//            if ("reset".equalsIgnoreCase(action) && container.getReportCollect() != null)
//                container.setParamSectionDisplay(this.getParameterRegionDisplay(container.getReportCollect(), pbUserId));
////
                if ("open".equalsIgnoreCase(action) || "ChangeViewBy".equalsIgnoreCase(action) || "paramChange".equalsIgnoreCase(action) || "reset".equalsIgnoreCase(action)) {
                    if (container.isMapEnabled()) {
                        MapBD mapbd = new MapBD();
                        mapbd.getGeographyDimensionIds(container);
                        if (!container.getGeographyDimensionIds().isEmpty()) {

                            ArrayList<String> rowViewByids = new ArrayList<String>();
                            rowViewByids = container.getReportCollect().reportRowViewbyValues;
                            boolean enabletopbottomSelection = mapbd.isTopBottomEnabled(container);
                            String TopBtmEnable = "none";
                            if (enabletopbottomSelection) {
                                TopBtmEnable = "block";
                            }
                            if (enabletopbottomSelection) {
                                if (container.getMapMainMeasure().size() > 1) {
                                    String mainMeasure = container.getMapMainMeasure().get(0);
                                    String mainMeasureLabel = container.getMapMainMeasureLabel().get(0);
                                    container.resetMapMainMeasures();
                                    container.resetMapMainMeasureLabels();
                                    container.setMapMainMeasure(mainMeasure);
                                    container.setMapMainMeasureLabel(mainMeasureLabel);
                                }
                            }
                            session.setAttribute("TopBtmEnable", TopBtmEnable);

                            boolean enableViewSelection = mapbd.isGeoDimSelectionEnabled(container);
                            String GeoViewSelection = "none";
                            if (enableViewSelection) {
                                GeoViewSelection = "block";
                            }
                            session.setAttribute("GeoViewSelection", GeoViewSelection);
                        }
                    }
                }
            }//isDependentReport purpose
            else {
                String dependentReportqry = container.getTempRepQry();
                HashMap dependentViewbyhashmap = new HashMap();
                dependentViewbyhashmap = container.getDependentviewbyId();
                HashMap MyDependentRepDetails = new HashMap();
                MyDependentRepDetails.put("dependentReportQuery", dependentReportqry);
                MyDependentRepDetails.put("dependentviewbyHashMap", request.getAttribute("dependentviewbyHashMap"));
                MyDependentRepDetails.put("dependentVieByid", request.getAttribute("dependentVieByid"));
                session.setAttribute(request.getAttribute("REPORTID").toString(), MyDependentRepDetails);
            }

        }
        if(newUIyear!=null && newUIyear!=""){
                   container.setNewUIyr(newUIyear);
                   container.setNewUiqr(newUIyear);
    }
        //added by anitha 
                if(globalDateFlagForheader!=null &&!globalDateFlagForheader.equalsIgnoreCase("")){
                    container.setGlobalDateFlagForheader(globalDateFlagForheader);
                    
            if(session.getAttribute("drillreportflag")!= null && session.getAttribute("drillreportflag")!= ""){
                    String isdrillreportflag=(String)session.getAttribute("drillreportflag");
               if(isdrillreportflag.equalsIgnoreCase("true") && isdrillreportflag!=null ){
                        container.setMeasureDrillType("ReportDrill");
                        session.removeAttribute("drillreportflag");
    }
    }
    }
    }

    public void prepareReport(String action, Container container, String pbReportId, String PbUserId, HashMap requestParamValues) {

//        ProgenLog.log(ProgenLog.FINE, this, "prepareReport", "Entered " + System.currentTimeMillis());
        logger.info("Entered " + System.currentTimeMillis());
        PbReportCollection collect = null;
        ProgenReportViewerBD pRvBD = new ProgenReportViewerBD();//added By Mohit Gupta
        QueryExecutor qryExec = new QueryExecutor();
        ProgenDataSet pbretObj = null;
        ProgenReportViewerDAO pbrpdao=new  ProgenReportViewerDAO();
        String filePath1 = "";
//         container.ReportLayout=container.ReportLayout;
        ArrayList originalColumns = new ArrayList();
        ArrayList displayColumns = new ArrayList();
        ArrayList displayLabels = new ArrayList();
        ArrayList displayLabelskpi = new ArrayList();
        ArrayList displayColumnskpi = new ArrayList();
        ArrayList dataTypes = new ArrayList();
        ArrayList displayTypes = new ArrayList();
        ArrayList links = new ArrayList();
        HashMap replinks = new HashMap();
        ArrayList alignments = new ArrayList();
//        ArrayList signs = new ArrayList();
        HashMap columnsVisibility = new HashMap();
        String dataType = "";
        String[] dbColumns = null;
        String[] columnTypes = null;

        //ArrayList unDisplayedColumns = new ArrayList();
        //variables defined by santhosh.kumar@progenbusiness.com for performance tuning of customize report
        HashMap ParametersHashMap = null;
        HashMap TableHashMap = null;
        HashMap GraphHashMap = null;
        HashMap ReportHashMap = null;
        ArrayList REP = null;
        ArrayList REPNames = null;
        ArrayList CEPNames = null;
        ArrayList Measures = null;
        ArrayList allMeasures = null;
        ArrayList MeasuresNames = null;
        ArrayList Parameters = null;
        ArrayList ParametersNames = null;
        ArrayList ReportTimeParams = null;
        ArrayList ReportTimeParamsNames = null;
        String[] ParameterStr = null;
        String[] TimeParametersStr = null;
        HashMap DisplayNamesMap = null;
        ArrayList reportQryElementIds = null;
        ArrayList reportQryAggregations = null;
        ArrayList reportQryColNames = null;
        ArrayList reportQryColTypes = null;
        HashMap<String, ArrayList<String>> colProperties = new HashMap<String, ArrayList<String>>();
        Boolean isRTmeasExists = false;
        //String action = request.getParameter("action");

        //code added by susheela on 02/12/2009
        //String PbUserId = null;
        StringBuffer bizRolesSb = new StringBuffer();

        HashMap TableProperties = null;
        boolean isMeasChangeEvent = false; //is Measure Change Event
        boolean isGrpMeasChgEvent = false; //graph column change event
        boolean ChangeViewByEvent = false; //Change View By event
        boolean isParmChngEvent = false; //parameter Change event
        boolean isOpenRepEvent = false; //report open Event
        boolean isExportExEvent = false;// export multiple excel Event
        boolean isGrpByAnlys = false; //Group By Analysis
        boolean isMapMeasChgEvent = false; //Map Measure Change
        boolean isDrillDown = false;
        PbReturnObject newCrossRetObj = null;
        PbReturnObject newImportExcelRetObj = null;
        HashMap<String, String> CrosstabMsrMap = new HashMap<String, String>();

//        ProgenLog.log(ProgenLog.FINE, this, "prepareReport", "Action " + action);
        logger.info("Action " + action);
        try {

            if ("ChangeViewBy".equals(action)) {
                ChangeViewByEvent = true;
            } else if ("measChange".equals(action)) {
                isMeasChangeEvent = true;
            } else if ("paramChange".equals(action)) {
                isParmChngEvent = true;
            } else if ("grpMeasChange".equals(action)) {
                isGrpMeasChgEvent = true;
            } else if ("mapMeasChange".equals(action)) {
                isMapMeasChgEvent = true;
            } else if ("grpByAnalysis".equals(action)) {
                isGrpByAnlys = true;
            } else if ("reset".equals(action)) {
                isOpenRepEvent = true;
            } else if ("open".equals(action)) {
                isOpenRepEvent = true;
            } else if ("design".equals(action) || "fromDesigner".equals(action)) {
                isOpenRepEvent = true;
            } else if ("exportEx".equals(action)) {
                isExportExEvent = true;
            } else if ("drilldown".equalsIgnoreCase(action)) {
                isDrillDown = true;
            }

            container.setTableId(pbReportId);
            container.setReportId(pbReportId);
            PbReportViewerBD viewerBd = new PbReportViewerBD();
//                PbReportViewerDAO daoonnsrattr=new PbReportViewerDAO();
//                HashMap mapformsrattr=daoonnsrattr.modifyMeasureAttrreport(pbReportId,container);
//                container.setmodifymeasureAttrChnge(mapformsrattr);

            if (isOpenRepEvent) {
                progenBD.MultiCalendar(container, pbReportId);
            }
            if (ChangeViewByEvent) //after Change View By no more Group Analysis
            {
                container.setParameterGroupAnalysisHashMap(new HashMap());
                container.setViewByChanged(true);
            } else if (isOpenRepEvent) {
                container.setViewByChanged(false);
            }
            if (requestParamValues.get("reportDrill") != null && requestParamValues.get("reportDrill").toString().equalsIgnoreCase("Y")) {
                isOpenRepEvent = true;
                action = "open";
            }
            ParametersHashMap = container.getParametersHashMap();
            TableHashMap = container.getTableHashMap();
            GraphHashMap = container.getGraphHashMap();
            ReportHashMap = container.getReportHashMap();

            ParametersHashMap = (ParametersHashMap == null) ? new HashMap() : ParametersHashMap;
            TableHashMap = (TableHashMap == null) ? new HashMap() : TableHashMap;
            GraphHashMap = (GraphHashMap == null) ? new HashMap() : GraphHashMap;
            ReportHashMap = (ReportHashMap == null) ? new HashMap() : ReportHashMap;

            if (ChangeViewByEvent) {
                collect = container.getReportCollect();
                if (this.qtrdate != null) {
                    collect.Qtrtype = this.qtrdate;
                }
//                    rowViewIds = (ArrayList<String>) container.getRowViewList();
//                    colViewIds = (ArrayList<String>) container.getColumnViewList();
                if (collect.reportRowViewbyValues.toString().equalsIgnoreCase(rowViewIds.toString())
                        && collect.reportColViewbyValues.toString().equalsIgnoreCase(colViewIds.toString())
                        && !rowViewIds.contains("TIME")) {
                    return;
                } else {
                    //collect.getChangeViewByData(rowViewIds, colViewIds);
                    collect.reportQryElementIds = (ArrayList) ReportHashMap.get("reportQryElementIds");
                    collect.reportQryColNames = (ArrayList) ReportHashMap.get("reportQryColNames");
                    collect.reportQryColTypes = (ArrayList) ReportHashMap.get("reportQryColTypes");
                    collect.reportQryAggregations = (ArrayList) ReportHashMap.get("reportQryAggregations");
                    if (colViewIds.size() > 0) {
                        //you are making a Crosstab
                        //if we use ReportHashMap Crosstab will display back all the Measures
                        //Instead we will have to use only the Measures shown in table
                        //limitation Graph will take the same Measure
                        //from here on in the Analysis we will be limited to the bunch of Measures in Progen Table
                        //alternative would be maintain Crosstab Measures in separate list or something
                        //and also maintain Hidden Crosstab Measures
                        ArrayList measLst = (ArrayList) container.getTableHashMap().get("Measures");
                        ArrayList measNameLst = (ArrayList) container.getTableHashMap().get("MeasuresNames");
                        reportQryElementIds = new ArrayList();
                        for (int i = 0; i < measLst.size(); i++) {
                            //if there is a %wise measure do not add it to the Report Query Elements
                            //if ( ((String)measLst.get(i)).lastIndexOf(PercentColumn) == -1 )
                            if (!RTMeasureElement.isRunTimeMeasure(measLst.get(i).toString())) {
                                reportQryElementIds.add(((String) measLst.get(i)).substring(2)); //remove A_
                            } else {
                                //remove all Run Time Measures while converting to Crosstab
                                measLst.remove(i);
                                measNameLst.remove(i);
                                i--;
                            }

                        }
                        reportQryAggregations = reportTemplateDAO.getReportQryAggregations(reportQryElementIds);
                        reportQryColNames = reportTemplateDAO.getReportQryColNames();
                        reportQryColTypes = reportTemplateDAO.getReportQryColTypes();
                        collect.reportQryElementIds = reportQryElementIds;
                        collect.reportQryColNames = reportQryColNames;
                        collect.reportQryColTypes = reportQryColTypes;
                        collect.reportQryAggregations = reportQryAggregations;
                    } else //making a Normal Report from Crosstab
                    //When we get Measure list, if we user has hidden any column in Table
                    //it also need to be included in the Query, because the hidden column may appear in graph
                    {
                        if (collect.reportColViewbyValues != null && !collect.reportColViewbyValues.isEmpty()) {
                            ArrayList measLst = (ArrayList) ((ArrayList) container.getTableHashMap().get("Measures")).clone();
                            String graphIds = (String) container.getGraphHashMap().get("graphIds");//.split(",");
                            if (graphIds != null && graphIds.length() > 0) {
                                String[] aGraphId = graphIds.split(",");
                                for (int i = 0; i < aGraphId.length; i++) {
                                    HashMap graphMap = (HashMap) container.getGraphHashMap().get(aGraphId[i]);
                                    LinkedHashMap grphMeasMap = (LinkedHashMap) graphMap.get("graphMeasures");
                                    if (grphMeasMap != null) {
                                        Set<String> elementIdSet = grphMeasMap.keySet();
                                        Iterator iter = elementIdSet.iterator();
                                        while (iter.hasNext()) {
                                            String aGraphMeas = (String) iter.next();
                                            if (!measLst.contains(aGraphMeas)) {
                                                measLst.add(aGraphMeas);
                                            }
                                        }
                                    }
                                }
                            }
                            reportQryElementIds = new ArrayList();
                            for (int i = 0; i < measLst.size(); i++) {
                                //if there is a %wise measure do not add it to the Report Query Elements
                                if (!RTMeasureElement.isRunTimeMeasure((String) measLst.get(i))) {
                                    reportQryElementIds.add(((String) measLst.get(i)).substring(2)); //remove A_
                                    reportQryAggregations = reportTemplateDAO.getReportQryAggregations(reportQryElementIds);
                                    reportQryColNames = reportTemplateDAO.getReportQryColNames();
                                    reportQryColTypes = reportTemplateDAO.getReportQryColTypes();
                                }
                            }
                            collect.reportQryElementIds = reportQryElementIds;
                            collect.reportQryColNames = reportQryColNames;
                            collect.reportQryColTypes = reportQryColTypes;
                            collect.reportQryAggregations = reportQryAggregations;
                            if (container.isSummarizedMeasuresEnabled()) {
                                HashMap summarizedmMesMap = container.getSummerizedTableHashMap();
                                ArrayList summmeas = new ArrayList();
                                ArrayList summmeasTitle = new ArrayList();
                                ArrayList summerizedQryAggregations = new ArrayList();
                                ArrayList summerizedQryColTypes = new ArrayList();
                                if (summarizedmMesMap != null && !summarizedmMesMap.isEmpty()) {
                                    summmeas.addAll((List<String>) summarizedmMesMap.get("summerizedQryeIds"));
                                    summmeasTitle.addAll((List<String>) summarizedmMesMap.get("summerizedQryColNames"));
                                    summerizedQryAggregations.addAll((List<String>) summarizedmMesMap.get("summerizedQryAggregations"));
                                    summerizedQryColTypes.addAll((List<String>) summarizedmMesMap.get("summerizedQryColTypes"));
                                }
                                for (int i = 0; i < summmeas.size(); i++) {
                                    if (!collect.reportQryElementIds.contains(summmeas.get(i))) {
                                        collect.reportQryElementIds.add(summmeas.get(i).toString());
                                    }
                                    if (!collect.reportQryColNames.contains(summmeasTitle.get(i))) {
                                        collect.reportQryColNames.add(summmeasTitle.get(i).toString());
                                        collect.reportQryColTypes.add(summerizedQryColTypes.get(i).toString());
                                        collect.reportQryAggregations.add(summerizedQryAggregations.get(i).toString());
                                    }

                                }
                            }
                        }
                    }
                }
                collect.reportRowViewbyValuesNames = rowViewIdNames;
                collect.reportRowViewbyValues = rowViewIds;//(ArrayList<String>) session.getAttribute("rowViewByLst");
                collect.reportColViewbyValues = colViewIds;//(ArrayList<String>) session.getAttribute("colViewByLst");
                if (timeDetails != null) {
                    tempTimeDetails = collect.timeDetailsArray;
                    collect.timeDetailsArray = timeDetails;
                }

                TableHashMap.put("ColorCodeMap", null);
//                    
                if (adhocChangeViewby != null && adhocChangeViewby.equals("true")) {
                    collect.reportIncomingParameters = requestParamValues;
                    collect.dateFormat = container.getDateFormat();
                    try {
                        collect.updateCollection(!container.isViewByChanged());
                    } catch (ParseException ex) {
                    }
                }

            } else if (isGrpMeasChgEvent || isMeasChangeEvent || isMapMeasChgEvent) {
                collect = container.getReportCollect();
                ReportHashMap = container.getReportHashMap();
                collect.reportQryElementIds = (ArrayList) ReportHashMap.get("reportQryElementIds");
                collect.reportQryColNames = (ArrayList) ReportHashMap.get("reportQryColNames");
                collect.reportQryColTypes = (ArrayList) ReportHashMap.get("reportQryColTypes");
                collect.reportQryAggregations = (ArrayList) ReportHashMap.get("reportQryAggregations");
            } else if (isGrpByAnlys) {
                collect = container.getReportCollect();
            } else {
                collect = container.getReportCollect();
//                ProgenLog.log(ProgenLog.FINE, this, "prepareReport", "getParamMetadata in Collection " + System.currentTimeMillis());
                logger.info("getParamMetadata in Collection " + System.currentTimeMillis());

                if (this.qtrdate != null && !this.qtrdate.equalsIgnoreCase("null")) {
                    collect.Qtrtype = this.qtrdate;
                }
                boolean desing = false;
                if ("design".equals(action) || "fromDesigner".equals(action)) {
                    desing = true;
                    if (!"fromDesigner".equals(action)) {
                        collect.setDesign(desing);
                    }
                }
//                   if(container.isDrillViewByCheck() && isOpenRepEvent){
//                       collect.overrideViewBys1 = "isChecked";
//                   }
                if (isOpenRepEvent) {

                    collect.initializeDefaultFilter = finalMap; //By Ram
                    if (fromBeckup == null && !"design".equals(action) && !"fromDesigner".equals(action)) {
                        if (collect == null) //open event
                        {
                            collect = new PbReportCollection();
                        }
                        if (this.qtrdate != null && !this.qtrdate.equalsIgnoreCase("null")) {
                            collect.Qtrtype = this.qtrdate;
                        }
                        collect.reportId = pbReportId;
                        collect.isparent = container.isDependentReport;
                        collect.parentRepId = container.parentid;
                        collect.reportIncomingParameters = requestParamValues;
                        collect.ctxPath = requestCtxPath;//request.getContextPath();
                        if (!isfromLocSavedCollect) {
                            collect.getParamMetaData(isOpenRepEvent);//cccccccccccccc
                        }
                        // added by sandeep
                        if (collect.reportIncomingParameters.get("isKpiDashboard") != null && collect.reportIncomingParameters.get("isKpiDashboard").toString().equalsIgnoreCase("true")) {
                            if (collect.reportIncomingParameters.get("reportDrill") != null && collect.reportIncomingParameters.get("reportDrill").toString().equalsIgnoreCase("Y")) {
                                Set paramEleIds = collect.reportParameters.keySet();
                                ArrayList<String> reportParam = new ArrayList();
// ArrayList<String> reportParam = collect.reportParamIds;
                                Iterator paramEleIter = paramEleIds.iterator();
                                String paramElement;
                                Object paramObject = null;
                                ArrayList paramInfo;
                                while (paramEleIter.hasNext()) {
//            excludedParam = false;
                                    paramElement = (String) paramEleIter.next();
//            paramInfo = (ArrayList) reportParameters.get(paramElement);
//              paramObject =  requestParamValues.get("kpidrillCBOARP" + paramElement);
                                    paramInfo = (ArrayList) collect.reportParameters.get(paramElement);
                                    ArrayList paramInfo1 = new ArrayList();
                                    List<String> parameterValue;
                                    parameterValue = (List<String>) collect.reportIncomingParameters.get("CBOARP" + paramElement);
                                    if (parameterValue != null) {
                                        Type listOfTestObject = new TypeToken<ArrayList>() {
                                        }.getType();
//                Gson gson = new Gson();
//   String  paramObject1=gson.toJson(paramObject, listOfTestObject);
//                   String paramObject1=(String) paramObject;
//                                    String[] val= paramObject1.split(",");
//                                    for(int i=0; i<val.length;i++){
//                                        String v1=val[i];
//                                        v1=v1.replace("[", "");
//                                      paramInfo1.add(v1);
//                                    }
                                        paramInfo.set(8, parameterValue);
                                        collect.paramValueList.add(paramInfo.get(1) + ":" + parameterValue);

                                        collect.reportParameters.put(paramElement, paramInfo);
                                        collect.reportParametersValues.put(paramElement, paramInfo.get(8));
                                    }

                                }
                                if (collect.reportIncomingParameters.get("istimedash") != null && collect.reportIncomingParameters.get("istimedash").toString().equalsIgnoreCase("Y")) {
                                    String value = "";
                                    String valu = "";
                                    String mont = "";
                                    String CurrValue = "";

                                    if (collect.reportIncomingParameters.get("timetype") != null) {
                                        String key = (String) collect.reportIncomingParameters.get("timetype");
                                        String date = (String) collect.reportIncomingParameters.get(key);
                                        String[] splitselectedList = date.split("/");
                                        date = splitselectedList[2] + "/" + splitselectedList[1] + "/" + splitselectedList[0];

                                        String value1 = "null";
                                        String periodtype = (String) collect.reportIncomingParameters.get("PRG_PERIOD_TYPE" + key);
                                        String compare = (String) collect.reportIncomingParameters.get("PRG_COMPARE" + key);
                                        if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                                            collect.reportIncomingParameters.put("CBO_AS_OF_DATE", date);
                                            collect.reportIncomingParameters.put("CBO_PRG_PERIOD_TYPE", periodtype);
                                            collect.reportIncomingParameters.put("CBO_PRG_COMPARE", compare);
                                            collect.reportIncomingParameters.put("perioddate", "");
                                            collect.timeDetailsArray.set(2, date);
                                            collect.timeDetailsArray.set(3, periodtype);
                                            collect.timeDetailsArray.set(4, compare);
                                        } else {
                                            PbTimeRanges timeRanges = new PbTimeRanges();
                                            timeRanges.elementID = collect.reportQryElementIds.get(0);
                                            String valu1 = date.substring(0, 2);
                                            String mont1 = date.substring(3, 5);
                                            String CurrValue1 = mont1.concat("/").concat(valu1).concat(date.substring(5));
                                            timeRanges.setRange(periodtype, compare, CurrValue1);
                                            ArrayList timeotherval = new ArrayList();
                                            timeotherval.add(timeRanges.st_d);
                                            timeotherval.add(timeRanges.ed_d);
                                            timeotherval.add(timeRanges.p_st_d);
                                            timeotherval.add(timeRanges.p_ed_d);
                                            String date1 = timeRanges.st_d.trim().substring(8, 10) + "/" + timeRanges.st_d.trim().substring(5, 7) + "/" + timeRanges.st_d.trim().substring(0, 4);
                                            collect.timeDetailsArray.set(2, timeRanges.st_d.trim().substring(8, 10) + "/" + timeRanges.st_d.trim().substring(5, 7) + "/" + timeRanges.st_d.trim().substring(0, 4));
                                            collect.timeDetailsArray.set(3, timeRanges.ed_d.trim().substring(8, 10) + "/" + timeRanges.ed_d.trim().substring(5, 7) + "/" + timeRanges.ed_d.trim().substring(0, 4));
                                            collect.timeDetailsArray.set(4, timeRanges.p_st_d.trim().substring(8, 10) + "/" + timeRanges.p_st_d.trim().substring(5, 7) + "/" + timeRanges.p_st_d.trim().substring(0, 4));
                                            collect.timeDetailsArray.set(5, timeRanges.p_ed_d.trim().substring(8, 10) + "/" + timeRanges.p_ed_d.trim().substring(5, 7) + "/" + timeRanges.p_ed_d.trim().substring(0, 4));
                                            collect.reportIncomingParameters.put("CBO_AS_OF_DATE1", collect.timeDetailsArray.get(2).toString());
                                            collect.reportIncomingParameters.put("CBO_AS_OF_DATE2", collect.timeDetailsArray.get(3).toString());
                                            collect.reportIncomingParameters.put("CBO_CMP_AS_OF_DATE1", collect.timeDetailsArray.get(4).toString());
                                            collect.reportIncomingParameters.put("CBO_CMP_AS_OF_DATE2", collect.timeDetailsArray.get(5).toString());
                                            collect.reportIncomingParameters.put("fromdate", "");
                                            collect.reportIncomingParameters.put("todate", "");
                                            collect.reportIncomingParameters.put("comparefrom", "");
                                            collect.reportIncomingParameters.put("compareto", "");
                                            collect.reportIncomingParameters.put("CBO_AS_OF_DATE", "");
                                            collect.reportIncomingParameters.put("datetext", "");
//                timeotherval.add(pbTime.ft_st_d);
//                timeotherval.add(pbTime.ft_ed_d);
                                        }

                                    }
                                }
                                if (collect.reportIncomingParameters.get("istimedash") != null && collect.reportIncomingParameters.get("istimedash").toString().equalsIgnoreCase("N")) {
                                    if (collect.reportIncomingParameters.get("todate") != null && collect.reportIncomingParameters.get("datetext") != "") {
                                        if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                                            String value = "";
                                            String valu = "";
                                            String mont = "";
                                            String CurrValue = "";
                                            value = (String) collect.reportIncomingParameters.get("todate");
                                            if (!value.contains("/") && !value.isEmpty()) {
                                                String formatdate = collect.parseDate(value);
                                                valu = formatdate.substring(0, 2);
                                                mont = formatdate.substring(3, 5);
                                                CurrValue = valu.concat("/").concat(mont).concat(formatdate.substring(5));
                                            }
                                            collect.reportIncomingParameters.put("CBO_AS_OF_DATE", CurrValue);
                                            Object paramvalone = "";

                                            collect.reportIncomingParameters.put("datetext", paramvalone);
                                        } else {
                                            DisplayParameters dispParams = new DisplayParameters();
                                            dispParams.upadatedrilldates(collect);
                                            Object paramvalone = "";

                                            collect.reportIncomingParameters.put("datetext", paramvalone);
                                        }
                                    } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_DATE_RANGE")) {
                                        Object paramvalone = "";
                                        collect.reportIncomingParameters.put("CBO_AS_OF_DATE", "");
                                        collect.reportIncomingParameters.put("datetext", paramvalone);

//  }
                                    }
                                }
                            }
//                                             HashMap repParameters=  (HashMap) collect.reportIncomingParameters.get("iskpidashbpard");
                        }
// end of sandeep code
                        getImportReturnObjectfromPath(pbReportId, container);
                        if (container.isDrillViewByCheck()) {
                            if (container.getDrillfromRepId() != null && !container.getDrillfromRepId().equalsIgnoreCase("0")) {
                                collect.timeDetailsArray = dbrdcollect.timeDetailsArray;
                                collect.timeDetailsMap = dbrdcollect.timeDetailsMap;
                            }
                        }
                        if (collect.reportIncomingParameters.get("reportDrill") != null && collect.reportIncomingParameters.get("reportDrill").toString().equalsIgnoreCase("Y") && "open".equalsIgnoreCase(action)) {
                            collect.updateCollection(true);
                            if (collect.reportIncomingParameters.get("parentReportId") != null) {
                                String parentRepId = (String) collect.reportIncomingParameters.get("parentReportId");
                                Container parentContainer = container.getParentContainer(parentRepId);
                                if (parentContainer != null && parentContainer.getMeasureDrillType() != null && parentContainer.getMeasureDrillType().equalsIgnoreCase("ReportDrillPopUp")) {
                                    collect.updateCollection(parentContainer, collect);
                                }
                            }

                        }
                        if (container.getIsIntermediateFilters()) {
                            HashMap<String, List> inMap = container.getIntermediateFilters();
                            HashMap<String, List> colllectMap = collect.operatorFilters.get("IN");
                            Set keySet = colllectMap.keySet();
                            Iterator itr = keySet.iterator();
                            String key;
                            while (itr.hasNext()) {
                                key = itr.next().toString();
                                collect.operatorFilters.get("IN").put(key, inMap.get(key));

                            }
                        }

                    } else if (fromBeckup != null && fromBeckup.equalsIgnoreCase("true")) {
                        String qry = "SELECT FILE_PATH FROM PRG_REPORT_COLLECTION_BACKUP WHERE REPORT_ID=" + collect.reportId;
                        PbDb db = new PbDb();
                        PbReturnObject retBkp = db.execSelectSQL(qry);
                        String filePath = "";
                        if (retBkp.getRowCount() >= 0) {
                            filePath = retBkp.getFieldValueString(0, 0);
                            // filePath="c:/usr/local/cache/backUP_14657.txt";
                        }
                        collect = (PbReportCollection) readFileDetails(filePath);
//                    PbReportViewerDAO pbdao = new PbReportViewerDAO();
//                    pbdao.setContainerForBeckupReport(collect,container);
                    }

                } else {
                    if (kpiglobal != null && kpiglobal.equalsIgnoreCase("true")) {
                        Set paramEleIds = collect.reportParameters.keySet();
                        Iterator paramEleIter = paramEleIds.iterator();
                        String paramElement;
                        ArrayList paramInfo;
                        Object paramObject = null;
                        Object paramObject1 = null;
                        List<String> parameterValue;
                        while (paramEleIter.hasNext()) {

                            paramElement = (String) paramEleIter.next();
                            paramInfo = (ArrayList) collect.reportParameters.get(paramElement);
                            paramObject = requestParamValues.get("kpiCBOARP" + paramElement);
//            parameterValue.add((String) paramObject);
                            if (paramObject != null) {
                                requestParamValues.put("CBOARP" + paramElement, paramObject);
                            }
                        }
//             Set<String> repViewByIds = collect.reportViewByMain.keySet();
//
//            for( String viewById : repViewByIds )
//                if (requestParamValues.get("CBOVIEW_BY_1" + viewById) != null){
//                    paramObject1=requestParamValues.get("CBOVIEW_BY_1" + viewById);
//                    requestParamValues.put("CBOVIEW_BY" + viewById, paramObject1);
//
//                }

                    }
                    if (kpiglobal != null && kpiglobal.equalsIgnoreCase("globalleft")) {

                        Set<String> repViewByIds = collect.reportViewByMain.keySet();
                        String rowviewbys;
                        boolean colDrillSet = false;
//ArrayList<String> rowviewbys = new ArrayList<String>();
                        for (String viewById : repViewByIds) {
                            if (requestParamValues.get("CBOVIEW_BY_globalkpi" + viewById) != null) {

                                rowviewbys = (String) requestParamValues.get("CBOVIEW_BY_globalkpi" + viewById);
                                requestParamValues.put("CBOVIEW_BY" + viewById, rowviewbys);

                            }
                        }

                    } else {
                        kpiglobal = "";
                    }
                    collect.reportIncomingParameters = requestParamValues;
                    collect.dateFormat = container.getDateFormat();
                    if (adhocviewby && !(container.getViewByCount() >= 2)) {
                        collect.updateCollection(true);
                    } else if (!exportReport) {
                        collect.updateCollection(!container.isViewByChanged());
                    }
                    if (container.isDrillViewByCheck()) {
                        if (container.getDrillfromRepId() != null && !container.getDrillfromRepId().equalsIgnoreCase("0")) {
                            collect.timeDetailsArray = dbrdcollect.timeDetailsArray;
                            collect.timeDetailsMap = dbrdcollect.timeDetailsMap;
                        }
                    }
                    if (collect.reportIncomingParameters.get("reportDrill") != null && collect.reportIncomingParameters.get("reportDrill").toString().equalsIgnoreCase("Y")) {
                        if (collect.reportIncomingParameters.get("parentReportId") != null) {
                            String parentRepId = (String) collect.reportIncomingParameters.get("parentReportId");
                            Container parentContainer = container.getParentContainer(parentRepId);
                            if (parentContainer != null && parentContainer.getMeasureDrillType() != null && parentContainer.getMeasureDrillType().equalsIgnoreCase("ReportDrillPopUp")) {
                                collect.updateCollection(parentContainer, collect);
                            }
                        }
                    }
                }
//                ProgenLog.log(ProgenLog.FINE, this, "prepareReport", "Prepared Collection " + System.currentTimeMillis());
                logger.info("Prepared Collection " + System.currentTimeMillis());
            }

            collect.ReportLayout = container.ReportLayout;
            //modifed by Dinanath for handling null 
            if (container.ReportLayout != null && (container.ReportLayout.equalsIgnoreCase("KPI") || container.isTransposed())) {
                container.setTransposeTable(true);                                //added by mohit for kpi and none
            } else {
                container.setTransposeTable(false);
            }
            PbReportViewerDAO daoonnsrattr = new PbReportViewerDAO();
            String defaulttab = container.getDefault_tab("key" + collect.reportId);
            if (defaulttab != null && (defaulttab.equalsIgnoreCase("Report") || defaulttab.equalsIgnoreCase("TABLE"))) {
                HashMap mapformsrattr = daoonnsrattr.modifyMeasureAttrreport(pbReportId, container);
                container.setmodifymeasureAttrChnge(mapformsrattr);
            }


            /*
             * added by Srikanth.p for initialize Report to check wether
             * initilalize report Enabled
             */
            if (isOpenRepEvent) {
                PbReportViewerDAO vDao = new PbReportViewerDAO();
                HashMap assignedMap = vDao.getAssignedInitialReports(pbReportId);
                vDao.modifyedMeasuresToReport(pbReportId, container);
                if (assignedMap != null && !assignedMap.isEmpty()) {
                    getInitialRepFilters(container, assignedMap, pbReportId, PbUserId);
                }

            }/*
             * Ended by Srikanth.p
             */


//if (isOpenRepEvent||ChangeViewBy)
//             MapBD mapbd = new MapBD();
//             
//              boolean enabletopbottomSelection = mapbd.getRowViewByInfo(container, rowViewIds);
//               String TopBtmEnable = "none";
//                 if (enabletopbottomSelection) {
//                     TopBtmEnable = "block";
//                 }
//               session.setAttribute("TopBtmEnable", TopBtmEnable);
            //code to change query columns at runtime
            //modified by santhosh.kumar@progenbusiness.com on 01/12/2009 for the purpose of snap shot at run time
            if (getIsSnapShot()) {
                container = readSnapShotXML(container, getSnapShotId(), collect, pbReportId);
                ReportHashMap = container.getReportHashMap();
                TableHashMap = container.getTableHashMap();
                GraphHashMap = container.getGraphHashMap();
                ParametersHashMap = container.getParametersHashMap();
            }

            if (ReportHashMap.get("reportQryElementIds") != null) { //TODO can we change this to isOpened
                if (reportQryElementIds == null) {
                    //during Change View By to Crosstab we have set the ReportQryElementIds above so need to reset it again
                   if (collect.tablePropertiesXML != null) {
                        ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.IsRunTimeComparisionMsr(container, collect.tablePropertiesXML);
                    }
                   ReportHashMap = container.getReportHashMap();
                    reportQryElementIds = (ArrayList) ReportHashMap.get("reportQryElementIds");
                    reportQryAggregations = (ArrayList) ReportHashMap.get("reportQryAggregations");
                    reportQryColNames = (ArrayList) ReportHashMap.get("reportQryColNames");
                    reportQryColTypes = (ArrayList) ReportHashMap.get("reportQryColTypes");
                    collect.reportQryElementIds = reportQryElementIds;
                    collect.reportQryAggregations = reportQryAggregations;
                    collect.reportQryColNames = reportQryColNames;
                    collect.reportQryColTypes = reportQryColTypes;
                    //added by sruthi for  onthefly modifymeasures.
                    if (container.getupdate()) {
                        ArrayList<String> colunid = new ArrayList<String>();
                        ArrayList<String> reportAggregations = new ArrayList<String>();
                        HashMap aggregation = new HashMap();
                        aggregation = container.getupdateAggregation();
                        Set measureid = aggregation.keySet();
                        colunid = (ArrayList) ReportHashMap.get("reportQryElementIds");
                        reportAggregations = (ArrayList) ReportHashMap.get("reportQryAggregations");
                        for (String key : colunid) {
                            if (measureid.contains(key)) {
                                int index = colunid.indexOf(key);
                                String value = (String) aggregation.get(key);
                                reportAggregations.set(index, value);
                            }
                        }
                        ReportHashMap.put("reportQryAggregations", reportAggregations);
                        reportQryElementIds = (ArrayList) ReportHashMap.get("reportQryElementIds");
                        reportQryAggregations = (ArrayList) ReportHashMap.get("reportQryAggregations");
                        reportQryColNames = (ArrayList) ReportHashMap.get("reportQryColNames");
                        reportQryColTypes = (ArrayList) ReportHashMap.get("reportQryColTypes");
                        collect.reportQryElementIds = reportQryElementIds;
                        collect.reportQryAggregations = reportQryAggregations;
                        collect.reportQryColNames = reportQryColNames;
                        collect.reportQryColTypes = reportQryColTypes;
                    }
                    //ended by sruhti
                }
            } else {
                //added by anitha
                if (collect.tablePropertiesXML != null) {
                        ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.IsRunTimeComparisionMsr(container, collect.tablePropertiesXML);

                        HashMap neaHashMAp = container.getRunTimeComparisionMsrHashMap();
                        if(neaHashMAp!=null && !neaHashMAp.isEmpty()){
                        reportQryElementIds = (ArrayList) neaHashMAp.get("reportQryElementIds");
                        reportQryAggregations = (ArrayList) neaHashMAp.get("reportQryAggregations");
                        reportQryColNames = (ArrayList) neaHashMAp.get("reportQryColNames");
                        collect.reportQryElementIds = reportQryElementIds;
                        collect.reportQryAggregations = reportQryAggregations;
                        collect.reportQryColNames = reportQryColNames;
                    }
                    }
                //end of code by anitha
                reportQryElementIds = collect.reportQryElementIds;
                reportQryAggregations = collect.reportQryAggregations;
                reportQryColNames = collect.reportQryColNames;
                reportQryColTypes = collect.reportQryColTypes;
            }

            container.setTableMeasure(reportQryElementIds);
            container.setTableMeasureNames(reportQryColNames);
            collect.mapAggrigations();

            if (!isMeasChangeEvent && !isGrpMeasChgEvent && !isMapMeasChgEvent) {
                //for measure change and graph change its set in Action class itself
                ReportHashMap.put("reportQryElementIds", reportQryElementIds);
                ReportHashMap.put("reportQryAggregations", reportQryAggregations);
                ReportHashMap.put("reportQryColNames", reportQryColNames);
                ReportHashMap.put("reportQryColTypes", reportQryColTypes);
            }

            if (getIsSnapShot()) {
                collect.timeDetailsArray = (ArrayList) ParametersHashMap.get("TimeDetailstList");
                collect.timeDetailsMap = (HashMap) ParametersHashMap.get("TimeDimHashMap");
            }
            //sandeep
            oneviewtimedetails = collect.timeDetailsArray;
            if (!container.getOneviewGraphTimedetails().isEmpty()) {
                ArrayList tempTimeDetails = new ArrayList();
                List<String> oneVewTimeDetails = container.getOneviewGraphTimedetails();
                for (String item : oneVewTimeDetails) {

                    tempTimeDetails.add(item);
                }
                if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                    collect.timeDetailsArray = tempTimeDetails;
                } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_DATE_RANGE")) {
//                        
                    PbTimeRanges timeRanges = new PbTimeRanges();
                    String priodType = oneVewTimeDetails.get(3).toString();
                    String compareWith = oneVewTimeDetails.get(4).toString();
                    String date = oneVewTimeDetails.get(2).toString();
                    timeRanges.elementID = collect.reportQryElementIds.get(0);
                    if (oneVewTimeDetails.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                        timeRanges.setRange(priodType, compareWith, date);
                    } else {
                        timeRanges.setRange((ArrayList) container.getOneviewGraphTimedetails());
                    }
                    collect.timeDetailsArray.set(2, timeRanges.st_d.length() >= 10 ? timeRanges.st_d.substring(0, 10) : timeRanges.st_d);
                    collect.timeDetailsArray.set(3, timeRanges.ed_d.length() >= 10 ? timeRanges.ed_d.substring(0, 10) : timeRanges.ed_d);
                    collect.timeDetailsArray.set(4, timeRanges.p_st_d.length() >= 10 ? timeRanges.p_st_d.substring(0, 10) : timeRanges.p_st_d);
                    collect.timeDetailsArray.set(5, timeRanges.p_ed_d.length() >= 10 ? timeRanges.p_ed_d.substring(0, 10) : timeRanges.p_ed_d);
//                        
                }

            }
            //end of sandeep code foroneview
            if (!container.getOneviewTableTimedetails().isEmpty()) {
                ArrayList tempTimeDetails = new ArrayList();
                List<String> oneVewTimeDetails = container.getOneviewTableTimedetails();
                for (String item : oneVewTimeDetails) {

                    tempTimeDetails.add(item);
                }

                if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                    collect.timeDetailsArray = tempTimeDetails;
                } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_DATE_RANGE")) {
//                        
                    PbTimeRanges timeRanges = new PbTimeRanges();
                    String priodType = oneVewTimeDetails.get(3).toString();
                    String compareWith = oneVewTimeDetails.get(4).toString();
                    String date = oneVewTimeDetails.get(2).toString();
                    timeRanges.elementID = collect.reportQryElementIds.get(0);
                    if (oneVewTimeDetails.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                        timeRanges.setRange(priodType, compareWith, date);
                    } else {
                        timeRanges.setRange((ArrayList) container.getOneviewTableTimedetails());
                    }
                    collect.timeDetailsArray.set(2, timeRanges.st_d.length() >= 10 ? timeRanges.st_d.substring(0, 10) : timeRanges.st_d);
                    collect.timeDetailsArray.set(3, timeRanges.ed_d.length() >= 10 ? timeRanges.ed_d.substring(0, 10) : timeRanges.ed_d);
                    collect.timeDetailsArray.set(4, timeRanges.p_st_d.length() >= 10 ? timeRanges.p_st_d.substring(0, 10) : timeRanges.p_st_d);
                    collect.timeDetailsArray.set(5, timeRanges.p_ed_d.length() >= 10 ? timeRanges.p_ed_d.substring(0, 10) : timeRanges.p_ed_d);
//                        
                }
            }
            //sandeep to set  timedetails for drillreport from oneview
            if (!container.getoneviewdrilltimedetails().isEmpty()) {
                ArrayList tempTimeDetails1 = new ArrayList();
                List<String> oneVewTimeDetails = container.getoneviewdrilltimedetails();
                for (String item : oneVewTimeDetails) {

                    tempTimeDetails1.add(item);
                }
                if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                    if (oneVewTimeDetails.get(1).toString().equalsIgnoreCase("PRG_DATE_RANGE")) {
                        tempTimeDetails1.set(1, "PRG_STD");
                        tempTimeDetails1.set(2, oneVewTimeDetails.get(3).toString());
                        tempTimeDetails1.set(3, "Month");
                        tempTimeDetails1.set(4, "Last Period");
                        tempTimeDetails1.remove(5);
                    }
                    collect.timeDetailsArray = tempTimeDetails1;
                } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_DATE_RANGE")) {
//                        
                    PbTimeRanges timeRanges = new PbTimeRanges();
                    String priodType = oneVewTimeDetails.get(3).toString();
                    String compareWith = oneVewTimeDetails.get(4).toString();
                    String date = oneVewTimeDetails.get(2).toString();
                    timeRanges.elementID = collect.reportQryElementIds.get(0);
                    if (oneVewTimeDetails.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                        timeRanges.setRange(priodType, compareWith, date);
                    } else {
                        timeRanges.setRange((ArrayList) container.getoneviewdrilltimedetails());
                    }
                    collect.timeDetailsArray.set(2, timeRanges.st_d.length() >= 10 ? timeRanges.st_d.substring(0, 10) : timeRanges.st_d);
                    collect.timeDetailsArray.set(3, timeRanges.ed_d.length() >= 10 ? timeRanges.ed_d.substring(0, 10) : timeRanges.ed_d);
                    collect.timeDetailsArray.set(4, timeRanges.p_st_d.length() >= 10 ? timeRanges.p_st_d.substring(0, 10) : timeRanges.p_st_d);
                    collect.timeDetailsArray.set(5, timeRanges.p_ed_d.length() >= 10 ? timeRanges.p_ed_d.substring(0, 10) : timeRanges.p_ed_d);
//                        
                }

            }
            //sandeep for drill to reports with time setting for dashboardsand reports
//            if (collect.reportIncomingParameters.get("isKpiDashboard") != null && collect.reportIncomingParameters.get("isKpiDashboard").toString().equalsIgnoreCase("true")){
            if (adhocTime || collect.reportIncomingParameters.get("reportDrill") != null && collect.reportIncomingParameters.get("reportDrill").toString().equalsIgnoreCase("Y")) {
                String value = "";
                String periodtype = "";
                String comparevalue = "";
                if ((collect.reportIncomingParameters.get("DDrill") != null && collect.reportIncomingParameters.get("DDrill").toString().equalsIgnoreCase("Y"))) {

                    if ((collect.reportIncomingParameters.get("DrillYear") != null)) {
                        if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                            //if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Month") || collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Qtr")) {
                            collect.timeDetailsArray.set(3, "Year");
                            // }
                            if (collect.timeDetailsArray.get(4).toString().equalsIgnoreCase("Last Month") || collect.timeDetailsArray.get(4).toString().equalsIgnoreCase("Last Qtr")) {
                                collect.timeDetailsArray.set(4, "Last Year");
                            }
                            periodtype = "Year";
                            comparevalue = "Last Year";
                        }
                        value = collect.getYearDrill(collect.reportIncomingParameters.get("DrillYear").toString());
                    }
                    if ((collect.reportIncomingParameters.get("DrillQtr") != null)) {  //track id-->
                        if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                            // if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Month") || collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Year")) {
                            collect.timeDetailsArray.set(3, "Qtr");
                            comparevalue = "Last Qtr";
                            // }
                            if (collect.timeDetailsArray.get(4).toString().equalsIgnoreCase("Last Month") || collect.timeDetailsArray.get(4).toString().equalsIgnoreCase("Last Year")) {
                                collect.timeDetailsArray.set(4, "Last Qtr");
                                comparevalue = "Last Qtr";
                            } else if (collect.timeDetailsArray.get(4).toString().equalsIgnoreCase("Same Month Last Year")) {
                                collect.timeDetailsArray.set(4, "Same Qtr Last Year");
                                comparevalue = "Same Qtr Last Year";
                            }
                            periodtype = "Qtr";
                        }
                        value = collect.getQtrDrill(collect.reportIncomingParameters.get("DrillQtr").toString());
                    }
                    if ((collect.reportIncomingParameters.get("DrillMonth") != null)) {
                        if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) { //track id-->
                            // if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Qtr") || collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Year")) {
                            collect.timeDetailsArray.set(3, "Month");
                            comparevalue = "Last Month";

                            if (collect.timeDetailsArray.get(4).toString().equalsIgnoreCase("Last Qtr") || collect.timeDetailsArray.get(4).toString().equalsIgnoreCase("Last Year")) {
                                collect.timeDetailsArray.set(4, "Last Month");
                                comparevalue = "Last Month";
                            } else if (collect.timeDetailsArray.get(4).toString().equalsIgnoreCase("Same Qtr Last Year")) {
                                collect.timeDetailsArray.set(4, "Same Month Last Year");
                                comparevalue = "Same Month Last Year";
                            } else {
                                collect.timeDetailsArray.set(4, "Last Month");
                            }
                            periodtype = "Month";
                        }
                        value = collect.getMonthDrill(collect.reportIncomingParameters.get("DrillMonth").toString());
                    }
                    if ((collect.reportIncomingParameters.get("DrillWeek") != null)) {
                        //isTimeDrill = true;
                        value = collect.getWeekDrill(collect.reportIncomingParameters.get("DrillWeek").toString());
                    }
                    if ((collect.reportIncomingParameters.get("DrillDate") != null)) {
                        // isTimeDrill = true;
                        value = collect.reportIncomingParameters.get("DrillDate").toString().replace("-", "/");
                    }
                }
                if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_DATE_RANGE")) {

                    String valu = "";
                    String mont = "";
                    String CurrValue = "";

                    if ((collect.reportIncomingParameters.get("DDrill") != null && collect.reportIncomingParameters.get("DDrill").toString().equalsIgnoreCase("Y"))) {
                    } else if (collect.reportIncomingParameters.get("perioddate") != null) {
                        value = (String) collect.reportIncomingParameters.get("perioddate");

                    }

                    if (value == null ? "" != null : !value.equals("")) {
                        if ((collect.reportIncomingParameters.get("DDrill") != null && collect.reportIncomingParameters.get("DDrill").toString().equalsIgnoreCase("Y"))) {
                            String[] formatdate;
//               try{
                            if(value.toString().contains("-")){
                                       formatdate = value.split("-");

                                valu = formatdate[0];
                                mont = formatdate[1];
                                  }else {
                            formatdate = value.split("/");
//               }

                            valu = formatdate[0];
                            mont = formatdate[1];
                            }
                            CurrValue = valu.concat("/").concat(mont).concat("/").concat(formatdate[2]);
                        } else if (!value.contains("/") && !value.isEmpty()) {
                            String formatdate = collect.parseDate(value);
                            valu = formatdate.substring(0, 2);
                            mont = formatdate.substring(3, 5);
                            CurrValue = mont.concat("/").concat(valu).concat(formatdate.substring(5));

                        }
                        PbTimeRanges timeRanges = new PbTimeRanges();
                        String priodType = (String) collect.reportIncomingParameters.get("CBO_PRG_PERIOD_TYPE");
                        String compareWith = (String) collect.reportIncomingParameters.get("CBO_PRG_COMPARE");
                        String date = CurrValue;
                        timeRanges.elementID = collect.reportQryElementIds.get(0);
                        if ((collect.reportIncomingParameters.get("DDrill") != null && collect.reportIncomingParameters.get("DDrill").toString().equalsIgnoreCase("Y"))) {
                          if(periodtype!="" && comparevalue!="" ){
                            timeRanges.setRange(periodtype, comparevalue, date);
                          }else{
                               timeRanges.setRange(priodType, compareWith, date);
                          }
                        } else {
                            timeRanges.setRange(priodType, compareWith, date);
                        }
                        String date1 = "";
                        String date2 = "";
                        String date3 = "";
                        String date4 = "";
                        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.ORACLE)) {
                            date1 = timeRanges.st_d.trim().substring(0, 10);
                            date2 = timeRanges.ed_d.trim().substring(0, 10);
                            date3 = timeRanges.p_st_d.trim().substring(0, 10);
                            date4 = timeRanges.p_ed_d.trim().substring(0, 10);

                        } else {
                            date1 = timeRanges.st_d.trim().substring(5, 7) + "/" + timeRanges.st_d.trim().substring(8, 10) + "/" + timeRanges.st_d.trim().substring(0, 4);
                            date2 = timeRanges.ed_d.trim().substring(5, 7) + "/" + timeRanges.ed_d.trim().substring(8, 10) + "/" + timeRanges.ed_d.trim().substring(0, 4);
                            date3 = timeRanges.p_st_d.trim().substring(5, 7) + "/" + timeRanges.p_st_d.trim().substring(8, 10) + "/" + timeRanges.p_st_d.trim().substring(0, 4);
                            date4 = timeRanges.p_ed_d.trim().substring(5, 7) + "/" + timeRanges.p_ed_d.trim().substring(8, 10) + "/" + timeRanges.p_ed_d.trim().substring(0, 4);
                        }
                        collect.timeDetailsArray.set(2, date1);
                        collect.timeDetailsArray.set(3, date2);
                        collect.timeDetailsArray.set(4, date3);
                        collect.timeDetailsArray.set(5, date4);

                    }
                } else //added by sruthi to drill range to standard
                {
                    if (adhocTime || collect.reportIncomingParameters.get("reportDrill") != null && collect.reportIncomingParameters.get("reportDrill").toString().equalsIgnoreCase("Y")) {

                        String valu = "";
                        String mont = "";
                        String CurrValue = "";
                        if ((collect.reportIncomingParameters.get("DDrill") != null && collect.reportIncomingParameters.get("DDrill").toString().equalsIgnoreCase("Y"))) {
                        } else if (collect.reportIncomingParameters.get("todate") != null) {
                            value = (String) collect.reportIncomingParameters.get("todate");
                        }
                        if (value == null ? "" != null : !value.equals("")) {
                            // if ((collect.reportIncomingParameters.get("DDrill") != null && collect.reportIncomingParameters.get("DDrill").toString().equalsIgnoreCase("Y"))){
                            if ((collect.reportIncomingParameters.get("DDrill") != null && collect.reportIncomingParameters.get("DDrill").toString().equalsIgnoreCase("Y"))) {
                                String[] formatdate;
//               try{
                                  if(value.toString().contains("-")){
                                       formatdate = value.split("-");

                                valu = formatdate[0];
                                mont = formatdate[1];
                                  }else {
                                formatdate = value.split("/");

                                valu = formatdate[0];
                                mont = formatdate[1];
                                  }

                                CurrValue = valu.concat("/").concat(mont).concat("/").concat(formatdate[2]);
                                collect.timeDetailsArray.set(2, CurrValue);
                            } else if (!value.contains("/") && !value.isEmpty()) {
                                String formatdate = collect.parseDate(value);
                                valu = formatdate.substring(0, 2);
                                mont = formatdate.substring(3, 5);
                                CurrValue = mont.concat("/").concat(valu).concat(formatdate.substring(5));
                                collect.timeDetailsArray.set(2, CurrValue);
                            }
                        }//}

                    }//ended by sruthi
                }
            }
            // end of sandeep code
// }
            /*
             * if(container.getOneviewGraphDate()!=null){
             * if(collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")){
             * collect.timeDetailsArray.remove(2);
             * collect.timeDetailsArray.add(2, container.getOneviewGraphDate());
             * } else{ collect.timeDetailsArray.remove(3);
             * collect.timeDetailsArray.add(3, container.getOneviewGraphDate());
             * } } if(container.getOneviewTableDate()!=null){
             * if(collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")){
             * collect.timeDetailsArray.remove(2);
             * collect.timeDetailsArray.add(2, container.getOneviewTableDate());
             * } else{ collect.timeDetailsArray.remove(3);
             * collect.timeDetailsArray.add(3, container.getOneviewTableDate());
             * }
            }
             */

            if (!collect.isTimeInitialized()) {
                collect.avoidProgenTime();
            }

            if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("year")) {
                    container.setTimeLevel("YEAR");
                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Qtr")) {
                    container.setTimeLevel("QUARTER");
                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Month")) {
                    container.setTimeLevel("MONTH");
                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Week")) {
                    container.setTimeLevel("WEEK");
                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Day")) {
                    container.setTimeLevel("DAY");
                }
            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_DATE_RANGE")) {
                container.setTimeLevel("MONTH");
            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_MONTH_RANGE")) {
                container.setTimeLevel("QUARTER");
            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_QTR_RANGE")) {
                container.setTimeLevel("YEAR");
            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_YEAR_RANGE")) {
                container.setTimeLevel("YEAR");
            }
            container.setViewByColNames(collect.reportRowViewbyValuesNames);
            container.setViewByElementIds(collect.reportRowViewbyValues);
            container.setTimeDetailsArray(collect.timeDetailsArray);

//To check whether is there any time series chart or not.
            PbGraphDisplay GraphDisplay = new PbGraphDisplay();
            GraphDisplay.setCheckingTimeSeries(true);
            GraphDisplay.setGraphHashMap(container.getGraphHashMap());
            GraphDisplay.setReportId(pbReportId);

            //if (collect.reportColViewbys != null || collect.reportColViewbyValues.size() == 0) {
            if (collect.reportColViewbys == null || collect.reportColViewbyValues.isEmpty()) {
                GraphDisplay.checkGraphHeaders();
            } else {
                GraphDisplay.check2dGraphHeaders(new String[0], new String[0], new String[0]);
            }

            GraphDisplay.setCurrentDispRetObjRecords(new PbReturnObject());
            GraphDisplay.setCurrentDispRecordsRetObjWithGT(new PbReturnObject());
            GraphDisplay.setAllDispRecordsRetObj(new PbReturnObject());

            //TODO can we use reportopenevent here?
            container.setTimeSeries(GraphDisplay.getTimeSeries());
            setTimeSeries(GraphDisplay.getTimeSeries());

            //end of graph information..
            collect.isTimeSeries = getTimeSeries();
            container.setTimeSeries(getTimeSeries());

            if (!isMeasChangeEvent && !isParmChngEvent && !isGrpMeasChgEvent && !ChangeViewByEvent && !isGrpByAnlys && !isMapMeasChgEvent) {
                container.setGrandTotalReq(collect.showTableTotals);
                container.setNetTotalReq(collect.showTableSubTotals);
                container.setAvgTotalReq(collect.showTableAvg);
                container.setOverAllMaxValueReq(collect.showTableMax);
                container.setOverAllMinValueReq(collect.showTableMin);
                container.setCatMaxValueReq(collect.showTableCatMax);
                container.setCatMinValueReq(collect.showTableCatMin);
                container.setTableSymbols(collect.tableSymbols);
                container.setColumnProperties(collect.columnProperties);
                container.setDefaultSortedColumn(collect.defaultSortedColumn);
//                    container.setTableDisplayRows(collect.tableDisplayRows);
                container.setPagesPerSlide(collect.tableDisplayRows);
                container.setSearchReq(collect.showAdvSearch);
                container.setDrillAcrossSupported(collect.drillAcrossSupported);
                container.setMeasDrill(collect.drillMeasure);
                container.setCatAvgTotalReq(collect.showTableCatAvg);
//                    ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.updateTablePropertiesInContainer(container, collect.tablePropertiesXML);
            }

            if (collect.reportColViewbyValues != null && !collect.reportColViewbyValues.isEmpty()) {
                if (isOpenRepEvent) {
                    if (collect.tablePropertiesXML != null) {
                        String[] totalDisplayPositions = ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.getCrosstabTotalsDisplayProperty(collect.tablePropertiesXML);
                        if (totalDisplayPositions.length > 0) {
                            container.setCrosstabGrandTotalDisplayPosition(totalDisplayPositions[0]);
                            container.setCrosstabSubTotalDisplayPosition(totalDisplayPositions[1]);
                            collect.crosstabGTDisplayPos = totalDisplayPositions[0];
                            collect.crosstabSTDisplayPos = totalDisplayPositions[1];
                        }
                    }
                }
                collect.crosstabGTDisplayPos = container.getCrosstabGrandTotalDisplayPosition();
                collect.crosstabSTDisplayPos = container.getCrosstabSubTotalDisplayPosition();

            }
            //generating multilevel reportquery

            PbReportViewerDAO dao = new PbReportViewerDAO();
            //level 1
            ArrayList dependentlist1 = dao.getDependentViewByidsandReps(pbReportId);
            if (dependentlist1 != null && !dependentlist1.isEmpty()) {
                HashMap map1 = (HashMap) dependentlist1.get(0);
                HashMap map2 = (HashMap) dependentlist1.get(1);
                if (map2 != null && !map2.isEmpty()) {
                    Set<String> viewbys = map2.keySet();
                    String dependentReportId = map2.get(viewbys.toArray()[0]).toString();
                    if (dependentReportId != null && !dependentReportId.equalsIgnoreCase("")) {
                        //level 2
                        ArrayList dependentlist2 = dao.getDependentViewByidsandReps(dependentReportId);
                        if (dependentlist2 != null && !dependentlist2.isEmpty()) {
                            HashMap map11 = (HashMap) dependentlist2.get(0);
                            HashMap map21 = (HashMap) dependentlist2.get(1);
                            if (map21 != null && !map21.isEmpty()) {
                                Set<String> viewbys21 = map21.keySet();
                                String dependentReportId21 = map21.get(viewbys21.toArray()[0]).toString();
                                if (dependentReportId21 != null && !dependentReportId21.equalsIgnoreCase("")) {
                                    //level 3
                                    ArrayList dependentlist3 = dao.getDependentViewByidsandReps(dependentReportId21);
                                    if (dependentlist3 != null && !dependentlist3.isEmpty()) {
                                        HashMap map12 = (HashMap) dependentlist3.get(0);
                                        HashMap map22 = (HashMap) dependentlist3.get(1);
                                        if (map22 != null && !map22.isEmpty()) {
                                            Set<String> viewbys31 = map22.keySet();
                                            String dependentReportId31 = map22.get(viewbys31.toArray()[0]).toString();
                                            if (dependentReportId31 != null && !dependentReportId31.isEmpty()) {
                                                //level 4
                                                ArrayList dependentlist4 = dao.getDependentViewByidsandReps(dependentReportId31);
                                                if (dependentlist4 != null && !dependentlist4.isEmpty()) {
                                                    HashMap map13 = (HashMap) dependentlist4.get(0);
                                                    HashMap map23 = (HashMap) dependentlist4.get(1);
                                                    if (map23 != null && !map23.isEmpty()) {
                                                        Set<String> viewbys41 = map23.keySet();
                                                        String dependentReportId41 = map23.get(viewbys41.toArray()[0]).toString();
                                                        if (dependentReportId41 != null && !dependentReportId41.equalsIgnoreCase("")) {
                                                            //level5
                                                            ArrayList dependentlist5 = dao.getDependentViewByidsandReps(dependentReportId41);
                                                            if (dependentlist5 != null && !dependentlist5.isEmpty()) {
                                                                HashMap map14 = (HashMap) dependentlist5.get(0);
                                                                HashMap map24 = (HashMap) dependentlist5.get(1);
                                                                if (map24 != null && !map24.isEmpty()) {
                                                                    Set<String> viewbys51 = map24.keySet();
                                                                    String dependentReportId51 = map24.get(viewbys51.toArray()[0]).toString();
                                                                    if (dependentReportId51 != null && !dependentReportId51.isEmpty()) {
                                                                        PbReportCollection collect51 = new PbReportCollection();
                                                                        boolean openVal = true;
                                                                        collect51.reportId = dependentReportId51;
                                                                        collect51.getParamMetaData(openVal);
                                                                        collect51.timeDetailsArray = new ArrayList();
                                                                        collect51.timeDetailsArray = collect.timeDetailsArray;
                                                                        PbReportQuery depRepQry51 = new PbReportQuery();
                                                                        depRepQry51 = qryExec.formulateQuery(collect51, PbUserId);
                                                                        String depquery51 = depRepQry51.generateViewByQry();
                                                                        HashMap viewbyidandqryMap51 = new HashMap();
                                                                        viewbyidandqryMap51.put(viewbys51.toArray()[0].toString(), depquery51);
                                                                        container.dependentviewbyIdQry.clear();
                                                                        container.depViewByConditionsmap.clear();
                                                                        container.setDependentviewbyIdQry(viewbyidandqryMap51);

                                                                    }
                                                                }
                                                                if (map14 != null && map14.isEmpty()) {
                                                                    container.setDepViewByConditionsmap(map14);
                                                                }
                                                            }
                                                            //end of level5
                                                            PbReportCollection collect41 = new PbReportCollection();
                                                            collect41.reportId = dependentReportId41;
                                                            boolean openVal = true;
                                                            collect41.getParamMetaData(openVal);
                                                            collect41.timeDetailsArray = new ArrayList();
                                                            collect41.timeDetailsArray = collect.timeDetailsArray;
                                                            PbReportQuery depRepQry41 = new PbReportQuery();
                                                            depRepQry41 = qryExec.formulateQuery(collect41, PbUserId);
                                                            depRepQry41.parameterType = container.getDepViewByConditionsmap();
                                                            depRepQry41.parameterQuery = container.getDependentviewbyIdQry();
                                                            String depquery41 = depRepQry41.generateViewByQry();
                                                            HashMap viewbyidandqryMap41 = new HashMap();
                                                            viewbyidandqryMap41.put(viewbys41.toArray()[0].toString(), depquery41);
                                                            container.dependentviewbyIdQry.clear();
                                                            container.depViewByConditionsmap.clear();
                                                            container.setDependentviewbyIdQry(viewbyidandqryMap41);
                                                        }
                                                    }
                                                    if (map13 != null && !map13.isEmpty()) {
                                                        container.setDepViewByConditionsmap(map13);
                                                    }
                                                }
                                                //end of level4
                                                PbReportCollection collect31 = new PbReportCollection();
                                                collect31.reportId = dependentReportId31;
                                                collect31.ctxPath = requestCtxPath;//request.getContextPath();
                                                boolean openVal = true;
                                                collect31.getParamMetaData(openVal);
                                                collect31.timeDetailsArray = new ArrayList();
                                                collect31.timeDetailsArray = collect.timeDetailsArray;
                                                PbReportQuery depRepQry31 = new PbReportQuery();
                                                depRepQry31 = qryExec.formulateQuery(collect31, PbUserId);
                                                depRepQry31.parameterType = container.getDepViewByConditionsmap();
                                                depRepQry31.parameterQuery = container.getDependentviewbyIdQry();
                                                String depquery31 = depRepQry31.generateViewByQry();
                                                HashMap viewbyidandqryMap31 = new HashMap();
                                                viewbyidandqryMap31.put(viewbys31.toArray()[0].toString(), depquery31);
                                                container.dependentviewbyIdQry.clear();
                                                container.depViewByConditionsmap.clear();
                                                container.setDependentviewbyIdQry(viewbyidandqryMap31);
                                            }
                                        }
                                        if (map12 != null && !map12.isEmpty()) {
                                            container.setDepViewByConditionsmap(map12);
                                        }
                                    }
                                    //end of level 3
                                    PbReportCollection collect21 = new PbReportCollection();
                                    collect21.reportId = dependentReportId21;
                                    collect21.ctxPath = requestCtxPath;//request.getContextPath();
                                    boolean openVal = true;
                                    collect21.getParamMetaData(openVal);
                                    collect21.timeDetailsArray = new ArrayList();
                                    collect21.timeDetailsArray = collect.timeDetailsArray;
                                    PbReportQuery depRepQry21 = new PbReportQuery();
                                    depRepQry21 = qryExec.formulateQuery(collect21, PbUserId);
                                    depRepQry21.parameterType = container.getDepViewByConditionsmap();
                                    depRepQry21.parameterQuery = container.getDependentviewbyIdQry();
                                    String depquery21 = depRepQry21.generateViewByQry();
                                    HashMap viewbyidandqryMap21 = new HashMap();
                                    viewbyidandqryMap21.put(viewbys21.toArray()[0].toString(), depquery21);
                                    container.dependentviewbyIdQry.clear();
                                    container.depViewByConditionsmap.clear();
                                    container.setDependentviewbyIdQry(viewbyidandqryMap21);
                                }
                            }
                            if (map11 != null && !map11.isEmpty()) {
                                container.setDepViewByConditionsmap(map11);
                            }
                        }
                        //end of level2
                        PbReportCollection collect1 = new PbReportCollection();
                        collect1.reportId = dependentReportId;
                        collect1.ctxPath = requestCtxPath;//request.getContextPath();
                        boolean openVal = true;
                        collect1.getParamMetaData(openVal);
                        collect1.timeDetailsArray = new ArrayList();
                        collect1.timeDetailsArray = collect.timeDetailsArray;
                        PbReportQuery depRepQry = new PbReportQuery();
                        depRepQry = qryExec.formulateQuery(collect1, PbUserId);
                        if (container.getDepViewByConditionsmap() != null && !container.getDepViewByConditionsmap().isEmpty()) {
                            depRepQry.parameterType = container.getDepViewByConditionsmap();
                        }
                        if (container.getDependentviewbyIdQry() != null && !container.getDependentviewbyIdQry().isEmpty()) {
                            depRepQry.parameterQuery = container.getDependentviewbyIdQry();
                        }
                        String depquery = depRepQry.generateViewByQry();
                        HashMap viewbyidandqryMap = new HashMap();
                        viewbyidandqryMap.put(viewbys.toArray()[0].toString(), depquery);
                        container.dependentviewbyIdQry.clear();
                        container.depViewByConditionsmap.clear();
                        container.setDependentviewbyIdQry(viewbyidandqryMap);
                    }
                }
                if (map1 != null && !map1.isEmpty()) {
                    container.setDepViewByConditionsmap(map1);
                }

            }
            //end of level 1
//                
//                
            // end of generating multilevel reportquery
            // 
            //code for genereating noncrosstab report query at the time crosstab report generation
            if (collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() != 0) {
                if (isOpenRepEvent) {
                    if (collect.tablePropertiesXML != null) {
                        ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.enableSummerizedMeasure(container, collect.tablePropertiesXML);
                    }
                }
            }

            //  
            PbReturnObject summerizedMsrRetObj = null;
            if (container.isSummarizedMeasuresEnabled()) {
                summerizedMsrRetObj = this.summerizedMeasuresReturnObject(container, PbUserId);
            }
//                if(container.showPrevState == true){
//                   collect = (PbReportCollection) container.collectionhashmap.get(container.prevStateCnt) ;
//                }
            // if( container.getFromBkp() != null && !container.getFromBkp().equalsIgnoreCase("null") && !container.getFromBkp().equalsIgnoreCase("false")){
//                  if(fromBeckup!=null && fromBeckup.equalsIgnoreCase("true")){
//                String qry = "SELECT FILE_PATH FROM PRG_REPORT_COLLECTION_BACKUP WHERE REPORT_ID="+collect.reportId;
//                    PbDb db = new PbDb();
//                    PbReturnObject retBkp = db.execSelectSQL(qry);
//                    String filePath="";
//                    if(retBkp.getRowCount() >=0){
//                  //  filePath = retBkp.getFieldValueString(0, 0);
//                        filePath="c:/usr/local/cache/backUP_14657.txt";
//                    }
//                    collect = (PbReportCollection)readFileDetails(filePath);
//                    PbReportViewerDAO pbdao = new PbReportViewerDAO();
//                    pbdao.setContainerForBeckupReport(collect,container);
//                }
//            if (container.showPrevState) {
//
//                collect = (PbReportCollection) container.collectionhashmap.get(container.repclctcnt - (container.prevStateCnt + 1));
//            }
            String query = "";
            if (!container.getAllColumns().isEmpty() || (collect.timePeriodsList != null && !collect.timePeriodsList.equalsIgnoreCase(""))) {
                PbDashBoardQuery reportQuery = null;

                reportQuery = qryExec.formulateQueryDashbard(collect, PbUserId);

                ArrayList<String> measureIdsList = new ArrayList<String>();
                ArrayList<String> aggType = new ArrayList<String>();

                if (collect.timePeriodsList != null && !collect.timePeriodsList.equalsIgnoreCase("")) {

                    String[] timePeriods = collect.timePeriodsList.split(",");
                    List<String> l1 = Arrays.<String>asList(timePeriods);
//                        List<String> l1 = Arrays.<String>asList(timePeriods);
                    ArrayList<String> timePeriods1 = new ArrayList<String>(l1);
//    ArrayList<String> timePeriods1 = new ArrayList<String>();
//    for(int i=0;i<timePeriods.length;i++){
//        timePeriods1.add(timePeriods[i]);
//    }
                    container.setAllColumns(timePeriods1);

                    String selectedList = "MTD,PMTD,PYMTD,QTD,PQTD,PYQTD,YTD,PYTD";
                    String[] splitselectedList = selectedList.split(",");
                    String Allchange = "CPMTD,C%PMTD,CPYMTD,C%PYMTD,CPQTD,C%PQTD,CPYQTD,C%PYQTD,CPYTD,C%PYTD";
                    String[] splitAllchange = Allchange.split(",");
                    String[] splitFulllist = collect.timePeriodsList.split(",");
                    ArrayList<String> currentTimeperiods = new ArrayList<>();
                    ArrayList<String> CurrentAllchanges = new ArrayList<>();
                    ArrayList<String> allcolumns = new ArrayList<>();
                    boolean b = true;
                    outerloop:
                    for (int i = 0; i < splitFulllist.length; i++) {

                        allcolumns.add(splitFulllist[i]);
                        for (int j = 0; j < splitselectedList.length; j++) {

                            if (splitFulllist[i].equalsIgnoreCase(splitselectedList[j])) {
                                currentTimeperiods.add(splitFulllist[i]);
                                continue outerloop;
                            }

                        }
                        for (int j = 0; j < splitAllchange.length; j++) {
                            if (splitFulllist[i].equalsIgnoreCase(splitAllchange[j])) {
                                CurrentAllchanges.add(splitFulllist[i]);
                                continue outerloop;
                            }

                        }

                    }

                    container.setChangeColumns(CurrentAllchanges);

//                        List<String> l1 = Arrays.<String>asList(timePeriods);
//                        ArrayList<String> a2 = new ArrayList<String>(l1);
                    ArrayList<String> timePeriodsList = new ArrayList<String>();

                    boolean kpidasboard = container.isIskpidasboard();
                    HashMap reportHashMap = container.getReportHashMap();
                    HashMap DisplayNamesMaptemp = (HashMap) reportHashMap.get("DisplayNamesMap");
                    HashMap tableHashMap = container.getTableHashMap();
                    ArrayList<String> Measurestemp = (ArrayList) tableHashMap.get("Measures");
                    ArrayList<String> MeasuresNamestemp = (ArrayList) tableHashMap.get("MeasuresNames");
                    if (kpidasboard && container.IsTimedasboard() && !(reportHashMap.isEmpty()) && DisplayNamesMaptemp != null && !(DisplayNamesMaptemp.isEmpty())) {

                        ArrayList<String> queryCols = new ArrayList<String>();
//        String[] toArray = (String[])DisplayNamesMaptemp.keySet().toArray(new String[DisplayNamesMaptemp.size()]);
//           for (int i = 0; i < toArray.length; i++) {
//               queryCols.add(toArray[i].replace("A_", ""));
//           }

                        for (int i = 0; i < Measurestemp.size(); i++) {
                            queryCols.add(Measurestemp.get(i).replace("A_", ""));
//               queryColNames.add(MeasuresNames.get(i));
                        }

                        for (int j = 0; j < queryCols.size(); j++) {
                            for (int i = 0; i < currentTimeperiods.size(); i++) {
                                timePeriodsList.add(currentTimeperiods.get(i));
                            }
                        }

//    for (int j = 0; j < queryCols.size(); j++) {
//                            for (int i = 0; i < container.DistinctTimePeriods.size(); i++) {
//                                measureIdsList.add(queryCols.get(j));
//                                aggType.add(collect.reportQryAggregations.get(j));
//                            }
//    }
//
//  reportQuery.setDistinctMesList(queryCols);
                    } else {
                        for (int j = 0; j < collect.reportQryElementIds.size(); j++) {
                            for (int i = 0; i < currentTimeperiods.size(); i++) {
                                timePeriodsList.add(currentTimeperiods.get(i));
                            }
                        }

                    }
                    container.timePeriodsList = timePeriodsList;
                    container.DistinctTimePeriods = currentTimeperiods;

                }

                boolean kpidasboard = container.isIskpidasboard();
                HashMap reportHashMap = container.getReportHashMap();
                HashMap DisplayNamesMaptemp = (HashMap) reportHashMap.get("DisplayNamesMap");
                HashMap tableHashMap = container.getTableHashMap();
                ArrayList<String> Measurestemp = (ArrayList) tableHashMap.get("Measures");
                ArrayList<String> MeasuresNamestemp = (ArrayList) tableHashMap.get("MeasuresNames");
                if (kpidasboard && container.IsTimedasboard() && !(reportHashMap.isEmpty()) && DisplayNamesMaptemp != null && !(DisplayNamesMaptemp.isEmpty())) {
                    ArrayList reportQryColNames1 = (ArrayList) reportHashMap.get("reportQryColNames");
                    ArrayList reportQryAggregations1 = (ArrayList) reportHashMap.get("reportQryAggregations");
                    HashMap<String, String> aggtypenew = new HashMap<>();
                    for (int i = 0; i < reportQryColNames1.size(); i++) {
                        aggtypenew.put(reportQryColNames1.get(i).toString(), reportQryAggregations1.get(i).toString());
                    }

                    ArrayList<String> queryCols = new ArrayList<>();
//        String[] toArray = (String[])DisplayNamesMaptemp.keySet().toArray(new String[DisplayNamesMaptemp.size()]);
//             for (int j = 0; j < reportQryColNames1.size(); j++) {
//                   for (int i = 0; i < toArray.length; i++) {
////               queryCols.add(toArray[i].replace("A_", ""));
//
//                 if(reportQryColNames1.get(j).toString().equalsIgnoreCase(DisplayNamesMaptemp.get(toArray[i]).toString()))
//                 {
//                       queryCols.add(toArray[i].replace("A_", ""));
//                 }
//
//           }
//
//           }

                    for (int i = 0; i < Measurestemp.size(); i++) {
                        queryCols.add(Measurestemp.get(i).replace("A_", ""));
//               queryColNames.add(MeasuresNames.get(i));
                    }

                    for (int j = 0; j < queryCols.size(); j++) {
                        for (int i = 0; i < container.DistinctTimePeriods.size(); i++) {
                            measureIdsList.add(queryCols.get(j));
//                                aggType.add(aggtypenew.get(DisplayNamesMaptemp.get("A_"+queryCols.get(j)).toString()));
                            aggType.add(aggtypenew.get(MeasuresNamestemp.get(j)));
                        }
                    }

                    reportQuery.setDistinctMesList(queryCols);

                } else {
                    for (int j = 0; j < collect.reportQryElementIds.size(); j++) {
                        for (int i = 0; i < container.DistinctTimePeriods.size(); i++) {
                            measureIdsList.add(collect.reportQryElementIds.get(j));
                            aggType.add(collect.reportQryAggregations.get(j));
                        }
                    }

                    reportQuery.setDistinctMesList(collect.reportQryElementIds);
                }
                reportQuery.setQryColumns(measureIdsList);
                reportQuery.setTimePeriodsList(container.timePeriodsList);
                reportQuery.setaggregationType(aggType);
                reportQuery.setDistinctTimePeriodsList(container.DistinctTimePeriods);
//   reportQuery.setDistinctMesList(collect.reportQryElementIds);
                reportQuery.setColAggration(aggType);
//   reportQuery.isKpi=true;
//   reportQuery.isInnerViewBy=false;
//isKpi || (isInnerViewBy)
                if (container.isSplitBy()) {
                    reportQuery.setMultiViewBy(true);
                    reportQuery.addMultiViewBys(container.getSplitBy());
                }
                //added by Nazneen for Dimension Segment
                if (reportQuery != null) {
                    reportQuery.setFilePath(this.filesPath);
                }
//                
                if (container.getDepViewByConditionsmap() != null && !container.getDepViewByConditionsmap().isEmpty()) {
                    reportQuery.parameterType = container.getDepViewByConditionsmap();
                }
                if (container.getDependentviewbyIdQry() != null && !container.getDependentviewbyIdQry().isEmpty()) {
                    reportQuery.parameterQuery = container.getDependentviewbyIdQry();
                }
                reportQuery.resetParamHashmap = collect.resetParamHashmap;
                if (container != null && container.getOneviewRepParamDetails() != null && !container.getOneviewRepParamDetails().isEmpty()) {

//                           collect.updateCollection(!container.isViewByChanged());
//                           isTimeDrill = false;
                    String paramExcludedIncluded = "NOT_SELECTED";
//        this.setCompleteUrl("");
                    boolean excludedParam = false;
                    collect.completeUrl = "";
                    //This will get parameters hashMap if Report Id is provided

                    Set paramEleIds = collect.reportParameters.keySet();
                    Iterator paramEleIter = paramEleIds.iterator();
                    String paramElement;
                    List<String> parameterValue;
                    ArrayList paramInfo;
                    collect.paramValueList.clear();
                    Gson gson = new Gson();
                    Type tarType = new TypeToken<List<String>>() {
                    }.getType();
                    while (paramEleIter.hasNext()) {
                        excludedParam = false;
                        paramElement = (String) paramEleIter.next();
                        paramInfo = (ArrayList) collect.reportParameters.get(paramElement);
                        parameterValue = (List<String>) collect.reportIncomingParameters.get("CBOARP" + paramElement);
                        if (parameterValue == null) {
                            if (paramInfo.get(8) != null && !paramInfo.get(8).equals("")) {
                                parameterValue = (List<String>) paramInfo.get(8);
                            }
                        }
                        if (collect.reportIncomingParameters.get("AdhocDrill" + paramElement) != null
                                && !"".equals(((String) collect.reportIncomingParameters.get("AdhocDrill" + paramElement)).trim()) && "Y".equals(((String) collect.reportIncomingParameters.get("AdhocDrill" + paramElement)).trim())) {
                            excludedParam = false;
                            paramInfo.set(10, "INCLUDED");
                            // 

                        } else if (collect.reportIncomingParameters.get("CBOARP" + paramElement + "_excbox") != null
                                && !"".equals(((String) collect.reportIncomingParameters.get("CBOARP" + paramElement + "_excbox")).trim())) {
                            excludedParam = true;
                        }

                        if (paramInfo.get(10).equals("NOT_SELECTED")) {
                            if (excludedParam) {
                                paramExcludedIncluded = "EXCLUDED";
                            } else if ((paramInfo.get(8).toString()).equalsIgnoreCase(parameterValue.toString())) {
                                paramExcludedIncluded = "NOT_SELECTED";
                            } else {
                                paramExcludedIncluded = "INCLUDED";
                            }
                        } else {
                            paramExcludedIncluded = paramInfo.get(10).toString();
                        }

                        paramInfo.set(8, parameterValue);
                        collect.paramValueList.add(paramInfo.get(1) + ":" + parameterValue);
                        paramInfo.set(9, "CBOARP" + paramElement);
                        paramInfo.set(10, paramExcludedIncluded);
                        collect.reportParameters.put(paramElement, paramInfo);
                        collect.reportParametersValues.put(paramElement, paramInfo.get(8));
                        collect.completeUrl += ";" + String.valueOf(paramInfo.get(9)) + "=" + gson.toJson(paramInfo.get(8), tarType); //String.valueOf(paramInfo.get(8)
                        HashMap inMap = collect.operatorFilters.get("IN");
                        if (inMap != null) {
                            inMap.put(paramElement, parameterValue);
                        } else {
                            inMap = new HashMap();
                            inMap.put(paramElement, parameterValue);
                        }
                        collect.operatorFilters.put("IN", inMap);
                    }

                    reportQuery.setParamValue(container.getOneviewRepParamDetails());
                    reportQuery.setInMap(container.getOneviewRepParamDetails());
                }
                if (collect.reportParamIds != null) {
                    for (int s = 0; s < collect.reportParamIds.size(); s++) {
                        if (lockedrepId != null && lockedelemId != null) {
                            if (lockedelemId.equalsIgnoreCase(collect.reportParamIds.get(s).toString())) {
                                collect.lockdatasetmap.put(collect.reportParamIds.get(s).toString(), "true");
                                collect.dependentviewbyIdQry.put(collect.reportParamIds.get(s), lockedcollectObj.dependentviewbyIdQry.get(collect.reportParamIds.get(s)));
                                //reportQuery.parameterQuery.put(collect.reportParamIds.get(s), lockedcollectObj.dependentviewbyIdQry.get(collect.reportParamIds.get(s)));
                            }
                        }
                    }
                }
                if (collect.lockdatasetmap != null && !collect.lockdatasetmap.isEmpty()) {
                    for (int s = 0; s < collect.reportParamIds.size(); s++) {
                        if (collect.lockdatasetmap.get(collect.reportParamIds.get(s)) != null) {
                            reportQuery.parameterQuery.put(collect.reportParamIds.get(s), collect.dependentviewbyIdQry.get(collect.reportParamIds.get(s)));
                        }
                    }
                }
                //added by Nazneen for multi calander
                String denomTable = container.getdenomTable();
                if (denomTable != null && !denomTable.equalsIgnoreCase("") && !denomTable.equalsIgnoreCase("null")) {
                    reportQuery.gbl_calander_var = denomTable;
                }
                //End of code by Nazneen for multi calander
                //Start of code by Nazneen on 18Jan14 for Analytical Object

                reportQuery.isAOEnable = this.isAOEnable;
//            reportQuery.isAOEnable = true;
                reportQuery.inMaps = (HashMap<String, List>) collect.operatorFilters.get("IN");
                reportQuery.notInMaps = (HashMap<String, List>) collect.operatorFilters.get("NOTIN");
                reportQuery.likeMaps = (HashMap<String, List>) collect.operatorFilters.get("LIKE");
                reportQuery.notLikeMaps = (HashMap<String, List>) collect.operatorFilters.get("NOTLIKE");
                reportQuery.reportQryElementIds = collect.reportQryElementIds;
                //End of code by Nazneen on 18Jan14 for Analytical Object
                if (isAOGOoneview) {
                } else {

                    query = reportQuery.generateDashBoardQry();
                }
                collect.setRepQry(query);

                if (reportQuery.isAOEnable) {
                    container.isAOEnable = false;
                } else {
                    container.isAOEnable = false;
                }

//                  if(!collect.isLockDataset()){
//                      HashMap lockparamhashmap = new HashMap();
//                      lockparamhashmap.put(collect.reportRowViewbyValues.get(0), query);
//                      collect.setDependentviewbyIdQry(lockparamhashmap);
//                  }
                Boolean isReportAccessible = reportQuery.isReportAccess();
                container.setIsReportAccessible(isReportAccessible);
                // for change% grand totals
                // if (collect.reportColViewbyValues == null && collect.reportColViewbyValues.isEmpty() && !rowViewIds.contains("TIME")) {
//                 if (collect.reportColViewbyValues != null && !collect.reportColViewbyValues.isEmpty()) {
                // need to write code for cross tab
//                 }else{
                //  if( container != null && container.averageValue()){
                if (Boolean.parseBoolean(container.getgTAverage()) == true) {
                    PbReturnObject KpiretObj = new PbReturnObject();
                    KpiretObj = this.getKpiRetObjforgrandtotals(container, collect, PbUserId);
                    container.setKpiRetObj(KpiretObj);
                }
//                 }
                //  }
                HashMap vals111 = new HashMap();
                vals111 = reportQuery.getTimememdetails();
                collect.setTimememdetails(vals111);
                container.setTimememdetails(vals111);
//            
                container.setViewbyqryDashBoard(reportQuery);
//                if(container.getDisplayLabels()!=null && !container.getDisplayLabels().isEmpty() )
//                {        for(int i=container.getViewByCount();i<container.getDisplayLabels().size();i++){
//                        CrosstabMsrMap.put(container.getDisplayColumns().get(i).toString(), container.getDisplayLabels().get(i).toString());}
//                }else
                if (collect.tableColNames != null && !collect.tableColNames.isEmpty()) {  // for generating crosstab msrnames while in renaming msr
                    for (int i = container.getViewByCount(); i < collect.tableColNames.size(); i++) {
                        CrosstabMsrMap.put(collect.tableElementIds.get(i).toString(), collect.tableColNames.get(i).toString());
                    }
                }
                rowViewBys = reportQuery.getOrgRowViewbyCols();
                ColViewBys = reportQuery.getColViewbyCols();
                totalViewBys = reportQuery.getRowViewbyCols().size();
                qryColumns = reportQuery.getQryColumns();
                NoOfDays = reportQuery.getNoOfDays();
                NonViewByMap = reportQuery.NonViewByMap;
            } else {
                // modified by krishan
                if (container.showPrevState) {

                    collect = (PbReportCollection) container.collectionhashmap.get(container.repclctcnt - (container.prevStateCnt + 1));
                }
                PbReportQuery reportQuery = null;
                ReportManagementDAO objAOQuery = new ReportManagementDAO();
                reportQuery = qryExec.formulateQuery(collect, PbUserId);
                filePath1 = container.getFilesPath();
                if (container.isAOReport) {
                    reportQuery.isAOReport = true;
                }
                reportQuery.aoTableId = container.AOId;
                if (container.isSplitBy()) {
                    reportQuery.setMultiViewBy(true);
                    reportQuery.addMultiViewBys(container.getSplitBy());
                }
                //added by Nazneen for Dimension Segment
                if (reportQuery != null) {
                    if (!this.filesPath.equalsIgnoreCase("")) {
                        reportQuery.setFilePath(this.filesPath);
                    } else {
                        reportQuery.setFilePath(filePath1);
                    }
                }
//                System.out.println("reportQuery"+reportQuery);
                if (container.getDepViewByConditionsmap() != null && !container.getDepViewByConditionsmap().isEmpty()) {
                    reportQuery.parameterType = container.getDepViewByConditionsmap();
                }
                if (container.getDependentviewbyIdQry() != null && !container.getDependentviewbyIdQry().isEmpty()) {
                    reportQuery.parameterQuery = container.getDependentviewbyIdQry();
                }
                reportQuery.resetParamHashmap = collect.resetParamHashmap;
                if (container != null && container.getOneviewRepParamDetails() != null && !container.getOneviewRepParamDetails().isEmpty()) {

//                           collect.updateCollection(!container.isViewByChanged());
//                           isTimeDrill = false;
                    String paramExcludedIncluded = "NOT_SELECTED";
//        this.setCompleteUrl("");
                    boolean excludedParam = false;
                    collect.completeUrl = "";
                    //This will get parameters hashMap if Report Id is provided

                    Set paramEleIds = collect.reportParameters.keySet();
                    Iterator paramEleIter = paramEleIds.iterator();
                    String paramElement;
                    List<String> parameterValue;
                    ArrayList paramInfo;
                    collect.paramValueList.clear();
                    Gson gson = new Gson();
                    Type tarType = new TypeToken<List<String>>() {
                    }.getType();
                    while (paramEleIter.hasNext()) {
                        excludedParam = false;
                        paramElement = (String) paramEleIter.next();
                        paramInfo = (ArrayList) collect.reportParameters.get(paramElement);
                        parameterValue = (List<String>) collect.reportIncomingParameters.get("CBOARP" + paramElement);
                        if (parameterValue == null) {
                            if (paramInfo.get(8) != null && !paramInfo.get(8).equals("")) {
                                parameterValue = (List<String>) paramInfo.get(8);
                            }
                        }
                        if (collect.reportIncomingParameters.get("AdhocDrill" + paramElement) != null
                                && !"".equals(((String) collect.reportIncomingParameters.get("AdhocDrill" + paramElement)).trim()) && "Y".equals(((String) collect.reportIncomingParameters.get("AdhocDrill" + paramElement)).trim())) {
                            excludedParam = false;
                            paramInfo.set(10, "INCLUDED");
                            // 

                        } else if (collect.reportIncomingParameters.get("CBOARP" + paramElement + "_excbox") != null
                                && !"".equals(((String) collect.reportIncomingParameters.get("CBOARP" + paramElement + "_excbox")).trim())) {
                            excludedParam = true;
                        }

                        if (paramInfo.get(10).equals("NOT_SELECTED")) {
                            if (excludedParam) {
                                paramExcludedIncluded = "EXCLUDED";
                            } else if ((paramInfo.get(8).toString()).equalsIgnoreCase(parameterValue.toString())) {
                                paramExcludedIncluded = "NOT_SELECTED";
                            } else {
                                paramExcludedIncluded = "INCLUDED";
                            }
                        } else {
                            paramExcludedIncluded = paramInfo.get(10).toString();
                        }

                        paramInfo.set(8, parameterValue);
                        collect.paramValueList.add(paramInfo.get(1) + ":" + parameterValue);
                        paramInfo.set(9, "CBOARP" + paramElement);
                        paramInfo.set(10, paramExcludedIncluded);
                        collect.reportParameters.put(paramElement, paramInfo);
                        collect.reportParametersValues.put(paramElement, paramInfo.get(8));
                        collect.completeUrl += ";" + String.valueOf(paramInfo.get(9)) + "=" + gson.toJson(paramInfo.get(8), tarType); //String.valueOf(paramInfo.get(8)
                        HashMap inMap = collect.operatorFilters.get("IN");
                        if (inMap != null) {
                            inMap.put(paramElement, parameterValue);
                        } else {
                            inMap = new HashMap();
                            inMap.put(paramElement, parameterValue);
                        }
                        collect.operatorFilters.put("IN", inMap);
                    }

                    reportQuery.setParamValue(container.getOneviewRepParamDetails());
                    reportQuery.setInMap(container.getOneviewRepParamDetails());
                }
                if (collect.reportParamIds != null) {
                    for (int s = 0; s < collect.reportParamIds.size(); s++) {
                        if (lockedrepId != null && lockedelemId != null) {
                            if (lockedelemId.equalsIgnoreCase(collect.reportParamIds.get(s).toString())) {
                                collect.lockdatasetmap.put(collect.reportParamIds.get(s).toString(), "true");
                                collect.dependentviewbyIdQry.put(collect.reportParamIds.get(s), lockedcollectObj.dependentviewbyIdQry.get(collect.reportParamIds.get(s)));
                                //reportQuery.parameterQuery.put(collect.reportParamIds.get(s), lockedcollectObj.dependentviewbyIdQry.get(collect.reportParamIds.get(s)));
                            }
                        }
                    }
                }
                if (collect.lockdatasetmap != null && !collect.lockdatasetmap.isEmpty()) {
                    for (int s = 0; s < collect.reportParamIds.size(); s++) {
                        if (collect.lockdatasetmap.get(collect.reportParamIds.get(s)) != null) {
                            reportQuery.parameterQuery.put(collect.reportParamIds.get(s), collect.dependentviewbyIdQry.get(collect.reportParamIds.get(s)));
                        }
                    }
                }
                //added by Nazneen for multi calander
                String denomTable = container.getdenomTable();
                if (denomTable != null && !denomTable.equalsIgnoreCase("") && !denomTable.equalsIgnoreCase("null")) {
                    reportQuery.gbl_calander_var = denomTable;
                }
                //End of code by Nazneen for multi calander
                //Start of code by Nazneen on 18Jan14 for Analytical Object
                //String query = "";
                String reportquery = "";
                reportQuery.isAOEnable = this.isAOEnable;
//            reportQuery.isAOEnable = true;
                reportQuery.inMaps = (HashMap<String, List>) collect.operatorFilters.get("IN");
                HashMap<String, List> inMapnew = (HashMap<String, List>) collect.operatorFilters.get("IN");
                reportQuery.inMapsnew = inMapnew;
                reportQuery.notInMaps = (HashMap<String, List>) collect.operatorFilters.get("NOTIN");
                reportQuery.likeMaps = (HashMap<String, List>) collect.operatorFilters.get("LIKE");
                reportQuery.notLikeMaps = (HashMap<String, List>) collect.operatorFilters.get("NOTLIKE");
                reportQuery.reportQryElementIds = collect.reportQryElementIds;
                //End of code by Nazneen on 18Jan14 for Analytical Object
                if (isAOGOoneview) {
                } else {
                    if (!container.getSaveAsNewRepFlag() && !("design".equals(action) || "fromDesigner".equals(action)) && !container.AOId.equalsIgnoreCase("")) {
                        query = reportQuery.generateQryForAO(container);
                    } else {
                        reportQuery.setNeedZeroRowQuery(container.zeroFlag);
                        query = reportQuery.generateViewByQry();
                    }

                    container.setSaveAsNewRepFlag(false);//To refresh flag
                    //added by sruthi to display the full query
                    reportquery = reportQuery.getfullQuery();
                    container.setReportQuery(reportquery);//ended by sruthi
                }
                collect.setRepQry(query);

                if (reportQuery.isAOEnable) {
                    container.isAOEnable = true;
                } else {
                    container.isAOEnable = false;
                }

//                  if(!collect.isLockDataset()){
//                      HashMap lockparamhashmap = new HashMap();
//                      lockparamhashmap.put(collect.reportRowViewbyValues.get(0), query);
//                      collect.setDependentviewbyIdQry(lockparamhashmap);
//                  }
                Boolean isReportAccessible = reportQuery.isReportAccess();
                container.setIsReportAccessible(isReportAccessible);
                // for change% grand totals
                // if (collect.reportColViewbyValues == null && collect.reportColViewbyValues.isEmpty() && !rowViewIds.contains("TIME")) {
//                 if (collect.reportColViewbyValues != null && !collect.reportColViewbyValues.isEmpty()) {
                // need to write code for cross tab
//                 }else{
                //  if( container != null && container.averageValue()){
                if (Boolean.parseBoolean(container.getgTAverage()) == true) {
                    PbReturnObject KpiretObj = new PbReturnObject();
                    KpiretObj = this.getKpiRetObjforgrandtotals(container, collect, PbUserId);
                    container.setKpiRetObj(KpiretObj);
                }
//                 }
                //  }
                HashMap vals111 = new HashMap();
                vals111 = reportQuery.getTimememdetails();
                collect.setTimememdetails(vals111);
                container.setTimememdetails(vals111);
//            
                container.setViewbyqry(reportQuery);
//                if(container.getDisplayLabels()!=null && !container.getDisplayLabels().isEmpty() )
//                {        for(int i=container.getViewByCount();i<container.getDisplayLabels().size();i++){
//                        CrosstabMsrMap.put(container.getDisplayColumns().get(i).toString(), container.getDisplayLabels().get(i).toString());}
//                }else
                if (collect.tableColNames != null && !collect.tableColNames.isEmpty()) {  // for generating crosstab msrnames while in renaming msr
                    for (int i = container.getViewByCount(); i < collect.tableColNames.size(); i++) {
                        CrosstabMsrMap.put(collect.tableElementIds.get(i).toString(), collect.tableColNames.get(i).toString());
                    }
                }
                rowViewBys = reportQuery.getOrgRowViewbyCols();
                ColViewBys = reportQuery.getColViewbyCols();
                totalViewBys = reportQuery.getRowViewbyCols().size();
                qryColumns = reportQuery.getQryColumns();
                NoOfDays = reportQuery.getNoOfDays();
                NonViewByMap = reportQuery.NonViewByMap;

            }

            if (!isDepentReport) {
//                pbretObj = ReportCacheManager.MANAGER.retrieveReportQry(pbReportId, query);

                 
                if (pbretObj == null) {
//                    ProgenLog.log(ProgenLog.FINE, this, "prepareReport", "Going to Fire Query " + System.currentTimeMillis());
                    logger.info("Going to Fire Query " + System.currentTimeMillis());
//                  pbretObj = qryExec.executeQuery(collect, query);//repQuery.getPbReturnObjectWithFlag(String.valueOf(reportQryElementIds.get(0)), query);//, session);


//Added by Mohit for Cache management
                     pbretObj = pbrpdao.getReturnObjectBasedOnReport(pbReportId, query, PbReportViewerBD.fileLocation, PbUserId);
                     
                 if (pbretObj == null) {
                    if (isAOGOoneview) {
                    } else {
                        pbretObj = qryExec.executeQuery(collect, query, false);
                        pbrpdao.setReturnObjectBasedOnReport(pbReportId, query, pbretObj , PbReportViewerBD.fileLocation, PbUserId);
                    }
                       }
                     
                     
                     
//                    

//                      ReportCacheManager.MANAGER.storeReportQry(pbReportId, query, pbretObj);
                    container.setDisplayColsfortimeDB(pbretObj.getColumnNames());
//getAllChangePercenrMeasures((PbReturnObject)pbretObj, container);

                    if (collect.reportColViewbyValues != null && !collect.reportColViewbyValues.isEmpty()) {
                        PbReturnObject retObj = (PbReturnObject) pbretObj;
                        if (collect.getCrosstabelements(collect.reportColViewbyValues.get(0)) != null) {
                            retObj.setCrosstabelements(collect.getCrosstabelements(collect.reportColViewbyValues.get(0)), collect.reportColViewbyValues.get(0));
                        }

//                        retObj.rowViewBys = reportQuery.getOrgRowViewbyCols();
//                        retObj.ColViewBys = reportQuery.getColViewbyCols();
//                        retObj.totalViewBys = reportQuery.getRowViewbyCols().size();
//                        retObj.totalOrderbys = reportQuery.getRowViewbyCols().size();
//                        retObj.rowViewCount = reportQuery.getOrgRowViewbyCols().size();
//                        retObj.colViewCount = reportQuery.getColViewbyCols().size();
                        retObj.rowViewBys = rowViewBys;
                        retObj.ColViewBys = ColViewBys;
                        retObj.totalViewBys = totalViewBys;
                        retObj.totalOrderbys = totalViewBys;
                        retObj.rowViewCount = rowViewBys.size();
                        retObj.colViewCount = ColViewBys.size();
//                 if(container.getdisplayLabelmap(reportQuery.getQryColumns())!=null && container.getdisplayLabelmap(reportQuery.getQryColumns()).size()>0 ){
//                              retObj.nonViewInput=container.getdisplayLabelmap(reportQuery.getQryColumns());
//                        }else
                        retObj.nonViewInput = NonViewByMap;
                        //reportQuery.NonViewByMap = retObj.nonViewInput;
                        retObj.Qrycolumns = qryColumns;
                        retObj.crosstabMsrMap = CrosstabMsrMap;
                        collect.setCrosstabMsrMap(CrosstabMsrMap);
                        retObj.meausreOnCol = true;
//                        retObj.MeasurePos = container.getMeasurePosition();
                        retObj.MeasurePos = ColViewBys.size();
                        retObj.gtType = collect.crosstabGTDisplayPos;
                        retObj.subGtType = collect.crosstabSTDisplayPos;
                        if (retObj.gtType.equalsIgnoreCase("NONE") || retObj.gtType.equalsIgnoreCase("") || retObj.gtType == null) {
                            retObj.isGTNone = true;
                        }
                        if (retObj.subGtType.equalsIgnoreCase("NONE") || retObj.subGtType.equalsIgnoreCase("") || retObj.subGtType == null) {
                            retObj.isSTNone = true;
                        }
                        //repQuery.setGrandTotalSubTotalDisplayPosition(collect.crosstabGTDisplayPos, collect.crosstabSTDisplayPos);
                        //code written by swati
                        retObj.reportDrillMap = collect.reportDrillMap;
                        retObj.reportDrillMaptooltip = collect.reportDrillMaptooltip;     //added by krishan pratap
                        retObj.summarizedMeasuresEnabled = container.isSummarizedMeasuresEnabled();
                        retObj.summerizedTableHashMap = container.getSummerizedTableHashMap();
                        retObj.summerizedMsrRetObj = summerizedMsrRetObj;
                        String ctGTNameType = "GT(C)";
                        if (facade != null && !container.getoriginalTotalName().equalsIgnoreCase("none") && ctGTNameType.trim().equalsIgnoreCase(facade.getoriginalTotalName())) {
                            retObj.GTDisplayName = container.getRenamedTotalName();
                        }
                        HashMap<String, String> msrAgrMap = new HashMap<String, String>();
                        for (int i = 0; i < collect.reportQryElementIds.size(); i++) {
                            msrAgrMap.put(collect.reportQryElementIds.get(i).toString(), collect.reportQryAggregations.get(i).toString());
                        }
                        retObj.MsrAggregationMap = msrAgrMap;
                        this.getGtCTAvgType(pbReportId);
                        retObj.gtCTAvgType = this.gtCTAvgType;
                        newCrossRetObj = retObj.transposeReturnObject();
                        ProgenChartDatasets dataset = new ProgenChartDatasets();
                        dataset.isIsCrosstab();
                        container.setRetObj(newCrossRetObj);
                        collect.setNonViewByMap(retObj.nonViewInput);
                        boolean ismeasurePos = container.setMeasurePosition(ColViewBys.size());
                        dbColumns = newCrossRetObj.getColumnNames();
                        columnTypes = newCrossRetObj.getColumnTypes();
                        if (isMeasChangeEvent == false && ChangeViewByEvent == false && isGrpMeasChgEvent == false && isParmChngEvent == false && isMapMeasChgEvent == false) {
                            container.setReportMode("view");
                            container.resetBackUpVariables();//newly added by santhosh.kumar@progenbusiness.com to reset back up variables;
                            if ("".equals(collect.tableDisplayRows) || "All".equalsIgnoreCase(collect.tableDisplayRows)) {
//                        container.setTableDisplayRows(((Integer) pbretObj.getRowCount()).toString());
                                container.setPagesPerSlide(((Integer) newCrossRetObj.getRowCount()).toString());
                            }
                        }
                    } else {
//                 FileOutputStream fos=new FileOutputStream("F:/excelSerializedObject/serialized.txt");
//                 ObjectOutputStream oos1 = new ObjectOutputStream(fos);
//                 oos1.writeObject((PbReturnObject)pbretObj);
//                 oos1.flush();
//                 oos1.close();
//                 fos.close();

                        container.setRetObj(pbretObj);
                        container.setGrret(pbretObj);
                        container.setSqlStr(query);
                        container.setNoOfDays(NoOfDays);
                        collect.setNonViewByMap(NonViewByMap);
                        dbColumns = pbretObj.getColumnNames();
                        columnTypes = pbretObj.getColumnTypes();
//               if(ChangeViewByEvent == false && container.getReportCollect().isIsExcelimportEnable()){
                        if (container.getReportCollect().isIsExcelimportEnable()) {
                            PbReturnObject retObj = (PbReturnObject) pbretObj;
                            Set excelMappingViewbys = container.importExcelDetails.getRepToExcelMapping().keySet();
                            ArrayList reportRowviewbylist = rowViewBys;

                            if (excelMappingViewbys.containsAll(reportRowviewbylist)) {

                                newImportExcelRetObj = this.generatefinalReturnObjectforExcelImport(pbReportId, container, retObj);
                                container.setRetObj(newImportExcelRetObj);
                                container.setGrret(newImportExcelRetObj);
                                dbColumns = newImportExcelRetObj.getColumnNames();
                                columnTypes = newImportExcelRetObj.getColumnTypes();
                            }
                        }
                        if (isMeasChangeEvent == false && ChangeViewByEvent == false && isGrpMeasChgEvent == false && isParmChngEvent == false && isMapMeasChgEvent == false) {
                            container.setReportMode("view");
                            container.resetBackUpVariables();//newly added by santhosh.kumar@progenbusiness.com to reset back up variables;
                            if ("".equals(collect.tableDisplayRows) || "All".equalsIgnoreCase(collect.tableDisplayRows)) {
//                        container.setTableDisplayRows(((Integer) pbretObj.getRowCount()).toString());
                                container.setPagesPerSlide(((Integer) pbretObj.getRowCount()).toString());
                            }
                        }
                    }

//                    ProgenLog.log(ProgenLog.FINE, this, "prepareReport", "Query Fired " + System.currentTimeMillis());
                    logger.info("Query Fired " + System.currentTimeMillis());
                }

                // // ////.println("session.getAttribute(sqlStr) is : "+session.getAttribute("sqlStr"));
//                container.setRetObj(newCrossRetObj);
                container.setSqlStr(query);
                container.setNoOfDays(NoOfDays);
//                dbColumns = newCrossRetObj.getColumnNames();
//                columnTypes = newCrossRetObj.getColumnTypes();
//                if (isMeasChangeEvent == false && ChangeViewByEvent == false && isGrpMeasChgEvent == false && isParmChngEvent == false && isMapMeasChgEvent == false) {
//                    container.setReportMode("view");
//                    container.resetBackUpVariables();//newly added by santhosh.kumar@progenbusiness.com to reset back up variables;
//                    if ("".equals(collect.tableDisplayRows) || "All".equalsIgnoreCase(collect.tableDisplayRows)) {
////                        container.setTableDisplayRows(((Integer) pbretObj.getRowCount()).toString());
//                        container.setPagesPerSlide(((Integer) newCrossRetObj.getRowCount()).toString());
//                    }
//                }
                //TODO need to investigate how this is set reportColViewByValues
                //is it set from param section?
                if (collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() != 0) {
                    container.setColumnViewByCount(String.valueOf(collect.reportColViewbyValues.size()));
                    container.setColumnViewByName(collect.getElementName(String.valueOf(collect.reportColViewbyValues.get(0))));
                    container.setColumnViewByElementIds(collect.reportColViewbyValues);
                } else {
                    container.setColumnViewByCount("0");
                }
                // // ////.println("reportColViewbyValuesin BD=====" + collect.reportColViewbyValues);
                // // ////.println("reportColViewbyValuesin BD=====" + repQuery.isBucketCrossTab);

                if ((collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() != 0)) {//for cross tab report
                    container.setReportCrosstab(true);
                    int viewByCount = collect.reportRowViewbyValues.size();
                    if (CEPNames == null) {
                        CEPNames = new ArrayList();
                    }
                    /*
                     * if(repQuery.isCrossTabBucket){
                     * if(repQuery.isBucketNewViewBy){
                     * viewByCount=viewByCount+1; }
                    }
                     */
                    //for (int colNum = 0; colNum < dbColumns.length; colNum++)
//                    for (int colNum = 0; colNum < newCrossRetObj.nonViewByMapNew.size()+1; colNum++){
//                    int count=0;
//                    if(collect.reportColViewbyValues!=null && collect.reportColViewbyValues!=null){
//                    if(collect.reportColViewbyValues.size()>collect.reportRowViewbyValues.size())
//                        count=collect.reportColViewbyValues.size();
//                    else
//                        count=collect.reportRowViewbyValues.size();
//                    }
                    int count = 0;
                    for (int colNum = 0; colNum < dbColumns.length; colNum++) {
                        if (dbColumns[colNum] != null && (dbColumns[colNum].equalsIgnoreCase("A1") || dbColumns[colNum].equalsIgnoreCase("A_2"))) {
                            for (int j = colNum; j < dbColumns.length; j++) {
                                count = count + 1;
                            }
                            break;
                        }
                    }
                    if (container.getSummerizedTableHashMap() != null && container.isSummarizedMeasuresEnabled()) {
                        if (container.getSummerizedTableHashMap().get("summerizedQryeIds") != null) {//added by Nazneen
                            count = count + ((List<String>) container.getSummerizedTableHashMap().get("summerizedQryeIds")).size();
                        }
                    }
                    if (collect.getFinalcrosstaborder() != null && !collect.getFinalcrosstaborder().isEmpty()) {
                        Object obj = collect.getFinalcrosstaborder().get(0);
                        String objstr = obj.toString();
                        ArrayList finalcrosstaborder = new ArrayList(Arrays.asList(objstr.split(",")));
                        LinkedHashMap<String, ArrayList> nonviewbyhashmapcreated = new LinkedHashMap<String, ArrayList>();
                        String[] columnTypesmodified = new String[finalcrosstaborder.size()];
//                                nonviewbyhashmapcreated.put(, Measures)
                        for (int i = 0; i < finalcrosstaborder.size(); i++) {
                            nonviewbyhashmapcreated.put(finalcrosstaborder.get(i).toString(), (ArrayList) newCrossRetObj.nonViewByMapNew.get(finalcrosstaborder.get(i).toString()));

                        }
                        newCrossRetObj.CrossTabfinalOrder = finalcrosstaborder;
                        newCrossRetObj.nonViewByMapNew = nonviewbyhashmapcreated;
                    }
                    for (int colNum = 0; colNum < count; colNum++) {
                        if (dbColumns[colNum] != null) {
                            originalColumns.add(dbColumns[colNum]);
//                        displayColumns.add(dbColumns[colNum]);
                            if (colNum <= (viewByCount - 1)) {
                                displayLabels.add(collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(colNum))));
                                displayLabelskpi.add(collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(colNum))));
                                displayColumns.add(dbColumns[colNum]);
                            } else//order need to changes here
                            //                          displayLabels.add(reportQuery.crossTabNonViewByMap.get(String.valueOf(originalColumns.get(colNum))));
                            //                          displayLabels.add(newCrossRetObj.nonViewByMapNew.get(String.valueOf(originalColumns.get(colNum))));
                            //                                int no = colNum - viewByCount;
                            //                                
                            //                                
                            //                                if(newCrossRetObj.CrossTabfinalOrder.size()>=no-1){
                            {
                                if ((colNum - viewByCount) < newCrossRetObj.CrossTabfinalOrder.size()) {
                                    displayLabels.add(newCrossRetObj.nonViewByMapNew.get(String.valueOf(newCrossRetObj.CrossTabfinalOrder.get(colNum - viewByCount))));
                                    // displayLabelskpi.add(newCrossRetObj.nonViewByMapNew1.get(String.valueOf(newCrossRetObj.CrossTabfinalOrder.get(colNum - viewByCount))));
                                    displayColumns.add(newCrossRetObj.CrossTabfinalOrder.get(colNum - viewByCount));
                                } //                          // Code has been changed here for column order
                            }                            //                            if (String.valueOf(displayLabels.get(colNum)).toUpperCase().contains("CHANGE")) {
                            ////                                signs.add(String.valueOf(displayLabels.get(colNum)));
                            //                            }
                            if (columnTypes[colNum].equalsIgnoreCase("VARCHAR2")) {
                                dataTypes.add("C");
                                alignments.add("LEFT");
                            } else if (columnTypes[colNum].equalsIgnoreCase("NUMBER")
                                    || columnTypes[colNum].equalsIgnoreCase("NUMERIC")
                                    || columnTypes[colNum].equalsIgnoreCase("FLOAT")
                                    || columnTypes[colNum].equalsIgnoreCase("DOUBLE")
                                    || columnTypes[colNum].equalsIgnoreCase("DECIMAL")
                                    || columnTypes[colNum].equalsIgnoreCase("BIGINT")
                                    || columnTypes[colNum].equalsIgnoreCase("INTEGER")
                                    || columnTypes[colNum].equalsIgnoreCase("INT")) {
                                dataTypes.add("N");
                                alignments.add("RIGHT");
                            } else if (columnTypes[colNum].equalsIgnoreCase("CALCULATED")) {
                                dataTypes.add("N");
                                alignments.add("RIGHT");
                            } else if (columnTypes[colNum].equalsIgnoreCase("SUMMARISED")) {
                                dataTypes.add("N");
                                alignments.add("RIGHT");
                            } else if (columnTypes[colNum].equalsIgnoreCase("DATE") || columnTypes[colNum].equalsIgnoreCase("datetime")) {
                                dataTypes.add("D");
                                alignments.add("RIGHT");
                            } else {
                                dataTypes.add("C");
                                alignments.add("LEFT");
                            }
                            if (colNum == 0) {
                                displayTypes.add("H");
                            } else {
                                displayTypes.add("T");
                            }
                        }
                    }
                    //added by Amar
                    container.setOriginalColumns(originalColumns);
                    //end of code
                    if (!exportReport && !isonespeedreduce) {
                        links = collect.getRowViewDrillUrl(PbUserId);
                        replinks = collect.getRepDrillMap(PbUserId);
                    }

                    for (int colviewByIndex = 0; colviewByIndex < collect.reportColViewbyValues.size(); colviewByIndex++) {
                        if (CEPNames == null) {
                            CEPNames = new ArrayList();
                        }
                        CEPNames.add(collect.getElementName(String.valueOf(collect.reportColViewbyValues.get(colviewByIndex))));
                    }

                    //end of code to get CEP Names
                    columnsVisibility = container.getColumnsVisibility();
                    if (columnsVisibility == null || columnsVisibility.size() == 0) {
                        for (int i = 0; i < displayColumns.size(); i++) {
                            columnsVisibility.put(String.valueOf(displayColumns.get(i)), "''");
                        }
                    }
//                    if (columnsVisibility.size() != displayColumns.size()) {
                    for (int i = 0; i < displayColumns.size(); i++) {
                        if (columnsVisibility.get(String.valueOf(displayColumns.get(i))) == null) {
                            columnsVisibility.put(String.valueOf(displayColumns.get(i)), "''");
                        }
                    }
                    //code for adding % wise in crosstab added by veena on jan 6 2012
                    for (String tabElement : collect.tableElementIds) {
                        if (RTMeasureElement.isRunTimeMeasure(tabElement)) {
                            isRTmeasExists = true;
                            break;
                        }
                    }
                    if (isRTmeasExists) {
                        HashMap<String, String> crostabids = new HashMap<String, String>();
                        int s = 0;
                        for (int j = 0; j < collect.tableElementIds.size(); j++) {
                            if (RTMeasureElement.isRunTimeMeasure(collect.tableElementIds.get(j))) {
                                crostabids = ((PbReturnObject) container.getRetObj()).crosstabmeasureIdsmap;
                                String dispColumn = (String) crostabids.get(collect.tableElementIds.get(j).replace("_pwst", "").replace("_percentwise", "").trim());  //added by krishan
                                String eleId = ((PbReturnObject) container.getRetObj()).crosstabMeasureId.get(dispColumn);
                                String elenames = container.getMeasureName(eleId);

                                int indexOf = displayColumns.indexOf(dispColumn);
                                int measCount = collect.reportQryElementIds.size();//.size();

                                if (s != 0) {
                                    measCount = measCount + s;
                                }
                                int measIndex = 0;
                                String colTypeSuffix = "_percentwise";
                                String colDispSuffix = " (% wise)";
                                RTMeasureElement typToCheck = null;
                                String newColId = null;
                                container.setDisplayColumns(displayColumns);
                                String colEleId = (String) displayColumns.get(indexOf);
                                viewByCount = collect.reportRowViewbyValues.size();

//            int whichMeasure = this.findMeasureIndexInCT(container, colEleId);
//            viewByCount = collect.reportRowViewbyValues.size();
//            measIndex = whichMeasure - viewByCount;
//            measureElementId = colEleId;
//            if(measIndex==-1)
//                measIndex = whichMeasure;
//            String disColName = collect.reportQryColNames.get(measIndex);
                                String disColName = elenames;
//            ArrayList measNameLst = (ArrayList) container.getTableHashMap().get("MeasuresNames");
                                int size = displayColumns.size();

                                ArrayList curColLabel = new ArrayList();
                                ArrayList newColLabel;
//            for (int i = whichMeasure; i < size;) {
                                for (int i = indexOf; i < size;) {
//                colEleId = (String) displayColumns.get(i);
                                    colEleId = (String) displayColumns.get(i);
//                //while looping avoid % wise columns
                                    displayColumns.add(i + 1, colEleId + colTypeSuffix);
//                //for the column add %wise measure
                                    if (displayLabels.get(i) != null && displayLabels.get(i) instanceof String) {
                                        curColLabel.add(displayLabels.get(i));
                                    } else {
                                        curColLabel = (ArrayList) displayLabels.get(i);
                                    }
                                    newColLabel = new ArrayList();
//                //multi layer crosstab
                                    for (int k = 0; k < curColLabel.size() - 1; k++) {
                                        newColLabel.add(curColLabel.get(k));
                                    }
                                    newColLabel.add(disColName + colDispSuffix);
                                    displayLabels.add(i + 1, newColLabel);
                                    dataTypes.add(i + 1, "N");
                                    displayTypes.add(i + 1, "T");
                                    alignments.add(i + 1, "RIGHT");
                                    columnsVisibility.put(String.valueOf(displayColumns.get(i + 1)), "''");
                                    if (collect.tablePropertiesXML != null) {
                                        ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.updateTablePropertiesInContainer(container, collect.tablePropertiesXML);
                                    }

                                    if (container.isPercentWiseStatus()) {
                                        columnsVisibility.put(String.valueOf(displayColumns.get(i)), "none");
                                    }
                                    originalColumns.add(i + 1, colEleId + colTypeSuffix);
                                    i += measCount + 1;
                                    size++;
//
                                }
                                s++;

//            Measures.add(measIndex + 1, (String) Measures.get(measIndex) + colTypeSuffix);
//            MeasuresNames.add(measIndex + 1, (String) MeasuresNames.get(measIndex) + colDispSuffix);
//            container.setColumnProperties(this.resetColumnProperties(Measures, container));
                            }
                        }
                    } else if (container.isRTMeasExists) {
                        Measures = (ArrayList) ((ArrayList) container.getTableHashMap().get("Measures"));//.clone();
                        MeasuresNames = (ArrayList) ((ArrayList) container.getTableHashMap().get("MeasuresNames"));//.clone();
                        Set rtSet = container.rtMeasMap.keySet();
                        for (Object setElement : rtSet) {
                            String dispColumn = setElement.toString();
                            int indexOf = displayColumns.indexOf(dispColumn);
                            int measCount = collect.reportQryElementIds.size();//.size();
                            int measIndex = 0;
                            String colTypeSuffix = "_percentwise";
                            String colDispSuffix = " (% wise)";
                            RTMeasureElement typToCheck = null;
                            String newColId = null;
                            container.setDisplayColumns(displayColumns);
                            String colEleId = (String) displayColumns.get(indexOf);
                            int whichMeasure = this.findMeasureIndexInCT(container, colEleId);
                            viewByCount = collect.reportRowViewbyValues.size();
                            measIndex = whichMeasure - viewByCount;
                            measureElementId = colEleId;
                            if (measIndex == -1) {
                                measIndex = whichMeasure;
                            }
                            String disColName = collect.reportQryColNames.get(measIndex);
//            ArrayList measNameLst = (ArrayList) container.getTableHashMap().get("MeasuresNames");
                            int size = displayColumns.size();
                            ArrayList curColLabel = new ArrayList();
                            ArrayList newColLabel;
                            for (int i = whichMeasure; i < size;) {
                                colEleId = (String) displayColumns.get(i);
//                //while looping avoid % wise columns
                                displayColumns.add(i + 1, colEleId + colTypeSuffix);
//                //for the column add %wise measure
                                if (displayLabels.get(i) != null && displayLabels.get(i) instanceof String) {
                                    curColLabel.add(displayLabels.get(i));
                                } else {
                                    curColLabel = (ArrayList) displayLabels.get(i);
                                }
                                newColLabel = new ArrayList();
//                //multi layer crosstab
                                for (int k = 0; k < curColLabel.size() - 1; k++) {
                                    newColLabel.add(curColLabel.get(k));
                                }
                                newColLabel.add(disColName + colDispSuffix);
                                displayLabels.add(i + 1, newColLabel);
                                dataTypes.add(i + 1, "N");
                                displayTypes.add(i + 1, "T");
                                alignments.add(i + 1, "RIGHT");
                                columnsVisibility.put(String.valueOf(displayColumns.get(i + 1)), "''");
                                if (collect.tablePropertiesXML != null) {
                                    ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.updateTablePropertiesInContainer(container, collect.tablePropertiesXML);
                                }

                                if (container.isPercentWiseStatus()) {
                                    columnsVisibility.put(String.valueOf(displayColumns.get(i)), "none");
                                }
                                originalColumns.add(i + 1, colEleId + colTypeSuffix);
                                i += measCount + 1;
                                size++;
//
                            }
                            Measures.add(measIndex + 1, (String) Measures.get(measIndex) + colTypeSuffix);
                            MeasuresNames.add(measIndex + 1, (String) MeasuresNames.get(measIndex) + colDispSuffix);
                            container.setColumnProperties(this.resetColumnProperties(Measures, container));
                        }
                    }

                    //to add run time meas on the fly
                    //end of for loop for adding %wise in crosstab
                    //end of code for adding % wise in crosstab
//                    }
                    container.setDisplayColumns(displayColumns);
                    REP = collect.reportRowViewbyValues;//actuall viewbys getting from collection object
                    REPNames = collect.reportRowViewbyValues;

//                            container.setViewByColNames(collect.reportRowViewbyValues);
//                            container.setViewByElementIds(collect.reportRowViewbyValues);
                    ArrayList viewByColumnsAlist = new ArrayList();
                    ArrayList viewByElementdIdAlist = new ArrayList();
                    for (int i = 0; i < viewByCount; i++) {
                        if (displayColumns != null && !displayColumns.isEmpty()) {
                            viewByColumnsAlist.add(String.valueOf(displayLabels.get(i)));
                            if (String.valueOf(displayColumns.get(i)).equalsIgnoreCase("TIME")) {
                                viewByElementdIdAlist.add(String.valueOf(displayColumns.get(i)));

                            } else {
                                viewByElementdIdAlist.add(String.valueOf(displayColumns.get(i)).substring(2));

                            }
                        }
                    }
                    container.setViewByColNames(viewByColumnsAlist);
                    container.setViewByElementIds(viewByElementdIdAlist);

                    if (viewByColumnsAlist != null && !viewByColumnsAlist.isEmpty()) {
                        REP = viewByElementdIdAlist;
                        REPNames = viewByColumnsAlist;
                    } else {
                        REP = collect.reportRowViewbyValues;
                        REPNames = collect.reportRowViewbyValues;
                    }
                    // Code added by Amar

                    if (collect.tableColNames != null && !collect.tableColNames.isEmpty()) {
                        if (ChangeViewByEvent) {
                            int viewByCnt = container.getViewByCount();
                            for (int i = 0; i < container.getViewByCount(); i++) {
                                if (!viewByColumnsAlist.contains(collect.tableColNames.get(i))) {
                                    collect.tableColNames.remove(i);
                                    collect.tableElementIds.remove(i);
                                    viewByCnt--;
                                }
                            }
                            for (int j = 0; j < viewByColumnsAlist.size(); j++) {
                                if (!collect.tableColNames.contains(viewByColumnsAlist.get(j))) {
                                    collect.tableColNames.add(viewByCnt, viewByColumnsAlist.get(j));
                                    collect.tableElementIds.add(viewByCnt, "A_" + viewByElementdIdAlist.get(j));
                                    viewByCnt++;
                                }
                            }
                        }
                    }
                    // end of code

//                    if (collect.tableColNames != null && !collect.tableColNames.isEmpty()) {
//                        if (ChangeViewByEvent) {
//                            int viewByCnt = container.getViewByCount();
//                            for (int i = 0; i < container.getViewByCount(); i++) {
//                                if (!viewByColumnsAlist.contains(collect.tableColNames.get(i))) {
//                                    collect.tableColNames.remove(i);
//                                    collect.tableElementIds.remove(i);
//                                    viewByCnt--;
//                                }
//                            }
//                            for (int j = 0; j < viewByColumnsAlist.size(); j++) {
//                                if (!collect.tableColNames.contains(viewByColumnsAlist.get(j))) {
//                                    collect.tableColNames.add(viewByCnt, viewByColumnsAlist.get(j));
//                                    collect.tableElementIds.add(viewByCnt, "A_" + viewByElementdIdAlist.get(j));
//                                    viewByCnt++;
//                                }
//                            }
//                        }
//                    }
                    // end of code

                    container.setViewByCount((viewByCount));//added by santhosh.k on 01-03-2010 for row consolidation
//                    container.setCrosstabColumnSpan(reportQuery.getCrosstabColumnSpan());
                    container.setCrosstabColumnSpan(newCrossRetObj.colSpanMap);

                } else {//for normal report
                    container.setReportCrosstab(false);
                    originalColumns = container.getOriginalColumns();
                    displayColumns = container.getDisplayColumns();
                    displayLabels = container.getDisplayLabels();
                    dataTypes = container.getDataTypes();
                    displayTypes = container.getDisplayTypes();
                    links = container.getLinks();
                    replinks = container.getRepLinks();
//                    signs = container.getSigns();
                    alignments = container.getAlignments();
                    columnsVisibility = container.getColumnsVisibility();
                    if (!exportReport && !isonespeedreduce) {
                        links = collect.getRowViewDrillUrl(PbUserId);//collect.tableColDrill;
                        replinks = collect.getRepDrillMap(PbUserId);
                    }
                    int viewByCount = collect.reportRowViewbyValues.size();
                    //
                    //for change by view we will always reset view by count
                    container.setViewByCount((collect.reportRowViewbyValues.size()));
                    if (originalColumns == null || originalColumns.size() == 0) {
                        //container.setViewByCount(String.valueOf(collect.reportRowViewbyValues.size()));
//                        TableHashMap.put("ColorCodeMap", collect.ColorCodeMap);
                        originalColumns = originalColumns == null ? new ArrayList() : originalColumns;
                        for (int i = 0; i < collect.reportRowViewbyValues.size(); i++) {
                            if (String.valueOf(collect.reportRowViewbyValues.get(i)).equalsIgnoreCase("Time")) {
                                if (!originalColumns.contains(String.valueOf(collect.reportRowViewbyValues.get(i)))) {
                                    originalColumns.add(String.valueOf(collect.reportRowViewbyValues.get(i)));
                                }
                            } else if (String.valueOf(collect.reportRowViewbyValues.get(i)).contains("A_")) {
                                if (!originalColumns.contains(String.valueOf(collect.reportRowViewbyValues.get(i)))) {
                                    originalColumns.add(String.valueOf(collect.reportRowViewbyValues.get(i)));
                                }
                            } else if (!originalColumns.contains("A_" + String.valueOf(collect.reportRowViewbyValues.get(i)))) {
                                originalColumns.add("A_" + String.valueOf(collect.reportRowViewbyValues.get(i)));
                            }
                        }
                        //percentwise measure save change
                        //first get all measures from Query
                        for (int i = 0; i < reportQryElementIds.size(); i++) {
                            if (String.valueOf(reportQryElementIds.get(i)).contains("A_")) {
                                if (!originalColumns.contains(String.valueOf(reportQryElementIds.get(i)))) {
                                    originalColumns.add(String.valueOf(reportQryElementIds.get(i)));
                                }
                            } else if (!originalColumns.contains("A_" + String.valueOf(reportQryElementIds.get(i)))) {
                                originalColumns.add("A_" + String.valueOf(reportQryElementIds.get(i)));
                            }
                        }
                        //then add %wise measure from collect.tableELementId which is pertaining to Table
                        for (String tableElement : collect.tableElementIds) {
                            if (!originalColumns.contains(tableElement)) {
                                originalColumns.add(tableElement);
                            }
                        }
//                        if (container.getReportCollect().isIsExcelimportEnable() && newImportExcelRetObj!=null) {
//                            int count = pbretObj.getColumnNames().length;
//                            for (int i = count; i < newImportExcelRetObj.cols.length; i++) {
//                                originalColumns.add(dbColumns[i]);
////                                container.getDisplayLabels().add(dbColumns[i]);
//                            }
//                        }
                        //code written by swathi for the purpose of rowViewby sorting in case of Number type
                        if (dataTypes != null && !dataTypes.isEmpty()) {
                            dataTypes.clear();
                            alignments.clear();
                            displayTypes.clear();
                        } else {
                            dataTypes = new ArrayList();
                            alignments = new ArrayList();
                            displayTypes = new ArrayList();
                        }
                        int colNum = 0;
                        String dispCol;
                        int count = originalColumns.size();
                        if (container.getReportCollect().isIsExcelimportEnable() && newImportExcelRetObj != null) {
//                         count=(newImportExcelRetObj.cols.length-collect.reportRowViewbyValues.size());
                            count = newImportExcelRetObj.cols.length;
                        }
                        for (int dispIndex = 0; dispIndex < count; dispIndex++) {
                            if (dispIndex < originalColumns.size()) {
                                dispCol = (String) originalColumns.get(dispIndex);
                            } else {
                                dispCol = dbColumns[dispIndex];
                            }
                            if (!RTMeasureElement.isRunTimeMeasure(dispCol)) {
                                for (int j = 0; j < dbColumns.length; j++) {
                                    if (dispCol.equals(dbColumns[j])) {
                                        colNum = j;
                                        break;
                                    }
                                }

                                if (columnTypes[colNum].equalsIgnoreCase("VARCHAR2")) {
                                    dataTypes.add("C");
                                    alignments.add("LEFT");
                                } else if (columnTypes[colNum].equalsIgnoreCase("NUMBER")
                                        || columnTypes[colNum].equalsIgnoreCase("NUMERIC")
                                        || columnTypes[colNum].equalsIgnoreCase("FLOAT")
                                        || columnTypes[colNum].equalsIgnoreCase("DOUBLE")
                                        || columnTypes[colNum].equalsIgnoreCase("DECIMAL")
                                        || columnTypes[colNum].equalsIgnoreCase("BIGINT")
                                        || columnTypes[colNum].equalsIgnoreCase("INTEGER")
                                        || columnTypes[colNum].equalsIgnoreCase("INT")) {
                                    dataTypes.add("N");
                                    alignments.add("RIGHT");
                                } else if (columnTypes[colNum].equalsIgnoreCase("CALCULATED")) {
                                    dataTypes.add("N");
                                    alignments.add("RIGHT");
                                } else if (columnTypes[colNum].equalsIgnoreCase("SUMMARISED")) {
                                    dataTypes.add("N");
                                    alignments.add("RIGHT");
                                } else if (columnTypes[colNum].equalsIgnoreCase("DATE") || columnTypes[colNum].equalsIgnoreCase("datetime")) {
                                    dataTypes.add("D");
                                    alignments.add("RIGHT");
                                } else {
                                    dataTypes.add("C");
                                    alignments.add("LEFT");
                                }
                                if (colNum < viewByCount) {
                                    displayTypes.add("H");
                                } else {
                                    displayTypes.add("T");
                                }
                            } else {
                                //it's a calculated column - PercentWise
                                dataTypes.add("N");
                                displayTypes.add("T");
                                alignments.add("RIGHT");
                            }
                        }
                        //code ended

                        ////
                        ///
                    } else {
                        viewByCount = collect.reportRowViewbyValues.size();//Integer.parseInt(container.getViewByCount());
                        if (ChangeViewByEvent || isParmChngEvent) {
//                                displayColumns = collect.tableElementIds;
//                                originalColumns = collect.tableElementIds;
                            originalColumns = this.constructOrigDispCols(originalColumns, collect.reportRowViewbyValues, container, "original");
                            displayColumns = this.constructOrigDispCols(displayColumns, collect.reportRowViewbyValues, container, "display");
                            if (container.isSummarizedMeasuresEnabled()) {
                                HashMap summarizedmMesMap = container.getSummerizedTableHashMap();
                                ArrayList summmeas = new ArrayList();
                                if (summarizedmMesMap != null && !summarizedmMesMap.isEmpty()) {
                                    summmeas.addAll((List<String>) summarizedmMesMap.get("summerizedQryeIds"));
                                }
                                for (int i = 0; i < summmeas.size(); i++) {
                                    if (!displayColumns.contains("A_" + summmeas.get(i))) {
                                        displayColumns.add("A_" + summmeas.get(i).toString());
                                    }

                                }
                            }
                            if (ChangeViewByEvent) {
                                //for Change View By Event
                                //Construct Data Types/Display Types and Links
                                //We can't get it from Collect because
                                dataTypes.clear();
                                alignments.clear();
                                displayTypes.clear();
                                links.clear();
                                replinks.clear();
                                int colNum = 0;
                                String dispCol;
                                int count = displayColumns.size();
                                if (container.getReportCollect().isIsExcelimportEnable() && newImportExcelRetObj != null) {
//                         count=(newImportExcelRetObj.cols.length-collect.reportRowViewbyValues.size());
                                    count = newImportExcelRetObj.cols.length;
                                }
//                                    for (int dispIndex = 0; dispIndex < displayColumns.size(); dispIndex++) {
                                for (int dispIndex = 0; dispIndex < count; dispIndex++) {
                                    if (dispIndex < displayColumns.size()) {
                                        dispCol = (String) displayColumns.get(dispIndex);
                                    } else {
                                        dispCol = dbColumns[dispIndex];
                                    }
//                                        dispCol = (String) displayColumns.get(dispIndex);
                                    if (!RTMeasureElement.isRunTimeMeasure(dispCol)) {
                                        for (int j = 0; j < dbColumns.length; j++) {
                                            if (dispCol.equals(dbColumns[j])) {
                                                colNum = j;
                                                break;
                                            }
                                        }

                                        if (columnTypes[colNum].equalsIgnoreCase("VARCHAR2")) {
                                            dataTypes.add("C");
                                            alignments.add("LEFT");
                                        } else if (columnTypes[colNum].equalsIgnoreCase("NUMBER")
                                                || columnTypes[colNum].equalsIgnoreCase("NUMERIC")
                                                || columnTypes[colNum].equalsIgnoreCase("FLOAT")
                                                || columnTypes[colNum].equalsIgnoreCase("DOUBLE")
                                                || columnTypes[colNum].equalsIgnoreCase("DECIMAL")
                                                || columnTypes[colNum].equalsIgnoreCase("BIGINT")
                                                || columnTypes[colNum].equalsIgnoreCase("INTEGER")
                                                || columnTypes[colNum].equalsIgnoreCase("INT")) {
                                            dataTypes.add("N");
                                            alignments.add("RIGHT");
                                        } else if (columnTypes[colNum].equalsIgnoreCase("CALCULATED")) {
                                            dataTypes.add("N");
                                            alignments.add("RIGHT");
                                        } else if (columnTypes[colNum].equalsIgnoreCase("SUMMARISED")) {
                                            dataTypes.add("N");
                                            alignments.add("RIGHT");
                                        } else if (columnTypes[colNum].equalsIgnoreCase("DATE") || columnTypes[colNum].equalsIgnoreCase("datetime")) {
                                            dataTypes.add("D");
                                            alignments.add("RIGHT");
                                        } else {
                                            dataTypes.add("C");
                                            alignments.add("LEFT");
                                        }
                                        if (colNum < viewByCount) {
                                            displayTypes.add("H");
                                        } else {
                                            displayTypes.add("T");
                                        }
                                    } else {
                                        //it's a calculated column - PercentWise
                                        dataTypes.add("N");
                                        displayTypes.add("T");
                                        alignments.add("RIGHT");
                                    }
                                }
                            } else {
                                //for Parameter Change Event collect.getParamMetadata() would have fired
                                //so we can set the datatypes/displaytypes and links
                                dataTypes = container.getDataTypes();
                                displayTypes = container.getDisplayTypes();
                            }
                            if (!exportReport && !isonespeedreduce) {
                                links = collect.getRowViewDrillUrl(PbUserId);//tableColDrill;
                                replinks = collect.getRepDrillMap(PbUserId);
                            }
                        } else if (!isGrpMeasChgEvent && !isMeasChangeEvent && !isMapMeasChgEvent && !getIsSnapShot()) {
                            originalColumns = this.constructOrigDispCols(originalColumns, collect.reportRowViewbyValues, container, "original");
                            displayColumns = this.constructOrigDispCols(displayColumns, collect.reportRowViewbyValues, container, "display");
                        }

                    }
                    // // ////.println(collect.tableElementIds+" "+collect.reportQryElementIds);
                    displayColumns = (displayColumns == null || displayColumns.isEmpty()) ? (ArrayList) collect.tableElementIds.clone() : displayColumns;
                    if (container.getReportCollect().isIsExcelimportEnable() && newImportExcelRetObj != null) {
                        int count = pbretObj.getColumnNames().length;
                        for (int i = count; i < newImportExcelRetObj.cols.length; i++) {
                            displayColumns.add(dbColumns[i]);
//                                container.getDisplayLabels().add(dbColumns[i]);
                        }
                    }
                    dataTypes = (dataTypes == null || dataTypes.isEmpty()) ? collect.tableColTypes : dataTypes;
                    displayTypes = (displayTypes == null || displayTypes.isEmpty()) ? collect.tableColDispTypes : displayTypes;
//                    if (!exportReport && !isonespeedreduce) {
//                        links = (links == null || links.isEmpty()) ? collect.getRowViewDrillUrl(PbUserId) : links;
//                        replinks = (replinks == null || replinks.isEmpty()) ? collect.getRepDrillMap(PbUserId) : replinks;
//                    }
                    if (collect.reportIncomingParameters.get("isKpiDashboard") != null && collect.reportIncomingParameters.get("isKpiDashboard").toString().equalsIgnoreCase("true")) {
                        if (collect.reportIncomingParameters.get("reportDrill") != null && collect.reportIncomingParameters.get("reportDrill").toString().equalsIgnoreCase("Y")) {
                            if (displayLabels == null || displayLabels.isEmpty()) {
                            } else if (displayLabels != null || !displayLabels.isEmpty()) {
                                displayLabels.clear();
                            }
                        }
                    }
//                    signs = collect.columnSignType;
                    if (displayLabels == null || displayLabels.isEmpty()) {
                        displayLabels = (ArrayList) collect.tableColNames.clone();
                        if (container.getReportCollect().isIsExcelimportEnable() && newImportExcelRetObj != null) {
                            int count = pbretObj.getColumnNames().length;
                            for (int i = count; i < newImportExcelRetObj.cols.length; i++) {
                                displayLabels.add(dbColumns[i]);
//                                container.getDisplayLabels().add(dbColumns[i]);
                            }
                        }
                    } else {
                        displayLabels = new ArrayList();
                        for (int viewByIndex = 0; viewByIndex < collect.reportRowViewbyValues.size(); viewByIndex++) {
                            displayLabels.add(collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(viewByIndex))));
                        }
                        HashMap tableHM = container.getTableHashMap();
                        List measures = (List) tableHM.get("Measures");
                        List measNames = (List) tableHM.get("MeasuresNames");
                        for (int viewByIndex = collect.reportRowViewbyValues.size(); viewByIndex < displayColumns.size(); viewByIndex++) {
                            String columnName = String.valueOf(displayColumns.get(viewByIndex));
                            if (RTMeasureElement.isRunTimeMeasure(columnName)) {
                                if (measures.contains(columnName)) {
                                    int index = measures.indexOf(columnName);
                                    displayLabels.add(measNames.get(index));
                                } else {
                                    String colSuffix = RTMeasureElement.getMeasureType(columnName).getColumnDisplay();
                                    columnName = RTMeasureElement.getOriginalColumn(columnName);
                                    displayLabels.add(NonViewByMap.get(columnName) + colSuffix);
                                }
//                                    int isPercentColumnIndex = String.valueOf(displayColumns.get(viewByIndex)).indexOf(PercentColumn);
//                                    if (isPercentColumnIndex != -1) {
//                                        columnName = columnName.substring(0, isPercentColumnIndex);
//                                        displayLabels.add(repQuery.NonViewByMap.get(columnName) + " (% wise)");
//                                    } else if (RTMeasureElement.getMeasureType(columnName) == RTMeasureElement.RANK) {
//                                        columnName = columnName.substring(0, columnName.indexOf(RTMeasureElement.RANK.getColumnType()));
//                                        displayLabels.add(repQuery.NonViewByMap.get(columnName) + RTMeasureElement.RANK.getColumnDisplay());
//                                    }
                            } else if (container.getMeasureName(columnName) != null) {
                                displayLabels.add(container.getMeasureName(columnName));
                            } else if (NonViewByMap.containsKey(columnName)) {
                                displayLabels.add(NonViewByMap.get(columnName));
                            } else {
                                displayLabels.add(columnName);
                            }
                            columnName = null;
                        }
                    }
//                     if (container.getReportCollect().isIsExcelimportEnable() && newImportExcelRetObj!=null) {
//                            int count = pbretObj.getColumnNames().length;
//                            for (int i = count; i < newImportExcelRetObj.cols.length; i++) {
//                                displayLabels.add(dbColumns[i]);
////                                container.getDisplayLabels().add(dbColumns[i]);
//                            }
//                        }

                    ArrayList viewByColumnsAlist = new ArrayList();
                    ArrayList viewByElementdIdAlist = new ArrayList();
                    for (int i = 0; i < viewByCount; i++) {
                        if (String.valueOf(displayColumns.get(i)).equalsIgnoreCase("TIME")) {
                            viewByElementdIdAlist.add(String.valueOf(displayColumns.get(i)));

                        } else {
                            viewByElementdIdAlist.add(String.valueOf(displayColumns.get(i)).substring(2));

                        }
                        viewByColumnsAlist.add(String.valueOf(displayLabels.get(i)));
                    }
                    container.setViewByColNames(viewByColumnsAlist);
                    container.setViewByElementIds(viewByElementdIdAlist);
                    REP = viewByElementdIdAlist;
                    REPNames = viewByColumnsAlist;
                }

                if (!ChangeViewByEvent) {
                    for (int i = alignments.size(); i < dataTypes.size(); i++) {
                        dataType = String.valueOf(dataTypes.get(i));
                        if ("C".equals(dataType)) {
                            alignments.add("LEFT");
                        } else if ("D".equals(dataType)) {
                            alignments.add("CENTER");
                        } else if ("N".equals(dataType)) {
                            alignments.add("RIGHT");
                        } else if ("CBX".equals(dataType)) {
                            alignments.add("CENTER");
                        }
                    }
                    for (int extraCnt = dataTypes.size(); extraCnt < displayColumns.size(); extraCnt++) {
                        dataTypes.add(extraCnt, "N");
                        displayTypes.add(extraCnt, "T");
                        alignments.add("RIGHT");
                    }
                }
                /*
                 * else { //For Change View By Event reset the alignments
                 * alignments = new ArrayList(); for ( int i = 0;
                 * i<dataTypes.size(); i++ ) { dataType =
                 * (String)dataTypes.get(i); if ("C".equals(dataType))
                 * alignments.add("LEFT"); else if ("D".equals(dataType))
                 * alignments.add("CENTER"); else if ("N".equals(dataType))
                 * alignments.add("RIGHT"); else if ("CBX".equals(dataType))
                 * alignments.add("CENTER"); }
                }
                 */
                for (int i = 0; i < displayColumns.size(); i++) {
                    links.add("");
                }

                container.setColumnsVisibility(columnsVisibility);
                //container.setDefaultPagesPerSlide(25);
                //container.setSearchReq(true);
                container.setCurrentPage(1);
                container.setOriginalColumns(originalColumns);
                container.setDisplayColumns(displayColumns);
                container.setDisplayLabels(displayLabels);
                container.setDisplayLabelskpi(displayLabelskpi);

                container.setDataTypes(dataTypes);
                container.setDisplayTypes(displayTypes);
                container.setLinks(links);
                container.setRepLinks(replinks);
                container.setSelected(new ArrayList());
//                container.setSigns(signs);
                container.setAlignments(alignments);
                container.setReportCollect(collect);
                container.setReportName(collect.reportName);
                container.setReportDesc(collect.reportDesc);
                if (!container.getAllColumns().isEmpty() || (collect.timePeriodsList != null && !collect.timePeriodsList.equalsIgnoreCase(""))) {

                    progenBD.getAllChangePercenrMeasures((PbReturnObject) pbretObj, container);

                }
                //code to refresh progen tables
                container.setSortRetObj(null);
//                container.setPagesPerSlide("All");
                if (!(collect.reportColViewbyValues != null && !collect.reportColViewbyValues.isEmpty())) {
                    container.getRetObj().resetViewSequence();
                }
                //container.setSortColumn(null, "");//, "");
                //container.setSortType(null);
                //container.setSigns(null);
                container.setSelected(new ArrayList());
                //container.setSearchColumn(null, null,null);

                container.getRtExcelColumns().clear();
                container.getRtTargetColumns().clear();
                for (int i = 0; i < displayColumns.size(); i++) {
                    String col = (String) displayColumns.get(i);
                    if (RTMeasureElement.isRunTimeExcelColumn(col)) {
                        container.getRtExcelColumns().add(col);
                    }
                    if (RTMeasureElement.isRunTimeExcelTargetColumn(col)) {
                        container.getRtTargetColumns().add(col);
                    }
                }

                if (isMeasChangeEvent == false && ChangeViewByEvent == false && isGrpMeasChgEvent == false && isMapMeasChgEvent == false && isParmChngEvent == false && isGrpByAnlys == false) //for measure change we will not refresh to originals
                {
                    container.refreshToOriginals();
                    container.setDisplayColumns(displayColumns);
                }

                //Do not reset Sort if its a mere Measure Change in Graph/Table
//                if (isMeasChangeEvent == false && isGrpMeasChgEvent == false && isParmChngEvent == false && ) {
//                    container.setSortColumn(null, "");//, "");
//                }                //end of code to refresh
                //newly added by santhosh.kumar@progenbusiness.com on 20/11/2009 for the  purpose of customize report
                ParameterStr = (String[]) (collect.reportParameters.keySet()).toArray(new String[0]);
                TimeParametersStr = (String[]) (collect.timeDetailsMap.keySet()).toArray(new String[0]);

                for (int paramIndex = 0; paramIndex < ParameterStr.length; paramIndex++) {
                    ArrayList alist = (ArrayList) collect.reportParameters.get(ParameterStr[paramIndex]);
                    if (Parameters == null) {
                        Parameters = new ArrayList();
                        ParametersNames = new ArrayList();
                    }
                    Parameters.add(ParameterStr[paramIndex]);
                    ParametersNames.add(String.valueOf(alist.get(1)));
                    alist = null;

                }
                for (int timeIndex = 0; timeIndex < TimeParametersStr.length; timeIndex++) {
                    ArrayList alist = (ArrayList) collect.timeDetailsMap.get(TimeParametersStr[timeIndex]);
                    if (ReportTimeParams == null) {
                        ReportTimeParams = new ArrayList();
                        ReportTimeParamsNames = new ArrayList();
                    }
                    ReportTimeParams.add(TimeParametersStr[timeIndex]);
                    ReportTimeParamsNames.add(String.valueOf(alist.get(2)));
                    alist = null;
                }
                //we will use viewCount instead of collect.reportRowViewByValues because during Group By Analysis viewCount is incremented by 1
                if (!container.getFromLocalCollect()) {
                    if (isOpenRepEvent || isParmChngEvent) {
                        if (Measures == null) {
                            Measures = new ArrayList();
                            allMeasures = new ArrayList();
                            MeasuresNames = new ArrayList();
                        }
                        if ((collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() != 0)) {
                            if (isRTmeasExists) {
                                for (int msrIndex = (container.getViewByCount()); msrIndex < collect.tableElementIds.size(); msrIndex++) {
//                            if(msrIndex==0){
//                            Measures.add(String.valueOf(collect.tableElementIds.get(msrIndex)));
//                            MeasuresNames.add(String.valueOf(collect.tableColNames.get(msrIndex)));
//                            }else{
                                    Measures.add(String.valueOf(collect.tableElementIds.get(msrIndex)));
                                    allMeasures.add(String.valueOf(collect.tableElementIds.get(msrIndex)));
                                    if (RTMeasureElement.isRunTimeMeasure(collect.tableElementIds.get(msrIndex))) {
                                        MeasuresNames.add(String.valueOf(collect.reportQryColNames.get(collect.reportQryElementIds.indexOf(collect.tableElementIds.get(msrIndex).replace("_percentwise", "").replace("A_", "").trim()))) + " (% wise)");
                                    } else {
                                        MeasuresNames.add(String.valueOf(collect.tableColNames.get(msrIndex)));
                                    }
//                            }
                                }

                            } else {
                                for (int msrIndex = (container.getViewByCount()); msrIndex < collect.tableElementIds.size(); msrIndex++) {
                                    Measures.add(String.valueOf(collect.tableElementIds.get(msrIndex)));
                                    allMeasures.add(String.valueOf(collect.tableElementIds.get(msrIndex)));
                                    MeasuresNames.add(String.valueOf(collect.tableColNames.get(msrIndex)));
                                }

                                if (container.isReportCrosstab() && container.isSummarizedMeasuresEnabled() && container.getSummerizedTableHashMap() != null && !container.getSummerizedTableHashMap().isEmpty()) {
                                    for (int msrIndex = 0; msrIndex < container.getSummerizedTableHashMap().get("summerizedQryeIds").size(); msrIndex++) {
                                        allMeasures.add("A_" + container.getSummerizedTableHashMap().get("summerizedQryeIds").get(msrIndex));
                                        //MeasuresNames.add(container.getSummerizedTableHashMap().get("summerizedQryColNames").get(msrIndex));
                                    }
                                }

                            }
                        } else {
                            for (int msrIndex = (container.getViewByCount()); msrIndex < collect.tableElementIds.size(); msrIndex++) {
                                if (Measures == null) {
                                    Measures = new ArrayList();
                                    allMeasures = new ArrayList();
                                    MeasuresNames = new ArrayList();
                                }
                                Measures.add(String.valueOf(collect.tableElementIds.get(msrIndex)));
                                allMeasures.add(String.valueOf(collect.tableElementIds.get(msrIndex)));
                                MeasuresNames.add(String.valueOf(collect.tableColNames.get(msrIndex)));
                            }
                        }
                        container.setColumnProperties(this.resetColumnProperties(allMeasures, container));
                        //end of code by Bhargavi

//                    TableHashMap.put("Measures", Measures);
//                    TableHashMap.put("MeasuresNames", MeasuresNames);
                    }
                }
//                ReportHashMap.put("ReportName", collect.reportName);
//                ReportHashMap.put("ReportDesc", collect.reportDesc);
                ReportHashMap.put("ReportFolders", collect.reportBizRoles);

                ArrayList alist = new ArrayList();
                for (String str : collect.reportBizRoles) {
                    alist.add(str);
                }
                ParametersHashMap.put("UserFolderIds", alist.toString().replace("[", "").replace("]", ""));
                if (collect.reportColViewbyValues == null || collect.reportColViewbyValues.size() == 0) {
                    if (ReportHashMap.get("DisplayNamesMap") != null) {
                        DisplayNamesMap = (HashMap) ReportHashMap.get("DisplayNamesMap");
                    } else {
                        DisplayNamesMap = new HashMap();
                    }
                    DisplayNamesMap = NonViewByMap;
                    ReportHashMap.put("DisplayNamesMap", DisplayNamesMap);
                }
                if (Measures == null && isRTmeasExists) {
                    Measures = new ArrayList();
                    MeasuresNames = new ArrayList();

                    if ((collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() != 0)) {
                        if (isRTmeasExists) {
                            for (int msrIndex = (container.getViewByCount()); msrIndex < collect.tableElementIds.size(); msrIndex++) {
                                if (msrIndex == 0) {
                                    Measures.add(String.valueOf(collect.tableElementIds.get(msrIndex)));
                                    MeasuresNames.add(String.valueOf(collect.tableColNames.get(msrIndex)));
                                } else {
                                    Measures.add(String.valueOf(collect.tableElementIds.get(msrIndex)));
                                    MeasuresNames.add(String.valueOf(collect.tableColNames.get(msrIndex)));
                                }
                            }

                        } else {
                            for (int msrIndex = (container.getViewByCount()); msrIndex < collect.tableElementIds.size(); msrIndex++) {
                                Measures.add(String.valueOf(collect.tableElementIds.get(msrIndex)));
                                MeasuresNames.add(String.valueOf(collect.tableColNames.get(msrIndex)));
                            }
                        }
                    } else {
                        for (int msrIndex = (container.getViewByCount()); msrIndex < collect.tableElementIds.size(); msrIndex++) {
                            if (Measures == null) {
                                Measures = new ArrayList();
                                MeasuresNames = new ArrayList();
                            }
                            Measures.add(String.valueOf(collect.tableElementIds.get(msrIndex)));
                            MeasuresNames.add(String.valueOf(collect.tableColNames.get(msrIndex)));
                        }
                    }
                    container.setColumnProperties(this.resetColumnProperties(Measures, container));
                    TableHashMap.put("Measures", Measures);
                    TableHashMap.put("MeasuresNames", MeasuresNames);
                }

                ParametersHashMap.put("Parameters", Parameters);
                ParametersHashMap.put("ParametersNames", ParametersNames);
                ParametersHashMap.put("TimeParameters", ReportTimeParams);
                ParametersHashMap.put("TimeParametersNames", ReportTimeParamsNames);
                if (getIsSnapShot()) {
                } else {
                    ParametersHashMap.put("TimeDimHashMap", collect.timeDetailsMap);
                    ParametersHashMap.put("TimeDetailstList", collect.timeDetailsArray);
                }
                // // ////.println("vb dsn cms===" + ParametersHashMap);
                TableHashMap.put("REP", REP);
                TableHashMap.put("REPNames", REPNames);
                TableHashMap.put("CEP", collect.reportColViewbyValues);
                TableHashMap.put("CEPNames", CEPNames);
                
                //added by anitha for RT Time Agg Compare with
                if (collect.tablePropertiesXML != null) {
                    if(container.getAOId()!=null && !container.getAOId().equalsIgnoreCase("")){
                        ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.rtMeasureCompareWith(container, collect.tablePropertiesXML);
                    }
                }
                //end of code by anitha for  RT Time Agg Compare with
                
                //setting measure only in case of open event
                //measures can be changed by hide/show measures and that time its set independently in ReportViewerAction.tableMeasureChanges
                if (isOpenRepEvent) //do not reset measures for meas change event, measures already set in ReportViewAction.tableMeasChange
                {
                    if (!container.getFromLocalCollect()) {//added by Dinanath
                        if (container.isReportCrosstab()) {
                            if (collect.getNumberFormat() != null) {
                                Set nfKeys = collect.getNumberFormat().keySet();
                                HashMap NFMap = collect.getNumberFormat();
                                HashMap NFMapCT = new HashMap();
                                Iterator nfKeysIter = nfKeys.iterator();
                                int whichMeasure;
                                while (nfKeysIter.hasNext()) {
                                    String measElement = (String) nfKeysIter.next();
                                    String nbrSymbol = (String) NFMap.get(measElement);
                                    if (nbrSymbol != null && !nbrSymbol.equals("")) {
                                        whichMeasure = Measures.lastIndexOf(measElement);
                                        whichMeasure += (container.getViewByCount());
                                        int size = displayColumns.size();
                                        String colName;
                                        for (int i = whichMeasure; i < size;) {
                                            colName = (String) displayColumns.get(i);
                                            NFMapCT.put(colName, nbrSymbol);
                                            i += Measures.size();
                                        }
                                        NFMapCT.put(measElement, nbrSymbol);
                                    }
                                }
                                TableHashMap.put("NFMap", NFMapCT);
                            }
                            if (collect.getRoundingPrecision() != null) {
                                int whichMeasure;
                                Set RndPrcsnKeys = collect.getRoundingPrecision().keySet();
                                HashMap<String, Integer> RndPrcsnMap = collect.getRoundingPrecision();
                                Iterator precisionItr = RndPrcsnKeys.iterator();
                                while (precisionItr.hasNext()) {
                                    String measElement = (String) precisionItr.next();
                                    int Precision = RndPrcsnMap.get(measElement);
                                    container.setRoundPrecisionForMeasure(measElement, Precision);

                                }

                            }
                            if (collect.scriptAligns != null && !collect.scriptAligns.isEmpty()) {
                                int whichMeasure;
                                Set scriptAlignKeys = collect.scriptAligns.keySet();
                                Map<String, String> scriptAlignMap = collect.scriptAligns;
                                Iterator scriptAlignItr = scriptAlignKeys.iterator();
                                while (scriptAlignItr.hasNext()) {
                                    String measElement = (String) scriptAlignItr.next();
                                    String scriptAlign = scriptAlignMap.get(measElement);
                                    updateScriptAlign(container, measElement, measElement, scriptAlign);
                                }

                            }
                            if (collect.measureAligns != null && !collect.measureAligns.isEmpty()) {
                                int whichMeasure;
                                Set measureAlignKeys = collect.measureAligns.keySet();
                                Map<String, String> measureAlignMap = collect.measureAligns;
                                Iterator measureAlignItr = measureAlignKeys.iterator();
                                while (measureAlignItr.hasNext()) {
                                    String measElement = (String) measureAlignItr.next();
                                    String measureAlign = measureAlignMap.get(measElement);
                                    updateMeasureAlign(container, measElement, measElement, measureAlign);
                                }
                            }
                        } else {
                            this.initializeSignsForMeasures(container);
                            if (collect.getNumberFormat() != null) {
                                TableHashMap.put("NFMap", collect.getNumberFormat());
                            }
                            if (collect.getRoundingPrecision() != null) {
                                Set RndPrcsnKeys = collect.getRoundingPrecision().keySet();
                                HashMap<String, Integer> RndPrcsnMap = collect.getRoundingPrecision();
                                Iterator precisionItr = RndPrcsnKeys.iterator();
                                while (precisionItr.hasNext()) {
                                    String measElement = (String) precisionItr.next();
                                    int Precision = RndPrcsnMap.get(measElement);
                                    container.setRoundPrecisionForMeasure(measElement, Precision);

                                }

                            }
                            if (collect.scriptAligns != null && !collect.scriptAligns.isEmpty()) {
                                int whichMeasure;
                                Set scriptAlignKeys = collect.scriptAligns.keySet();
                                Map<String, String> scriptAlignMap = collect.scriptAligns;
                                Iterator scriptAlignItr = scriptAlignKeys.iterator();
                                while (scriptAlignItr.hasNext()) {
                                    String measElement = (String) scriptAlignItr.next();
                                    String scriptAlign = scriptAlignMap.get(measElement);
                                    updateScriptAlign(container, measElement, measElement, scriptAlign);
                                }

                            }
                            if (collect.measureAligns != null && !collect.measureAligns.isEmpty()) {
                                int whichMeasure;
                                Set measureAlignKeys = collect.measureAligns.keySet();
                                Map<String, String> measureAlignMap = collect.measureAligns;
                                Iterator measureAlignItr = measureAlignKeys.iterator();
                                while (measureAlignItr.hasNext()) {
                                    String measElement = (String) measureAlignItr.next();
                                    String measureAlign = measureAlignMap.get(measElement);
                                    updateMeasureAlign(container, measElement, measElement, measureAlign);
                                }

                            }

                        }

                        TableHashMap.put("Measures", Measures);
                        TableHashMap.put("MeasuresNames", MeasuresNames);

                    }
                }

                //added by santhosh.kumar@progenbusimness.com on 01/12/2009 for changing/modifying graph columns at run time
                if (GraphHashMap.get("graphIds") != null && (collect.reportColViewbyValues == null || collect.reportColViewbyValues.size() == 0)) {
                    this.resetGraphProperties(container);
                }
                //end of code added by santhosh.kumar@progenbusiness.com on 01/12/2009

                if (!isMeasChangeEvent && !isParmChngEvent && !isGrpMeasChgEvent && !isMapMeasChgEvent) //for measure change we will not reset all this back
                {
                    container.setReportHashMap(ReportHashMap);
                    container.setParametersHashMap(ParametersHashMap);
                    container.setTableHashMap(TableHashMap);

                    //For setting start index and next index needed for graph next previous first last navigation
                    if (GraphHashMap.get("graphIds") != null && !GraphHashMap.get("graphIds").toString().equalsIgnoreCase("")) {
                        String[] graphIds = String.valueOf(GraphHashMap.get("graphIds")).split(",");
                        HashMap[] graphMapDetails = new HashMap[graphIds.length];
                        for (int i = 0; i < graphIds.length; i++) {
                            graphMapDetails[i] = (HashMap) GraphHashMap.get(graphIds[i]);
                            String dispRows = (String) graphMapDetails[i].get("graphDisplayRows");
                            if (graphMapDetails[i] != null) {
                                graphMapDetails[i].put("startindex", "0");
                                graphMapDetails[i].put("endindex", dispRows);

                                GraphHashMap.put(graphIds[i], graphMapDetails[i]);
                            }
                        }
                    }
                    container.setGraphHashMap(GraphHashMap);
                    TableProperties = new HashMap();
                    if (container.getGrandTotalReq()) {
                        TableProperties.put("ShowTotalValues", "Y");//indicates show Total 0
                    } else {
                        TableProperties.put("ShowTotalValues", "N");//indicates show Total 0
                    }

                    if (container.getNetTotalReq()) {
                        TableProperties.put("ShowSubTotalValues", "Y");//indicates show sub Total 1
                    } else {
                        TableProperties.put("ShowSubTotalValues", "N");//indicates show sub Total 1
                    }

//                    if (container.getGrandTotalReq()) {
//                        TableProperties.put("ShowTotalValues", "Y");//indicates show Total 0
//                    } else {
//                        TableProperties.put("ShowTotalValues", "N");//indicates show Total 0
//                    }
//
//                    if (container.getNetTotalReq()) {
//                        TableProperties.put("ShowSubTotalValues", "Y");//indicates show sub Total 1
//                    } else {
//                        TableProperties.put("ShowSubTotalValues", "N");//indicates show sub Total 1
//                    }
                    if (container.getAvgTotalReq()) {
                        TableProperties.put("ShowAvgValues", "Y");//indicates show avg Total 2
                    } else {
                        TableProperties.put("ShowAvgValues", "N");//indicates show avg Total 2
                    }

                    if (container.getOverAllMaxValueReq()) {
                        TableProperties.put("ShowOvrAllMaxValues", "Y");//indicates show  over all max 3
                    } else {
                        TableProperties.put("ShowOvrAllMaxValues", "N");//indicates show  over all max 3
                    }

                    if (container.getOverAllMinValueReq()) {
                        TableProperties.put("ShowOvrAllMinValues", "Y");//indicates show over all min 4
                    } else {
                        TableProperties.put("ShowOvrAllMinValues", "N");//indicates show over all min 4
                    }

                    if (container.getCatMaxValueReq()) {
                        TableProperties.put("ShowCatMaxValues", "Y");//indicates show cat max 5
                    } else {
                        TableProperties.put("ShowCatMaxValues", "N");//indicates show cat max 5
                    }

                    if (container.getCatMinValueReq()) {
                        TableProperties.put("ShowCatMinValues", "Y");//indicates show cat min 6
                    } else {
                        TableProperties.put("ShowCatMinValues", "N");//indicates show cat min 6
                    }
                    if (container.isRowCountReq()) {
                        TableProperties.put("RowCount", "Y");//indicates show row count 7
                    } else {
                        TableProperties.put("RowCount", "N");//indicates show row count 7
                    }

                    if (container.getTableSymbols() != null) {
                        TableProperties.put("ColumnSymbols", container.getTableSymbols());
                    } else {
                        TableProperties.put("ColumnSymbols", " ");
                    }
                    if (container.getDefaultSortedColumn() != null) {
                        TableProperties.put("DefaultSortedColumn", container.getDefaultSortedColumn());
                    } else {
                        TableProperties.put("DefaultSortedColumn", " ");
                    }
//                    if (container.getTableDisplayRows() != null) {
//                        TableProperties.put("tableDisplayRows", container.getTableDisplayRows());
//                    } else {
//                        TableProperties.put("tableDisplayRows", "10");
//                    }
                    Measures = (ArrayList) TableHashMap.get("Measures");
                    ArrayList<String> colPropValues = new ArrayList<String>();
                    for (int i = 0; i < Measures.size(); i++) {
                        if (container.getGrandTotalReq()) {
                            colPropValues.add("Y");
                        } else {
                            colPropValues.add("N");
                        }
                        if (container.getNetTotalReq()) {
                            colPropValues.add("Y");
                        } else {
                            colPropValues.add("N");
                        }

//                    if (container.getGrandTotalReq()) {
//                         colPropValues.add("Y");
//                    } else {
//                              colPropValues.add("N");
//                    }
//
//                    if (container.getNetTotalReq()) {
//                         colPropValues.add("Y");
//                    } else {
//                              colPropValues.add("N");
//                    }
                        if (container.getAvgTotalReq()) {
                            colPropValues.add("Y");
                        } else {
                            colPropValues.add("N");
                        }

                        if (container.getOverAllMaxValueReq()) {
                            colPropValues.add("Y");
                        } else {
                            colPropValues.add("N");
                        }

                        if (container.getOverAllMinValueReq()) {
                            colPropValues.add("Y");
                        } else {
                            colPropValues.add("N");
                        }

                        if (container.getCatMaxValueReq()) {
                            colPropValues.add("Y");
                        } else {
                            colPropValues.add("N");
                        }

                        if (container.getCatMinValueReq()) {
                            colPropValues.add("Y");
                        } else {
                            colPropValues.add("N");
                        }

                        if (container.getTableSymbols() != null && !container.getTableSymbols().equalsIgnoreCase("")) {
                            TableProperties.put("ColumnSymbols", container.getTableSymbols());
                            colPropValues.add(container.getTableSymbols());
                        } else {
                            colPropValues.add("N");
                        }
                        if (container.getDefaultSortedColumn() != null) {
                            colPropValues.add("Y");
                        } else {
                            colPropValues.add("N");
                        }
                        if (container.isRowCountReq()) {
                            colPropValues.add("Y");
                        } else {
                            colPropValues.add("N");
                        }
                        colProperties.put((String) Measures.get(i), colPropValues);
                    }

                    //changed by surender
                    container.setColumnProperties(container.getColumnProperties());
                    // container.setColumnProperties(colProperties);
                    TableHashMap.put("TableProperties", TableProperties);
                }
                if (!isonespeedreduce) {
                    container.setColumnDrillLinks(collect.getColumnViewDrillUrl(PbUserId));
                }
                container.setFromColumn((container.getViewByCount())); //added by asnthosh.k on 06-03-2010 so as to start the displaying of columns in columns properties based on no of view bys

                if (isOpenRepEvent || isParmChngEvent || ChangeViewByEvent) {

                    if (isOpenRepEvent || ChangeViewByEvent) {
                        if (collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() > 0) {
                            container.setReportCrosstab(true);

                        } else {
                            container.setReportCrosstab(false);

                        }
                    }

                    if (container.isReportCrosstab()) {

                        if (collect.scriptAligns != null && !collect.scriptAligns.isEmpty()) {
                            int whichMeasure;
                            Set scriptAlignKeys = collect.scriptAligns.keySet();
                            Map<String, String> scriptAlignMap = collect.scriptAligns;
                            Iterator scriptAlignItr = scriptAlignKeys.iterator();
                            while (scriptAlignItr.hasNext()) {
                                String measElement = (String) scriptAlignItr.next();
                                String scriptAlign = scriptAlignMap.get(measElement);
                                container.setTextAlignments(measElement, scriptAlign);
                            }

                        }
                        this.initializeSignsForMeasures(container);
                        if (collect.getRoundingPrecision() != null) {
                            int whichMeasure;
                            Set RndPrcsnKeys = collect.getRoundingPrecision().keySet();
                            HashMap<String, Integer> RndPrcsnMap = collect.getRoundingPrecision();
                            Iterator precisionItr = RndPrcsnKeys.iterator();
                            while (precisionItr.hasNext()) {
                                String measElement = (String) precisionItr.next();
                                int Precision = RndPrcsnMap.get(measElement);
                                HashMap summarizedmMesMap = container.getSummerizedTableHashMap();
                                if (container.isSummarizedMeasuresEnabled() && container.getSummerizedTableHashMap() != null && ((List<String>) summarizedmMesMap.get("summerizedQryeIds")) != null && ((List<String>) summarizedmMesMap.get("summerizedQryeIds")).contains(measElement.replace("A_", ""))) {
                                    container.setRoundPrecisionForMeasure(measElement, Precision);
                                } else {
//                                whichMeasure =findMeasureIndexInCT(container, measElement);
//                                int size = displayColumns.size();
//                                int measCount = container.getReportMeasureCount();
//                                HashMap<String,String> crosstabMeasureId=((PbReturnObject)container.getRetObj()).crosstabMeasureId;
//                                 String colName;
//                                  for (int i = whichMeasure; i < size;) {
//                                  colName = (String) displayColumns.get(i);
//                                  if(container.isReportCrosstab() && crosstabMeasureId!=null && !crosstabMeasureId.isEmpty()){
//                                     container.setRoundPrecisionForMeasure(crosstabMeasureId.get(colName), Precision);
//                                    }
//                                  container.setRoundPrecisionForMeasure(colName, Precision);
//                                   i += measCount;
//                                  }
                                    whichMeasure = (container.getViewByCount());
                                    whichMeasure = Measures.lastIndexOf(measElement);
                                    int size = displayColumns.size();
                                    String colName;
                                    if (whichMeasure > 0) {
                                        for (int i = whichMeasure; i < size;) {
                                            colName = (String) displayColumns.get(i);
                                            container.setRoundPrecisionForMeasure(colName, Precision);

                                            i += Measures.size();
                                        }
                                    }
                                }
                            }

                        }

                        if (collect.measureAligns != null && !collect.measureAligns.isEmpty()) {
                            int whichMeasure;
                            Set measureAlignKeys = collect.measureAligns.keySet();
                            Map<String, String> measureAlignMap = collect.measureAligns;
                            Iterator measureAlignItr = measureAlignKeys.iterator();
                            while (measureAlignItr.hasNext()) {
                                String measElement = (String) measureAlignItr.next();
                                String measureAlign = measureAlignMap.get(measElement);
                                updateMeasureAlign(container, measElement, measElement, measureAlign);
                            }
                        }

                    }
                    ReportParameter repParam = container.getReportParameter();
                    if (repParam == null) {
                        repParam = new ReportParameter();

                    }
                    repParam.setReportParameters(collect.reportParametersValues);
                    ArrayList<String> colViewBys = new ArrayList<String>();
                    if (container.isReportCrosstab()) {
                        colViewBys = container.getColumnViewByElementIds();

                    }
                    ArrayList rowViewBys = container.getViewByElementIds();
                    repParam.setViewBys(rowViewBys, colViewBys);
                    repParam.notifyObserversOfUpdate(container.getNoOfDays());
                    container.setReportParameter(repParam);
                    if (ChangeViewByEvent) {
                        if (container.isTransposed()) {
                            if ((container.getViewByCount()) > 1 || container.isReportCrosstab()) {
                                container.setTransposeTable(false);

                            }
                        }
                    }
                }

                if (isOpenRepEvent || isMeasChangeEvent) {
                    this.initializeSignsForMeasures(container);
                    this.initializeFontColorForMeasures(container);
                }

                if (isOpenRepEvent) {
                    container.initializeRuntimeMeasures();
                    ColorCodeBuilder codeBuilder = new ColorCodeBuilder();
                    ColorGroup colorGroup = (ColorGroup) codeBuilder.buildColorCode(pbReportId, container);
                    container.setColorGroup(colorGroup);
                    ExcelCellFormatGroupBuilder cellBuilder = new ExcelCellFormatGroupBuilder();
                    ExcelCellFormatGroup excelCellGroup = cellBuilder.buildExcelCellGroup(pbReportId, container);
                    container.setExcelCellGroup(excelCellGroup);
                    ExcelColumnGroupBuilder colBuilder = new ExcelColumnGroupBuilder();
                    ExcelColumnGroup excelColGroup = colBuilder.buildExcelColumnGroup(pbReportId, container);
                    container.setExcelColumnGroup(excelColGroup);
                    ReportParameter repParam = container.getReportParameter();
                    repParam.addObserver(colorGroup);
                    repParam.addObserver(excelCellGroup);
                    repParam.addObserver(excelColGroup);
                    repParam.notifyObserversOfUpdate(container.getNoOfDays());

                    DimensionSegmentBuilder segBuilder = new DimensionSegmentBuilder();
                    Segment segment = segBuilder.buildDimensionSegment(pbReportId);

                    if (segment != null) {
                        container.setViewByChanged(true);
//                        this.addRunTimeDimensionColumn(container, RTDimensionElement.SEGMENT.getColumnType(), segment.getDimension());
//                        container.addDimensionSegment(container.getDisplayColumns().get(0), segment);
                        //this.addDimensionSegmentToContainer(container, segment);//.addsegmentationToDimension(container,segment);
                        container.addDimensionSegment(container.getDisplayColumns().get(0), segment);
                    }
                    WhatIfScenarioBuilder scenBuilder = new WhatIfScenarioBuilder();
                    WhatIfScenario wfScenario = scenBuilder.buildWhatIfScenario(collect.reportId);
                    if (wfScenario != null) {
                        container.setWhatIfScenario(wfScenario);
//                        WhatIfScenarioBD whatIfScenarioBD = new WhatIfScenarioBD();
//                        whatIfScenarioBD.performWhatIfInContainer(container);
                    }

                    if (collect.tablePropertiesXML != null) {
                        ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.updateTablePropertiesInContainer(container, collect.tablePropertiesXML);
                    }

                    if (lockedrepId != null && lockedelemId != null && collect.lockdatasetmap != null && !collect.lockdatasetmap.isEmpty()) {
                        ArrayList<String> searchColumns = new ArrayList<String>();
                        ArrayList<String> searchCondition = new ArrayList<String>();
                        ArrayList<Object> searchValue = new ArrayList<Object>();
                        searchColumns = lockedContainer.getSearchColumns();
                        searchCondition = lockedContainer.getSearchConditions();
                        searchValue = lockedContainer.getSearchValues();
                        if (!searchColumns.isEmpty()) {
                            int index = 0;
                            for (String srchcolumn : searchColumns) {
                                container.setSearchColumn(srchcolumn, searchCondition.get(index), searchValue.get(index).toString(), null);
                                index++;
                            }
                        }

                    }
                } else {
                    String firstColumn = container.getDisplayColumns().get(0);
                    //segment was there present, so we need to remove datatype and displaytype element 0
                    if (container.isDimensionSegmented(firstColumn) && isParmChngEvent) {
                        container.getDataTypes().remove(0);
                        container.getDisplayTypes().remove(0);
                    }
                }

                String firstColumn = container.getDisplayColumns().get(0);
                if (container.isDimensionSegmented(firstColumn)) {
                    Segment segment = container.getDimensionSegment(firstColumn);
                    this.addRunTimeDimensionColumn(container, RTDimensionElement.SEGMENT.getColumnType(), segment);
                    this.updateSegmentDataInContainer(container, segment.getDimension());
                }

                //for any event do search
                PbReportTableBD reportTableBD = new PbReportTableBD();
                reportTableBD.searchDataSet(container);
                //remove previous sorting if the container is modified
                if (ChangeViewByEvent || isMeasChangeEvent || isParmChngEvent || isDrillDown) {
                    updateSortSearchColumnsBasedOnDisplayColumns(container);
                }
                if (ChangeViewByEvent || isMeasChangeEvent || isDrillDown) {
                    updateSubTotalSortColumnsBasedOnDisplayColumns(container, isMeasChangeEvent);
                }

                List<String> rtExcelCols = container.getRtExcelColumns();
                ExcelColumnGroup colGroup = container.getExcelColumnGroup();
                for (String measId : rtExcelCols) {
                    RunTimeExcelColumn rtExcelCol = colGroup.getRunTimeColumn(measId);
                    if (rtExcelCol != null && !(rtExcelCol.isDataAvailable())) {
                        ReportParameter repParam = container.getReportParameter();
                        int rowCount = container.getRetObj().getRowCount();
                        ArrayList data = new ArrayList(rowCount);
                        for (int i = 0; i < rowCount; i++) {
                            data.add(0);
                        }
                        rtExcelCol.addColumn((ReportParameter) repParam.clone(), data);
                    }
                }

                //Add the excel column data to retObj.rtMeasMap
                for (String measId : rtExcelCols) {
                    int index = displayColumns.indexOf(measId);
                    ((POIDataSet) container.getRetObj()).addColumn(index - 1, measId);
                    int rowCount = container.getRetObj().getRowCount();
                    ArrayList<BigDecimal> newList = new ArrayList<BigDecimal>(rowCount);
                    ArrayList<Object> excelVals = new ArrayList<Object>(rowCount);
                    for (int i = 0; i < rowCount; i++) {
                        newList.add(BigDecimal.ZERO);
                    }

                    RunTimeExcelColumn rtCol = colGroup.getRunTimeColumn(measId);
                    for (int i = 0; i < rowCount; i++) {
                        Object obj = rtCol.getData(i);
                        excelVals.add(obj);
                        double dblValue = 0;
                        try {
                            dblValue = Double.parseDouble(obj.toString());
                        } catch (Exception e) {
                        }
                        newList.set(i, new BigDecimal(dblValue));
                    }

                    container.getRetObj().setRuntimeMeasure(measId, newList);
                    if (container.getRetObj() instanceof POIDataSet) {
                        ((POIDataSet) container.getRetObj()).setExcelRuntimeMeasure(measId, excelVals);
                    }
                }

                if (container.getWhatIfScenario() != null) {
                    WhatIfScenarioBD whatIfScenarioBD = new WhatIfScenarioBD();
                    whatIfScenarioBD.performWhatIfInContainer(container);
                }

                container.setGraphHashMap(GraphHashMap);

                if (tempTimeDetails != null) {
                    collect.timeDetailsArray = tempTimeDetails;
                    container.setTimeDetailsArray(tempTimeDetails);
                    tempTimeDetails = null;
                }
            } else {

                container.setTempRepQry(query);
                //
            }//isdependentreport purpose if condition
            if (!container.showPrevState) {
                if (container.repclctcnt != 55) {
                    //container.setCollectObject(container.repclctcnt, collect);
                    if (container.repclctcnt != 5) {
                        container.setCollectObject(container.repclctcnt, collect);
                        container.repclctcnt = container.repclctcnt + 1;
                    }

                } else {
                    container.repclctcnt = 0;
                }
            }
            //added by sruthi for hideGtzero

            if (container.getGrandTotalZero()) {
                pRvBD.hideGtMeasure(container, reportQryElementIds, reportQryAggregations);
            }//ended by sruthi
// if(isOpenRepEvent){
//         if(container.getMultiCalendarFlag()){
//             this.MultiCalendar(container,pbReportId);
//         }}
        }//try
        catch (Exception exp) {

            logger.error("Exception:", exp);
        }
    }
//modified by Dinanath

    private String getParameterDrillAssistance(PbReportCollection collect, HttpSession session) {
        String[] values = new String[collect.paramValueList.size()];
        String viewby = "";
        String viewbyvalues = "";

        StringBuilder SBViewByParamNames = new StringBuilder();

        for (int i = 0; i < collect.reportRowViewbyValues.size(); i++) {
            if (i == (collect.reportRowViewbyValues.size() - 1)) {
                if (String.valueOf(collect.reportRowViewbyValues.get(i)).equalsIgnoreCase("Time")) {
                    SBViewByParamNames.append("Time");
                } else {
                    SBViewByParamNames.append(collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(i))));
                }
            } else if (String.valueOf(collect.reportRowViewbyValues.get(i)).equalsIgnoreCase("Time")) {
                SBViewByParamNames.append("Time" + " - ");
            } else {
                SBViewByParamNames.append(collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(i)))).append(" - ");
            }
        }
        StringBuilder reportParamDrillAssis = new StringBuilder();
        reportParamDrillAssis.append("<Table width=\"200px\" style='overflow:auto'>");
        reportParamDrillAssis.append("<Tr>");
        reportParamDrillAssis.append("<Td>");
        //   // // ////.println("----------current-----"+SBViewByParamNames.toString());
        reportParamDrillAssis.append("<b style='font-weight:bold;color:#800000'>Current View</b> >> <b style='font-weight:bold;color:#009900'>").append(SBViewByParamNames.toString() + "</b>");
        reportParamDrillAssis.append("</Td>");
        reportParamDrillAssis.append("</Tr>");
        HashMap reportParamDrillAssisMap = new HashMap();
        if (collect.paramValueList != null) {
            for (int k = 0; k < collect.paramValueList.size(); k++) {
                values = collect.paramValueList.get(k).toString().split(":");
                viewby = values[0];
                viewbyvalues = values[1];
                reportParamDrillAssis.append("<Tr>");
                reportParamDrillAssis.append("<Td>");
                if (viewbyvalues.equalsIgnoreCase("All")) {
                    reportParamDrillAssis.append("<b style='font-weight:bold;'>").append(viewby).append("</b>:<b style='font-weight:bold;color:black'>").append(viewbyvalues).append("</b>");
                } else {
                    reportParamDrillAssis.append("<b style='font-weight:bold;'>").append(viewby).append("</b>:<a style='font-weight:bold;color:#FF6961' href='javascript:void(0)' onclick=\"shwparamAssis('").append(viewby).append("')\">Filter Applied</a>");
                }
                reportParamDrillAssis.append("</Td>");
                reportParamDrillAssis.append("</Tr>");

                reportParamDrillAssisMap.put(viewby, viewbyvalues);
//                session.setAttribute("reportParamDrillAssisMap", reportParamDrillAssisMap);
            }

            reportParamDrillAssis.append("</Table>");
            // // ////.println("reportParamDrillAssis" + reportParamDrillAssis.toString());
            //request.setAttribute("reportParamDrillAssis", reportParamDrillAssis.toString());
            //container.setReportParamDrillAssis(reportParamDrillAssis.toString());
        }
        session.setAttribute("reportParamDrillAssisMap", reportParamDrillAssisMap);
        return reportParamDrillAssis.toString();
    }

    public String getParameterRegionDisplay(PbReportCollection collect, String userId, String contextPath, String selectedParams, HashMap parameterHashMap, String userType, String reportId, Container container) {
        DisplayParameters dispParams = new DisplayParameters();
        dispParams.completeUrl1 = collect.completeUrl;

        boolean GTAverageBoolean = Boolean.parseBoolean(container.getgTAverage());
        dispParams.setUserId(Integer.parseInt(userId));
        String ParamSectionDisplay = "";
        try {
            ParamSectionDisplay = dispParams.newDisplayAllParams(collect.reportParameters, collect.timeDetailsMap, collect.reportViewByMain, collect.reportViewByOrder, collect.reportQryElementIds.get(0).toString(), collect.resetPath, contextPath, selectedParams, parameterHashMap, userType, reportId, GTAverageBoolean, collect, kpidashboard, container);
        } catch (SQLException ex) {
//            ProgenLog.log(ProgenLog.SEVERE, this, "getParameterRegionDisplay", "Exception " + ex.getMessage());
            logger.error("Exception:", ex);
        } catch (Exception ex) {
//            ProgenLog.log(ProgenLog.SEVERE, this, "getParameterRegionDisplay", "Exception " + ex.getMessage());
            logger.error("Exception:", ex);
        }
        return ParamSectionDisplay;
    }

    public String getglobalParameterRegionDisplay(PbReportCollection collect, String userId, String contextPath, String selectedParams, HashMap parameterHashMap, String userType, String reportId, Container container) {
        DisplayParameters dispParams = new DisplayParameters();
        dispParams.completeUrl1 = collect.completeUrl;

        boolean GTAverageBoolean = Boolean.parseBoolean(container.getgTAverage());
        dispParams.setUserId(Integer.parseInt(userId));
        String ParamSectionDisplay = "";
        try {
            ParamSectionDisplay = dispParams.getglobalparams(collect.reportParameters, collect.timeDetailsMap, collect.reportViewByMain, collect.reportViewByOrder, collect.reportQryElementIds.get(0).toString(), collect.resetPath, contextPath, selectedParams, parameterHashMap, userType, reportId, GTAverageBoolean, collect, kpidashboard, container);
        } catch (SQLException ex) {
//            ProgenLog.log(ProgenLog.SEVERE, this, "getParameterRegionDisplay", "Exception " + ex.getMessage());
            logger.error("Exception:", ex);
        } catch (Exception ex) {
//            ProgenLog.log(ProgenLog.SEVERE, this, "getParameterRegionDisplay", "Exception " + ex.getMessage());
            logger.error("Exception:", ex);
        }
        return ParamSectionDisplay;
    }

    public void updateParameterDrillMapDisplay(Container container) {
        PbReportCollection collect = container.getReportCollect();
        StringBuffer SBViewByParam = new StringBuffer();
        StringBuffer SBViewByParamNames = new StringBuffer();

        HashMap ParameterDrillMap = (container.getParameterDrillMap() == null) ? new HashMap() : container.getParameterDrillMap();

        for (int i = 0; i < collect.reportRowViewbyValues.size(); i++) {
            if (i == (collect.reportRowViewbyValues.size() - 1)) {
                SBViewByParam.append(String.valueOf(collect.reportRowViewbyValues.get(i)));
                if (String.valueOf(collect.reportRowViewbyValues.get(i)).equalsIgnoreCase("Time")) {
                    SBViewByParamNames.append("Time");
                } else {
                    SBViewByParamNames.append(collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(i))));
                }
            } else {
                SBViewByParam.append("-" + String.valueOf(collect.reportRowViewbyValues.get(i)));
                if (String.valueOf(collect.reportRowViewbyValues.get(i)).equalsIgnoreCase("Time")) {
                    SBViewByParamNames.append("Time" + " - ");
                } else {
                    SBViewByParamNames.append(collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(i))) + " - ");
                }
            }
        }
        ParameterDrillMap.put(SBViewByParam.toString(), collect.completeUrl);
        ParameterDrillMap.put("CurrentViewBy", SBViewByParam.toString());

        ArrayList ParameterSequence = ParameterDrillMap.get("ParameterSequence") == null ? new ArrayList() : (ArrayList) ParameterDrillMap.get("ParameterSequence");

        HashMap TempMap = null;
        boolean exists = false;
        for (int i = 0; i < ParameterSequence.size(); i++) {
            TempMap = (HashMap) ParameterSequence.get(i);
            if (TempMap.get("ParamElementId").toString().equalsIgnoreCase(SBViewByParam.toString())) {
                exists = true;
                break;
            }
        }
        if (!exists) {
            TempMap = new HashMap();
            TempMap.put("ParamElementId", SBViewByParam.toString());
            TempMap.put("ParamElementName", SBViewByParamNames.toString());
            ParameterSequence.add(TempMap);
        }

        TempMap = null;
        ParameterDrillMap.put("ParameterSequence", ParameterSequence);
        container.setParameterDrillMap(ParameterDrillMap);

        StringBuffer SbParameterDrillTable = new StringBuffer("");

        SbParameterDrillTable.append("<Table width=\"200px\">");
        SbParameterDrillTable.append("<Tr>");
        SbParameterDrillTable.append("<Td>");

        for (int i = 0; i < ParameterSequence.size(); i++) {
            TempMap = (HashMap) ParameterSequence.get(i);
            if (SBViewByParam.toString().equalsIgnoreCase(String.valueOf(TempMap.get("ParamElementId")))) {
                SbParameterDrillTable.append("<b style='font-weight:bold;color:black'>" + TempMap.get("ParamElementName") + "</b> >> ");
            } else {
                SbParameterDrillTable.append("<a href=\"javascript:void(0)\" style='font-weight:bold;' onclick=\"submiturls1('" + ParameterDrillMap.get(String.valueOf(TempMap.get("ParamElementId"))).toString().replace(";", "&") + "')\" >" + TempMap.get("ParamElementName") + "</a> >> ");
            }
            //SbParameterDrillTable.append("<a href=\"javascript:void(0)\" onclick=\"submiturls1('" + ParameterDrillMap.get(String.valueOf(TempMap.get("ParamElementId"))).toString().replace(";","&") + "')\" >" + TempMap.get("ParamElementName") + "</a> >> ");
            TempMap = null;
        }
        SbParameterDrillTable.append("</Td>");
        SbParameterDrillTable.append("</Tr>");
        SbParameterDrillTable.append("</Table>");
        container.setParameterDrillDisplay(SbParameterDrillTable.toString());
    }

    /**
     * Reset Graph Properties This will reset the Column Titles Column
     * ElementIds and update the GraphHashMap
     *
     * @param container - container to retrieve the GraphHashMap and update it
     * back
     */
    private void resetGraphProperties(Container container) {
        HashMap GraphHashMap = container.getGraphHashMap();
        LinkedHashMap<String, String> grphMeasMap;
        String[] graphIds = String.valueOf(GraphHashMap.get("graphIds")).split(",");
        HashMap[] graphMapDetails = new HashMap[graphIds.length];
        ArrayList graphCols = (ArrayList) GraphHashMap.get("AllGraphColumns");
        ArrayList<String> measureNames = null;
        ArrayList<String> measureTitles = null;
        for (int i = 0; i < graphIds.length; i++) {
            graphMapDetails[i] = (HashMap) GraphHashMap.get(graphIds[i]);
            if (graphMapDetails[i] != null) {
                String[] barChartColumnTitles = ((String[]) graphMapDetails[i].get("barChartColumnTitles"));
                String[] barChartColumnNames = ((String[]) graphMapDetails[i].get("barChartColumnNames"));
                String[] viewByElementIds = ((String[]) graphMapDetails[i].get("viewByElementIds"));
                String[] pieChartColumns = ((String[]) graphMapDetails[i].get("pieChartColumns"));

                String[] barChartColumnNames1 = ((String[]) graphMapDetails[i].get("barChartColumnNames1"));
                String[] barChartColumnTitles1 = ((String[]) graphMapDetails[i].get("barChartColumnTitles1"));
                String[] barChartColumnNames2 = ((String[]) graphMapDetails[i].get("barChartColumnNames2"));
                String[] barChartColumnTitles2 = ((String[]) graphMapDetails[i].get("barChartColumnTitles2"));

                String[] axis = ((String[]) graphMapDetails[i].get("axis"));

                String[] prevBarChartColumnNames1 = barChartColumnNames1;
                String[] prevBarChartColumnTitles1 = barChartColumnTitles1;
                String[] prevBarChartColumnNames2 = barChartColumnNames2;
                String[] prevBarChartColumnTitles2 = barChartColumnTitles2;
                String[] prevViewByElementIds = viewByElementIds;

                // For Change View By Event
                // Need to reset the GraphHashMap
                // barChartColumnTitles Names viewByElementIds should reflect the new view bys
                // reset them based on the new View Bys
                //find out the current Measures in the Graph
                grphMeasMap = (LinkedHashMap) graphMapDetails[i].get("graphMeasures");

                measureNames = new ArrayList<String>();
                measureTitles = new ArrayList<String>();

                if (grphMeasMap != null) {
                    Set<String> elementIdSet = grphMeasMap.keySet();
                    //for (int b = viewByElementIds.length; b < barChartColumnNames.length; b++) {
                    for (String elementId : elementIdSet) {
                        if (container.isBusTemplateFromOneview()) {
                            ArrayList<String> containerMsrNames = (ArrayList<String>) container.getTableHashMap().get("Measures");
                            ArrayList<String> containerMsrTitles = (ArrayList<String>) container.getTableHashMap().get("MeasuresNames");
                            if (containerMsrNames.contains(elementId)) {
                                measureNames.add(elementId);
                                measureTitles.add((String) grphMeasMap.get(elementId));
                            } else {
                                grphMeasMap = new LinkedHashMap<String, String>();
                                measureNames.add((String) containerMsrNames.get(0));
                                measureTitles.add((String) containerMsrTitles.get(0));
                                grphMeasMap.put((String) containerMsrNames.get(0), (String) containerMsrTitles.get(0));
                                graphMapDetails[i].put("graphMeasures", grphMeasMap);
                            }
                        } else {
                            measureNames.add(elementId);
                            measureTitles.add((String) grphMeasMap.get(elementId));
                        }
                    }
                } //when converting from CT to normal report grphMeasMap will be null
                //so in that case we will set the grphMeasMap here first
                //ideally should have kept in PbGraphDisplay get2dGraphHeaders
                //But for CT they are not storing record in PRG_AR_GRAPH_DETAILS where it stores element ids of measures
                //so can't get measure handle in PbGraphDisplay - so had to put this code here
                else {
                    measureNames = (ArrayList<String>) container.getTableMeasure();
                    measureTitles = (ArrayList<String>) container.getTableMeasureNames();
                    grphMeasMap = new LinkedHashMap<String, String>();
                    ArrayList<String> measureNamesAlst = new ArrayList<String>(measureNames.size());
                    int j = 0;
                    for (String meas : measureNames) {
                        grphMeasMap.put("A_" + meas, measureTitles.get(j));
                        measureNamesAlst.add("A_" + meas);
                        j++;
                    }
                    measureNames = measureNamesAlst;
                    graphMapDetails[i].put("graphMeasures", grphMeasMap);
                }
                int newLength = 0;
                int newLeftColLength = 0;
                int newRightColLength = 0;
                //find out current view element Ids
                newLength += container.getViewByElementIds().size();
                newLength += measureNames.size();

                //barChartColumnTitles = new String[container.getDisplayLabels().size()];
                //These are titles like Area, BP Name, Sales Amount
                barChartColumnTitles = new String[newLength];
                //pie chart columns
                pieChartColumns = new String[newLength];
                //Name is the element Id A_74733, A_834242, A_83832 (includes dim and meas)
                barChartColumnNames = new String[newLength];
                axis = new String[newLength];
                //Just the View By ELement Ids of Row Edge
                viewByElementIds = new String[container.getViewByElementIds().size()];

                newLeftColLength = prevBarChartColumnNames1.length + viewByElementIds.length - prevViewByElementIds.length;
                newRightColLength = prevBarChartColumnNames2.length + viewByElementIds.length - prevViewByElementIds.length;
                //Same as TItles
                //                                barChartColumnTitles1 = new String[container.getDisplayLabels().size()];

                if (prevBarChartColumnNames1[prevViewByElementIds.length].contains("A_")) {
                    barChartColumnTitles1 = new String[newLeftColLength];
                    barChartColumnNames1 = new String[newLeftColLength];
                    barChartColumnTitles2 = new String[newRightColLength];
                    barChartColumnNames2 = new String[newRightColLength];
                } else {
                    barChartColumnTitles1 = new String[newLength];
                    barChartColumnNames1 = new String[newLength];
                    barChartColumnTitles2 = new String[viewByElementIds.length];
                    barChartColumnNames2 = new String[viewByElementIds.length];
                }

                int j = 0;
                for (j = 0; j < container.getViewByElementIds().size(); j++) {
                    barChartColumnTitles[j] = (String) container.getViewByColNames().get(j);
                    //                                    ////.println("barChartColumnTitles[j]---"+barChartColumnTitles[j]);
                    barChartColumnNames[j] = (String) container.getViewByElementIds().get(j);

                    pieChartColumns[j] = (String) container.getViewByElementIds().get(j);
                    //                                    ////.println("barChartColumnNames[j]---"+barChartColumnNames[j]);
                    barChartColumnTitles1[j] = (String) container.getViewByColNames().get(j);
                    //                                    ////.println("barChartColumnTitles1[j]---"+barChartColumnTitles1[j]);
                    barChartColumnNames1[j] = (String) container.getViewByElementIds().get(j);
                    //                                    ////.println("barChartColumnNames1[j]---"+barChartColumnNames1[j]);
                    barChartColumnTitles2[j] = (String) container.getViewByColNames().get(j);
                    barChartColumnNames2[j] = (String) container.getViewByElementIds().get(j);
                    axis[j] = "0";
                }
                int m = 0;
                for (int b = viewByElementIds.length; b < barChartColumnNames.length; b++) {
                    barChartColumnTitles[b] = measureTitles.get(m);
                    //                                    ////.println("barChartColumnTitles[j]---"+barChartColumnTitles[j]);
                    barChartColumnNames[b] = measureNames.get(m);
                    //                                    ////.println("barChartColumnNames[j]---"+barChartColumnNames[j]);

                    pieChartColumns[b] = measureNames.get(m);

                    axis[b] = "0";

                    if (!prevBarChartColumnNames1[prevViewByElementIds.length].contains("A_")) {
                        barChartColumnTitles1[b] = measureNames.get(m);
                        //                                    ////.println("barChartColumnTitles1[j]---"+barChartColumnTitles1[j]);
                        barChartColumnNames1[b] = measureTitles.get(m);
                    }
                    //                                    ////.println("barChartColumnNames1[j]---"+barChartColumnNames1[j]);
                    m++;
                }
                if (prevBarChartColumnNames1[prevViewByElementIds.length].contains("A_")) {
                    int chart1 = prevViewByElementIds.length;
                    int chart2 = prevViewByElementIds.length;

                    for (int x = viewByElementIds.length; x < barChartColumnNames1.length; x++) {
                        barChartColumnNames1[x] = prevBarChartColumnNames1[chart1];
                        barChartColumnTitles1[x] = prevBarChartColumnTitles1[chart1];
                        chart1++;
                    }
                    for (int y = viewByElementIds.length; y < barChartColumnNames2.length; y++) {
                        barChartColumnNames2[y] = prevBarChartColumnNames2[chart2];
                        barChartColumnTitles2[y] = prevBarChartColumnTitles2[chart2];
                        chart2++;
                    }

                    for (int l = viewByElementIds.length; l < barChartColumnNames1.length; l++) {
                        if (l < axis.length) {
                            axis[l] = "0";
                        }
                    }
                    for (int k = barChartColumnNames1.length; k < barChartColumnNames.length; k++) {
                        axis[k] = "1";
                    }
                }
//                for (j = 0; j < container.getViewByElementIds().size(); j++) {
//                    viewByElementIds[j] = (String) container.getViewByElementIds().get(j);
//                    barChartColumnTitles2[j] = (String) container.getViewByColNames().get(j);
//                    barChartColumnNames2[j] = (String) container.getViewByElementIds().get(j);
//                }
//                for (j = viewByElementIds.length; j < barChartColumnNames.length; j++) {
//                    viewByElementIds[j] = (String) container.getViewByElementIds().get(j);
//                    barChartColumnTitles1[j] = (String) container.getViewByColNames().get(j);
//                    barChartColumnNames1[j] = (String) container.getViewByElementIds().get(j);
//                }

                graphMapDetails[i].put("barChartColumnTitles", barChartColumnTitles);
                graphMapDetails[i].put("barChartColumnNames", barChartColumnNames);
                graphMapDetails[i].put("viewByElementIds", viewByElementIds);
                graphMapDetails[i].put("barChartColumnTitles1", barChartColumnTitles1);
                graphMapDetails[i].put("barChartColumnNames1", barChartColumnNames1);
                graphMapDetails[i].put("barChartColumnTitles2", barChartColumnTitles2);
                graphMapDetails[i].put("barChartColumnNames2", barChartColumnNames2);
                graphMapDetails[i].put("pieChartColumns", pieChartColumns);
                graphMapDetails[i].put("axis", axis);

//                    for (int j = viewByElementIds.length; j < barChartColumnNames.length; j++) {
//                        barChartColumnTitles[j] = String.valueOf(DisplayNamesMap.get(barChartColumnNames[j]));
//                    }
//                    if (barChartColumnTitles1 != null && barChartColumnNames1 != null) {
//                        for (int j = viewByElementIds.length; j < barChartColumnNames1.length; j++) {
//                            barChartColumnTitles1[j] = String.valueOf(DisplayNamesMap.get(barChartColumnNames1[j]));
//                        }
//                    }
//                    if (barChartColumnTitles2 != null && barChartColumnNames2 != null) {
//                        for (int j = viewByElementIds.length; j < barChartColumnNames2.length; j++) {
//                            barChartColumnTitles2[j] = String.valueOf(DisplayNamesMap.get(barChartColumnNames2[j]));
//                        }
//                    }
            }
        }
    }

    /**
     * Construct the Original and Display Columns Original Columns are
     * constructed from the rowViewByLst which will give the row edge dimensions
     * Then Measures need to be added to it The measures are got from
     * ReportHashMap reportQryElementIds for Original Columns For Display
     * Columns these are got from TableHashMap Measures For both the cases we
     * pass the current set of columns in currColList This is needed to find if
     * there are any runtime measures added in the list or not Run time measure
     * will be _precentwise measure
     *
     * @param currColLst - Current Value of Original/Display columns
     * @param rowViewByLst - Current Row View By
     * @param container - The Container
     * @param colType - Original or Display
     * @return ArrayList of Original or Display Columns
     */
    private ArrayList<String> constructOrigDispCols(ArrayList<String> currColLst, ArrayList<String> rowViewByLst, Container container, String colType) {
        ArrayList<String> measLst;
        ArrayList qryElementIds = (ArrayList) container.getReportHashMap().get("reportQryElementIds");

        /*
         * if (colType.equals("original")) { measLst = (ArrayList)
         * container.getReportHashMap().get("reportQryElementIds");
         * ArrayList<String> a_measLst = new ArrayList<String>(); for (int i =
         * 0; i < measLst.size(); i++) { a_measLst.add("A_" + measLst.get(i)); }
         * measLst = a_measLst; } else {
         */
        HashMap tableHashMap = container.getTableHashMap();
        measLst = (ArrayList<String>) tableHashMap.get("Measures");
        ArrayList<String> a_measLst = new ArrayList<String>();
        for (int i = 0; i < measLst.size(); i++) {
            a_measLst.add(measLst.get(i));
        }
        measLst = a_measLst;
        //}

        ArrayList<String> refreshColLst = new ArrayList<String>();

        //In reportQryElementIds we will not have %wise Measures
        //so if there was originally a %wise column we have to add it back
        //display columns are refreshed from TableHashMap measures and it will have %wise columns added to it
//        ArrayList<String> percentMeasLst = new ArrayList<String>();
//        ArrayList<String> rankMeasLst = new ArrayList<String>();
        /*
         * ArrayListMultimap<String, RTMeasureElement> runTimeMeas =
         * ArrayListMultimap.create(); if (colType.equals("original")) { for
         * (String measure : currColLst) { if
         * (RTMeasureElement.isRunTimeMeasure(measure)) { String originalCol =
         * RTMeasureElement.getOriginalColumn(measure);
         * runTimeMeas.put(originalCol,
         * RTMeasureElement.getMeasureType(measure)); } }
        }
         */
        int i = 0;
        for (i = 0; i < rowViewByLst.size(); i++) {
            if (rowViewByLst.get(i).equalsIgnoreCase("Time")) //(String.valueOf(rowViewByLst.get(i)).equalsIgnoreCase("Time"))
            {
                refreshColLst.add(rowViewByLst.get(i));//.add(rowViewByLst.get(i));
            } else if (rowViewByLst.get(i).contains("A_")) {
                refreshColLst.add(rowViewByLst.get(i));
            } else {
                refreshColLst.add("A_" + rowViewByLst.get(i));
            }
        }

        int qryMeasCount = 0;
        for (int k = 0; k < measLst.size(); k++) {
            if (!(RTMeasureElement.isRunTimeMeasure(measLst.get(k)))) {
                qryMeasCount++;
            }
            refreshColLst.add(measLst.get(k));
        }

        if ("original".equalsIgnoreCase(colType)) {
            if (qryMeasCount != qryElementIds.size()) {
                for (i = 0; i < qryElementIds.size(); i++) {
                    if (!(refreshColLst.contains(qryElementIds.get(i)))) {
                        refreshColLst.add((String) qryElementIds.get(i));
                    }
                }
            }
        }
        /*
         * List<RTMeasureElement> rtMeasEleLst; for (int k = 0; k <
         * measLst.size(); k++) { refreshColLst.add((String) measLst.get(k));
         * rtMeasEleLst = runTimeMeas.get((String) measLst.get(k));
         *
         * for (RTMeasureElement rtElement : rtMeasEleLst) {
         * refreshColLst.add(measLst.get(k) + rtElement.getColumnType()); }
        }
         */
        return refreshColLst;
    }

    public void changeGraphSize(HashMap[] graphMapDetails, String grpSize, String grpId, HttpSession session, Container container) {
        HashMap GraphSizesDtlsHashMap = (HashMap) session.getAttribute("GraphSizesDtlsHashMap");
        ArrayList sizeDtls = new ArrayList();

        for (int i = 0; i < graphMapDetails.length; i++) {
            if (String.valueOf(graphMapDetails[i].get("graphId")).equalsIgnoreCase(grpId)) {
                sizeDtls = (ArrayList) GraphSizesDtlsHashMap.get(grpSize);
                graphMapDetails[i].put("graphWidth", String.valueOf(sizeDtls.get(0)));
                graphMapDetails[i].put("graphHeight", String.valueOf(sizeDtls.get(1)));
            }
        }
        container.setGraphMapDetails(graphMapDetails);
    }

    public void changeGraphType(HashMap[] graphMapDetails, String grpType, String grpId, HttpSession session, Container container) {
        HashMap GraphClassesHashMap = (HashMap) session.getAttribute("GraphClassesHashMap");

        for (int i = 0; i < graphMapDetails.length; i++) {
            if (String.valueOf(graphMapDetails[i].get("graphId")).equalsIgnoreCase(grpId)) {
                graphMapDetails[i].put("graphTypeName", grpType);
                graphMapDetails[i].put("graphClassName", String.valueOf(GraphClassesHashMap.get(grpType)));
            }
        }
        container.setGraphMapDetails(graphMapDetails);

    }

    public void changeGraphColumnsAxis(HashMap[] graphMapDetails, String[] columnKeys, String[] columnAxis, String grpId, HttpSession session, Container container) {
        String[] viewByElementIds = null;
        String[] barChartColumnNames = null;
        String[] barChartColumnTitles = null;
        String[] pieChartColumns = null;
        String[] axis = null;
        for (int i = 0; i < graphMapDetails.length; i++) {
            if (String.valueOf(graphMapDetails[i].get("graphId")).equalsIgnoreCase(grpId)) {
                viewByElementIds = (String[]) graphMapDetails[i].get("viewByElementIds");

                barChartColumnTitles = new String[viewByElementIds.length + columnKeys.length];
                pieChartColumns = new String[viewByElementIds.length + columnKeys.length];
                axis = new String[viewByElementIds.length + columnKeys.length];

                for (int j = 0; j < viewByElementIds.length; j++) {
                    barChartColumnTitles[j] = viewByElementIds[j];
                    pieChartColumns[j] = viewByElementIds[j];
                    axis[j] = "0";
                }
                for (int j = viewByElementIds.length; j < barChartColumnTitles.length; j++) {
                    barChartColumnTitles[j] = columnKeys[j - viewByElementIds.length];
                    pieChartColumns[j] = columnKeys[j - viewByElementIds.length];
                    axis[j] = columnAxis[j - viewByElementIds.length];
                }

                barChartColumnNames = barChartColumnTitles;
                graphMapDetails[i].put("viewByElementIds", viewByElementIds);
                graphMapDetails[i].put("barChartColumnNames", barChartColumnNames);
                graphMapDetails[i].put("barChartColumnTitles", barChartColumnTitles);
                graphMapDetails[i].put("pieChartColumns", pieChartColumns);
                graphMapDetails[i].put("axis", axis);
            }
        }
        container.setGraphMapDetails(graphMapDetails);
    }

    public PbReturnObject getGraphsDataForDashBoard(String pbReportId, String pbUserId, HttpServletRequest request, HttpServletResponse response, HttpSession session, ArrayList REP) {

        PbReportRequestParameter reportReqParams = null;
        PbReportCollection collect = null;
        PbReportQuery repQuery = null;
        PbReturnObject pbretObj = null;
        try {
            if (session != null) {
                reportReqParams = new PbReportRequestParameter(request);
                collect = new PbReportCollection();
                repQuery = new PbReportQuery();
                reportReqParams.setParametersHashMap();
                collect.reportId = pbReportId;
                collect.reportIncomingParameters = reportReqParams.requestParamValues;
                collect.getParamMetaData(true);
                //repQuery.setRowViewbyCols(collect.reportRowViewbyValues);
                repQuery.setRowViewbyCols(REP);
                repQuery.setColViewbyCols(collect.reportColViewbyValues);
                repQuery.setQryColumns(collect.reportQryElementIds);
                repQuery.setColAggration(collect.reportQryAggregations);
                if (request.getAttribute("OneviewGraphTimeDetails") != null) {
                    repQuery.setTimeDetails((ArrayList) request.getAttribute("OneviewGraphTimeDetails"));
                } else {
                    repQuery.setTimeDetails(collect.timeDetailsArray);
                }

                pbretObj = repQuery.getPbReturnObject(String.valueOf(collect.reportQryElementIds.get(0)));

            } else {
            }
        } catch (Exception exp) {

            logger.error("Exception:", exp);
        }
        return pbretObj;
    }
    //New Customize code starts from here

    public String customizeReport(String reportId, String customReportName, String customReportDesc, HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        HashMap ParametersHashMap = null;
        HashMap TableHashMap = null;
        HashMap GraphHashMap = null;
        HashMap ReportHashMap = null;
        HashMap map = null;
        String customReportId = null;
        Container container = null;
        String ParamRegion = "";
        String ParamDispRegion = "";
        String TableRegion = "";
        String GraphRegion = "";
        String customMembers = "";
        String graphIds = "";
        String ReportFolders = "";
        ArrayList parameters = new ArrayList();
        if (session != null) {
            try {
                customReportId = reportViewerDAO.getCustomReportId();
                if (session.getAttribute("PROGENTABLES") != null) {
                    map = (HashMap) session.getAttribute("PROGENTABLES");
                    if (map.get(reportId) != null) {
                        container = (Container) map.get(reportId);//to get previous report container object
                        map.remove(reportId);
                        request.setAttribute("PrevReportId", reportId);
                    }
                }
                container.setReportId(customReportId);
                container.setTableId(customReportId);

                ParametersHashMap = container.getParametersHashMap();
                TableHashMap = container.getTableHashMap();
                GraphHashMap = container.getGraphHashMap();
                ReportHashMap = container.getReportHashMap();

                /*
                 * ParametersHashMap = container.getParametersHashMap()== null ?
                 * new HashMap() : container.getParametersHashMap();
                 * TableHashMap = container.getTableHashMap()== null ? new
                 * HashMap() : container.getTableHashMap(); GraphHashMap =
                 * container.getGraphHashMap()== null ? new HashMap() :
                 * container.getGraphHashMap(); ReportHashMap =
                 * container.getReportHashMap()== null ? new HashMap() :
                 * container.getReportHashMap();
                 */
//                ReportHashMap.put("ReportName", customReportName);
//                ReportHashMap.put("ReportDesc", customReportDesc);
                container = reportViewerDAO.customizeReport(container, customReportId, reportId, request);
                ReportFolders = reportTemplateDAO.getUserFoldersByReportId(reportId);
                customMembers = reportTemplateDAO.getCustomMembers(String.valueOf(ParametersHashMap.get("UserFolderIds")));
                graphIds = String.valueOf(GraphHashMap.get("graphIds"));
                parameters = (ArrayList) ParametersHashMap.get("Parameters");
                ParamRegion = reportBD.buildParameters(ParametersHashMap);
                ParamDispRegion = reportBD.dispParameters(parameters, ParametersHashMap);
                TableRegion = reportBD.buildTable(container, request.getContextPath(), session);
                GraphRegion = reportBD.buildGraph(container, request, response, graphIds);

                request.setAttribute("CustomReportId", customReportId);
                request.setAttribute("ReportFolders", ReportFolders);
                request.setAttribute("customMembers", customMembers);
                request.setAttribute("ParamRegion", ParamRegion);
                request.setAttribute("ParamDispRegion", ParamDispRegion);
                request.setAttribute("TableRegion", TableRegion);
                request.setAttribute("GraphRegion", GraphRegion);

                container.setReportName(customReportName);
                container.setReportDesc(customReportDesc);
                container.setSessionContext(session, container);

            } catch (Exception exception) {
                logger.error("Exception: ", exception);
            }
        } else {
        }
        return customReportId;
    }

    public HashMap setDefaults(String grpId, String grpType, HashMap GraphHashMap, HashMap ParametersHashMap, HashMap TableHashMap, HashMap GraphSizesDtlsHashMap, HashMap GraphClassesHashMap, HashMap ReportHashMap) {
        HashMap GraphDetails = null;
        GraphDetails = new HashMap();

        ArrayList allGraphColumns = null;

        ArrayList Parameters = (ArrayList) ParametersHashMap.get("Parameters");
        ArrayList ParameterNames = (ArrayList) ParametersHashMap.get("ParametersNames");

        ArrayList REP = (ArrayList) TableHashMap.get("REP");
        ArrayList REPNames = (ArrayList) TableHashMap.get("REPNames");

        ArrayList CEP = (ArrayList) TableHashMap.get("CEP");
        ArrayList CEPNames = (ArrayList) TableHashMap.get("CEPNames");

        ArrayList Measures = (ArrayList) TableHashMap.get("Measures");
        ArrayList MeasuresNames = (ArrayList) TableHashMap.get("MeasuresNames");

        ArrayList sizeDtls = (ArrayList) GraphSizesDtlsHashMap.get("Medium");
        String graphClass = String.valueOf(GraphClassesHashMap.get(grpType));
        String grpIds = "";
        String[] barChartColumnNames = null;
        String[] pieChartColumns = null;
        String[] barChartColumnTitles = null;
        String[] axis = null;

        String[] viewByElementIds = null;
        String[] viewBys = null;
        String[] viewByNames = null;
        String[] graphCols = new String[0];
        String[] graphColNames = new String[0];

        String ReportName = "";
        int count = 1;

        String[] barChartColumnNames1 = null;
        String[] barChartColumnTitles1 = null;

        String[] barChartColumnNames2 = null;
        String[] barChartColumnTitles2 = null;

        try {
            if (GraphHashMap.get("graphIds") != null) {
                grpIds = String.valueOf(GraphHashMap.get("graphIds"));
                grpIds = grpIds + "," + grpId;
            } else {
                grpIds = grpId;
            }
            if (Measures != null && Measures.size() != 0) {
                if (REP != null) {
                    viewByElementIds = (String[]) REP.toArray(new String[0]);
                    viewBys = viewByElementIds;
                    viewByNames = (String[]) REPNames.toArray(new String[0]);
                } else if (Parameters != null && Parameters.size() != 0) {
                    viewByElementIds = new String[1];
                    viewByElementIds[0] = String.valueOf(Parameters.get(0));

                    viewBys = viewByElementIds;
                    viewByNames = new String[1];
                    viewByNames[0] = String.valueOf(ParameterNames.get(0));
                }
                graphCols = new String[1];
                graphColNames = new String[1];

                graphCols[0] = (String) Measures.toArray(new String[0])[0];
                graphColNames[0] = (String) MeasuresNames.toArray(new String[0])[0];

                barChartColumnNames = new String[viewByElementIds.length + graphCols.length];
                pieChartColumns = new String[barChartColumnNames.length];
                barChartColumnTitles = new String[barChartColumnNames.length];
                axis = new String[barChartColumnNames.length];

                if (grpType.contains("Dual") || grpType.contains("OverlaidBar") || grpType.contains("OverlaidArea")) {
                    barChartColumnTitles1 = new String[count + viewByElementIds.length];
                    barChartColumnNames1 = new String[barChartColumnTitles1.length];

                    barChartColumnTitles2 = new String[(barChartColumnNames.length - count)];
                    barChartColumnNames2 = new String[barChartColumnTitles2.length];
                }

                for (int i = 0; i < viewByElementIds.length; i++) {
                    if (viewByElementIds[i].equalsIgnoreCase("Time")) {
                        viewBys[i] = viewByElementIds[i];
                        barChartColumnNames[i] = viewBys[i];
                        pieChartColumns[i] = viewBys[i];
                    } else if (!(viewByElementIds[i].contains("A_"))) {
                        viewBys[i] = "A_" + viewByElementIds[i];
                        barChartColumnNames[i] = viewBys[i];
                        pieChartColumns[i] = viewBys[i];
                    } else {
                        viewBys[i] = viewByElementIds[i];
                        barChartColumnNames[i] = viewBys[i];
                        pieChartColumns[i] = viewBys[i];
                    }
                    barChartColumnTitles[i] = viewByNames[i];
                    axis[i] = "0";
                    if (grpType.contains("Dual") || grpType.contains("OverlaidBar") || grpType.contains("OverlaidArea")) {
                        barChartColumnTitles1[i] = barChartColumnTitles[i];
                        barChartColumnTitles2[i] = barChartColumnTitles[i];
                        barChartColumnNames1[i] = barChartColumnNames[i];
                        barChartColumnNames2[i] = barChartColumnNames[i];
                    }

                }
                for (int i = viewByElementIds.length; i < (graphCols.length + viewByElementIds.length); i++) {

                    if (!(graphCols[i - viewByElementIds.length].contains("A_"))) {
                        barChartColumnNames[i] = "A_" + graphCols[i - viewByElementIds.length];
                        pieChartColumns[i] = "A_" + graphCols[i - viewByElementIds.length];
                    } else {
                        barChartColumnNames[i] = graphCols[i - viewByElementIds.length];
                        pieChartColumns[i] = graphCols[i - viewByElementIds.length];
                    }
                    barChartColumnTitles[i] = graphColNames[i - viewByElementIds.length];
                    axis[i] = "0";
                }
                if (grpType.contains("Dual") || grpType.contains("OverlaidBar") || grpType.contains("OverlaidArea")) {
                    for (int j = viewByElementIds.length; j < barChartColumnTitles1.length; j++) {
                        barChartColumnTitles1[j] = barChartColumnTitles[j];
                        barChartColumnNames1[j] = barChartColumnNames[j];
                    }

                    for (int j = barChartColumnTitles1.length; j < barChartColumnTitles.length; j++) {
                        barChartColumnTitles2[j - viewByElementIds.length] = barChartColumnTitles[j];
                        barChartColumnNames2[j - viewByElementIds.length] = barChartColumnNames[j];
                    }
                }

            }
            if (ReportHashMap.get("ReportName") != null) {
                ReportName = String.valueOf(ReportHashMap.get("ReportName"));
            }

            GraphDetails.put("graphId", grpId);
            GraphDetails.put("graphName", ReportName + " Graph " + grpId);
            //GraphDetails.put("graphClassName", DAO.getGraphClassName(grpType));
            GraphDetails.put("graphClassName", graphClass);
            GraphDetails.put("graphTypeName", grpType);
            GraphDetails.put("viewByElementIds", viewBys);
            GraphDetails.put("grpSize", "Medium");
            GraphDetails.put("graphWidth", String.valueOf(sizeDtls.get(0)));
            GraphDetails.put("graphHeight", String.valueOf(sizeDtls.get(1)));
            GraphDetails.put("barChartColumnNames", barChartColumnNames);
            GraphDetails.put("pieChartColumns", pieChartColumns);
            GraphDetails.put("barChartColumnTitles", barChartColumnTitles);
            GraphDetails.put("axis", axis);

            //storing graph details info (Dual Axis ) in HashMap
            if (grpType.contains("Dual") || grpType.contains("OverlaidBar") || grpType.contains("OverlaidArea")) {
                GraphDetails.put("barChartColumnNames1", barChartColumnNames1);
                GraphDetails.put("barChartColumnTitles1", barChartColumnTitles1);
                GraphDetails.put("barChartColumnNames2", barChartColumnNames2);
                GraphDetails.put("barChartColumnTitles2", barChartColumnTitles2);
            }

            if (GraphHashMap.get("AllGraphColumns") != null) {
                allGraphColumns = (ArrayList) GraphHashMap.get("AllGraphColumns");
            }
            if (allGraphColumns == null) {
                allGraphColumns = new ArrayList();
            }

            for (int i = 0; i < graphCols.length; i++) {
                if (!allGraphColumns.contains(graphCols[i])) {
                    allGraphColumns.add(graphCols[i]);
                }
            }
            GraphHashMap.put("AllGraphColumns", allGraphColumns);
            GraphHashMap.put(grpId, GraphDetails);
            GraphHashMap.put("graphIds", grpIds);

        } catch (Exception exception) {
            logger.error("Exception: ", exception);
        }

        return GraphHashMap;
    }

    public String buildParameters(HashMap ParametersHashMap) {
        StringBuffer tableBuffer = new StringBuffer("");
        ArrayList Parameters = (ArrayList) ParametersHashMap.get("Parameters");
        ArrayList ParametersNames = (ArrayList) ParametersHashMap.get("ParametersNames");

        ArrayList TimeParameters = (ArrayList) ParametersHashMap.get("TimeParameters");
        ArrayList TimeParametersNames = (ArrayList) ParametersHashMap.get("TimeParametersNames");

        for (int i = 0; i < TimeParameters.size(); i++) {
            tableBuffer.append(" <li id='" + String.valueOf(TimeParameters.get(i)) + "' style='width:180px;color:white' class='navtitle-hover'>");
            tableBuffer.append("<table id='" + String.valueOf(TimeParametersNames.get(i)) + i + "'>");
            tableBuffer.append(" <tr>");
            tableBuffer.append(" <td >");
            tableBuffer.append("<a href=\"javascript:deleteTimeDimParam('" + String.valueOf(TimeParameters.get(i)) + "')\" class=\"ui-icon ui-icon-close\"></a>");
            tableBuffer.append("</td>");
            tableBuffer.append("<td style=\";color:black\">" + String.valueOf(TimeParametersNames.get(i)) + "</td>");
            tableBuffer.append("</tr>");
            tableBuffer.append("</table>");
            tableBuffer.append("</li>");
        }

        for (int i = 0; i < Parameters.size(); i++) {
            tableBuffer.append(" <li id='param-" + String.valueOf(Parameters.get(i)) + "' style='width:180px;color:white' class='navtitle-hover'>");
            tableBuffer.append("<table id='" + String.valueOf(ParametersNames.get(i)) + i + "'>");
            tableBuffer.append(" <tr>");
            tableBuffer.append(" <td >");
            tableBuffer.append("  <a href=\"javascript:deleteParam('" + String.valueOf(Parameters.get(i)) + "')\" class=\"ui-icon ui-icon-close\"></a>");
            tableBuffer.append("</td>");
            tableBuffer.append("<td style=\"color:black\">" + String.valueOf(ParametersNames.get(i)) + "</td>");
            tableBuffer.append("</tr>");
            tableBuffer.append("</table>");
            tableBuffer.append("</li>");
        }
        return tableBuffer.toString();
    }

    public String dispParameters(ArrayList paramIds, HashMap ParametersHashMap) {

        DisplayParameters disp = new DisplayParameters();
        HashMap TimeDimHashMap = null;
        String temp = "";
        try {
            TimeDimHashMap = (HashMap) ParametersHashMap.get("TimeDimHashMap");

            HashMap paramValues = new HashMap();
            for (int i = 0; i < paramIds.size(); i++) {
                paramValues.put(String.valueOf(paramIds.get(i)), "All");
            }
            temp = disp.displayParamwithTime(paramIds, TimeDimHashMap);
        } catch (Exception exp) {
            logger.error("Exception:", exp);
        }
        return temp;
    }

    public HashMap changeGraphType(HashMap GraphHashMap, String grpType, String grpId, HashMap ParametersHashMap, HashMap TableHashMap, HashMap GraphClassesHashMap) {
        HashMap GraphDetails = null;
        String graphClass = String.valueOf(GraphClassesHashMap.get(grpType));
        GraphDetails = (HashMap) GraphHashMap.get(grpId);
        GraphDetails.put("graphTypeName", grpType);
        GraphDetails.put("graphClassName", graphClass);
        GraphHashMap.put(grpId, GraphDetails);
        return GraphHashMap;
    }

    public HashMap changeGraphSize(HashMap GraphHashMap, String grpSize, String grpId, HashMap ParametersHashMap, HashMap TableHashMap, HashMap GraphSizesDtlsHashMap) {
        HashMap GraphDetails = null;
        GraphDetails = (HashMap) GraphHashMap.get(grpId);
        GraphDetails.put("grpSize", grpSize);

        ArrayList sizeDtls = (ArrayList) GraphSizesDtlsHashMap.get(grpSize);

        GraphDetails.put("graphWidth", String.valueOf(sizeDtls.get(0)));
        GraphDetails.put("graphHeight", String.valueOf(sizeDtls.get(1)));

        //GraphDetails = DAO.getGrpDimensionsBySize(GraphDetails, grpSize);
        GraphHashMap.put(grpId, GraphDetails);
        return GraphHashMap;
    }

    public HashMap changeGraphColumns(HashMap GraphHashMap, String grpColumns, String grpId, HashMap ParametersHashMap, HashMap TableHashMap, String grpColumnsNames) {

        HashMap GraphDetails = null;
        ArrayList Parameters = (ArrayList) ParametersHashMap.get("Parameters");
        ArrayList REP = (ArrayList) TableHashMap.get("REP");

        ArrayList ParametersNames = (ArrayList) ParametersHashMap.get("ParametersNames");
        ArrayList REPNames = (ArrayList) TableHashMap.get("REPNames");
        String[] viewByElementIds = null;
        String[] viewBys = null;
        String[] viewByDispNames = null;
        String[] axis = null;
        String[] barChartColumnNames = null;
        String[] pieChartColumns = null;
        String[] barChartColumnTitles = null;
        String[] graphCols = null;
        String[] graphColsNames = null;

        if (REP == null) {
            viewByElementIds = new String[1];
            viewByDispNames = new String[1];
            viewByElementIds[0] = String.valueOf(Parameters.get(0));
            viewByDispNames[0] = String.valueOf(ParametersNames.get(0));

            viewBys = viewByElementIds;
        } else {
            viewByElementIds = (String[]) REP.toArray(new String[0]);
            viewByDispNames = (String[]) REPNames.toArray(new String[0]);

            viewBys = viewByElementIds;
        }
        graphCols = grpColumns.split(",");
        graphColsNames = grpColumnsNames.split(",");
        barChartColumnNames = new String[viewByElementIds.length + graphCols.length];
        pieChartColumns = new String[barChartColumnNames.length];
        barChartColumnTitles = new String[barChartColumnNames.length];
        axis = new String[barChartColumnNames.length];

        for (int i = 0; i < viewByElementIds.length; i++) {
            if (viewByElementIds[i].equalsIgnoreCase("Time")) {
                viewBys[i] = viewByElementIds[i];
                barChartColumnNames[i] = viewBys[i];
                pieChartColumns[i] = viewBys[i];
            } else if (!(viewByElementIds[i].contains("A_"))) {
                viewBys[i] = "A_" + viewByElementIds[i];
                barChartColumnNames[i] = viewBys[i];
                pieChartColumns[i] = viewBys[i];
            } else {
                viewBys[i] = viewByElementIds[i];
                barChartColumnNames[i] = viewBys[i];
                pieChartColumns[i] = viewBys[i];
            }
            barChartColumnTitles[i] = viewByDispNames[i];
            axis[i] = "0";
        }
        for (int i = viewByElementIds.length; i < (graphCols.length + viewByElementIds.length); i++) {

            if (!(graphCols[i - viewByElementIds.length].contains("A_"))) {
                barChartColumnNames[i] = "A_" + graphCols[i - viewByElementIds.length];
                pieChartColumns[i] = "A_" + graphCols[i - viewByElementIds.length];
            } else {
                barChartColumnNames[i] = graphCols[i - viewByElementIds.length];
                pieChartColumns[i] = graphCols[i - viewByElementIds.length];
            }
            barChartColumnTitles[i] = graphColsNames[i - viewByElementIds.length];
            axis[i] = "0";
        }

        GraphDetails = (HashMap) GraphHashMap.get(grpId);

        //if (GraphDetails != null) {
        GraphDetails.put("barChartColumnNames", barChartColumnNames);
        GraphDetails.put("pieChartColumns", pieChartColumns);
        GraphDetails.put("barChartColumnTitles", barChartColumnTitles);
        GraphDetails.put("viewByElementIds", viewBys);
        GraphDetails.put("axis", axis);

        GraphHashMap.put(grpId, GraphDetails);
        //}
        return GraphHashMap;
    }

    public HashMap changeDualAxisColumns(HashMap GraphHashMap, String grpId, HashMap ParametersHashMap, HashMap TableHashMap, String leftColumns, String rightColumns) {

        HashMap GraphDetails = null;
        ArrayList Parameters = (ArrayList) ParametersHashMap.get("Parameters");
        ArrayList REP = (ArrayList) TableHashMap.get("REP");

        ArrayList ParametersNames = (ArrayList) ParametersHashMap.get("ParametersNames");
        ArrayList REPNames = (ArrayList) TableHashMap.get("REPNames");
        String[] viewByElementIds = null;
        String[] viewBys = null;
        String[] viewByDispNames = null;
        String[] axis = null;
        String[] barChartColumnNames = null;
        String[] pieChartColumns = null;
        String[] barChartColumnTitles = null;
        //String[] graphCols = null;

        String[] barChartColumnNames1 = null;
        String[] barChartColumnTitles1 = null;

        String[] barChartColumnNames2 = null;
        String[] barChartColumnTitles2 = null;

        String[] leftgraphCols = null;
        String[] rightgraphCols = null;

        if (REP == null) {
            viewByElementIds = new String[1];
            viewByDispNames = new String[1];
            viewByElementIds[0] = String.valueOf(Parameters.get(0));
            viewByDispNames[0] = String.valueOf(ParametersNames.get(0));

            viewBys = viewByElementIds;
        } else {
            viewByElementIds = (String[]) REP.toArray(new String[0]);
            viewByDispNames = (String[]) REPNames.toArray(new String[0]);

            viewBys = viewByElementIds;
        }
        //graphCols = grpColumns.split(",");
        //graphColsNames = grpColumnsNames.split(",");

        leftgraphCols = leftColumns.split(",");
        rightgraphCols = rightColumns.split(",");

        barChartColumnNames = new String[viewByElementIds.length + leftgraphCols.length + rightgraphCols.length];
        pieChartColumns = new String[barChartColumnNames.length];
        barChartColumnTitles = new String[barChartColumnNames.length];
        axis = new String[barChartColumnNames.length];

        barChartColumnNames1 = new String[viewByElementIds.length + leftgraphCols.length];
        barChartColumnTitles1 = new String[barChartColumnNames1.length];

        barChartColumnNames2 = new String[viewByElementIds.length + rightgraphCols.length];
        barChartColumnTitles2 = new String[barChartColumnNames2.length];

        //graphCols=new String[leftgraphCols.length + rightgraphCols.length];
        for (int i = 0; i < viewByElementIds.length; i++) {
            if (viewByElementIds[i].equalsIgnoreCase("Time")) {
                viewBys[i] = viewByElementIds[i];
                barChartColumnNames[i] = viewBys[i];
            } else if (!(viewByElementIds[i].contains("A_"))) {
                viewBys[i] = "A_" + viewByElementIds[i];
                barChartColumnNames[i] = viewBys[i];
            } else {
                viewBys[i] = viewByElementIds[i];
                barChartColumnNames[i] = viewBys[i];
            }
            pieChartColumns[i] = barChartColumnNames[i];
            barChartColumnTitles[i] = viewByDispNames[i];
            axis[i] = "0";

            barChartColumnNames1[i] = viewBys[i];
            barChartColumnNames2[i] = viewBys[i];

            barChartColumnTitles1[i] = viewByDispNames[i];
            barChartColumnTitles2[i] = viewByDispNames[i];
        }

        for (int i = viewByElementIds.length; i < (barChartColumnNames1.length); i++) {

            if (!(leftgraphCols[i - viewByElementIds.length].contains("A_"))) {
                barChartColumnNames[i] = "A_" + leftgraphCols[i - viewByElementIds.length];
            } else {
                barChartColumnNames[i] = leftgraphCols[i - viewByElementIds.length];
            }
            pieChartColumns[i] = barChartColumnNames[i];
            barChartColumnTitles[i] = leftgraphCols[i - viewByElementIds.length];
            axis[i] = "0";

            barChartColumnNames1[i] = barChartColumnNames[i];
            barChartColumnTitles1[i] = barChartColumnTitles[i];

        }
        for (int i = barChartColumnNames1.length; i < (barChartColumnNames.length); i++) {

            if (!(rightgraphCols[i - barChartColumnNames1.length].contains("A_"))) {
                barChartColumnNames[i] = "A_" + rightgraphCols[i - barChartColumnNames1.length];
            } else {
                barChartColumnNames[i] = rightgraphCols[i - barChartColumnNames1.length];
            }
            pieChartColumns[i] = barChartColumnNames[i];
            barChartColumnTitles[i] = rightgraphCols[i - barChartColumnNames1.length];
            axis[i] = "1";

            barChartColumnNames2[i - barChartColumnNames1.length + viewByElementIds.length] = barChartColumnNames[i];
            barChartColumnTitles2[i - barChartColumnNames1.length + viewByElementIds.length] = barChartColumnTitles[i];
        }

        GraphDetails = (HashMap) GraphHashMap.get(grpId);

        if (GraphDetails != null) {
            GraphDetails.put("barChartColumnNames", barChartColumnNames);
            GraphDetails.put("pieChartColumns", pieChartColumns);
            GraphDetails.put("barChartColumnTitles", barChartColumnTitles);
            GraphDetails.put("viewByElementIds", viewBys);
            GraphDetails.put("axis", axis);

            GraphDetails.put("barChartColumnNames1", barChartColumnNames1);
            GraphDetails.put("barChartColumnTitles1", barChartColumnTitles1);
            GraphDetails.put("barChartColumnNames2", barChartColumnNames2);
            GraphDetails.put("barChartColumnTitles2", barChartColumnTitles2);

            GraphHashMap.put(grpId, GraphDetails);
        }
        return GraphHashMap;
    }

    public HashMap changeViewBys(HashMap GraphHashMap, String grpViewBys, String grpIds) {
        String[] graphIds = grpIds.split(",");
        String[] viewByElementIds = grpViewBys.split(",");
        HashMap GraphDetails = null;

        for (int i = 0; i < graphIds.length; i++) {
            GraphDetails = (HashMap) GraphHashMap.get(graphIds[i]);

            String[] prevBarChartColumnNames = (String[]) GraphDetails.get("barChartColumnNames");
            String[] prevPieChartColumns = (String[]) GraphDetails.get("pieChartColumns");
            String[] prevBarChartColumnTitles = (String[]) GraphDetails.get("barChartColumnTitles");
            String[] prevViewByElementIds = (String[]) GraphDetails.get("viewByElementIds");
            String[] prevAxis = (String[]) GraphDetails.get("axis");

            String[] barChartColumnNames = new String[viewByElementIds.length + (prevBarChartColumnNames.length - prevViewByElementIds.length)];
            String[] pieChartColumns = new String[barChartColumnNames.length];
            String[] barChartColumnTitles = new String[barChartColumnNames.length];
            String[] axis = new String[barChartColumnNames.length];

            for (int j = 0; j < viewByElementIds.length; j++) {
                //barChartColumnNames[j] = viewByElementIds[j];
                //pieChartColumns[j] = viewByElementIds[j];

                if (!(viewByElementIds[j].contains("A_"))) {
                    barChartColumnNames[j] = "A_" + viewByElementIds[j];
                    pieChartColumns[j] = "A_" + viewByElementIds[j];
                } else {
                    barChartColumnNames[j] = viewByElementIds[j];
                    pieChartColumns[j] = viewByElementIds[j];
                }
                barChartColumnTitles[j] = viewByElementIds[j];
                axis[j] = "0";
            }
            for (int j = prevViewByElementIds.length; j < prevBarChartColumnNames.length; j++) {
                //barChartColumnNames[viewByElementIds.length + (j - prevViewByElementIds.length)] = prevBarChartColumnNames[j];
                //pieChartColumns[viewByElementIds.length + (j - prevViewByElementIds.length)] = prevPieChartColumns[j];

                if (!(prevBarChartColumnNames[j].contains("A_"))) {
                    barChartColumnNames[viewByElementIds.length + (j - prevViewByElementIds.length)] = "A_" + prevBarChartColumnNames[j];
                    pieChartColumns[viewByElementIds.length + (j - prevViewByElementIds.length)] = "A_" + prevPieChartColumns[j];
                } else {
                    barChartColumnNames[viewByElementIds.length + (j - prevViewByElementIds.length)] = prevBarChartColumnNames[j];
                    pieChartColumns[viewByElementIds.length + (j - prevViewByElementIds.length)] = prevPieChartColumns[j];
                }
                barChartColumnTitles[viewByElementIds.length + (j - prevViewByElementIds.length)] = prevBarChartColumnTitles[j];
                axis[viewByElementIds.length + (j - prevViewByElementIds.length)] = "0";
            }

            GraphDetails.put("viewByElementIds", viewByElementIds);
            GraphDetails.put("barChartColumnNames", barChartColumnNames);
            GraphDetails.put("pieChartColumns", pieChartColumns);
            GraphDetails.put("barChartColumnTitles", barChartColumnTitles);

            GraphHashMap.put(graphIds[i], GraphDetails);
        }
        return GraphHashMap;
    }

    public HashMap changeViewBys(HashMap GraphHashMap, ArrayList REP, ArrayList REPNames, ArrayList Parameters, ArrayList ParametersNames) {
        String grpIds = "";
        String[] viewByElementIds = null;
        String[] viewBys = null;
        String[] viewByElementNames = null;
        String[] graphIds = null;

        String[] prevBarChartColumnNames = null;
        String[] prevPieChartColumns = null;
        String[] prevBarChartColumnTitles = null;
        String[] prevViewByElementIds = null;
        String[] prevAxis = null;

        String[] prevBarChartColumnNames1 = null;
        String[] prevBarChartColumnNames2 = null;

        String[] barChartColumnNames = null;
        String[] pieChartColumns = null;
        String[] barChartColumnTitles = null;
        String[] axis = null;

        String[] barChartColumnNames1 = null;
        String[] barChartColumnNames2 = null;

        String[] barChartColumnTitles1 = null;
        String[] barChartColumnTitles2 = null;

        String[] prevBarChartColumnTitles1 = null;
        String[] prevBarChartColumnTitles2 = null;
        if (GraphHashMap.get("graphIds") != null) {
            grpIds = (String) GraphHashMap.get("graphIds");
        }

        if (!"".equalsIgnoreCase(grpIds)) {
            graphIds = grpIds.split(",");
            if (REP != null && REP.size() != 0) {
                viewByElementIds = (String[]) REP.toArray(new String[0]);
                viewByElementNames = (String[]) REPNames.toArray(new String[0]);
            } else {
                viewByElementIds = new String[1];
                viewByElementNames = new String[1];

                viewByElementIds[0] = ((String[]) Parameters.toArray(new String[0]))[0];
                viewByElementNames[0] = ((String[]) ParametersNames.toArray(new String[0]))[0];
            }

            if (viewByElementIds != null) {
            }
            HashMap GraphDetails = null;
            for (int i = 0; i < graphIds.length; i++) {
                GraphDetails = (HashMap) GraphHashMap.get(graphIds[i]);

                if (GraphDetails.get("barChartColumnNames") != null) {
                    prevBarChartColumnNames = (String[]) GraphDetails.get("barChartColumnNames");
                    prevPieChartColumns = (String[]) GraphDetails.get("pieChartColumns");
                    prevBarChartColumnTitles = (String[]) GraphDetails.get("barChartColumnTitles");
                    prevViewByElementIds = (String[]) GraphDetails.get("viewByElementIds");
                    prevAxis = (String[]) GraphDetails.get("axis");

                    if (GraphDetails.get("barChartColumnNames1") != null && GraphDetails.get("barChartColumnNames2") != null) {
                        prevBarChartColumnNames1 = (String[]) GraphDetails.get("barChartColumnNames1");
                        prevBarChartColumnNames2 = (String[]) GraphDetails.get("barChartColumnNames2");
                        prevBarChartColumnTitles1 = (String[]) GraphDetails.get("barChartColumnTitles1");
                        prevBarChartColumnTitles2 = (String[]) GraphDetails.get("barChartColumnTitles2");
                    }
                    viewBys = new String[viewByElementIds.length];
                    barChartColumnNames = new String[viewByElementIds.length + (prevBarChartColumnNames.length - prevViewByElementIds.length)];
                    pieChartColumns = new String[barChartColumnNames.length];
                    barChartColumnTitles = new String[barChartColumnNames.length];
                    axis = new String[barChartColumnNames.length];

                    if (GraphDetails.get("barChartColumnNames1") != null && GraphDetails.get("barChartColumnNames2") != null) {
                        barChartColumnNames1 = new String[viewByElementIds.length + (prevBarChartColumnNames1.length - prevViewByElementIds.length)];
                        barChartColumnNames2 = new String[viewByElementIds.length + (prevBarChartColumnNames2.length - prevViewByElementIds.length)];
                        barChartColumnTitles1 = new String[barChartColumnNames1.length];
                        barChartColumnTitles2 = new String[barChartColumnNames2.length];
                    }
                    for (int j = 0; j < viewByElementIds.length; j++) {
                        if (!(viewByElementIds[j].contains("A_"))) {
                            barChartColumnNames[j] = "A_" + viewByElementIds[j];
                            viewBys[j] = "A_" + viewByElementIds[j];
                        } else {
                            barChartColumnNames[j] = viewByElementIds[j];
                            viewBys[j] = viewByElementIds[j];
                        }
                        pieChartColumns[j] = barChartColumnNames[j];
                        barChartColumnTitles[j] = viewByElementNames[j];
                        axis[j] = "0";

                        if (GraphDetails.get("barChartColumnNames1") != null && GraphDetails.get("barChartColumnNames2") != null) {
                            barChartColumnNames1[j] = barChartColumnNames[j];
                            barChartColumnNames2[j] = barChartColumnNames[j];
                            barChartColumnTitles1[j] = viewByElementNames[j];
                            barChartColumnTitles2[j] = viewByElementNames[j];
                        }

                    }
                    for (int j = prevViewByElementIds.length; j < prevBarChartColumnNames.length; j++) {
                        if (!(prevBarChartColumnNames[j].contains("A_"))) {
                            barChartColumnNames[viewByElementIds.length + (j - prevViewByElementIds.length)] = "A_" + prevBarChartColumnNames[j];
                        } else {
                            barChartColumnNames[viewByElementIds.length + (j - prevViewByElementIds.length)] = prevBarChartColumnNames[j];
                        }
                        pieChartColumns[viewByElementIds.length + (j - prevViewByElementIds.length)] = barChartColumnNames[viewByElementIds.length + (j - prevViewByElementIds.length)];
                        barChartColumnTitles[viewByElementIds.length + (j - prevViewByElementIds.length)] = prevBarChartColumnTitles[j];
                        axis[viewByElementIds.length + (j - prevViewByElementIds.length)] = prevAxis[j];
                    }

                    if (GraphDetails.get("barChartColumnNames1") != null && GraphDetails.get("barChartColumnNames2") != null) {
                        for (int j = prevViewByElementIds.length; j < prevBarChartColumnNames1.length; j++) {
                            if (!(prevBarChartColumnNames1[j].contains("A_"))) {
                                barChartColumnNames1[viewByElementIds.length + (j - prevViewByElementIds.length)] = "A_" + prevBarChartColumnNames1[j];
                            } else {
                                barChartColumnNames1[viewByElementIds.length + (j - prevViewByElementIds.length)] = prevBarChartColumnNames1[j];
                            }
                            barChartColumnTitles1[viewByElementIds.length + (j - prevViewByElementIds.length)] = prevBarChartColumnTitles1[j];
                        }

                        for (int j = prevViewByElementIds.length; j < prevBarChartColumnNames2.length; j++) {
                            if (!(prevBarChartColumnNames2[j].contains("A_"))) {
                                barChartColumnNames2[viewByElementIds.length + (j - prevViewByElementIds.length)] = "A_" + prevBarChartColumnNames2[j];
                            } else {
                                barChartColumnNames2[viewByElementIds.length + (j - prevViewByElementIds.length)] = prevBarChartColumnNames2[j];
                            }
                            barChartColumnTitles2[viewByElementIds.length + (j - prevViewByElementIds.length)] = prevBarChartColumnTitles2[j];
                        }

                        GraphDetails.put("barChartColumnNames1", barChartColumnNames1);
                        GraphDetails.put("barChartColumnNames2", barChartColumnNames2);
                        GraphDetails.put("barChartColumnTitles1", barChartColumnTitles1);
                        GraphDetails.put("barChartColumnTitles2", barChartColumnTitles2);
                    }
                    GraphDetails.put("viewByElementIds", viewBys);
                    GraphDetails.put("barChartColumnNames", barChartColumnNames);
                    GraphDetails.put("pieChartColumns", pieChartColumns);
                    GraphDetails.put("barChartColumnTitles", barChartColumnTitles);
                    GraphDetails.put("axis", axis);
                    GraphHashMap.put(graphIds[i], GraphDetails);
                }
            }

        } else {
        }
        return GraphHashMap;
    }

    public String buildGraph(Container container, HttpServletRequest request, HttpServletResponse response, String grpIds) {
        ArrayList grpDetails = new ArrayList();
        PbGraphDisplay GraphDisplay = new PbGraphDisplay();
        GraphDisplay.setCtxPath(request.getContextPath());
        StringBuffer graphsBuffer = new StringBuffer("");

        ArrayList displayedSet = new ArrayList();
        PbReturnObject pbretObj = null;

        String reportName = "";

        HashMap ParametersHashMap = null;
        HashMap TableHashMap = null;
        HashMap ReportHashMap = null;
        HashMap GraphHashMap = null;

        HashMap GraphSizesHashMap = null;
        HashMap GraphTypesHashMap = null;

        String[] GraphSizesKeySet = null;
        String[] GraphSTypesKeySet = null;

        String[] dbColumns = null;
        String[] axis = null;
        String[] graphIds = null;

        ArrayList Measures = null;
        ArrayList REP = null;
        ArrayList CEP = null;
        ArrayList Parameters = null;

        ArrayList REPNames = null;
        ArrayList ParametersNames = null;
        HttpSession session = request.getSession(false);
        PbReportCollection collect = new PbReportCollection();

        PbReportQuery repQuery = new PbReportQuery();
        HashMap paramValues = null;
        HashMap TimeDimHashMap = null;

        ArrayList TimeDetailstList = null;
        ArrayList AllGraphColumns = null;

        HashMap reportIncomingParameters = new HashMap();
        ArrayList reportQryElementIds = new ArrayList();
        ArrayList reportQryAggregations = new ArrayList();
        try {
            ParametersHashMap = container.getParametersHashMap();
            TableHashMap = container.getTableHashMap();
            ReportHashMap = container.getReportHashMap();
            GraphHashMap = container.getGraphHashMap();
            // // ////.println("report viewer -->GraphHashMap=" + GraphHashMap);
            if (session.getAttribute("GraphTypesHashMap") != null) {
                GraphTypesHashMap = (HashMap) session.getAttribute("GraphTypesHashMap");
                GraphSTypesKeySet = (String[]) GraphTypesHashMap.keySet().toArray(new String[0]);
            }

            if (session.getAttribute("GraphSizesHashMap") != null) {
                GraphSizesHashMap = (HashMap) session.getAttribute("GraphSizesHashMap");
                GraphSizesKeySet = (String[]) GraphSizesHashMap.keySet().toArray(new String[0]);
            }

            reportName = container.getReportName();//(String) ReportHashMap.get("ReportName");

            if (TableHashMap.get("Measures") != null) {
                Measures = (ArrayList) TableHashMap.get("Measures");
            }
            if (TableHashMap.get("REP") != null) {
                REP = (ArrayList) TableHashMap.get("REP");
                REPNames = (ArrayList) TableHashMap.get("REPNames");
            }
            if (TableHashMap.get("CEP") != null) {
                CEP = (ArrayList) TableHashMap.get("CEP");
            }
            if (ParametersHashMap.get("Parameters") != null) {
                Parameters = (ArrayList) ParametersHashMap.get("Parameters");
                ParametersNames = (ArrayList) ParametersHashMap.get("ParametersNames");
            }
            if (GraphHashMap.get("AllGraphColumns") != null) {
                AllGraphColumns = (ArrayList) GraphHashMap.get("AllGraphColumns");
            }

            paramValues = new HashMap();

            TimeDimHashMap = (HashMap) ParametersHashMap.get("TimeDimHashMap");
            TimeDetailstList = (ArrayList) ParametersHashMap.get("TimeDetailstList");

            if (AllGraphColumns == null) {
                AllGraphColumns = new ArrayList();
            }

            if (REP == null || REP.size() == 0) {
                REP = new ArrayList();
                REPNames = new ArrayList();
                if (Parameters != null && Parameters.size() != 0) {
                    REP.add(String.valueOf(Parameters.get(0)));
                    REPNames.add(String.valueOf(ParametersNames.get(0)));
                }
            }
            if (CEP == null || CEP.size() == 0) {
                CEP = new ArrayList();
            }
            if (Measures == null || Measures.size() == 0) {
                Measures = new ArrayList();
            }

            if (REP.size() != 0 && (Measures.size() != 0 || AllGraphColumns.size() != 0)) {
                for (int i = 0; i < Parameters.size(); i++) {
                    if (paramValues.get(String.valueOf(Parameters.get(i))) == null) {
                        paramValues.put(String.valueOf(Parameters.get(i)), "All");
                        reportIncomingParameters.put("CBOAPR" + String.valueOf(Parameters.get(i)), null);
                    }
                }
                collect.reportIncomingParameters = reportIncomingParameters;
                collect.reportColViewbyValues = CEP;
                collect.reportRowViewbyValues = REP;

                collect.timeDetailsArray = TimeDetailstList;
                collect.timeDetailsMap = TimeDimHashMap;

                collect.getParamMetaDataForReportDesigner();

                for (int j = 0; j < Measures.size(); j++) {
                    if (!reportQryElementIds.contains(String.valueOf(Measures.get(j)).replace("A_", ""))) {
                        reportQryElementIds.add(String.valueOf(Measures.get(j)).replace("A_", ""));
                    }
                }
                //modified by santhosh.kumar@progenbusiness.com on 05/12/2009
                if (CEP.size() == 0) {
                    for (int k = 0; k < AllGraphColumns.size(); k++) {
                        if (!reportQryElementIds.contains(String.valueOf(AllGraphColumns.get(k)).replace("A_", ""))) {
                            reportQryElementIds.add(String.valueOf(AllGraphColumns.get(k)).replace("A_", ""));
                        }
                    }
                }

                if (reportQryElementIds != null && reportQryElementIds.size() != 0) {
                    reportQryAggregations = DAO.getReportQryAggregations(reportQryElementIds);

                    collect.reportQryElementIds = reportQryElementIds;
                    collect.reportQryAggregations = reportQryAggregations;

                    repQuery.setQryColumns(collect.reportQryElementIds);
                    repQuery.setColAggration(collect.reportQryAggregations);

                    repQuery.setDefaultMeasure(String.valueOf(reportQryElementIds.get(0)));
                    repQuery.setDefaultMeasureSumm(String.valueOf(reportQryAggregations.get(0)));
                }

                repQuery.setRowViewbyCols(REP);
                repQuery.setColViewbyCols(CEP);
                repQuery.setParamValue(paramValues);
                repQuery.setTimeDetails(TimeDetailstList); //assigning time details array to report query

                //added by santhosh.kumar@progenbusiness.com on 03/12/2009 fro setting user id and biz roles
                repQuery.setBizRoles(getBizRoles());
                repQuery.setUserId(getUserId());

                //added by susheela on 11feb10
                repQuery.setReportId(reportId);

                if (reportQryElementIds != null && reportQryElementIds.size() != 0) {
                    pbretObj = repQuery.getPbReturnObject(String.valueOf(reportQryElementIds.get(0)));
                }
            }
            if (grpIds != null && (!("".equalsIgnoreCase(grpIds)))) {
                graphIds = grpIds.split(",");

                HashMap[] graphMapDetails = new HashMap[graphIds.length];
                HashMap[] CrossTabGraphMapDetails = new HashMap[graphIds.length];

                if (pbretObj != null) {
                    AllGraphColumns = (ArrayList) GraphHashMap.get("AllGraphColumns");
                    ArrayList originalColumns = new ArrayList();

                    if (CEP != null && CEP.size() != 0) {
                        originalColumns = new ArrayList();

                        dbColumns = pbretObj.getColumnNames();
                        int graphColcount = 0;

                        if (dbColumns.length <= 10) {
                            graphColcount = dbColumns.length;
                        } else {
                            graphColcount = 10;
                        }
                        axis = new String[graphColcount];
                        for (int colIndex = 0; colIndex < graphColcount; colIndex++) {
                            originalColumns.add(dbColumns[colIndex]);
                            axis[colIndex] = "0";
                        }
                    } else {

                        originalColumns = new ArrayList();
                        if (REP != null && REP.size() != 0) {
                            for (int i = 0; i < REP.size(); i++) {
                                if (String.valueOf(REP.get(i)).equalsIgnoreCase("Time")) {
                                    originalColumns.add(String.valueOf(REP.get(i)));
                                } else {
                                    originalColumns.add("A_" + String.valueOf(REP.get(i)));
                                }
                            }
                        } else if (Parameters != null && Parameters.size() != 0) {
                            if (String.valueOf(Parameters.get(0)).equalsIgnoreCase("Time")) {
                                originalColumns.add(String.valueOf(Parameters.get(0)));
                            } else {
                                originalColumns.add("A_" + String.valueOf(Parameters.get(0)));
                            }
                        }

                        if (AllGraphColumns != null && AllGraphColumns.size() != 0) {
                            for (int i = 0; i < AllGraphColumns.size(); i++) {
                                if (!originalColumns.contains("A_" + String.valueOf(AllGraphColumns.get(i)).replace("A_", ""))) {
                                    originalColumns.add("A_" + String.valueOf(AllGraphColumns.get(i)).replace("A_", ""));
                                }
                            }
                        } else if (Measures != null && Measures.size() != 0) {
                            if (!originalColumns.contains("A_" + String.valueOf(Measures.get(0)).replace("A_", ""))) {
                                originalColumns.add("A_" + String.valueOf(Measures.get(0)).replace("A_", ""));
                            }
                        }
                    }

                    container.setOriginalColumns(originalColumns);
                    container.setDisplayedSet(pbretObj);
                    displayedSet = container.getDisplayedSet();

                    String[] viewBys = null;
                    String[] viewBysDispNames = null;
                    String[] barChartColumnTitles = null;
                    String[] barChartColumnNames = null;
                    String[] pieChartColumns = null;

                    String[] barChartColumnNames1 = null;
                    String[] barChartColumnNames2 = null;

                    String[] barChartColumnTitles1 = null;
                    String[] barChartColumnTitles2 = null;

                    GraphDisplay.setCurrentDispRecords(displayedSet);
                    //GraphDisplay.setSwapGraphAnalysis(swapGraphAnalysis);
                    GraphDisplay.setSession(request.getSession(false));
                    GraphDisplay.setResponse(response);
                    GraphDisplay.setOut(response.getWriter());
                    GraphDisplay.setReportId("");
                    GraphDisplay.setJscal(null);

                    if (graphIds.length != 0) {
                        for (int i = 0; i < graphMapDetails.length; i++) {
                            graphMapDetails[i] = (HashMap) GraphHashMap.get(graphIds[i]);

                            if (CEP != null && CEP.size() != 0) {
                                CrossTabGraphMapDetails[i] = (HashMap) graphMapDetails[i].clone();

                                viewBys = (String[]) REP.toArray(new String[0]);
                                viewBysDispNames = (String[]) REPNames.toArray(new String[0]);

                                if (CrossTabGraphMapDetails[i].get("viewByElementIds") != null) {

                                    for (int index = 0; index < viewBys.length; index++) {
                                        viewBys[index] = String.valueOf(originalColumns.get(index));
                                    }
                                } else {
                                    viewBys = (String[]) REP.toArray(new String[0]);
                                }
                                viewBysDispNames = (String[]) REPNames.toArray(new String[0]);

                                barChartColumnNames = (String[]) originalColumns.toArray(new String[0]);
                                pieChartColumns = (String[]) originalColumns.toArray(new String[0]);

                                CrossTabGraphMapDetails[i].put("viewByElementIds", viewBys);
                                CrossTabGraphMapDetails[i].put("barChartColumnNames", barChartColumnNames);
                                CrossTabGraphMapDetails[i].put("pieChartColumns", pieChartColumns);
                                CrossTabGraphMapDetails[i].put("axis", axis);
                                barChartColumnTitles = (String[]) originalColumns.toArray(new String[0]);

                                for (int temp1 = 0; temp1 < viewBysDispNames.length; temp1++) {
                                    barChartColumnTitles[temp1] = viewBysDispNames[temp1];
                                }
                                for (int temp2 = viewBysDispNames.length; temp2 < barChartColumnTitles.length; temp2++) {
                                    barChartColumnTitles[temp2] = String.valueOf(repQuery.crossTabNonViewByMap.get(String.valueOf(originalColumns.get(temp2))));
                                }
                                CrossTabGraphMapDetails[i].put("barChartColumnTitles", barChartColumnTitles);

                            } else {
                                if (REP != null && REP.size() != 0) {

                                    viewBys = (String[]) REP.toArray(new String[0]);
                                    viewBysDispNames = (String[]) REPNames.toArray(new String[0]);

                                } else {
                                    viewBys = new String[1];
                                    viewBys[0] = String.valueOf(Parameters.get(0));

                                }
                                for (int index = 0; index < viewBys.length; index++) {
                                    viewBysDispNames[index] = collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(index)));
                                }

                                if (graphMapDetails[i].get("barChartColumnNames") != null) {
                                    barChartColumnNames = (String[]) graphMapDetails[i].get("barChartColumnNames");
                                    barChartColumnTitles = new String[barChartColumnNames.length];

                                    for (int temp1 = 0; temp1 < viewBysDispNames.length; temp1++) {
                                        barChartColumnTitles[temp1] = viewBysDispNames[temp1];
                                    }
                                    for (int temp2 = viewBys.length; temp2 < barChartColumnNames.length; temp2++) {
                                        barChartColumnTitles[temp2] = String.valueOf(repQuery.NonViewByMap.get(barChartColumnNames[temp2]));
                                    }
                                    graphMapDetails[i].put("barChartColumnTitles", barChartColumnTitles);
                                }
                                if (graphMapDetails[i].get("barChartColumnNames1") != null) {
                                    barChartColumnNames1 = (String[]) graphMapDetails[i].get("barChartColumnNames1");
                                    barChartColumnTitles1 = new String[barChartColumnNames1.length];

                                    for (int temp1 = 0; temp1 < viewBysDispNames.length; temp1++) {
                                        barChartColumnTitles1[temp1] = viewBysDispNames[temp1];
                                    }
                                    for (int temp2 = viewBys.length; temp2 < barChartColumnNames1.length; temp2++) {
                                        barChartColumnTitles1[temp2] = String.valueOf(repQuery.NonViewByMap.get(barChartColumnNames1[temp2]));
                                    }
                                    graphMapDetails[i].put("barChartColumnTitles1", barChartColumnTitles1);
                                }
                                if (graphMapDetails[i].get("barChartColumnNames2") != null) {
                                    barChartColumnNames2 = (String[]) graphMapDetails[i].get("barChartColumnNames2");
                                    barChartColumnTitles2 = new String[barChartColumnNames2.length];

                                    for (int temp1 = 0; temp1 < viewBysDispNames.length; temp1++) {
                                        barChartColumnTitles2[temp1] = viewBysDispNames[temp1];
                                    }
                                    for (int temp2 = viewBys.length; temp2 < barChartColumnNames2.length; temp2++) {
                                        barChartColumnTitles2[temp2] = String.valueOf(repQuery.NonViewByMap.get(barChartColumnNames2[temp2]));
                                    }
                                    graphMapDetails[i].put("barChartColumnTitles2", barChartColumnTitles2);
                                }
                            }
                        }

                        GraphDisplay.setViewByColNames(viewBysDispNames);
                        GraphDisplay.setViewByElementIds(viewBys);

                        if (CEP != null && CEP.size() != 0) {
                            GraphDisplay.setGraphMapDetails(CrossTabGraphMapDetails);

                        } else {
                            GraphDisplay.setGraphMapDetails(graphMapDetails);
                        }

                        grpDetails = GraphDisplay.getGraphHeadersByGraphMap();
                        ProgenChartDisplay[] pcharts = (ProgenChartDisplay[]) grpDetails.get(2);
                        ProgenChartDisplay[] pchartsZoom = (ProgenChartDisplay[]) grpDetails.get(4);

                        String[] paths = grpDetails.get(0).toString().split(";");//grpDetails[0].split(";");
                        String[] grpTitles = grpDetails.get(1).toString().split(";");
                        String[] pathsZoom = grpDetails.get(3).toString().split(";");//grpDetails[0].split(";");
                        //graphMapDetails = (HashMap[]) grpDetails.get(5);//

                        graphsBuffer.append("<Table width=\"100%\" border='0'  >");
                        graphsBuffer.append("<Tr>");
                        for (int grpCnt = 0; grpCnt < pcharts.length; grpCnt++) {
                            pcharts[grpCnt].setCtxPath(request.getContextPath());
                            pchartsZoom[grpCnt].setCtxPath(request.getContextPath());
                            pcharts[grpCnt].setSwapColumn(true);

                            String grpType = "";
                            String grpSize = "";
                            if (graphMapDetails[grpCnt].get("graphTypeName") != null) {
                                grpType = String.valueOf(graphMapDetails[grpCnt].get("graphTypeName"));
                            }
                            if (graphMapDetails[grpCnt].get("grpSize") != null) {
                                grpSize = String.valueOf(graphMapDetails[grpCnt].get("grpSize"));
                            }

                            graphsBuffer.append("<Td valign='top'  width=\"" + (100 / pcharts.length) + "%\">");
                            graphsBuffer.append("<Table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">");
                            graphsBuffer.append("<Tr>");//start of 1st row
                            graphsBuffer.append("<Td>");
                            //&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src='images/sign_cancel.png' aligm='middle' onClick=\"deleteGraph('" + graphIds[grpCnt] + "','" + grpIds + "')\" style='cursor:pointer;cursor:hand'  title='Delete Chart'>
                            //graphsBuffer.append("<div   class=\"portlet-header ui-widget-header ui-corner-all \">" + reportName + " " + grpTitles[grpCnt] + "</div>");//portlet-header div starts here
                            graphsBuffer.append("<div   class=\"portlet-header ui-widget-header ui-corner-all \">" + grpTitles[grpCnt] + "</div>");//portlet-header div starts here
                            graphsBuffer.append("</Td>");
                            graphsBuffer.append("</Tr>");

                            graphsBuffer.append("<Tr>");//start of 2nd row
                            graphsBuffer.append("<Td>");//start of 2nd row 1st td

                            graphsBuffer.append("<Table class=\"progenTable\"  border='0' align=\"left\">");//start of outer table
                            graphsBuffer.append("<Tr>");

                            //start of graph types
                            graphsBuffer.append("<Td><img src='" + request.getContextPath() + "/images/separator.gif' style='border:0'  alt='Separator' /></Td>");
                            graphsBuffer.append("<Td><a  href='javascript:void(0)' onclick=\"graphTypesDisp(document.getElementById('dispgrptypes" + grpCnt + "'))\" style='text-decoration:none' class=\"calcTitle\" title=\"Graph Types\"> Graph Types </a>");
                            graphsBuffer.append("<div style='display:none;width:auto;height:auto;background-color:#ffffff;overflow:auto;position: absolute;text-align: left;border: 1px solid #000000;border-top-width: 0px;'  id='dispgrptypes" + grpCnt + "'>");

                            graphsBuffer.append("<Table>");//start of inner table
                            for (int gtype = 0; gtype < GraphSTypesKeySet.length; gtype++) {
                                if (grpType.equalsIgnoreCase(String.valueOf(GraphTypesHashMap.get(GraphSTypesKeySet[gtype])))) {
                                    graphsBuffer.append("<Tr>");
                                    graphsBuffer.append("<Td id='" + grpType + "'>");
                                    graphsBuffer.append("<b>" + grpType + "</b>");
                                    graphsBuffer.append("</Td>");
                                    graphsBuffer.append("</Tr>");
                                } else {
                                    graphsBuffer.append("<Tr>");
                                    graphsBuffer.append("<Td id='" + grpType + "'>");
                                    graphsBuffer.append("<a href='javascript:void(0)' title='" + String.valueOf(GraphTypesHashMap.get(GraphSTypesKeySet[gtype])) + "' onclick=\"changeGrpType('" + String.valueOf(GraphTypesHashMap.get(GraphSTypesKeySet[gtype])) + "','" + graphIds[grpCnt] + "','" + grpIds + "')\">" + String.valueOf(GraphTypesHashMap.get(GraphSTypesKeySet[gtype])) + "</a>");
                                    graphsBuffer.append("</Td>");
                                    graphsBuffer.append("</Tr>");
                                }

                            }
                            graphsBuffer.append("</Table>");//closing of inner table
                            graphsBuffer.append(" </div>");
                            graphsBuffer.append("</Td>");

                            //end of graph types
                            //start of graph sizes
                            graphsBuffer.append("<Td><img src='" + request.getContextPath() + "/images/separator.gif' style='border:0'  alt='Separator' /></Td>");
                            graphsBuffer.append("<Td><a  href='javascript:void(0)' onclick=\"graphSizesDisp(document.getElementById('dispgrpsizes" + grpCnt + "'))\" style='text-decoration:none' class=\"calcTitle\" title=\"Graph Sizes\"> Graph Sizes </a>");
                            graphsBuffer.append("<div  style='display:none;width:auto;height:auto;background-color:#ffffff;overflow:auto;position: absolute;text-align: left;border: 1px solid #000000;border-top-width: 0px;'  id='dispgrpsizes" + grpCnt + "'>");

                            graphsBuffer.append("<Table>");//start of inner table
                            for (int gsize = 0; gsize < GraphSizesKeySet.length; gsize++) {

                                if (grpSize.equalsIgnoreCase(String.valueOf(GraphSizesHashMap.get(GraphSizesKeySet[gsize])))) {
                                    graphsBuffer.append("<Tr>");
                                    graphsBuffer.append("<Td id='" + grpSize + "'>");
                                    graphsBuffer.append("<b>" + grpSize + "</b>");
                                    graphsBuffer.append("</Td>");
                                    graphsBuffer.append("</Tr>");
                                } else {
                                    graphsBuffer.append("<Tr>");
                                    graphsBuffer.append("<Td id='" + grpSize + "'>");
                                    graphsBuffer.append("<a href='javascript:void(0)' title='" + String.valueOf(GraphSizesHashMap.get(GraphSizesKeySet[gsize])) + "' onclick=\"changeGrpSize('" + String.valueOf(GraphSizesHashMap.get(GraphSizesKeySet[gsize])) + "','" + graphIds[grpCnt] + "','" + grpIds + "')\">" + String.valueOf(GraphSizesHashMap.get(GraphSizesKeySet[gsize])) + "</a>");
                                    graphsBuffer.append("</Td>");
                                    graphsBuffer.append("</Tr>");
                                }

                            }
                            graphsBuffer.append("</Table>");//closing of inner table
                            graphsBuffer.append(" </div>");
                            graphsBuffer.append("</Td>");

                            //end of graph sizes
                            //start of graph columns
                            if (CEP == null || CEP.size() == 0) {
                                graphsBuffer.append("<Td><img src='" + request.getContextPath() + "/images/separator.gif' style='border:0'  alt='Separator' /></Td>");
                                graphsBuffer.append("<Td><a  href='javascript:void(0)' onclick=\"graphColumnsDisp('" + graphIds[grpCnt] + "','" + grpIds + "')\" style='text-decoration:none' class=\"calcTitle\" title=\"Graph Columns\"> Graph Columns </a>");

                            }
                            //end of graph columns

                            //start of delete graph
                            /*
                             * graphsBuffer.append("<Td><img src='" +
                             * request.getContextPath() +
                             * "/images/separator.gif' style='border:0'
                             * alt='Separator' /></Td>");
                             * graphsBuffer.append("<Td><a
                             * href='javascript:void(0)'
                             * onClick=\"deleteGraph('" + graphIds[grpCnt] +
                             * "','" + grpIds + "')\"
                             * style='text-decoration:none' class=\"calcTitle\"
                             * title=\"Delete Chart\">Delete Chart </a>");
                             *
                             */
                            //end of delete graph
                            //start of  graph details
                            graphsBuffer.append("<Td><img src='" + request.getContextPath() + "/images/separator.gif' style='border:0'  alt='Separator' /></Td>");
                            graphsBuffer.append("<Td><a  href='javascript:void(0)' onClick=\"dispGraphDetails('" + graphIds[grpCnt] + "','" + grpIds + "')\" style='text-decoration:none' class=\"calcTitle\" title=\"Delete Chart\">Graph Details</a>");
                            //end of  graph details

                            graphsBuffer.append("</Tr>");
                            graphsBuffer.append("</Table>");//closing of outer table

                            graphsBuffer.append("</Td>");//closing of 2nd row 1st td
                            graphsBuffer.append("</Tr>");//end of 2nd row

                            graphsBuffer.append("<Tr>");//start of 3rd row
                            graphsBuffer.append("<Td align='left'>");
                            graphsBuffer.append("<div  align='left'   class=\"portlet ui-widget ui-widget-content ui-helper-clearfix ui-corner-all\">");//portlet div starts here

                            graphsBuffer.append("<div align='left' style=\"height:auto;width:" + (90 / pcharts.length) + "%\"   >");

                            if (pcharts[grpCnt].chartDisplay.equalsIgnoreCase("")) {

                                graphsBuffer.append("<SCRIPT LANGUAGE=\"JavaScript\" SRC=\"" + request.getContextPath() + "/overlib.js\">  </SCRIPT>");
                                graphsBuffer.append("<div  align='left' id=\"overDiv\" style=\"position:absolute; visibility:hidden; z-index:1000;\"></div>");
                                graphsBuffer.append("<img  src=\"" + request.getContextPath() + "/images/" + grpType + ".gif\" border='0' align='top' > </img>");
                                graphsBuffer.append(pcharts[grpCnt].chartDisplay);
                            } else {
                                graphsBuffer.append(pcharts[grpCnt].chartDisplay);
                            }

                            //graphsBuffer.append("</div>");//
                            graphsBuffer.append("</div >");//portlet div ends here
                            graphsBuffer.append("</div >");//column div ends here

                            graphsBuffer.append("</Td>");
                            graphsBuffer.append("</Tr>");
                            graphsBuffer.append("</Table>");

                            graphsBuffer.append("</Td>");
                        }

                        graphsBuffer.append("</Tr>");
                        graphsBuffer.append("</Table>");
                    }
                } else if (graphIds.length != 0) {
                    graphMapDetails = new HashMap[graphIds.length];

                    graphsBuffer.append("<Table width=\"100%\" border='0'  >");
                    graphsBuffer.append("<Tr>");
                    for (int grpCnt = 0; grpCnt < graphMapDetails.length; grpCnt++) {
                        String graphTitle = "";
                        graphMapDetails[grpCnt] = (HashMap) GraphHashMap.get(graphIds[grpCnt]);

                        graphTitle = String.valueOf(graphMapDetails[grpCnt].get("graphName"));

                        String grpType = "";
                        String grpSize = "";
                        if (graphMapDetails[grpCnt].get("graphTypeName") != null) {
                            grpType = String.valueOf(graphMapDetails[grpCnt].get("graphTypeName"));
                        }
                        if (graphMapDetails[grpCnt].get("grpSize") != null) {
                            grpSize = String.valueOf(graphMapDetails[grpCnt].get("grpSize"));
                        }

                        graphsBuffer.append("<Td valign='top'  width=\"" + (100 / graphMapDetails.length) + "%\">");
                        graphsBuffer.append("<Table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">");
                        graphsBuffer.append("<Tr>");//start of 1st row
                        graphsBuffer.append("<Td>");
                        graphsBuffer.append("<div   class=\"portlet-header ui-widget-header ui-corner-all \">" + graphTitle + "</div>");//portlet-header div starts here
                        graphsBuffer.append("</Td>");
                        graphsBuffer.append("</Tr>");

                        graphsBuffer.append("<Tr>");//start of 2nd row
                        graphsBuffer.append("<Td>");//start of 2nd row 1st td

                        graphsBuffer.append("<Table class=\"progenTable\"  border='0' align=\"left\">");//start of outer table
                        graphsBuffer.append("<Tr>");

                        //start of graph types
                        graphsBuffer.append("<Td><img src='" + request.getContextPath() + "/images/separator.gif' style='border:0'  alt='Separator' /></Td>");
                        graphsBuffer.append("<Td><a  href='javascript:void(0)' onclick=\"graphTypesDisp(document.getElementById('dispgrptypes" + grpCnt + "'))\" style='text-decoration:none' class=\"calcTitle\" title=\"Graph Types\"> Graph Types </a>");
                        graphsBuffer.append("<div style='display:none;width:auto;height:auto;background-color:#ffffff;overflow:auto;position: absolute;text-align: left;border: 1px solid #000000;border-top-width: 0px;'  id='dispgrptypes" + grpCnt + "'>");

                        graphsBuffer.append("<Table>");//start of inner table
                        for (int gtype = 0; gtype < GraphSTypesKeySet.length; gtype++) {

                            if (grpType.equalsIgnoreCase(String.valueOf(GraphTypesHashMap.get(GraphSTypesKeySet[gtype])))) {
                                graphsBuffer.append("<Tr>");
                                graphsBuffer.append("<Td id='" + grpType + "'>");
                                graphsBuffer.append("<b>" + grpType + "</b>");
                                graphsBuffer.append("</Td>");
                                graphsBuffer.append("</Tr>");
                            } else {
                                graphsBuffer.append("<Tr>");
                                graphsBuffer.append("<Td id='" + grpType + "'>");
                                graphsBuffer.append("<a href='javascript:void(0)' title='" + String.valueOf(GraphTypesHashMap.get(GraphSTypesKeySet[gtype])) + "' onclick=\"changeGrpType('" + String.valueOf(GraphTypesHashMap.get(GraphSTypesKeySet[gtype])) + "','" + graphIds[grpCnt] + "','" + grpIds + "')\">" + String.valueOf(GraphTypesHashMap.get(GraphSTypesKeySet[gtype])) + "</a>");
                                graphsBuffer.append("</Td>");
                                graphsBuffer.append("</Tr>");
                            }

                        }
                        graphsBuffer.append("</Table>");//closing of inner table
                        graphsBuffer.append(" </div>");
                        graphsBuffer.append("</Td>");

                        //end of graph types
                        //start of graph sizes
                        graphsBuffer.append("<Td><img src='" + request.getContextPath() + "/images/separator.gif' style='border:0'  alt='Separator' /></Td>");
                        graphsBuffer.append("<Td><a  href='javascript:void(0)' onclick=\"graphSizesDisp(document.getElementById('dispgrpsizes" + grpCnt + "'))\" style='text-decoration:none' class=\"calcTitle\" title=\"Graph Sizes\"> Graph Sizes </a>");
                        graphsBuffer.append("<div style='display:none;width:auto;height:auto;background-color:#ffffff;overflow:auto;position: absolute;text-align: left;border: 1px solid #000000;border-top-width: 0px;'  id='dispgrpsizeids" + grpCnt + "'>");

                        graphsBuffer.append("<Table>");//start of inner table
                        for (int gsize = 0; gsize < GraphSizesKeySet.length; gsize++) {

                            if (grpSize.equalsIgnoreCase(String.valueOf(GraphSizesHashMap.get(GraphSizesKeySet[gsize])))) {
                                graphsBuffer.append("<Tr>");
                                graphsBuffer.append("<Td id='" + grpSize + "'>");
                                graphsBuffer.append("<b>" + grpSize + "</b>");
                                graphsBuffer.append("</Td>");
                                graphsBuffer.append("</Tr>");
                            } else {
                                graphsBuffer.append("<Tr>");
                                graphsBuffer.append("<Td id='" + grpSize + "'>");
                                graphsBuffer.append("<a href='javascript:void(0)' title='" + String.valueOf(GraphSizesHashMap.get(GraphSizesKeySet[gsize])) + "' onclick=\"changeGrpSize('" + String.valueOf(GraphSizesHashMap.get(GraphSizesKeySet[gsize])) + "','" + graphIds[grpCnt] + "','" + grpIds + "')\">" + String.valueOf(GraphSizesHashMap.get(GraphSizesKeySet[gsize])) + "</a>");
                                graphsBuffer.append("</Td>");
                                graphsBuffer.append("</Tr>");
                            }

                        }
                        graphsBuffer.append("</Table>");//closing of inner table
                        graphsBuffer.append(" </div>");
                        graphsBuffer.append("</Td>");

                        //end of graph sizes
                        //start of graph columns
                        if (CEP == null || CEP.size() == 0) {
                            graphsBuffer.append("<Td><img src='" + request.getContextPath() + "/images/separator.gif' style='border:0'  alt='Separator' /></Td>");
                            graphsBuffer.append("<Td><a  href='javascript:void(0)' onclick=\"graphColumnsDisp('" + graphIds[grpCnt] + "','" + grpIds + "')\" style='text-decoration:none' class=\"calcTitle\" title=\"Graph Columns\"> Graph Columns </a>");

                        }
                        //end of graph columns

                        //start of delete graph
                        graphsBuffer.append("<Td><img src='" + request.getContextPath() + "/images/separator.gif' style='border:0'  alt='Separator' /></Td>");
                        graphsBuffer.append("<Td><a  href='javascript:void(0)' onClick=\"deleteGraph('" + graphIds[grpCnt] + "','" + grpIds + "')\" style='text-decoration:none' class=\"calcTitle\" title=\"Delete Chart\">Delete Chart </a>");
                        //end of delete graph

                        //start of  graph details
                        graphsBuffer.append("<Td><img src='" + request.getContextPath() + "/images/separator.gif' style='border:0'  alt='Separator' /></Td>");
                        // graphsBuffer.append("<Td><a  href='javascript:void(0)' onClick=\"dispGraphDetails('" + graphIds[grpCnt] + "')\" style='text-decoration:none' class=\"calcTitle\" title=\"Graph Details\">Graph Details</a>");
                        graphsBuffer.append("<Td><a  href='javascript:void(0)' onClick=\"dispGraphDetails('" + graphIds[grpCnt] + "','" + grpIds + "')\" style='text-decoration:none' class=\"calcTitle\" title=\"Delete Chart\">Graph Details</a>");

                        //end of  graph details
                        graphsBuffer.append("</Tr>");
                        graphsBuffer.append("</Table>");//closing of outer table

                        graphsBuffer.append("</Td>");//closing of 2nd row 1st td
                        graphsBuffer.append("</Tr>");//end of 2nd row

                        graphsBuffer.append("<Tr>");//start of 3rd row
                        graphsBuffer.append("<Td align='left'>");
                        graphsBuffer.append("<div  align='left'   class=\"portlet ui-widget ui-widget-content ui-helper-clearfix ui-corner-all\">");//portlet div starts here

                        graphsBuffer.append("<div align='left' style=\"height:auto;width:" + (90 / graphMapDetails.length) + "%\"   >");
                        graphsBuffer.append("<SCRIPT LANGUAGE=\"JavaScript\" SRC=\"" + request.getContextPath() + "/overlib.js\">  </SCRIPT>");
                        graphsBuffer.append("<div align='left' id=\"overDiv\" style=\"position:absolute; visibility:hidden; z-index:1000;\"></div>");
                        graphsBuffer.append("<img height=\"172px\" width=\"372px\"  src=\"" + request.getContextPath() + "/images/" + grpType + ".gif\" border='0' align='top' > </img>");

                        //graphsBuffer.append("</div>");//
                        graphsBuffer.append("</div >");//portlet div ends here
                        graphsBuffer.append("</div >");//column div ends here

                        graphsBuffer.append("</Td>");
                        graphsBuffer.append("</Tr>");
                        graphsBuffer.append("</Table>");

                        graphsBuffer.append("</Td>");

                    }
                    graphsBuffer.append("</Tr>");
                    graphsBuffer.append("</Table>");
                }
            } else {
            }
        } catch (Exception ex) {
            logger.error("Exception:", ex);
        }
        return graphsBuffer.toString();
    }

    public String buildTable(HashMap ParametersHashMap, HashMap TableHashMap, HashMap GraphHashMap, String ctxPath) {

        PbReportCollection collect = new PbReportCollection();
        PbReportQuery repQuery = new PbReportQuery();
        ArrayList displayLabels = new ArrayList();

        String[] dbColumns = new String[0];

        ArrayList reportQryElementIds = new ArrayList();
        ArrayList reportQryAggregations = new ArrayList();
        HashMap reportIncomingParameters = new HashMap();
        HashMap paramValues = new HashMap();
        ArrayList REP = null;
        ArrayList CEP = null;
        ArrayList Measures = null;
        ArrayList MeasuresNames = null;
        ArrayList Parameters = null;

        ArrayList REPNames = null;
        ArrayList CEPNames = null;
        ArrayList ParametersNames = null;
        //ArrayList AllGraphColumns = null;

        HashMap TimeDimHashMap = new HashMap();
        ArrayList TimeDetailstList = new ArrayList();

        PbReturnObject retObj = null;
        StringBuffer tableBuffer = new StringBuffer("");
        int endCount = 10;
        int viewByCount = 0;

        NumberFormat nFormat = NumberFormat.getInstance(Locale.US);
        nFormat.setMaximumFractionDigits(1);
        nFormat.setMinimumFractionDigits(1);

        TimeDimHashMap = (HashMap) ParametersHashMap.get("TimeDimHashMap");
        TimeDetailstList = (ArrayList) ParametersHashMap.get("TimeDetailstList");

        if (TableHashMap.get("REP") != null) {
            REP = (ArrayList) TableHashMap.get("REP");
            REPNames = (ArrayList) TableHashMap.get("REPNames");
        }
        if (TableHashMap.get("CEP") != null) {
            CEP = (ArrayList) TableHashMap.get("CEP");
            CEPNames = (ArrayList) TableHashMap.get("CEPNames");
        }
        if (TableHashMap.get("Measures") != null) {
            Measures = (ArrayList) TableHashMap.get("Measures");
            MeasuresNames = (ArrayList) TableHashMap.get("MeasuresNames");
            MeasuresNames = new ArrayList();
        }
        if (ParametersHashMap.get("Parameters") != null) {
            Parameters = (ArrayList) ParametersHashMap.get("Parameters");
            ParametersNames = (ArrayList) ParametersHashMap.get("ParametersNames");
        }
        /*
         * if (GraphHashMap.get("AllGraphColumns") != null) { AllGraphColumns =
         * (ArrayList) GraphHashMap.get("AllGraphColumns"); }
         *
         * if (AllGraphColumns == null) { AllGraphColumns = new ArrayList(); }
         */

        if (REP == null) {
            REP = new ArrayList();
            REPNames = new ArrayList();
            if (Parameters != null && Parameters.size() != 0) {
                REP.add(String.valueOf(Parameters.get(0)));
                REPNames.add(String.valueOf(ParametersNames.get(0)));
            }
        }
        if (CEP == null) {
            CEP = new ArrayList();
        }
        if (Measures == null) {
            Measures = new ArrayList();
        }

        if (REP.size() != 0 && Measures.size() != 0) {
            for (int i = 0; i < Parameters.size(); i++) {
                if (paramValues.get(String.valueOf(Parameters.get(i))) == null) {
                    paramValues.put(String.valueOf(Parameters.get(i)), "All");
                    reportIncomingParameters.put("CBOAPR" + String.valueOf(Parameters.get(i)), null);
                }
            }
            collect.reportIncomingParameters = reportIncomingParameters;
            collect.reportColViewbyValues = CEP;
            collect.reportRowViewbyValues = REP;
            collect.timeDetailsArray = TimeDetailstList;
            collect.timeDetailsMap = TimeDimHashMap;

            collect.getParamMetaDataForReportDesigner();

            for (int j = 0; j < Measures.size(); j++) {
                if (!reportQryElementIds.contains(String.valueOf(Measures.get(j)).replace("A_", ""))) {
                    reportQryElementIds.add(String.valueOf(Measures.get(j)).replace("A_", ""));
                }
            }

            /*
             *
             * for (int k = 0; k < AllGraphColumns.size(); k++) { if
             * (!reportQryElementIds.contains(String.valueOf(AllGraphColumns.get(k)).replace("A_",
             * ""))) {
             * reportQryElementIds.add(String.valueOf(AllGraphColumns.get(k)).replace("A_",
             * "")); }
            }
             */
            if (reportQryElementIds != null && reportQryElementIds.size() != 0) {
                reportQryAggregations = DAO.getReportQryAggregations(reportQryElementIds);

                collect.reportQryElementIds = reportQryElementIds;
                collect.reportQryAggregations = reportQryAggregations;

                repQuery.setQryColumns(collect.reportQryElementIds);
                repQuery.setColAggration(collect.reportQryAggregations);

                repQuery.setDefaultMeasure(String.valueOf(reportQryElementIds.get(0)));
                repQuery.setDefaultMeasureSumm(String.valueOf(reportQryAggregations.get(0)));
            }
            repQuery.setRowViewbyCols(REP);
            repQuery.setColViewbyCols(CEP);
            repQuery.setParamValue(paramValues);

            repQuery.setTimeDetails(TimeDetailstList); //assigning time details array to report query

            //added by santhosh.kumar@progenbusiness.com on 03/12/2009 fro setting user id and biz roles
            repQuery.setBizRoles(getBizRoles());
            repQuery.setUserId(getUserId());

            if (reportQryElementIds != null && reportQryElementIds.size() != 0) {
                retObj = repQuery.getPbReturnObject(String.valueOf(reportQryElementIds.get(0)));

                if (retObj != null) {
                    dbColumns = retObj.getColumnNames();
                }

                displayLabels = (ArrayList) REPNames.clone();

                /*
                 * for (int viewByIndex = 0; viewByIndex <
                 * collect.reportRowViewbyValues.size(); viewByIndex++) {
                 * displayLabels.add(collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(viewByIndex))));
                 * }
                 */
                if (CEP != null && CEP.size() != 0) {
                    for (int nonViewByIndex = collect.reportRowViewbyValues.size(); nonViewByIndex < (collect.reportRowViewbyValues.size() + repQuery.crossTabNonViewBy.size()); nonViewByIndex++) {
                        displayLabels.add(String.valueOf(repQuery.crossTabNonViewByMap.get(dbColumns[nonViewByIndex])));
                    }
                } else {
                    for (int nonViewByIndex = collect.reportRowViewbyValues.size(); nonViewByIndex < (collect.reportRowViewbyValues.size() + repQuery.NonViewByMap.size()); nonViewByIndex++) {
                        displayLabels.add(String.valueOf(repQuery.NonViewByMap.get(dbColumns[nonViewByIndex])));
                        MeasuresNames.add(String.valueOf(repQuery.NonViewByMap.get(dbColumns[nonViewByIndex])));
                    }
                }
                viewByCount = collect.reportRowViewbyValues.size();
                TableHashMap.put("MeasuresNames", MeasuresNames);
            }

            if (retObj != null) {
                dbColumns = retObj.getColumnNames();

                tableBuffer.append("<table cellspacing=\"1\" class=\"tablesorter\" id=\"tablesorter\" width=\"100px\">");
                tableBuffer.append("<thead>");
                tableBuffer.append("<tr valign=\"top\">");

                for (int k = 0; k < displayLabels.size(); k++) {
                    tableBuffer.append("<th>" + displayLabels.get(k) + "</th> ");
                }

                tableBuffer.append("</tr>");
                tableBuffer.append("</thead>");
                tableBuffer.append("<tfoot>");
                tableBuffer.append("</tfoot>");
                tableBuffer.append("<tbody>");

                if (retObj.getRowCount() <= endCount) {
                    endCount = retObj.getRowCount();
                }
                for (int rowId = 0; rowId < endCount; rowId++) {
                    tableBuffer.append("<tr valign = \"top\">");

                    for (int colId = 0; colId < viewByCount; colId++) {
                        tableBuffer.append("<td align='left'>");
                        tableBuffer.append(retObj.getFieldValueString(rowId, dbColumns[colId]));
                        tableBuffer.append("</td>");

                    }
                    for (int colId = viewByCount; colId < dbColumns.length; colId++) {
                        tableBuffer.append("<td align='right'>");
                        tableBuffer.append("" + nFormat.format(retObj.getFieldValueBigDecimal(rowId, dbColumns[colId])));//need to check for data type in future to convert it into decimal
                        tableBuffer.append("</td>");

                    }
                    tableBuffer.append("</tr>");
                }

                tableBuffer.append("</tbody>");
                tableBuffer.append("</table>");

                /*
                 * tableBuffer.append("<script type='text/javascript'>");
                 * tableBuffer.append("$(document).ready(function() {");
                 * tableBuffer.append(" $('#tablesorter').columnFilters();");
                 * tableBuffer.append(" $('#tablesorter')");
                 * tableBuffer.append(".tablesorter({widthFixed: true, widgets:
                 * ['zebra']})"); tableBuffer.append("
                 * .tablesorterPager({container: $('#pager')});");
                 * tableBuffer.append("});");
                 *
                 * tableBuffer.append(" </script>");
                 */
            }
        } else {
        }

        return tableBuffer.toString();
    }

    public HashMap changeGraphTitle(String grpId, String grpTitle, HashMap GraphHashMap) {
        HashMap GraphDetails = null;

        if (GraphHashMap != null && GraphHashMap.get(grpId) != null) {

            GraphDetails = (HashMap) GraphHashMap.get(grpId);
            GraphDetails.put("graphName", grpTitle);
            GraphHashMap.put(grpId, GraphDetails);
        }

        return GraphHashMap;
    }

    public String getCurrDate() {
        Date date = new Date();
        String DATE_FORMAT = "dd/MM/yyyy";
        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);

        return sdf.format(date);
    }

    public HashMap changeGraphDetails(String grpId, String grpTitle, String grpLegend, String grpLegendLoc, String grpshowX, String grpshowY, String grplyaxislabel, String grpryaxislabel, String grpdrill, String grpbcolor, String grpfcolor, String grpdata, HashMap GraphHashMap) {
        HashMap GraphDetails = null;

        if (GraphHashMap != null && GraphHashMap.get(grpId) != null) {
            GraphDetails = (HashMap) GraphHashMap.get(grpId);
            if (grpTitle != null) {
                GraphDetails.put("graphName", grpTitle);
            }
            if (grpLegend != null) {
                GraphDetails.put("graphLegend", grpLegend);
            }
            if (grpLegendLoc != null) {
                GraphDetails.put("graphLegendLoc", grpLegendLoc);
//            }if (measureNamePosition != null) {
//                GraphDetails.put("measureNamePosition", measureNamePosition);
            }
            if (grpshowX != null) {
                GraphDetails.put("graphshowX", grpshowX);
            }
            if (grpshowY != null) {
                GraphDetails.put("graphshowY", grpshowY);
            }
            if (grplyaxislabel != null) {
                GraphDetails.put("graphLYaxislabel", grplyaxislabel);
            }
            if (grpryaxislabel != null) {
                GraphDetails.put("graphRYaxislabel", grpryaxislabel);
            }
            if (grpdrill != null) {
                GraphDetails.put("graphDrill", grpdrill);
            }
            if (grpbcolor != null) {
                GraphDetails.put("graphBcolor", grpbcolor);
            }
            if (grpfcolor != null) {
                GraphDetails.put("graphFcolor", grpfcolor);
            }
            if (grpdata != null) {
                GraphDetails.put("graphData", grpdata);
            }

            GraphHashMap.put(grpId, GraphDetails);
        }

        return GraphHashMap;
    }

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getBizRoles() {
        return bizRoles;
    }

    public void setBizRoles(String bizRoles) {
        this.bizRoles = bizRoles;
    }

    public boolean getIsSnapShot() {
        return isSnapShot;
    }

    public void setIsSnapShot(boolean isSnapShot) {
        this.isSnapShot = isSnapShot;
    }

    public String getSnapShotId() {
        return snapShotId;
    }

    public void setSnapShotId(String snapShotId) {
        this.snapShotId = snapShotId;
    }

    //Start of code by sandeep on 17/10/14 for schedule// update local files in oneview
    public Container readSnapShotXML1(Container container, String snapShotId, PbReportCollection collect) throws Exception {
        SAXBuilder builder = new SAXBuilder();
        pbXmlUtilities xmUtil = new pbXmlUtilities();
        Document document = null;
        Element root = null;
        HashMap<String, ArrayList<String>> timeDSMap = new HashMap<String, ArrayList<String>>();
        ArrayList timeDsArray = new ArrayList();
        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
            String clob = reportViewerDAO.readSnapShotString(container, snapShotId);
            DOMParser parser = new DOMParser();
            document = builder.build(new StringReader(clob));
        } else {
            Clob clob = reportViewerDAO.readSnapShotXML(container, snapShotId);
            document = builder.build(clob.getCharacterStream());
        }
        ReportSchedule schedule = reportViewerDAO.getSchedulerDetails(snapShotId);
        ProgenParam pParam = new ProgenParam();

        //document = builder.build(clob.getCharacterStream());
        root = document.getRootElement();
        Element schedRepVersionElem = root.getChild("Report_Version");
        double schedRepVersion = schedRepVersionElem != null ? Double.parseDouble(schedRepVersionElem.getValue()) : 1.0;

        HashMap GraphHashMap = container.getGraphHashMap();
        HashMap TableHashMap = container.getTableHashMap();
        HashMap ParametersHashMap = container.getParametersHashMap();

        int viewByCount = (container.getViewByCount());

        ArrayList displayColumns = new ArrayList();
        ArrayList displayLabels = new ArrayList();
        ArrayList originalColumns = new ArrayList();
        ArrayList displayTypes = new ArrayList();
        ArrayList dataTypes = new ArrayList();
        ArrayList links = new ArrayList();
        ArrayList signs = new ArrayList();
        ArrayList reportQueryAggregations = new ArrayList();
        ArrayList reportQryElementIds = new ArrayList();
        ArrayList reportQueryColumnNames = new ArrayList();
        ArrayList Measures = new ArrayList();
        ArrayList MeasureNames = new ArrayList();

        LinkedHashMap<String, String> grphMeasMap;// = HashBiMap.create();
        HashMap timeDetailsMap = new HashMap();
        ArrayList timeDetailsArray = new ArrayList();
        /*
         * Time Processing starts
         */

        List row = root.getChildren("progen_time");//Only one row as of now

        /*
         * Start of Processing of parameters
         */
        for (int i = 0; i < row.size(); i++) {//Loop for section two under portlet
            Element Companyname = (Element) row.get(i);

            List timeMasterRow = Companyname.getChildren("time_master");
            for (int j = 0; j < timeMasterRow.size(); j++) {
                Element paramElement = (Element) timeMasterRow.get(j);
                timeDetailsArray.add(xmUtil.getXmlTagValue(paramElement, "timeLevel"));
                timeDetailsArray.add(xmUtil.getXmlTagValue(paramElement, "timeType"));
            }
            if (timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                List timeDetailsRow = Companyname.getChildren("timeDetails");
                for (int j = 0; j < timeDetailsRow.size(); j++) {
                    ArrayList timeInfo = new ArrayList();
                    Element paramElement1 = (Element) timeDetailsRow.get(j);
                    String temp = xmUtil.getXmlTagValue(paramElement1, "timeColType");
                    // // ////.println("temp==" + temp);
                    String currVal = xmUtil.getXmlTagValue(paramElement1, "defaultValue");
                    String realDate = xmUtil.getXmlTagValue(paramElement1, "realDate");
                    String temprealDate = realDate;
                    if (currVal.equalsIgnoreCase("sysdate")) {
                        currVal = "Current Date";
                    } else if (currVal.equalsIgnoreCase("dynamicDate")) { //purpose of dynamic headlines(report builds with system date)
//                        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
//                        Date date = new Date();
//                        realDate=(dateFormat.format(date.getTime()));
                        //purpose of dynamic headlines(report builds with system date)
                        //                        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
                        //                        Date date = new Date();
                        //                        realDate=(dateFormat.format(date.getTime()));
                        realDate = pParam.getDefaultSystemTime(null, null, 0);
                        ;
                    }
                    if (schedule == null) { //for snapshot code
                        if (currVal == null || "".equalsIgnoreCase(currVal) || currVal.equalsIgnoreCase("Current Date")) {

                            {//default Value
                                if (temp.equalsIgnoreCase("AS_OF_DATE") || temp.equalsIgnoreCase("AS_OF_DATE1") || temp.equalsIgnoreCase("AS_OF_DATE") || temp.equalsIgnoreCase("AS_OF_DATE1")) {
                                    timeInfo.add(pParam.getdateforpage());
                                } else if (temp.equalsIgnoreCase("AS_OF_MONTH") || temp.equalsIgnoreCase("AS_OF_MONTH1")) {
                                    timeInfo.add(pParam.getmonthforpage());
                                } else if (temp.equalsIgnoreCase("AS_OF_YEAR") || temp.equalsIgnoreCase("AS_OF_YEAR1")) {
                                    timeInfo.add(pParam.getYearforpage());
                                } else if (temp.equalsIgnoreCase("PRG_PERIOD_TYPE")) {
                                    timeInfo.add(temprealDate);
                                    // timeInfo.add("Month");
                                } else if (temp.equalsIgnoreCase("PRG_COMPARE")) {
                                    timeInfo.add(temprealDate);
                                    //timeInfo.add("Last Period");
                                }

                            }

                        } else if (temp.equalsIgnoreCase("AS_OF_DATE") || temp.equalsIgnoreCase("AS_OF_DATE1") || temp.equalsIgnoreCase("AS_OF_DATE") || temp.equalsIgnoreCase("AS_OF_DATE1")) {
                            timeInfo.add(realDate);
                        } else if (temp.equalsIgnoreCase("AS_OF_MONTH") || temp.equalsIgnoreCase("AS_OF_MONTH1")) {
                            timeInfo.add(realDate);
                        } else if (temp.equalsIgnoreCase("AS_OF_YEAR") || temp.equalsIgnoreCase("AS_OF_YEAR1")) {
                            timeInfo.add(realDate);
                        } else if (temp.equalsIgnoreCase("PRG_PERIOD_TYPE")) {
                            timeInfo.add(temprealDate);
                            //  timeInfo.add("Month");
                        } else if (temp.equalsIgnoreCase("PRG_COMPARE")) {
                            timeInfo.add(temprealDate);
                            // timeInfo.add("Last Period");
                        }
                    } else {
                        if (schedule.getDataSelection() != null) {
                            if (fromoneviewschedule && reporttime) {
                            } else {
                                SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
                                Date date = new Date();
                                if (schedule.getDataSelection().equals("Current Day")) {
                                    realDate = (dateFormat.format(date.getTime()));
                                } else if (schedule.getDataSelection().equals("Previous Day")) {
                                    int MILLIS_IN_DAY = 1000 * 60 * 60 * 24;
                                    realDate = (dateFormat.format(date.getTime() - MILLIS_IN_DAY));
                                }
                            }

                            // 
                        }
                        if (temp.equalsIgnoreCase("AS_OF_DATE") || temp.equalsIgnoreCase("AS_OF_DATE1") || temp.equalsIgnoreCase("AS_OF_DATE") || temp.equalsIgnoreCase("AS_OF_DATE1")) {
                            timeInfo.add(realDate);
                        } else if (temp.equalsIgnoreCase("AS_OF_MONTH") || temp.equalsIgnoreCase("AS_OF_MONTH1")) {
                            timeInfo.add(realDate);
                        } else if (temp.equalsIgnoreCase("AS_OF_YEAR") || temp.equalsIgnoreCase("AS_OF_YEAR1")) {
                            timeInfo.add(realDate);
                        } else if (temp.equalsIgnoreCase("PRG_PERIOD_TYPE")) {
                            timeInfo.add(temprealDate);
                            // 
                            //timeInfo.add("Month");
                        } else if (temp.equalsIgnoreCase("PRG_COMPARE")) {
                            timeInfo.add(temprealDate);
                            /// 
                            //timeInfo.add("Last Period");
                        }
                    }

                    timeInfo.add("CBO_" + temp);
                    timeInfo.add(xmUtil.getXmlTagValue(paramElement1, "timeColName"));
                    timeInfo.add(xmUtil.getXmlTagValue(paramElement1, "timeColSeq"));
                    timeInfo.add(xmUtil.getXmlTagValue(paramElement1, "timeFormSeq"));

                    if (currVal == null || "".equalsIgnoreCase(currVal) || currVal.equalsIgnoreCase("Current Date")) {
                        timeInfo.add(currVal);
                    } else {
                        timeInfo.add(realDate);
                    }

                    timeInfo.add(temp);

                    timeDetailsMap.put(timeInfo.get(6), timeInfo);

                }
                // // ////.println("timeDetailsMap===" + timeDetailsMap);
                ArrayList timeInfo = new ArrayList();
                if (timeDetailsArray.get(0).toString().equalsIgnoreCase("Year") && timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_YEAR_CMP")) {
                    timeInfo = (ArrayList) timeDetailsMap.get("AS_OF_YEAR");
                    timeDetailsArray.add(timeInfo.get(0));

                    timeInfo = (ArrayList) timeDetailsMap.get("AS_OF_YEAR1");
                    timeDetailsArray.add(timeInfo.get(0));

                } else if (timeDetailsArray.get(0).toString().equalsIgnoreCase("DAY") && timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                    timeInfo = (ArrayList) timeDetailsMap.get("AS_OF_DATE");
                    if (timeDetailsMap.get("AS_OF_DATE") != null) {
                        timeDetailsArray.add(timeInfo.get(0));
                    } else {
                        timeDetailsArray.add(timeDsArray.get(2)); //for report without date pupose
                    }
                    timeInfo = (ArrayList) timeDetailsMap.get("PRG_PERIOD_TYPE");
                    if (timeDetailsMap.get("PRG_PERIOD_TYPE") != null) {
                        timeDetailsArray.add(timeInfo.get(0));
                    } else {
                        timeDetailsArray.add(timeDsArray.get(3)); //for report without date pupose
                    }
                    if (timeDetailsMap.get("PRG_COMPARE") != null) {
                        timeInfo = (ArrayList) timeDetailsMap.get("PRG_COMPARE");
                        timeDetailsArray.add(timeInfo.get(0));
                    } else {
                        timeDetailsArray.add("Last Period");
                    }
                    //timeInfo = (ArrayList) timeDetailsMap.get("PRG_COMPARE");
                    //timeDetailsArray.add(timeInfo.get(0));
                } else if (timeDetailsArray.get(0).toString().equalsIgnoreCase("MONTH") && timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                    timeInfo = (ArrayList) timeDetailsMap.get("AS_OF_MONTH");
                    timeDetailsArray.add(timeInfo.get(0));

                    timeInfo = (ArrayList) timeDetailsMap.get("PRG_PERIOD_TYPE");
                    timeDetailsArray.add(timeInfo.get(0));

                    timeInfo = (ArrayList) timeDetailsMap.get("PRG_COMPARE");
                    timeDetailsArray.add(timeInfo.get(0));
                }

            }//End of section 2 of collection
            else {
                // 
                collect.timeDetailsMap = timeDSMap;
                collect.timeDetailsArray = timeDsArray;
                timeDetailsArray = timeDsArray;
                timeDetailsMap = timeDSMap;
            }
            // // ////.println("param hashmap=before==" + ParametersHashMap);
            ParametersHashMap.put("TimeDetailstList", timeDetailsArray);
            ParametersHashMap.put("TimeDimHashMap", timeDetailsMap);
        }
        if (fromoneviewschedule) {
            collect.timeDetailsMap = timeDetailsMap;
            collect.timeDetailsArray = timeDetailsArray;
        }
        // // ////.println("param hashmap=after==" + ParametersHashMap);
        container.setParametersHashMap(ParametersHashMap);
        return container;
    }

    public Container readSnapShotXML(Container container, String snapShotId, PbReportCollection collect, String reportId2) throws Exception, JsonMappingException {
        SAXBuilder builder = new SAXBuilder();
        pbXmlUtilities xmUtil = new pbXmlUtilities();
        Document document = null;
        Element root = null;
        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
            String clob = reportViewerDAO.readSnapShotString(container, snapShotId);
            DOMParser parser = new DOMParser();
            document = builder.build(new StringReader(clob));
        } else {
            Clob clob = reportViewerDAO.readSnapShotXML(container, snapShotId);
            document = builder.build(clob.getCharacterStream());
        }
        ReportSchedule schedule = reportViewerDAO.getSchedulerDetails(snapShotId);
        ProgenParam pParam = new ProgenParam();

        //document = builder.build(clob.getCharacterStream());
        root = document.getRootElement();
        Element schedRepVersionElem = root.getChild("Report_Version");
        double schedRepVersion = schedRepVersionElem != null ? Double.parseDouble(schedRepVersionElem.getValue()) : 1.0;

        HashMap GraphHashMap = container.getGraphHashMap();
        HashMap TableHashMap = container.getTableHashMap();
        HashMap ParametersHashMap = container.getParametersHashMap();

        int viewByCount = (container.getViewByCount());

        ArrayList displayColumns = new ArrayList();
        ArrayList displayLabels = new ArrayList();
        ArrayList originalColumns = new ArrayList();
        ArrayList displayTypes = new ArrayList();
        ArrayList dataTypes = new ArrayList();
        ArrayList links = new ArrayList();
        ArrayList signs = new ArrayList();
        ArrayList reportQueryAggregations = new ArrayList();
        ArrayList reportQryElementIds = new ArrayList();
        ArrayList reportQueryColumnNames = new ArrayList();
        ArrayList Measures = new ArrayList();
        ArrayList MeasureNames = new ArrayList();

        LinkedHashMap<String, String> grphMeasMap;// = HashBiMap.create();
        if (schedule == null) {// only for snapshot code
            //building graph
            if (root.getChild("graphs") != null) {
                List graphs = root.getChildren("graphs");//Only one row as of now

                //for (int i = 0; i < graphs.size(); i++) {
                Element graph = (Element) graphs.get(0);// as we know there are only one graphs tag
                List graphList = graph.getChildren("graph");
                StringBuffer AllGraphIds = new StringBuffer("");
                ArrayList AllGraphColumns = new ArrayList();

                HashMap[] graphMapDetails = new HashMap[graphList.size()];

                for (int j = 0; j < graphList.size(); j++) {
                    grphMeasMap = new LinkedHashMap<String, String>();

                    graphMapDetails[j] = new HashMap();
                    Element graphEle = (Element) graphList.get(j);
                    String graphId = xmUtil.getXmlTagValue(graphEle, "graphId");
                    AllGraphIds.append("," + graphId);
                    graphMapDetails[j].put("graphId", xmUtil.getXmlTagValue(graphEle, "graphId"));
                    graphMapDetails[j].put("graphName", xmUtil.getXmlTagValue(graphEle, "graphName"));
                    graphMapDetails[j].put("graphWidth", xmUtil.getXmlTagValue(graphEle, "graphWidth"));
                    graphMapDetails[j].put("graphHeight", xmUtil.getXmlTagValue(graphEle, "graphHeight"));
                    graphMapDetails[j].put("graphClassName", xmUtil.getXmlTagValue(graphEle, "graphClassName"));
                    graphMapDetails[j].put("graphTypeName", xmUtil.getXmlTagValue(graphEle, "graphTypeName"));
                    graphMapDetails[j].put("graphSize", xmUtil.getXmlTagValue(graphEle, "graphSize"));
                    graphMapDetails[j].put("SwapColumn", xmUtil.getXmlTagValue(graphEle, "SwapColumn"));
                    graphMapDetails[j].put("graphLegend", xmUtil.getXmlTagValue(graphEle, "graphLegend"));
                    graphMapDetails[j].put("graphLegendLoc", xmUtil.getXmlTagValue(graphEle, "graphLegendLoc"));
                    graphMapDetails[j].put("graphshowX", xmUtil.getXmlTagValue(graphEle, "graphshowX"));
                    graphMapDetails[j].put("graphshowY", xmUtil.getXmlTagValue(graphEle, "graphshowY"));
                    graphMapDetails[j].put("graphLYaxislabel", xmUtil.getXmlTagValue(graphEle, "graphLYaxislabel"));
                    graphMapDetails[j].put("graphRYaxislabel", xmUtil.getXmlTagValue(graphEle, "graphRYaxislabel"));
                    graphMapDetails[j].put("graphDrill", xmUtil.getXmlTagValue(graphEle, "graphDrill"));
                    graphMapDetails[j].put("graphBcolor", xmUtil.getXmlTagValue(graphEle, "graphBcolor"));
                    graphMapDetails[j].put("graphFcolor", xmUtil.getXmlTagValue(graphEle, "graphFcolor"));
                    graphMapDetails[j].put("graphData", xmUtil.getXmlTagValue(graphEle, "graphData"));
                    graphMapDetails[j].put("showGT", xmUtil.getXmlTagValue(graphEle, "showGT"));
                    graphMapDetails[j].put("measureNamePosition", xmUtil.getXmlTagValue(graphEle, "measureNamePosition"));
                    //Start of code by sandeep on 16/10/14 for schedule// update local files in oneview
                    graphMapDetails[j].put("graphDisplayRows", xmUtil.getXmlTagValue(graphEle, "graphDisplayRows"));
                    graphMapDetails[j].put("nbrFormat", xmUtil.getXmlTagValue(graphEle, "nbrFormat"));
                    //End of code by sandeep on 16/10/14 for schedule// update local files in oneview
                    ArrayList viewByElementIds = new ArrayList();
                    Set<String> measEleSet = new LinkedHashSet<String>();
                    Set<String> measNameSet = new LinkedHashSet<String>();
                    //need to modify this reading by using arraylist
                    if (graphEle.getChild("viewByElementIds") != null) {
                        List viewByElementIdsList = ((Element) graphEle.getChildren("viewByElementIds").get(0)).getChildren("viewByElementId");

                        for (int k = 0; k < viewByElementIdsList.size(); k++) {
                            viewByElementIds.add(((Element) viewByElementIdsList.get(k)).getText());
                        }
                        graphMapDetails[j].put("viewByElementIds", (String[]) viewByElementIds.toArray(new String[0]));
                    }
                    if (graphEle.getChild("barChartColumnNames") != null) {
                        List barChartColumnNameList = ((Element) graphEle.getChildren("barChartColumnNames").get(0)).getChildren("barChartColumnName");
                        ArrayList barChartColumnNames = new ArrayList();
                        for (int k = 0; k < barChartColumnNameList.size(); k++) {
                            barChartColumnNames.add(((Element) barChartColumnNameList.get(k)).getText());
                            if (k >= viewByCount) {
                                if (!AllGraphColumns.contains(((Element) barChartColumnNameList.get(k)).getText())) {
                                    AllGraphColumns.add(((Element) barChartColumnNameList.get(k)).getText());
                                }
                                measEleSet.add(((Element) barChartColumnNameList.get(k)).getText());
                            }
                        }
                        graphMapDetails[j].put("barChartColumnNames", (String[]) barChartColumnNames.toArray(new String[0]));
                        graphMapDetails[j].put("pieChartColumns", (String[]) barChartColumnNames.toArray(new String[0]));
                    }
                    if (graphEle.getChild("barChartColumnTitles") != null) {
                        List barChartColumnTitleList = ((Element) graphEle.getChildren("barChartColumnTitles").get(0)).getChildren("barChartColumnTitle");
                        ArrayList barChartColumnTitles = new ArrayList();
                        for (int k = 0; k < barChartColumnTitleList.size(); k++) {
                            barChartColumnTitles.add(((Element) barChartColumnTitleList.get(k)).getText());
                            if (k >= viewByCount) {
                                measNameSet.add(((Element) barChartColumnTitleList.get(k)).getText());
                            }
                        }
                        graphMapDetails[j].put("barChartColumnTitles", (String[]) barChartColumnTitles.toArray(new String[0]));
                    }

                    if (graphEle.getChild("barChartColumnNames1") != null) {
                        List barChartColumnName1List = ((Element) graphEle.getChildren("barChartColumnNames1").get(0)).getChildren("barChartColumnName1");
                        ArrayList barChartColumnNames1 = new ArrayList();
                        for (int k = 0; k < barChartColumnName1List.size(); k++) {
                            barChartColumnNames1.add(((Element) barChartColumnName1List.get(k)).getText());
                        }

                        graphMapDetails[j].put("barChartColumnNames1", (String[]) barChartColumnNames1.toArray(new String[0]));
                    }
                    if (graphEle.getChild("barChartColumnTitles1") != null) {
                        List barChartColumnTitle1List = ((Element) graphEle.getChildren("barChartColumnTitles1").get(0)).getChildren("barChartColumnTitle1");
                        ArrayList barChartColumnTitles1 = new ArrayList();
                        for (int k = 0; k < barChartColumnTitle1List.size(); k++) {
                            barChartColumnTitles1.add(((Element) barChartColumnTitle1List.get(k)).getText());
                        }

                        graphMapDetails[j].put("barChartColumnTitles1", (String[]) barChartColumnTitles1.toArray(new String[0]));
                    }

                    if (graphEle.getChild("barChartColumnNames2") != null) {
                        List barChartColumnName2List = ((Element) graphEle.getChildren("barChartColumnNames2").get(0)).getChildren("barChartColumnName2");
                        ArrayList barChartColumnNames2 = new ArrayList();
                        for (int k = 0; k < barChartColumnName2List.size(); k++) {
                            barChartColumnNames2.add(((Element) barChartColumnName2List.get(k)).getText());
                        }

                        graphMapDetails[j].put("barChartColumnNames2", (String[]) barChartColumnNames2.toArray(new String[0]));
                    }
                    if (graphEle.getChild("barChartColumnTitles2") != null) {
                        List barChartColumnTitle2List = ((Element) graphEle.getChildren("barChartColumnTitles2").get(0)).getChildren("barChartColumnTitle2");
                        ArrayList barChartColumnTitles2 = new ArrayList();
                        for (int k = 0; k < barChartColumnTitle2List.size(); k++) {
                            barChartColumnTitles2.add(((Element) barChartColumnTitle2List.get(k)).getText());
                        }

                        graphMapDetails[j].put("barChartColumnTitles2", (String[]) barChartColumnTitles2.toArray(new String[0]));
                    }

                    if (graphEle.getChild("axiss") != null) {
                        List axisList = ((Element) graphEle.getChildren("axiss").get(0)).getChildren("axis");
                        ArrayList axis = new ArrayList();
                        for (int k = 0; k < axisList.size(); k++) {
                            axis.add(((Element) axisList.get(k)).getText());
                        }

                        graphMapDetails[j].put("axis", (String[]) axis.toArray(new String[0]));
                    }

                    if (graphEle.getChild("RowValuesList") != null) {
                        List RowValues = ((Element) graphEle.getChildren("RowValuesList").get(0)).getChildren("RowValues");
                        ArrayList RowValuesList = new ArrayList();

                        for (int k = 0; k < RowValues.size(); k++) {
                            RowValuesList.add(((Element) RowValues.get(k)).getText());
                        }
                        graphMapDetails[j].put("RowValuesList", RowValuesList);
                    }

                    Iterator<String> measNameIter = measNameSet.iterator();
                    for (String measEle : measEleSet) {
                        grphMeasMap.put(measEle, measNameIter.next());
                    }
                    graphMapDetails[j].put("graphMeasures", grphMeasMap);

                    GraphHashMap.put(graphId, graphMapDetails[j]);
                }
                GraphHashMap.put("AllGraphColumns", AllGraphColumns);
                if (AllGraphIds.toString().equalsIgnoreCase("")) {
                    GraphHashMap.put("graphIds", AllGraphIds.toString());
                } else {
                    GraphHashMap.put("graphIds", AllGraphIds.substring(1));
                }
                //}

            }
        }
        if (root.getChild("progen_viewbys") != null) {
            List viewByLst = root.getChildren("progen_viewbys");
            Element viewByElements = null;
            List rowEdgeParamList = null;
            List colEdgeParamList = null;
            Element repIdEle = null;
            List list;
            Element ele;
            ArrayList<String> rowViewByLst = new ArrayList<String>();
            ArrayList<String> colViewByLst = new ArrayList<String>();
            for (int i = 0; i < viewByLst.size(); i++) {
                viewByElements = (Element) viewByLst.get(i);
                rowEdgeParamList = viewByElements.getChildren("REP");
                repIdEle = (Element) rowEdgeParamList.get(0);
                list = repIdEle.getChildren("REP_id");
                for (int j = 0; j < list.size(); j++) {
                    repIdEle = (Element) list.get(j);
                    rowViewByLst.add(repIdEle.getText());
                }
                //added by @swathi
                if (viewByElements.getChildren("CEP") != null && !viewByElements.getChildren("CEP").isEmpty()) {
                    colEdgeParamList = viewByElements.getChildren("CEP");
                    Element cepIdEle = (Element) colEdgeParamList.get(0);
                    List ceplist = cepIdEle.getChildren("CEP_id");

                    for (int j = 0; j < ceplist.size(); j++) {
                        cepIdEle = (Element) ceplist.get(j);
                        colViewByLst.add(cepIdEle.getText());
                    }
                }
            }
            collect.reportRowViewbyValues = rowViewByLst;
            collect.reportColViewbyValues = colViewByLst;
            container.setColumnViewByCount(String.valueOf(collect.reportColViewbyValues.size()));
//             if (collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() > 0) {
//                            container.setReportCrosstab(true);
//
//                        } else {
//                            container.setReportCrosstab(false);
//
//                        }
        }
        HashMap<String, ArrayList<String>> timeDSMap = new HashMap<String, ArrayList<String>>();
        ArrayList timeDsArray = new ArrayList();
//        
//        
        timeDSMap = collect.timeDetailsMap;
        timeDsArray = collect.timeDetailsArray;
        Gson gson = new Gson();
        Type tarType = new TypeToken<List<String>>() {
        }.getType();
        if (root.getChild("progen_parameter") != null) {
            List progenParamLst = root.getChildren("progen_parameter");
            Element viewEle = null;
            List urlList = null;
            Element urlEle = null;
            Element progenParamEle = (Element) progenParamLst.get(0);
            List paramMasterLst = progenParamEle.getChildren("Parameter_Master");
            Element paramMasterEle = (Element) paramMasterLst.get(0);
            List paramDetailLst = paramMasterEle.getChildren("Parameter_Detail");
            Element paramDetailEle;
            ArrayList<String> values;
            String elementId;
            String elementName = "";
            Map<String, List> inMap = new HashMap<String, List>();
            Map<String, List> notInMap = new HashMap<String, List>();
            Map<String, List> likeMap = new HashMap<String, List>();
            Map<String, List> notLikeMap = new HashMap<String, List>();
            for (int i = 0; i < paramDetailLst.size(); i++) {
                paramDetailEle = (Element) paramDetailLst.get(i);
                values = new ArrayList<String>();
                elementId = xmUtil.getXmlTagValue(paramDetailEle, "element_id");
                values.add(xmUtil.getXmlTagValue(paramDetailEle, "defaultValue"));
                elementName = xmUtil.getXmlTagValue(paramDetailEle, "paramDispName");
                if (!"Time".equalsIgnoreCase(elementId)) {
                    List<String> defaulValList = null;
                    try {
                        defaulValList = gson.fromJson(xmUtil.getXmlTagValue(paramDetailEle, "defaultValue"), tarType);
                    } catch (com.google.gson.JsonParseException e) {
                        String normalString = xmUtil.getXmlTagValue(paramDetailEle, "defaultValue");
                        String[] splitedStr = normalString.split(",");
                        defaulValList = Arrays.asList(splitedStr);
                    }

//                    collect. setParameters(elementId,  elementName, values);
                    collect.reportIncomingParameters.put("CBOARP" + xmUtil.getXmlTagValue(paramDetailEle, "element_id"), defaulValList);
                    collect.reportParametersValues.put(xmUtil.getXmlTagValue(paramDetailEle, "element_id"), defaulValList); //xmUtil.getXmlTagValue(paramDetailEle, "defaultValue")
                    ArrayList parameter = new ArrayList();
                    //parameter.addAll(Arrays.asList(xmUtil.getXmlTagValue(paramDetailEle, "reportParameters").split(",")));
                    String[] param = xmUtil.getXmlTagValue(paramDetailEle, "reportParameters").split(",");
                    for (int j = 0; j < 8; j++) {
                        parameter.add(param[j]);
                    }
                    parameter.add(defaulValList);
                    parameter.add("CBOARP" + xmUtil.getXmlTagValue(paramDetailEle, "element_id"));
                    String filterType = param[param.length - 1].trim();
                    String elemId = xmUtil.getXmlTagValue(paramDetailEle, "element_id");
                    if (schedRepVersion < 1.1 && progenParamEle.getChild("NOTIN") == null
                            && progenParamEle.getChild("LIKE") == null
                            && progenParamEle.getChild("NOTLIKE") == null) {
                        if (filterType.equalsIgnoreCase("INCLUDED") || filterType.equalsIgnoreCase("NOT_SELECTED")
                                || filterType.equalsIgnoreCase("IN")) {
                            inMap.put(elemId, defaulValList);
                        }
                        if (filterType.equalsIgnoreCase("EXCLUDED")
                                || filterType.equalsIgnoreCase("NOT IN")
                                || filterType.equalsIgnoreCase("NOTIN")) {
                            notInMap.put(elemId, defaulValList);
                        }
                        if (filterType.equalsIgnoreCase("LIKE")) {
                            likeMap.put(elemId, defaulValList);

                        }
                        if (filterType.equalsIgnoreCase("NOT LIKE") || filterType.equalsIgnoreCase("NOTLIKE")) {
                            notLikeMap.put(elemId, defaulValList);
                        }
                    }
                    parameter.add(param[param.length - 1].trim());
                    collect.reportParameters.put(xmUtil.getXmlTagValue(paramDetailEle, "element_id"), parameter);
                    //Start of code by sandeep on 16/10/14 for schedule// update local files in oneview
                    paramwe.add(elementId);
                    //End of code by sandeep on 16/10/14 for schedule// update local files in oneview
                }
            }
//             SnapshotDesigner SSDesigner = new SnapshotDesigner();
//             SSDesigner.params=paramwe;
            collect.updateCollection(false);

            /*
             * added by srikanth.p
             */
            Type mapTarType = new TypeToken<Map<String, List<String>>>() {
            }.getType();
            if (schedRepVersion >= 1.1 || (progenParamEle.getChild("IN") != null
                    && progenParamEle.getChild("NOTIN") != null
                    && progenParamEle.getChild("LIKE") != null
                    && progenParamEle.getChild("NOTLIKE") != null)) {
                Element inElem = progenParamEle.getChild("IN");
                String jsonStr = inElem.getValue();
                inMap = gson.fromJson(jsonStr, mapTarType);
                Element notInElem = progenParamEle.getChild("NOTIN");
                jsonStr = notInElem.getValue();
                notInMap = gson.fromJson(jsonStr, mapTarType);
                Element likeElem = progenParamEle.getChild("LIKE");
                jsonStr = likeElem.getValue();
                likeMap = gson.fromJson(jsonStr, mapTarType);
                Element NotLikeElem = progenParamEle.getChild("NOTLIKE");
                jsonStr = NotLikeElem.getValue();
                notLikeMap = gson.fromJson(jsonStr, mapTarType);
            }

//            HashMap<String,HashMap<String,List>> operatorFilters=new HashMap<String,HashMap<String,List>>();
            collect.operatorFilters.put("IN", (HashMap<String, List>) inMap);
            collect.operatorFilters.put("NOTIN", (HashMap<String, List>) notInMap);
            collect.operatorFilters.put("LIKE", (HashMap<String, List>) likeMap);
            collect.operatorFilters.put("NOTLIKE", (HashMap<String, List>) notLikeMap);
//            collect.operatorFilters=operatorFilters;

        }

        if (root.getChild("progen_table") != null) {

            List tables = root.getChildren("progen_table");//Only one row as of now
            HashMap ReportHashMap = container.getReportHashMap();
            Element tableEle = (Element) tables.get(0);
            container.setNetTotalReq(Boolean.parseBoolean(xmUtil.getXmlTagValue(tableEle, "show_sub_total")));
            container.setGrandTotalReq(Boolean.parseBoolean(xmUtil.getXmlTagValue(tableEle, "show_grd_total")));
            container.setAvgTotalReq(Boolean.parseBoolean(xmUtil.getXmlTagValue(tableEle, "show_avg")));
            container.setCatMaxValueReq(Boolean.parseBoolean(xmUtil.getXmlTagValue(tableEle, "show_cat_max")));
            container.setCatMinValueReq(Boolean.parseBoolean(xmUtil.getXmlTagValue(tableEle, "show_cat_min")));
            container.setOverAllMaxValueReq(Boolean.parseBoolean(xmUtil.getXmlTagValue(tableEle, "show_max")));
            container.setOverAllMinValueReq(Boolean.parseBoolean(xmUtil.getXmlTagValue(tableEle, "show_min")));
            container.setHideTable(Boolean.parseBoolean(xmUtil.getXmlTagValue(tableEle, "is_hide_table")));
            container.setHideMsrHeading(Boolean.parseBoolean(xmUtil.getXmlTagValue(tableEle, "Is_hide_msr_Heading"))); //by Ram
            //Added by Amar on Sep 23, 2015
            try {
                container.setCrosstabGrandTotalDisplayPosition(xmUtil.getXmlTagValue(tableEle, "CRGT_POS"));
            } catch (Exception es) {
            }
            //end of code

            if (tableEle.getChild("display_columns") != null) {

                List display_columnsList = ((Element) tableEle.getChildren("display_columns").get(0)).getChildren("display_column");

                for (int k = 0; k < display_columnsList.size(); k++) {
                    displayColumns.add(((Element) display_columnsList.get(k)).getText());
                }
                container.setDisplayColumns(displayColumns);

            }
            // code written by swathi
            if (tableEle.getChild("display_labels") != null) {

                List display_labelsList = ((Element) tableEle.getChildren("display_labels").get(0)).getChildren("display_label");
                int dimCount = viewByCount;
                if (!collect.reportColViewbyValues.isEmpty() && collect.reportColViewbyValues != null) {
                    for (int k = 0; k < dimCount; k++) {
                        displayLabels.add(((Element) display_labelsList.get(k)).getText());
                    }
                    for (int k = dimCount; k < display_labelsList.size(); k++) {
                        ArrayList al = new ArrayList();
                        al.add(((Element) display_labelsList.get(k)).getText().replace("[", "").replace("]", ""));
                        displayLabels.add(al);
                    }
                } else {
                    for (int k = 0; k < display_labelsList.size(); k++) {
                        displayLabels.add(((Element) display_labelsList.get(k)).getText());
                    }
                }
                container.setDisplayLabels(displayLabels);

            }
            if (tableEle.getChild("original_columns") != null) {

                List original_columnsList = ((Element) tableEle.getChildren("original_columns").get(0)).getChildren("original_column");

                for (int k = 0; k < original_columnsList.size(); k++) {
                    originalColumns.add(((Element) original_columnsList.get(k)).getText());
                }
                container.setOriginalColumns(originalColumns);

            }
            if (tableEle.getChild("display_types") != null) {

                List display_typesList = ((Element) tableEle.getChildren("display_types").get(0)).getChildren("display_type");

                for (int k = 0; k < display_typesList.size(); k++) {
                    displayTypes.add(((Element) display_typesList.get(k)).getText());
                }
                container.setDisplayTypes(displayTypes);

            }
            if (tableEle.getChild("data_types") != null) {

                List data_typesList = ((Element) tableEle.getChildren("data_types").get(0)).getChildren("data_type");

                for (int k = 0; k < data_typesList.size(); k++) {
                    dataTypes.add(((Element) data_typesList.get(k)).getText());
                }
                container.setDataTypes(dataTypes);

            }

            if (tableEle.getChild("links") != null) {
                List linksList = ((Element) tableEle.getChildren("links").get(0)).getChildren("link");

                for (int k = 0; k < linksList.size(); k++) {
                    links.add(((Element) linksList.get(k)).getText());
                }
                container.setLinks(links);

            }
//            if (tableEle.getChild("signs") != null) {
//                List signsList = ((Element) tableEle.getChildren("signs").get(0)).getChildren("sign");
//
//                for (int k = 0; k < signsList.size(); k++) {
//                    signs.add(((Element) signsList.get(k)).getText());
//                }
//                container.setSigns(signs);
//            }
            if (tableEle.getChild("report_query_elementsIds") != null) {
                List report_query_elementsList = ((Element) tableEle.getChildren("report_query_elementsIds").get(0)).getChildren("report_query_elementsId");

                for (int k = 0; k < report_query_elementsList.size(); k++) {
                    reportQryElementIds.add(((Element) report_query_elementsList.get(k)).getText().trim());
                }
                ReportHashMap.put("reportQryElementIds", reportQryElementIds);
                container.setTableMeasure(reportQryElementIds);

            }
            if (tableEle.getChild("report_query_aggregations") != null) {
                List report_query_aggregationsList = ((Element) tableEle.getChildren("report_query_aggregations").get(0)).getChildren("report_query_aggregation");

                for (int k = 0; k < report_query_aggregationsList.size(); k++) {
                    reportQueryAggregations.add(((Element) report_query_aggregationsList.get(k)).getText());
                }
                ReportHashMap.put("reportQryAggregations", reportQueryAggregations);

            }
            if (tableEle.getChild("report_query_colnames") != null) {
                //((Element) tableEle.getChildren("report_query_colnames").get(0)).getAttributeValue("");
                //
                List report_query_colnamesList = ((Element) tableEle.getChildren("report_query_colnames").get(0)).getChildren("report_query_colname");

                for (int k = 0; k < report_query_colnamesList.size(); k++) {
                    reportQueryColumnNames.add(((Element) report_query_colnamesList.get(k)).getText());
                }
                ReportHashMap.put("reportQryColNames", reportQueryColumnNames);
                container.setTableMeasureNames(reportQueryColumnNames);
            }
            // 
//            if (reportQryElementIds != null && !reportQryElementIds.isEmpty()) {
//                container.getReportCollect().reportQryElementIds=reportQryElementIds;
//                reportQueryAggregations = reportTemplateDAO.getReportQryAggregations(reportQryElementIds);
//                reportQueryColumnNames = reportTemplateDAO.getReportQryColNames();
//                ArrayList reportQryColTypes = reportTemplateDAO.getReportQryColTypes();
//                ArrayList originalReportQryColTypes = reportTemplateDAO.getOriginalReportQryColTypes();
//                ReportHashMap.put("reportQryElementIds", reportQryElementIds);
//                ReportHashMap.put("reportQryAggregations", reportQueryAggregations);
//                ReportHashMap.put("reportQryColNames", reportQueryColumnNames);
//                ReportHashMap.put("getReportQryAggregations", reportQryColTypes);
//                container.getReportCollect().updateReportQueryInfo(reportQueryAggregations, reportQueryColumnNames, originalReportQryColTypes);
//            }
            //code written by swati purpose of tablefilters
            if (tableEle.getChild("TopBottom") != null) {
                List TopBottomList = null;
                List TopBottomTypeList = null;
                Element TopBottomEle = null;
                TopBottomList = tableEle.getChildren("TopBottom");
                TopBottomEle = (Element) TopBottomList.get(0);
                TopBottomTypeList = TopBottomEle.getChildren("TopBottomType");
                if (TopBottomTypeList != null && TopBottomTypeList.size() > 0) {
                    Element TopBottomTypeEle = (Element) TopBottomTypeList.get(0);
                    List TopBottomModeList = TopBottomEle.getChildren("TopBottomMode");
                    Element TopBottomModeEle = (Element) TopBottomModeList.get(0);
                    List NoOfRowsList = TopBottomEle.getChildren("NoOfRows");
                    Element NoOfRowsEle = (Element) NoOfRowsList.get(0);
                    List MeasColumnList = TopBottomEle.getChildren("MeasColumn");
                    Element MeasColumnEle = (Element) MeasColumnList.get(0);
                    container.setTopBottomColumn(TopBottomTypeEle.getText(), TopBottomModeEle.getText(), Integer.parseInt(NoOfRowsEle.getText()));
                    // 
                    if (TopBottomTypeEle.getText().equalsIgnoreCase("TopRows")) {
                        container.setSortColumn(MeasColumnEle.getText(), SortOrder.DESCENDING);
                        container.setSortColumn(MeasColumnEle.getText(), "1");
                        container.setSortColumnTopBottom(MeasColumnEle.getText(), "1");
                    } else {
                        container.setSortColumn(MeasColumnEle.getText(), SortOrder.ASCENDING);
                        container.setSortColumn(MeasColumnEle.getText(), "0");
                        container.setSortColumnTopBottom(MeasColumnEle.getText(), "0");
                    }
                }

            }
            if (tableEle.getChild("TableSearch") != null) {
                ArrayList<String> searchColumns = new ArrayList<String>();
                ArrayList<String> searchCondition = new ArrayList<String>();
                ArrayList<Object> searchValue = new ArrayList<Object>();
                List SearchList = null;
                SearchList = ((Element) tableEle.getChildren("TableSearch").get(0)).getChildren("Search");
                for (int i = 0; i < SearchList.size(); i++) {
                    Element SrchColEle = (Element) SearchList.get(i);
                    String searchCol = ((Element) SrchColEle.getChildren("Column").get(0)).getText();
                    String searchCond = ((Element) SrchColEle.getChildren("Condition").get(0)).getText();
                    String searchVal = ((Element) SrchColEle.getChildren("Value").get(0)).getText();
                    searchColumns.add(searchCol);
                    searchCondition.add(searchCond);
                    searchValue.add(searchVal);
//                   
//                   
                }
                if (!searchColumns.isEmpty()) {
                    int index = 0;
                    for (String srchcolumn : searchColumns) {
                        container.setSearchColumn(srchcolumn, searchCondition.get(index), searchValue.get(index).toString(), null);
                        index++;
                    }
                }

            }
            if (tableEle.getChild("Sort") != null) {
                List SortList = null;
                SortList = ((Element) tableEle.getChildren("Sort").get(0)).getChildren("SortColumn");
                HashSet<String> sortColumns = new HashSet<String>();
                ArrayList<String> sortTypes = new ArrayList<String>();
                for (int i = 0; i < SortList.size(); i++) {
                    Element SortEle = (Element) SortList.get(i);
                    String sortColumn = ((Element) SortEle.getChildren("ColumnName").get(0)).getText();
                    String sortType = ((Element) SortEle.getChildren("SortType").get(0)).getText();
                    sortColumns.add(sortColumn);
                    sortTypes.add(sortType);
                }
                if (!sortColumns.isEmpty()) {
                    int index = 0;
                    for (String sortColumn : sortColumns) {
                        container.setSortColumn(sortColumn, sortTypes.get(index));
                        index++;
                    }
                }

            }

            try {
                // if(schedule==null){
                //            if(tableEle.getChild("TopBottom")!=null)
                //            {
                //                 List TopBottomList = tableEle.getChildren("TopBottom");
                //                 Element TopBottomEle = (Element) TopBottomList.get(0);
                //                 List TopBottomTypeList = TopBottomEle.getChildren("TopBottomType");
                //                 Element TopBottomTypeEle = (Element) TopBottomTypeList.get(0);
                //                 List TopBottomModeList = TopBottomEle.getChildren("TopBottomMode");
                //                 Element TopBottomModeEle = (Element) TopBottomModeList.get(0);
                //                 List NoOfRowsList = TopBottomEle.getChildren("NoOfRows");
                //                 Element NoOfRowsEle = (Element) NoOfRowsList.get(0);
                //                 List MeasColumnList = TopBottomEle.getChildren("MeasColumn");
                //                 Element MeasColumnEle = (Element) MeasColumnList.get(0);
                //                 container.setTopBottomColumn(TopBottomTypeEle.getText(), TopBottomModeEle.getText(), Integer.parseInt(NoOfRowsEle.getText()));
                //                 container.setSortColumn(MeasColumnEle.getText(), SortOrder.DESCENDING);
                //                 container.setSortColumn(MeasColumnEle.getText(), "1");
                //                 container.setSortColumnTopBottom(MeasColumnEle.getText(), "1");
                //
                //
                //            }

                //modified by Dinanath for color grouping in schedulers
                if (tableEle.getChild("ColorGroup") != null) {
                    List colorGroupingList = tableEle.getChildren("ColorGroup");
                    Element colorGroupEle = (Element) colorGroupingList.get(0);
                    List groupList = colorGroupEle.getChildren("Group");
                    Element groupEle = null;
                    List measLst = null;
                    Element measEle = null;
                    List crossMeasLst = null;
                    Element crossMeasEle = null;
                    String measure;
                    String crossTabMes;
                    String Noofdays = "";
                    List NoofdayEle = null;
                    List colorCodeRulesLst = null;
                    Element colorCodeRulesEle = null;
                    Document colorDocument = null;
                    List repParamLst = null;
                    Element repParamEle = null;
                    String colorCodes[] = null;
                    String operators[] = null;
                    String stValues[] = null;
                    String endValues[] = null;
                    XMLOutputter outPutter = new XMLOutputter();

                    ColorCodeBuilder colorBuilder = new ColorCodeBuilder();
                    HashMap colorMap = new HashMap();
                    String colorXml;
                    Document paramDoc = null;
                    String paramXml;
                    repParamLst = colorGroupEle.getChildren("ReportParameters");
                    if (repParamLst != null && repParamLst.size() > 0) {
                        repParamEle = (Element) repParamLst.get(0);

                        LinkedHashMap paramMap = progenBD.parseReportParamXML(repParamEle);

                        ReportParameter repParam = new ReportParameter();
                        ColorGroup colorGroup = container.getColorGroup();
                        repParam.setReportParameters1(paramMap);
                        ColorCode colorCode;

                        List rowViewBysLst = null;
                        Element rowViewBysEle = null;
                        List rowViews = null;
                        Element rowViewEle = null;

                        List colViews = null;
                        Element colViewEle = null;

                        List colViewBysLst = null;
                        Element colViewBysEle = null;

                        ArrayList<String> rowLst = new ArrayList<String>();
                        ArrayList<String> colLst = new ArrayList<String>();


                        rowViewBysLst = colorGroupEle.getChildren("RowViewBys");
                        rowViewBysEle = (Element) rowViewBysLst.get(0);
                        rowViews = rowViewBysEle.getChildren("RowViewBy");
                        for (int r = 0; r < rowViews.size(); r++) {
                            rowViewEle = (Element) rowViews.get(r);
                            rowLst.add(rowViewEle.getText());
                        }
                        colViewBysLst = colorGroupEle.getChildren("ColViewBys");
                        colViewBysEle = (Element) colViewBysLst.get(0);
                        colViews = colViewBysEle.getChildren("ColViewBy");
                        for (int c = 0; c < colViews.size(); c++) {
                            colViewEle = (Element) colViews.get(c);
                            colLst.add(rowViewEle.getText());
                        }

                        repParam.setViewBys(rowLst, colLst);

                        for (int l = 0; l < groupList.size(); l++) {
                            groupEle = (Element) groupList.get(l);
                            measLst = groupEle.getChildren("Measure");
                            measEle = (Element) measLst.get(0);
                            measure = measEle.getText();
                            crossMeasLst = groupEle.getChildren("CrossTabMeasure");
                            crossMeasEle = (Element) crossMeasLst.get(0);
                            crossTabMes = crossMeasEle.getText();
                            colorCodeRulesLst = groupEle.getChildren("ColorCodeRules");
                            colorMap = progenBD.parseColorCodeXML((Element) colorCodeRulesLst.get(0));
//           String Rowviewby=colorCodeRulesLst.get(0).viewBy;
                            //added by Dinanath for color group
                            ArrayList<String> a1 = container.getReportCollect().reportRowViewbyValues;
                            StringBuffer ViewbyColumnBf = new StringBuffer();
                            for (int c = 0; c < a1.size(); c++) {
                                ViewbyColumnBf.append(a1.get(c));
                            }
                            String ViewbyColumn = ViewbyColumnBf.toString();
                            colorCode = colorGroup.createColorCode(measure, repParam, crossTabMes, ViewbyColumn);
                            if (colorMap != null && colorMap.size() > 0) {
                                colorCodes = (String[]) colorMap.get("colorCodes");
                                operators = (String[]) colorMap.get("operators");
                                stValues = (String[]) colorMap.get("sValues");
                                endValues = (String[]) colorMap.get("eValues");
                                ArrayList<ColorCodeRule> colorCodeRuleLst = ColorCodeBuilder.buildColorCode(Arrays.asList(colorCodes), Arrays.asList(operators), Arrays.asList(stValues), Arrays.asList(endValues), 1, ViewbyColumn, true);

                                colorCode.setColorCodeRule(colorCodeRuleLst);
                            }
                            // colorGroup.addRuleToColorCode(colorCode, colorMap);
                        }
                        //added by Dinanath for color gorup
//            PbReportViewerBD pb=new PbReportViewerBD();
//            String reportIdForColor=pb.getReportId1();
                        String sss = "dinass";
                        ColorCodeBuilder ccb = new ColorCodeBuilder();
                        ColorGroup colorCodeRuleLst1 = ccb.buildColorCode(reportId2, container);
                        List noofdaysEle = colorGroupEle.getChildren("Noofdays");
                        Element Nooofdays = (Element) noofdaysEle.get(0);
                        Noofdays = Nooofdays.getText();
                        if (!Noofdays.isEmpty()) {
                            container.setNoOfDays(Integer.parseInt(Noofdays));
                        }
                        //endded by Dinanath
                        container.setColorGroup(colorGroup);
                        repParam.addObserver(colorGroup);
                        repParam.notifyObserversOfUpdate(container.getNoOfDays());

                    }
                }

                // }
            } catch (Exception e) {
                logger.error("Exception: ", e);
            }

            //added by santhosh.k on 26-02-2010 for color grouping
//            if (tableEle.getChild("color-grouping") != null) {
//                List colorGroupingList = tableEle.getChildren("color-grouping");
//                HashMap ColorCodeMap = new HashMap();
//
//                String[] strOperators = {"<", ">", "<=", ">=", "=", "!=", "<>"};
//                String[] strOperatorsInWords = {"less than", "greater than", "less than equal to", "greater than equal to", "equal to", "not equal to", "between"};
//
//
//                for (int l = 0; l < colorGroupingList.size(); l++) {
//                    HashMap tempMap = new HashMap();
//                    Element colorGroupingEle = (Element) colorGroupingList.get(l);
//                    String[] colorCodes = null;
//                    String[] operators = null;
//                    String[] sValues = null;
//                    String[] eValues = null;
//                    String disColumnName = colorGroupingEle.getAttributeValue("disColumnName");
//
//                    List colorCodesList = colorGroupingEle.getChildren("colorCodes");
//                    List operatorsList = colorGroupingEle.getChildren("operators");
//                    List sValuesList = colorGroupingEle.getChildren("sValues");
//                    List eValuesList = colorGroupingEle.getChildren("eValues");
//
//                    List colorCodeList = ((Element) colorCodesList.get(0)).getChildren("color-code");
//                    List operatorList = ((Element) operatorsList.get(0)).getChildren("operator");
//                    List sValueList = ((Element) sValuesList.get(0)).getChildren("sValue");
//                    List eValueList = ((Element) eValuesList.get(0)).getChildren("eValue");
//                    colorCodes = new String[colorCodeList.size()];
//                    operators = new String[operatorList.size()];
//                    sValues = new String[sValueList.size()];
//                    eValues = new String[eValueList.size()];
//
//                    for (int m = 0; m < colorCodeList.size(); m++) {
//                        colorCodes[m] = ((Element) colorCodeList.get(m)).getText();
//                    }
//                    for (int m = 0; m < operatorList.size(); m++) {
//                        Element ele = ((Element) operatorList.get(m));
//
//                        for (int n = 0; n < strOperatorsInWords.length; n++) {
//
//                            if (ele.getText().equalsIgnoreCase(strOperatorsInWords[n])) {
//                                operators[m] = strOperators[n];
//
//                                break;
//                            }
//                        }
//                        //operators[m] = ele.getText();
//                    }
//                    for (int m = 0; m < sValueList.size(); m++) {
//                        sValues[m] = ((Element) sValueList.get(m)).getText();
//                    }
//                    for (int m = 0; m < eValueList.size(); m++) {
//                        eValues[m] = ((Element) eValueList.get(m)).getText();
//                    }
//
//                    tempMap.put("colorCodes", colorCodes);
//                    tempMap.put("operators", operators);
//                    tempMap.put("sValues", sValues);
//                    tempMap.put("eValues", eValues);
//
//                    ColorCodeMap.put(disColumnName, tempMap);
//                }
//                TableHashMap.put("ColorCodeMap", ColorCodeMap);
//            }
            //end of code added for color grouping
            //added by santhosh.k on 10-03-2010 for Parameter Grouping
            if (tableEle.getChild("Parameter-Groupings") != null) {
                HashMap ParameterGroupingMap = new HashMap();
                List ParameterGroupings = tableEle.getChildren("Parameter-Groupings");

                if (ParameterGroupings != null && ParameterGroupings.size() != 0) {
                    for (int l = 0; l < ParameterGroupings.size(); l++) {//ofcourse we know there wil only one Parameter-Groupings tags
                        Element ParameterGroupsEle = (Element) ParameterGroupings.get(0);
                        List ParameterGroupingList = ParameterGroupsEle.getChildren("Parameter-Grouping");

                        for (int m = 0; m < ParameterGroupingList.size(); m++) {
                            HashMap SingleParameterGroupingMap = new HashMap();//for each <Parameter-Grouping> corresponds to a HashMap
                            Element ParameterGroupingEle = (Element) ParameterGroupingList.get(m);
                            List ParameterGroupList = ParameterGroupingEle.getChildren("Parameter-Group");
                            for (int n = 0; n < ParameterGroupList.size(); n++) {
                                Element ParameterGroupEle = (Element) ParameterGroupList.get(n);
                                SingleParameterGroupingMap.put(ParameterGroupEle.getAttribute("name").getValue(), ParameterGroupEle.getText());
                            }
                            ParameterGroupingMap.put(ParameterGroupingEle.getAttribute("elementId").getValue(), SingleParameterGroupingMap);
                            ParameterGroupingMap.put(ParameterGroupingEle.getAttribute("elementId").getValue() + "_GroupName", ParameterGroupingEle.getAttribute("groupName").getValue());

                        }
                    }
                }
                container.setParameterGroupAnalysisHashMap(ParameterGroupingMap);
            }

            //end of code added for Parameter grouping
            // Code Added by amar to get Hybrid report Details
            if (tableEle.getChild("HybridReport") != null) {
                List hybridElement = tableEle.getChildren("HybridReport");
                Element isSumEnable = (Element) hybridElement.get(0);
                Element isHybEnable = (Element) isSumEnable.getContent().get(0);
                if (isHybEnable.getContent(0).getValue().equalsIgnoreCase("true")) {
                    String isSummEnable = isHybEnable.getContent(0).getValue();
                    container.setSummarizedMeasuresEnabled(Boolean.valueOf(isSummEnable));
                    Element isHybHashMap = (Element) isSumEnable.getContent().get(1);
                    Type mapTarType = new TypeToken<HashMap<String, ArrayList<String>>>() {
                    }.getType();
                    if (isHybHashMap.getContent(0).getValue() != null) {
                        String hsMap = isHybHashMap.getContent(0).getValue();
                        String hMap = hsMap.replace("=", ":");
                        HashMap<String, ArrayList<String>> hybTableHashMap = new HashMap<String, ArrayList<String>>();
                        //hybTableHashMap = gson.fromJson(hMap, mapTarType);
                        ObjectMapper mapper = new ObjectMapper();
                        try {
                            hybTableHashMap = mapper.readValue(hMap, new TypeReference<HashMap<String, ArrayList<String>>>() {
                            });
                        } catch (JsonMappingException pe) {
                        }
//                        Set keySet = hybTableHashMap.keySet();
//                        ArrayList summList =null;
//                        Iterator iter = keySet.iterator();
//                                while(iter.hasNext()){
//                                    hybTableHashMap.get(iter.next().toString());
//                                }

                        container.setSummerizedTableHashMap(hybTableHashMap);
                    }
                } else {
                    String isSuEnable = isHybEnable.getContent(0).getValue();
                    container.setSummarizedMeasuresEnabled(Boolean.valueOf(isSuEnable));
                }
            }
            // end of code

            if (Integer.parseInt(container.getColumnViewByCount()) == 0) {//not cross tab report
                for (int m = viewByCount; m < displayColumns.size(); m++) {
                    Measures.add(String.valueOf(displayColumns.get(m)));
                    MeasureNames.add(displayLabels.get(m));
                }
                TableHashMap.put("Measures", Measures);
                TableHashMap.put("MeasuresNames", MeasureNames);
            } else {
                for (int m = 0; m < reportQryElementIds.size(); m++) {
                    Measures.add(String.valueOf(reportQryElementIds.get(m)));
                }
                TableHashMap.put("Measures", Measures);
                TableHashMap.put("MeasuresNames", reportQueryColumnNames);
            }
            //}

            HashMap timeDetailsMap = new HashMap();
            ArrayList timeDetailsArray = new ArrayList();
            /*
             * Time Processing starts
             */

            List row = root.getChildren("progen_time");//Only one row as of now

            /*
             * Start of Processing of parameters
             */
            for (int i = 0; i < row.size(); i++) {//Loop for section two under portlet
                Element Companyname = (Element) row.get(i);

                List timeMasterRow = Companyname.getChildren("time_master");
                for (int j = 0; j < timeMasterRow.size(); j++) {
                    Element paramElement = (Element) timeMasterRow.get(j);
                    timeDetailsArray.add(xmUtil.getXmlTagValue(paramElement, "timeLevel"));
                    timeDetailsArray.add(xmUtil.getXmlTagValue(paramElement, "timeType"));
                }
                if (timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                    List timeDetailsRow = Companyname.getChildren("timeDetails");
                    for (int j = 0; j < timeDetailsRow.size(); j++) {
                        ArrayList timeInfo = new ArrayList();
                        Element paramElement1 = (Element) timeDetailsRow.get(j);
                        String temp = xmUtil.getXmlTagValue(paramElement1, "timeColType");
                        // // ////.println("temp==" + temp);
                        String currVal = xmUtil.getXmlTagValue(paramElement1, "defaultValue");
                        String realDate = xmUtil.getXmlTagValue(paramElement1, "realDate");
                        String temprealDate = realDate;
                        if (currVal.equalsIgnoreCase("sysdate")) {
                            currVal = "Current Date";
                        } else if (currVal.equalsIgnoreCase("dynamicDate")) { //purpose of dynamic headlines(report builds with system date)
//                        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
//                        Date date = new Date();
//                        realDate=(dateFormat.format(date.getTime()));
                            //purpose of dynamic headlines(report builds with system date)
                            //                        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
                            //                        Date date = new Date();
                            //                        realDate=(dateFormat.format(date.getTime()));
                            realDate = pParam.getDefaultSystemTime(null, null, 0);
                            ;
                        }
                        if (schedule == null) { //for snapshot code
                            if (currVal == null || "".equalsIgnoreCase(currVal) || currVal.equalsIgnoreCase("Current Date")) {

                                {//default Value
                                    if (temp.equalsIgnoreCase("AS_OF_DATE") || temp.equalsIgnoreCase("AS_OF_DATE1") || temp.equalsIgnoreCase("AS_OF_DATE") || temp.equalsIgnoreCase("AS_OF_DATE1")) {
                                        timeInfo.add(pParam.getdateforpage());
                                    } else if (temp.equalsIgnoreCase("AS_OF_MONTH") || temp.equalsIgnoreCase("AS_OF_MONTH1")) {
                                        timeInfo.add(pParam.getmonthforpage());
                                    } else if (temp.equalsIgnoreCase("AS_OF_YEAR") || temp.equalsIgnoreCase("AS_OF_YEAR1")) {
                                        timeInfo.add(pParam.getYearforpage());
                                    } else if (temp.equalsIgnoreCase("PRG_PERIOD_TYPE")) {
                                        timeInfo.add(temprealDate);
                                        // timeInfo.add("Month");
                                    } else if (temp.equalsIgnoreCase("PRG_COMPARE")) {
                                        timeInfo.add(temprealDate);
                                        //timeInfo.add("Last Period");
                                    }

                                }

                            } else if (temp.equalsIgnoreCase("AS_OF_DATE") || temp.equalsIgnoreCase("AS_OF_DATE1") || temp.equalsIgnoreCase("AS_OF_DATE") || temp.equalsIgnoreCase("AS_OF_DATE1")) {
                                timeInfo.add(realDate);
                            } else if (temp.equalsIgnoreCase("AS_OF_MONTH") || temp.equalsIgnoreCase("AS_OF_MONTH1")) {
                                timeInfo.add(realDate);
                            } else if (temp.equalsIgnoreCase("AS_OF_YEAR") || temp.equalsIgnoreCase("AS_OF_YEAR1")) {
                                timeInfo.add(realDate);
                            } else if (temp.equalsIgnoreCase("PRG_PERIOD_TYPE")) {
                                timeInfo.add(temprealDate);
                                //  timeInfo.add("Month");
                            } else if (temp.equalsIgnoreCase("PRG_COMPARE")) {
                                timeInfo.add(temprealDate);
                                // timeInfo.add("Last Period");
                            }
                        } else {
                            if (schedule.getDataSelection() != null) {
                                //Start of code by sandeep on 16/10/14 for schedule// update local files in oneview
                                if (fromoneviewschedule && reporttime) {
                                } else {
                                    SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
                                    Date date = new Date();
                                    if (schedule.getDataSelection().equals("Current Day")) {
                                        realDate = (dateFormat.format(date.getTime()));
                                    } else if (schedule.getDataSelection().equals("Previous Day")) {
                                        int MILLIS_IN_DAY = 1000 * 60 * 60 * 24;
                                        realDate = (dateFormat.format(date.getTime() - MILLIS_IN_DAY));
                                    } else if (temp.equalsIgnoreCase("AS_OF_DATE") && schedule.getDataSelection().equals("Report Date")) {
                                        String sqlstr = "";
//                               SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
//                                Date date = new Date();
                                        //      sqlstr = "select m.rep_time_id , m.time_level , m.time_type , d.column_type, d.column_name, d.sequence, d.form_sequence ,date_format(d.default_date,'MM/DD/YYYY'),d.default_value from prg_ar_report_time m , prg_ar_report_time_detail d where m.rep_time_id = d.rep_time_id and m.report_id=" + reportId2 + " order by d.sequence";
                                        sqlstr = "select m.rep_time_id , m.time_level , m.time_type , d.column_type, d.column_name, d.sequence, d.form_sequence ,to_char(d.default_date,'MM/DD/YYYY'),d.default_value from prg_ar_report_time m , prg_ar_report_time_detail d where m.rep_time_id = d.rep_time_id and m.report_id=" + reportId2 + " order by d.sequence";
                                        PbDb pbdb = new PbDb();
                                        PbReturnObject retObj = pbdb.execSelectSQL(sqlstr);
                                        if (retObj != null) {
                                            for (int k = 0; k < retObj.getRowCount(); k++) {
                                                if (retObj.getFieldValueString(k, "COLUMN_TYPE").equalsIgnoreCase("AS_OF_DATE")) {
                                                    if (retObj.getFieldValueString(k, "DEFAULT_VALUE").equalsIgnoreCase("Tomorrow")) {
                                                        int MILLIS_IN_DAY = 1000 * 60 * 60 * 24;
                                                        realDate = (dateFormat.format(date.getTime() + MILLIS_IN_DAY));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    //End of code by sandeep on 16/10/14 for schedule// update local files in oneview
                                    // System.out.println("realDate...."+realDate);
                                }
                            }
//                           if(temp.equalsIgnoreCase("AS_OF_DATE") && schedule.getDataSelection().equals("Report Date")){
//                               Object[] Obj = null;
//                               String sqlstr = "";
                            // 
//                          sqlstr = "select m.rep_time_id , m.time_level , m.time_type , d.column_type, d.column_name, d.sequence, d.form_sequence ,to_char(d.default_date,'MM/DD/YYYY'),d.default_value from prg_ar_report_time m , prg_ar_report_time_detail d where m.rep_time_id = d.rep_time_id and m.report_id="+reportId2+"order by d.sequence";
//             PbDb pbdb = new PbDb();
//            PbReturnObject retObj = pbdb.execSelectSQL(sqlstr);
//                               if(retObj.getFieldValueString(2, "DEFAULT_VALUE").equalsIgnoreCase("Yesterday")){
//                        timeInfo.add(pParam.getcurrentdateforpage(1));
//                            }
//                               if(retObj.getFieldValueString(2, "DEFAULT_VALUE").equalsIgnoreCase("Tomorrow")){
//                        timeInfo.add(pParam.getcurrentdateforpage(-1));
//                            }
                            //  }else

//                          if(temp.equalsIgnoreCase("AS_OF_DATE") || schedule.getDataSelection().equals("Report Date")){
//                               String sqlstr = "";
//                               SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
//                                Date date = new Date();
//                          sqlstr = "select m.rep_time_id , m.time_level , m.time_type , d.column_type, d.column_name, d.sequence, d.form_sequence ,to_char(d.default_date,'MM/DD/YYYY'),d.default_value from prg_ar_report_time m , prg_ar_report_time_detail d where m.rep_time_id = d.rep_time_id and m.report_id="+reportId2+"order by d.sequence";
//             PbDb pbdb = new PbDb();
//            PbReturnObject retObj = pbdb.execSelectSQL(sqlstr);
//                               if(retObj.getFieldValueString(j, "DEFAULT_VALUE").equalsIgnoreCase("Tomorrow")){
//                       int MILLIS_IN_DAY = 1000 * 60 * 60 * 24;
//                                    realDate = (dateFormat.format(date.getTime() + MILLIS_IN_DAY));
//                            }
//                            }
                            if (temp.equalsIgnoreCase("AS_OF_DATE") || temp.equalsIgnoreCase("AS_OF_DATE1") || temp.equalsIgnoreCase("AS_OF_DATE") || temp.equalsIgnoreCase("AS_OF_DATE1")) {
                                timeInfo.add(realDate);
                            } else if (temp.equalsIgnoreCase("AS_OF_MONTH") || temp.equalsIgnoreCase("AS_OF_MONTH1")) {
                                timeInfo.add(realDate);
                            } else if (temp.equalsIgnoreCase("AS_OF_YEAR") || temp.equalsIgnoreCase("AS_OF_YEAR1")) {
                                timeInfo.add(realDate);
                            } else if (temp.equalsIgnoreCase("PRG_PERIOD_TYPE")) {
                                timeInfo.add(temprealDate);
                                // 
                                //timeInfo.add("Month");
                            } else if (temp.equalsIgnoreCase("PRG_COMPARE")) {
                                timeInfo.add(temprealDate);
                                /// 
                                //timeInfo.add("Last Period");
                            }
                        }

                        timeInfo.add("CBO_" + temp);
                        timeInfo.add(xmUtil.getXmlTagValue(paramElement1, "timeColName"));
                        timeInfo.add(xmUtil.getXmlTagValue(paramElement1, "timeColSeq"));
                        timeInfo.add(xmUtil.getXmlTagValue(paramElement1, "timeFormSeq"));

                        if (currVal == null || "".equalsIgnoreCase(currVal) || currVal.equalsIgnoreCase("Current Date")) {
                            timeInfo.add(currVal);
                        } else {
                            timeInfo.add(realDate);
                        }

                        timeInfo.add(temp);

                        timeDetailsMap.put(timeInfo.get(6), timeInfo);

                    }
                    // // ////.println("timeDetailsMap===" + timeDetailsMap);
                    ArrayList timeInfo = new ArrayList();
                    if (timeDetailsArray.get(0).toString().equalsIgnoreCase("Year") && timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_YEAR_CMP")) {
                        timeInfo = (ArrayList) timeDetailsMap.get("AS_OF_YEAR");
                        timeDetailsArray.add(timeInfo.get(0));

                        timeInfo = (ArrayList) timeDetailsMap.get("AS_OF_YEAR1");
                        timeDetailsArray.add(timeInfo.get(0));

                    } else if (timeDetailsArray.get(0).toString().equalsIgnoreCase("DAY") && timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                        timeInfo = (ArrayList) timeDetailsMap.get("AS_OF_DATE");
                        if (timeDetailsMap.get("AS_OF_DATE") != null) {
                            timeDetailsArray.add(timeInfo.get(0));
                        } else {
                            timeDetailsArray.add(timeDsArray.get(2)); //for report without date pupose
                        }
                        timeInfo = (ArrayList) timeDetailsMap.get("PRG_PERIOD_TYPE");
                        if (timeDetailsMap.get("PRG_PERIOD_TYPE") != null) {
                            timeDetailsArray.add(timeInfo.get(0));
                        } else {
                            timeDetailsArray.add(timeDsArray.get(3)); //for report without date pupose
                        }
                        if (timeDetailsMap.get("PRG_COMPARE") != null) {
                            timeInfo = (ArrayList) timeDetailsMap.get("PRG_COMPARE");
                            timeDetailsArray.add(timeInfo.get(0));
                        } else {
                            timeDetailsArray.add("Last Period");
                        }
                        //timeInfo = (ArrayList) timeDetailsMap.get("PRG_COMPARE");
                        //timeDetailsArray.add(timeInfo.get(0));
                    } else if (timeDetailsArray.get(0).toString().equalsIgnoreCase("MONTH") && timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                        timeInfo = (ArrayList) timeDetailsMap.get("AS_OF_MONTH");
                        timeDetailsArray.add(timeInfo.get(0));

                        timeInfo = (ArrayList) timeDetailsMap.get("PRG_PERIOD_TYPE");
                        timeDetailsArray.add(timeInfo.get(0));

                        timeInfo = (ArrayList) timeDetailsMap.get("PRG_COMPARE");
                        timeDetailsArray.add(timeInfo.get(0));
                    }

                }//End of section 2 of collection
                else {
                    // 
                    collect.timeDetailsMap = timeDSMap;
                    collect.timeDetailsArray = timeDsArray;
                    timeDetailsArray = timeDsArray;
                    timeDetailsMap = timeDSMap;
                }
                // // ////.println("param hashmap=before==" + ParametersHashMap);
                ParametersHashMap.put("TimeDetailstList", timeDetailsArray);
                ParametersHashMap.put("TimeDimHashMap", timeDetailsMap);
            }
            //Start of code by sandeep on 16/10/14 for schedule// update local files in oneview
            if (fromoneviewschedule) {
                collect.timeDetailsMap = timeDetailsMap;
                collect.timeDetailsArray = timeDetailsArray;
            }
            //End of code by sandeep on 16/10/14 for schedule// update local files in oneview
            // // ////.println("param hashmap=after==" + ParametersHashMap);
            container.setParametersHashMap(ParametersHashMap);
            container.setTableHashMap(TableHashMap);

        }
        //build  meta info
        return container;
    }

    public boolean getTimeSeries() {
        return TimeSeries;
    }

    public void setTimeSeries(boolean TimeSeries) {
        this.TimeSeries = TimeSeries;
    }

    public String saveReport(Container container, String reportName, String reportDesc, int reportId, String date, String userId, List<String> createDateAndUser, String Gtregion) throws Exception {

        HashMap parametersMap = container.getParametersHashMap();
        HashMap TableHashMap = container.getTableHashMap();
        HashMap GraphHashMap = container.getGraphHashMap();
        container.getTimeDetailsArray();
        container.getNoOfDays();
        HashMap graphcolumnHashMap = container.getChangeGraphColumns();
        HashMap<String, String> crosstabMeasureId = ((PbReturnObject) container.getRetObj()).crosstabMeasureId;
//        HashMap paramDefaultValuesHashMap = container.getParamDefaultValuesHashMap();
        String UserFolderIds = (String) parametersMap.get("UserFolderIds");
        ArrayList queries = new ArrayList();

        ArrayList<String> displayColumns = container.getDisplayColumns();
        ArrayList<String> originnalColumns = container.getOriginalColumns();
        ArrayList<String> displayLabels = container.getDisplayLabels();
        //ArrayList<String> timePeriodsList = container.DistinctTimePeriods;
        ArrayList<String> timePeriodsList = container.getAllColumns();
        StringBuffer Parameters = new StringBuffer();
        StringBuffer ParametersOrder = new StringBuffer();
        StringBuffer QueryColumns = new StringBuffer();
        StringBuffer QueryColumnsOrder = new StringBuffer();
        String[] no_of_graphs = null;

        ArrayList params = (ArrayList) parametersMap.get("Parameters");
        ArrayList timeDetails = (ArrayList) parametersMap.get("TimeDetailstList");
        HashMap timeDimHashMap = (HashMap) parametersMap.get("TimeDimHashMap");
        ArrayList timeParams = (ArrayList) parametersMap.get("timeParameters");
        ArrayList repExclude = (ArrayList) parametersMap.get("repExclude");
        ArrayList cepExclude = (ArrayList) parametersMap.get("cepExclude");
        ArrayList REP_Elements = (ArrayList) TableHashMap.get("REP");
        ArrayList CEP_Elements = (ArrayList) TableHashMap.get("CEP");
        LinkedHashMap currentTimeDetails = container.getCurrentTimeDetails();
        ArrayList<String> Measures = new ArrayList<String>();
        String mapEnabled;
        String timePeriods = "";

        //while saving we will not save _G elements ie. Group By Analysis elements
        //into the Report_View_By_Master table
        for (int i = 0; i < REP_Elements.size(); i++) {
            if (REP_Elements.get(i).toString().lastIndexOf("_G") != -1) {
                REP_Elements.remove(i);
            }
        }
        if (!timePeriodsList.isEmpty()) {
            for (int i = 0; i < timePeriodsList.size(); i++) {
                timePeriods = timePeriods + "," + timePeriodsList.get(i).toString();
            }
        }

//        //start of code by bhargavi to prevent the display of base measure
//        for (int i = 0; i < displayColumns.size(); i++) {
//            if (displayColumns.get(i).toString().contains("_pwst") || displayColumns.get(i).toString().contains("_percentwise") && container.setPercentColumnwithAbsolute!=true) {
//                String orgCol = displayColumns.get(i).toString().replace("_percentwise", "").replace("_pwst", "");
//                if (displayColumns.contains(orgCol)) {
//                    int index = displayColumns.indexOf(orgCol);
//                    displayColumns.remove(index);
////                    displayLabels.remove(index);
//                }
//            }
//        }
////        container.setDisplayColumns(displayColumns);
////        container.setDisplayLabels(displayLabels);
//
////end of code by bhargavi
        int viewByCount = (container.getViewByCount());
        String QueryColumnsOrder1 = " case ";
        if (Integer.parseInt(container.getColumnViewByCount()) == 0) {
            //for (int i = REP_Elements.size(); i < displayColumns.size(); i++) {
//            for (int i = viewByCount; i < displayColumns.size(); i++) {
////                if (originnalColumns.get(i).toString().lastIndexOf("_percentwise") == -1) {
////                    Measures.add(displayColumns.get(i));
////                } else {
//                    Measures.add(displayColumns.get(i)); //for crosstab we will not have this measure
////                }
//            }

            Measures = container.getTableDisplayMeasures();
            // added by ramesh janakuttu from line no 5199
            //adding the column to the reportquery if graph column is not present in the table

            String graphmeasId = null;
            ArrayList graphmeasures = null;
            String[] graphColumns = null;
            String graphId[] = null;
            HashMap singleGraphDetails = null;
            String[] PrevbarChartColumnNames = null;
            if (graphcolumnHashMap.size() != 0) {
                if (graphcolumnHashMap.get("GraphColumns") != null && !graphcolumnHashMap.get("GraphColumns").toString().isEmpty()) {
                    graphColumns = graphcolumnHashMap.get("GraphColumns").toString().split(",");
                    graphId = graphcolumnHashMap.get("grpIds").toString().split(",");
                }

                if (graphId != null && !graphId.toString().isEmpty()) {
                    for (int k = 0; k < graphId.length; k++) {
                        singleGraphDetails = (HashMap) GraphHashMap.get(graphId[k]);
                        PrevbarChartColumnNames = (String[]) singleGraphDetails.get("barChartColumnNames");
                        for (int j = 0; j < PrevbarChartColumnNames.length; j++) {
                            if (!displayColumns.contains(PrevbarChartColumnNames[j])) {
                                displayColumns.add(PrevbarChartColumnNames[j]);
                            }
                        }
                    }
                }
            } else {
                if (GraphHashMap.size() != 0) {
                    if (GraphHashMap.get("AllGraphColumns") != null) {
                        graphmeasures = (ArrayList) (GraphHashMap.get("AllGraphColumns"));
                    }
                }
                if (graphmeasures != null && !graphmeasures.isEmpty()) {
                    for (int i = 0; i < graphmeasures.size(); i++) {
                        if (graphmeasures != null && !graphmeasures.isEmpty()) {
                            graphmeasId = graphmeasures.get(i).toString();
                            if (!displayColumns.contains(graphmeasId)) {
                                displayColumns.add(graphmeasId);
                            }

                        }
                    }
                }
            }
            //
            String showtable = (String) getShowGraphTable();
            ArrayList<String> excelMsrLst = new ArrayList<String>();
            if (container.getReportCollect().isIsExcelimportEnable()) {
                excelMsrLst.addAll(container.importExcelDetails.getExcelMeasures());
            }
            if (showtable != null && showtable.equals("GM") || this.isOverWriteExistingReport()) {

                for (int i = viewByCount; i < displayColumns.size(); i++) {
                    //if (originnalColumns.get(i).toString().lastIndexOf("_percentwise") == -1) {
                    if (!RTMeasureElement.isRunTimeMeasure(displayColumns.get(i).toString())) {
                        if (!excelMsrLst.contains(displayColumns.get(i).toString())) {
                            QueryColumns.append("," + displayColumns.get(i).toString().replace("A_", ""));
                            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                                QueryColumnsOrder1 += " when element_id = " + displayColumns.get(i).toString().replace("A_", "") + " then " + (i + 1) + " ";
                            } else {
                                QueryColumnsOrder.append("," + displayColumns.get(i).toString().replace("A_", "") + "," + (i + 1));
                            }
                        }
                    }
                }

            } else {
                //for (int i = REP_Elements.size(); i < originnalColumns.size(); i++) {
                for (int i = viewByCount; i < originnalColumns.size(); i++) {
                    //if (originnalColumns.get(i).toString().lastIndexOf("_percentwise") == -1) {
                    if (!RTMeasureElement.isRunTimeMeasure(originnalColumns.get(i).toString())) {
                        QueryColumns.append("," + originnalColumns.get(i).toString().replace("A_", ""));
                        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                            QueryColumnsOrder1 += " when element_id = " + originnalColumns.get(i).toString().replace("A_", "") + " then " + (i + 1) + " ";
                        } else {
                            QueryColumnsOrder.append("," + originnalColumns.get(i).toString().replace("A_", "") + "," + (i + 1));
                        }
                    }
                }
            }
        } else {
//            Measures = container.getTableMeasure();
            ArrayList TestMeasures = container.getTableDisplayMeasures();
            for (int i = 0; i < TestMeasures.size(); i++) {
                if (!TestMeasures.get(i).toString().contains("_percentwise")) {
                    Measures.add(TestMeasures.get(i).toString());
                }
            }

            for (int i = 0; i < Measures.size(); i++) {
//                  if (!RTMeasureElement.isRunTimeMeasure(originnalColumns.get(i).toString())) {
                QueryColumns.append("," + Measures.get(i).toString().replace("A_", ""));
                if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                    QueryColumnsOrder1 += " when element_id = " + Measures.get(i).toString().replace("A_", "") + " then " + (i + 1) + " ";
                } else {
                    QueryColumnsOrder.append("," + Measures.get(i).toString().replace("A_", "") + "," + (i + 1));
                }
                //}
            }
            int count = Measures.size();
            HashMap<String, ArrayList<String>> summerizedTableHashMap = container.getSummerizedTableHashMap();
            if (container.isReportCrosstab() && container.isSummarizedMeasuresEnabled() && summerizedTableHashMap != null && summerizedTableHashMap.get("summerizedQryeIds") != null) {
                List<String> summerizedqryEIDs = (List<String>) summerizedTableHashMap.get("summerizedQryeIds");
                for (int i = 0; i < summerizedqryEIDs.size(); i++) {
                    count = count + 1;
                    QueryColumns.append("," + summerizedqryEIDs.get(i).toString().replace("A_", ""));
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                        QueryColumnsOrder1 += " when element_id = " + summerizedqryEIDs.get(i).toString().replace("A_", "") + " then " + (count) + " ";
                    } else {
                        QueryColumnsOrder.append("," + summerizedqryEIDs.get(i).toString().replace("A_", "") + "," + (count));
                    }
                }
            }
        }
        if (Integer.parseInt(container.getColumnViewByCount()) == 0) {
            //start of code by Nazneen %wise saving if %wise with absolute is not there
            for (int i = 0; i < displayColumns.size(); i++) {
                //if (originnalColumns.get(i).toString().lastIndexOf("_percentwise") == -1) {
                if (displayColumns.get(i).toString().contains("_percentwise") || displayColumns.get(i).toString().contains("_pwst") || displayColumns.get(i).toString().contains("_percentwise_rt")) {
                    String orgCol = displayColumns.get(i).toString().replace("_percentwise_rt", "").replace("_percentwise", "").replace("_pwst", "").replace("A_", "");
                    if (!QueryColumns.toString().contains(orgCol)) {
                        QueryColumns.append("," + orgCol.toString());
                        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                            QueryColumnsOrder1 += " when element_id = " + orgCol.toString() + " then " + (i + 1) + " ";
                        } else {
                            QueryColumnsOrder.append("," + orgCol.toString() + "," + (i + 1));
                        }
                    }
                }
            }
            //end of code by Nazneen %wise saving if %wise with absolute is not there
        } else {
            for (int i = 0; i < displayColumns.size(); i++) {
                //if (originnalColumns.get(i).toString().lastIndexOf("_percentwise") == -1) {
                if (displayColumns.get(i).toString().contains("_percentwise") || displayColumns.get(i).toString().contains("_pwst") || displayColumns.get(i).toString().contains("_percentwise_rt")) {
                    String orgCol1 = displayColumns.get(i).toString().replace("_percentwise_rt", "").replace("_percentwise", "").replace("_pwst", "");
                    String orgCol = crosstabMeasureId.get(orgCol1).replace("A_", "");
                    if (!QueryColumns.toString().contains(orgCol)) {
                        QueryColumns.append("," + orgCol.toString());
                        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                            QueryColumnsOrder1 += " when element_id = " + orgCol.toString() + " then " + (i + 1) + " ";
                        } else {
                            QueryColumnsOrder.append("," + orgCol.toString() + "," + (i + 1));
                        }
                    }
                }
            }

        }
        QueryColumnsOrder1 += " else 10000 end ";
        String ParametersOrder1 = " case ";

        if (GraphHashMap.size() != 0) {
            if (GraphHashMap.get("graphIds") != null) {
                no_of_graphs = ((String) GraphHashMap.get("graphIds")).split(",");
            }
        }

        mapEnabled = container.isMapEnabled() ? "Y" : "N";

        DAO.setParameterGroupMap(container.getParameterGroupAnalysisHashMap());//added by santhosh.k on 10-03-2010 for inserting parameter grouping hashmap into data base
        queries = DAO.insertReportMaster(reportId, reportName, reportDesc, UserFolderIds, mapEnabled, container.getReportCollect().getCustomSequence(), container.getReportCollect().getTransposeFormatMap(), container.getReportCollect().getGoalSeekBasicandAdhoc(), container.getReportCollect().getGoalandPercent(), userId, container.getReportCollect().getViewByValues(), container.getReportCollect().getGroupName(), container.getReportCollect().getGlobalValues(), container.getReportCollect().getGoalSeekTimeIndvidual(), container.getReportCollect().getProdAndViewName(), this.isOverWriteExistingReport(), container, Gtregion);//inserting report master and details
        DAO.saveReport(queries);
        if (this.isOverWriteExistingReport()) {
            DAO.updateCurrentDateAnduserName(reportId, createDateAndUser, userId);
        }
        //container.getReportCollect().getPercentColValues()
//        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
//            reportId = DAO.getLastInsertedReportId();
//        }

        String newReportId = null;
        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
            String ReportIdQry = "";
            if (!this.overWriteExistingReport) {
                ReportIdQry = "select ident_current('PRG_AR_REPORT_MASTER')";
                PbDb pbdb = new PbDb();
                PbReturnObject retObj = pbdb.execSelectSQL(ReportIdQry);
                newReportId = retObj.getFieldValueString(0, 0);
                reportId = Integer.parseInt(newReportId);
            } else {
                newReportId = String.valueOf(reportId);
            }
        } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
            if (!this.overWriteExistingReport) {
                String qry = "SELECT LAST_INSERT_ID(REPORT_ID) from PRG_AR_REPORT_MASTER order by 1 desc limit 1";
                PbReturnObject retobj = new PbReturnObject();
                retobj = super.execSelectSQL(qry);
                reportId = Integer.parseInt(retobj.getFieldValueString(0, 0));
                newReportId = String.valueOf(reportId);
            } else {
                newReportId = String.valueOf(reportId);
            }
        } else {
            newReportId = String.valueOf(reportId);
        }

        queries.clear();

        if (params != null) {
            for (int i = 0; i < params.size(); i++) {
                Parameters.append("," + String.valueOf(params.get(i)).replace("A_", ""));
                if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                    ParametersOrder1 += " when element_id = " + String.valueOf(params.get(i)).replace("A_", "") + " then " + (i + 1) + " ";
                } else {
                    ParametersOrder.append("," + String.valueOf(params.get(i)).replace("A_", "") + "," + (i + 1));
                }
            }
            ParametersOrder1 += " else 10000 end ";
            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                queries = DAO.insertReportParamDetails(reportId, Parameters.substring(1), ParametersOrder1, queries, container, this.isOverWriteExistingReport());//inserting report param details
            } else {
                queries = DAO.insertReportParamDetails(reportId, Parameters.substring(1), ParametersOrder.substring(1), queries, container, this.isOverWriteExistingReport());//inserting report param details
            }
        }
        if (timeDetails != null && timeDetails.size() > 0) {
            queries = DAO.insertReportTimeDimensions(timeDetails, timeDimHashMap, reportId, queries, timeParams, date, currentTimeDetails, this.isOverWriteExistingReport());//inserting time dimensions and time details
        } else {
            //for Progen NON_STD time , means progentime is not used
            queries = DAO.insertNonStdReportTimeDimensions(reportId, queries);//inserting non standard time dimensions
        }
////.println("insertReportMaster queries are : "+queries);
        DAO.saveReport(queries);

        queries.clear();
        queries = DAO.insertReportViewByMaster(REP_Elements, CEP_Elements, reportId, queries, repExclude, cepExclude, this.isOverWriteExistingReport(), container);//inserting time dimensions and time details
        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
            if (timePeriodsList.isEmpty()) {
                queries = DAO.insertReportQueryDetails(reportId, QueryColumns.substring(1), QueryColumnsOrder1, queries, this.isOverWriteExistingReport(), container);//inserting into query details
            } else {
                queries = DAO.insertReportQueryDetailsForTimeDB(timePeriods.substring(1), reportId, QueryColumns.substring(1), QueryColumnsOrder1, queries, this.isOverWriteExistingReport(), container);//inserting into query details
            }
        } else if (timePeriodsList.isEmpty()) {
            queries = DAO.insertReportQueryDetails(reportId, QueryColumns.substring(1), QueryColumnsOrder.substring(1), queries, this.isOverWriteExistingReport(), container);//inserting into query details
        } else {
            queries = DAO.insertReportQueryDetailsForTimeDB(timePeriods.substring(1), reportId, QueryColumns.substring(1), QueryColumnsOrder.substring(1), queries, this.isOverWriteExistingReport(), container);//inserting into query details
        }

        DAO.saveReport(queries);

        queries = new ArrayList();
        DAO.setTableHashMap(TableHashMap);
        queries = DAO.insertReportTableMaster(reportId, reportName, container, queries, this.isOverWriteExistingReport());//inserting into report master and report master details
        //String graphId = null;
        String graphSize = null;
        String grpType = null;
        String grpName = null;
        String grplegend = null;
        String grplegendloc = null;
        String grpshox = null;
        String grpshoy = null;
        String grplyaxislabel = null;
        String grpryaxislabel = null;
        String grpbDomainaxislabel = null;
        String grpdrill = null;
        String grpbcolor = null;
        String grpfcolor = null;
        String grpdata = null;
        String displyRows = "";
        String showGT = "";
        String graphSymbol = null;
        String measNamePosition = null;
        String targetRange = null;
        String startValue = null;
        String endValue = null;
        String showlyAxis = null;
        String showryAxis = null;
        String showxAxis = null;
        String fromDate = null;
        String toDate = null;
        double targetPerDay;
        String stackedType = "";
        GraphProperty graphProperty = null;
        String measureFormat = null;
        String measureValueRounding = null;
        String axisLabelPosition = null;
        boolean isShowLabels = false;
        String calibration = null;
        String firstChartType = null;
        String secondChartType = null;
        String[] rgbColorArr = null;
        String jqpropertiesString = null;
        String jqsingleproperties = null;
        ArrayList graphid = new ArrayList();
        ArrayList delquery = new ArrayList();
        String graphGridLines = null;
        String numberformat = "";
        if (getShowGraphTable() == null) {
            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                if (no_of_graphs != null) {
                    for (int i = 0; i < no_of_graphs.length; i++) {

                        graphid.add(no_of_graphs[i]);
                    }
                    String deletequery = "";
                    if (this.isOverWriteExistingReport()) {
                        deletequery = "delete  from PRG_AR_GRAPH_MASTER where graph_id not in(" + graphid.toString().replace("[", "").replace("]", "") + ") and report_id=" + reportId + "";
                    }
                    DAO.execModifySQL(deletequery);
                }
            }
        }
        if (GraphHashMap.size() != 0 && no_of_graphs != null) {
            for (int i = 0; i < no_of_graphs.length; i++) {
                jqpropertiesString = null;
                jqsingleproperties = null;
                JqplotGraphProperty graphproperty = new JqplotGraphProperty();
                ProGenJqPlotProperties singleproperty = new ProGenJqPlotProperties();
                HashMap graphDetails = (HashMap) GraphHashMap.get(no_of_graphs[i]);
                if (container.getSlectedGraphType(no_of_graphs[i]) != null && container.getSlectedGraphType(no_of_graphs[i]).equalsIgnoreCase("jq")) {

                    graphproperty = (JqplotGraphProperty) GraphHashMap.get("jqgraphproperty" + no_of_graphs[i]);
                    singleproperty = (ProGenJqPlotProperties) GraphHashMap.get("jqsingleproperty" + no_of_graphs[i]);
                    Gson gson = new Gson();
                    jqpropertiesString = gson.toJson(graphproperty);
                    jqsingleproperties = gson.toJson(singleproperty);
                }

                int graphId = -1;

                //graphId = (String) graphDetails.get("graphId");
                graphSize = (String) graphDetails.get("graphSize");
                grpType = (String) graphDetails.get("graphTypeName");
                grpName = (String) graphDetails.get("graphName");
                grplegend = (String) graphDetails.get("graphLegend");
                grplegendloc = (String) graphDetails.get("graphLegendLoc");
                grpshox = (String) graphDetails.get("graphshowX");
                grpshoy = (String) graphDetails.get("graphshowY");
                grplyaxislabel = (String) graphDetails.get("graphLYaxislabel");
                grpryaxislabel = (String) graphDetails.get("graphRYaxislabel");
                grpbDomainaxislabel = (String) graphDetails.get("grpbDomainaxislabel");
                grpdrill = (String) graphDetails.get("graphDrill");
                grpbcolor = (String) graphDetails.get("graphBcolor");
                grpfcolor = (String) graphDetails.get("graphFcolor");
                grpdata = (String) graphDetails.get("graphData");
                displyRows = (String) graphDetails.get("graphDisplayRows");
                showGT = (String) graphDetails.get("showGT");
                graphSymbol = (String) graphDetails.get("graphSymbol");
                measNamePosition = (String) graphDetails.get("measureNamePosition");
                targetRange = (String) graphDetails.get("targetRange");
                if (graphDetails.get("startValue") != null) {
                    startValue = graphDetails.get("startValue").toString();
                }
                endValue = (String) graphDetails.get("endValue");
                showlyAxis = (String) graphDetails.get("showlyAxis");
                showryAxis = (String) graphDetails.get("showryAxis");
                showxAxis = (String) graphDetails.get("showxAxis");
                stackedType = (String) graphDetails.get("stackedType");
                fromDate = (String) timeDetails.get(2);
                toDate = (String) timeDetails.get(3);
//                if(graphDetails.isEmpty())
//                {
                if (graphDetails.get("showLabels") != null) {
                    isShowLabels = (Boolean) graphDetails.get("showLabels");
                }
                if (graphDetails.get("nbrFormat") != null) {
                    numberformat = (String) graphDetails.get("nbrFormat");
                }
                if (graphDetails.get("graphGridLines") != null) {
                    graphGridLines = (String) graphDetails.get("graphGridLines");
                }
                PbReturnObject retObj = null;
                String sqlQuery = "SELECT JfGraph_Name FROM PRG_AR_GRAPHSMAP where JqpGraph_Name=\'" + grpType + "\'";
                try {
                    retObj = execSelectSQL(sqlQuery);
                } catch (Exception e) {
                    logger.error("Exception: ", e);
                }
                if (retObj != null && retObj.rowCount > 0) {
                    grpType = retObj.getFieldValueString(0, 0);
                }
//                }
                // 
                if (graphDetails.get("measureFormat") != null) {
                    measureFormat = (String) graphDetails.get("measureFormat");
                }
                measureValueRounding = (String) graphDetails.get("measureValueRounding");
                axisLabelPosition = (String) graphDetails.get("axisLabelPosition");
                calibration = (String) graphDetails.get("calibration");

                firstChartType = (String) graphDetails.get("firstChartType");
                secondChartType = (String) graphDetails.get("secondChartType");
                rgbColorArr = (String[]) graphDetails.get("rgbColorArr");
//                toDate= (String)graphDetails.get("toDate");
                targetPerDay = container.getNoOfDays();
                if (graphDetails.get("GraphProperty") != null) {
                    graphProperty = (GraphProperty) graphDetails.get("GraphProperty");
                } else {
                    graphProperty = new GraphProperty();
                }
                if (startValue == null) {
                    startValue = "";
                }
                if (endValue == null) {
                    endValue = "";
                }

                graphProperty.setRgbColorArr(rgbColorArr);
                graphProperty.setFirstChartType(firstChartType);
                graphProperty.setSecondChartType(secondChartType);
                graphProperty.setLabelsDisplayed(isShowLabels);
                graphProperty.setMeasureFormat(measureFormat);
                graphProperty.setMeasureValueRounding(measureValueRounding);
                graphProperty.setAxisLabelPosition(axisLabelPosition);
                graphProperty.setCalibration(calibration);
                graphProperty.setGraphDisplayRows(displyRows);
                graphProperty.setNumberFormat(numberformat);
                graphProperty.setGraphGridLines(graphGridLines);
                graphProperty.setSwapGraphColumns((String) graphDetails.get("SwapColumn"));
                graphProperty.setSymbol(graphSymbol);
                graphProperty.setMeasurePosition(measNamePosition);
                graphProperty.setShowlyAxis(showlyAxis);
                graphProperty.setShowryAxis(showryAxis);
                graphProperty.setShowxAxis(showxAxis);
                graphProperty.setBarChartColumnNames1((String[]) graphDetails.get("barChartColumnNames1"));
                graphProperty.setBarChartColumnNames2((String[]) graphDetails.get("barChartColumnNames2"));
                graphProperty.setBarChartColumnTitles1((String[]) graphDetails.get("barChartColumnTitles1"));
                graphProperty.setBarChartColumnTitles2((String[]) graphDetails.get("barChartColumnTitles2"));
                graphProperty.setTargetValueType(targetRange);
                if (!startValue.equalsIgnoreCase("")) {
                    graphProperty.setStartValue(Double.parseDouble(startValue));
                } else {
                    graphProperty.setStartValue(0);
                }
                if (!endValue.equalsIgnoreCase("")) {
                    graphProperty.setEndValue(Double.parseDouble(endValue));
                } else {
                    graphProperty.setEndValue(0);
                }
                graphProperty.setFromDate(fromDate);
                graphProperty.setToDate(toDate);
                if (targetPerDay != 0) {
                    targetPerDay = graphProperty.getStartValue() / targetPerDay;
                    graphProperty.setTargetPerDay(targetPerDay);
                    graphProperty.setStartValue(targetPerDay * container.getNoOfDays());
                }

                graphProperty.setStackedType(stackedType);

                String graphPropertyFirst = "";
                String graphPropertySecond = "";
                String graphPropertyThird = "";

                if (graphProperty != null && graphProperty.toXml() != null && !graphProperty.toXml().isEmpty()) {
                    if (graphProperty.toXml().length() > 7000) {
                        graphPropertyFirst = graphProperty.toXml().substring(0, 3500);
                        graphPropertySecond = graphProperty.toXml().substring(3500, 7000);
                        graphPropertyThird = graphProperty.toXml().substring(7000, graphProperty.toXml().length());
                    } else if (graphProperty.toXml().length() > 3500) {
                        graphPropertyFirst = graphProperty.toXml().substring(0, 3500);
                        graphPropertySecond = graphProperty.toXml().substring(3500, graphProperty.toXml().length());
                        graphPropertyThird = "";
                    } else {
                        graphPropertyFirst = graphProperty.toXml();
                        graphPropertySecond = "";
                        graphPropertyThird = "";
                    }
                }

                ArrayList RowValuesList = new ArrayList();
                String strXML = null;
                if (graphDetails.get("RowValuesList") != null) {
                    RowValuesList = (ArrayList) graphDetails.get("RowValuesList");
                    ////.println("RowValuesList is : "+RowValuesList);
                    strXML = buildRowValuesXML(RowValuesList);
                }
                String[] singleGraphColumns = (String[]) graphDetails.get("barChartColumnNames");

                String[] axis = (String[]) graphDetails.get("axis");
                if (isOverWriteExistingReport()) {
                    graphId = Integer.parseInt((String) graphDetails.get("graphId"));
                } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                    graphId = -1;
                } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                    graphId = DAO.getSequence("LAST_INSERT_ID(GRAPH_ID) from PRG_AR_GRAPH_MASTER order by 1 desc limit 1");
                } else {
                    graphId = DAO.getSequence("PRG_AR_GRAPH_MASTER_SEQ");
                }

                StringBuffer element_ids = new StringBuffer();
                StringBuffer element_ids1 = new StringBuffer();

                String element_idsStr = null;
                String element_ids1Str = null;
                String graphMasterQuery = "";
                String showGraphTable = "";
                String deletequery = "";

                element_ids.append("");
                element_ids1.append("");
                grpName = grpName.replace("'", "''");
                if (getShowGraphTable() != null) {
                    showGraphTable = (String) getShowGraphTable();
                    // // ////.println("showGraphTable----::::"+showGraphTable);
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                        if (this.isOverWriteExistingReport()) {
//                          graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,X_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_DISPLAY_ROWS,SHOW_GT,JQ_PROPERTIES) "
//                                + "SELECT '" + showGraphTable + "',"+reportId+",'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
//                                + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "',null,'" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',('" + strXML + "'),'"+graphProperty.toXml()+"','"+displyRows+"','"+showGT+"','"+jqpropertiesString+"'  FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                            //added by srikanth.p
                            graphMasterQuery = "UPDATE PRG_AR_GRAPH_MASTER SET SHOW_TABLE='" + showGraphTable + "',REPORT_ID=" + reportId + ",GRAPH_NAME='" + grpName + "',GRAPH_SIZE=(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "'),GRAPH_TYPE=(SELECT GRAPH_TYPE_ID FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "') ,GRAPH_CLASS=(SELECT GRAPH_CLASS_ID FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ),GRAPH_ORDER=" + (i + 1) + ",ALLOW_LEGEND='" + grplegend + "',LEGEND_LOC='" + grplegendloc + "',SHOW_GRID_X_AXIS='" + grpshox + "',SHOW_GRID_Y_AXIS='" + grpshoy + "',LEFT_Y_AXIS_LABEL='" + grplyaxislabel + "',X_AXIS_LABEL=null,ALLOW_LINK='" + grpdrill + "',BACK_COLOR='" + grpbcolor + "',FONT_COLOR='" + grpfcolor + "',SHOW_DATA='" + grpdata + "',RIGHT_Y_AXIS_LABEL='" + grpryaxislabel + "',row_values=('" + strXML + "'),GRAPH_PROPERTY_XML='" + graphPropertyFirst + "',GRAPH_PROPERTY_XML1='" + graphPropertySecond + "',GRAPH_PROPERTY_XML2='" + graphPropertyThird + "',GRAPH_DISPLAY_ROWS='" + displyRows + "',SHOW_GT='" + showGT + "',JQ_PROPERTIES='" + jqpropertiesString + "' WHERE GRAPH_ID=" + graphId;

                        } else {
                            graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,X_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_PROPERTY_XML1,GRAPH_PROPERTY_XML2,GRAPH_DISPLAY_ROWS,SHOW_GT,JQ_PROPERTIES) "
                                    + "SELECT '" + showGraphTable + "',ident_current('PRG_AR_REPORT_MASTER'),'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
                                    + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "',null,'" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',('" + strXML + "'),'" + graphPropertyFirst + "','" + graphPropertySecond + "','" + graphPropertyThird + "','" + displyRows + "','" + showGT + "','" + jqpropertiesString + "'  FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                        }
                    } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                        if (this.isOverWriteExistingReport()) {
//                          graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,X_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_DISPLAY_ROWS,SHOW_GT,JQ_PROPERTIES) "
//                                + "SELECT '" + showGraphTable + "',"+reportId+",'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
//                                + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "',null,'" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',('" + strXML + "'),'"+graphProperty.toXml()+"','"+displyRows+"','"+showGT+"','"+jqpropertiesString+"'  FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                            //added by srikanth.p
                            graphMasterQuery = "UPDATE PRG_AR_GRAPH_MASTER SET SHOW_TABLE='" + showGraphTable + "',REPORT_ID=" + reportId + ",GRAPH_NAME='" + grpName + "',GRAPH_SIZE=(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "'),GRAPH_TYPE=(SELECT GRAPH_TYPE_ID FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "') ,GRAPH_CLASS=(SELECT GRAPH_CLASS_ID FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ),GRAPH_ORDER=" + (i + 1) + ",ALLOW_LEGEND='" + grplegend + "',LEGEND_LOC='" + grplegendloc + "',SHOW_GRID_X_AXIS='" + grpshox + "',SHOW_GRID_Y_AXIS='" + grpshoy + "',LEFT_Y_AXIS_LABEL='" + grplyaxislabel + "',X_AXIS_LABEL=null,ALLOW_LINK='" + grpdrill + "',BACK_COLOR='" + grpbcolor + "',FONT_COLOR='" + grpfcolor + "',SHOW_DATA='" + grpdata + "',RIGHT_Y_AXIS_LABEL='" + grpryaxislabel + "',row_values=('" + strXML + "'),GRAPH_PROPERTY_XML='" + graphProperty.toXml() + "',GRAPH_DISPLAY_ROWS='" + displyRows + "',SHOW_GT='" + showGT + "',JQ_PROPERTIES='" + jqpropertiesString + "' WHERE GRAPH_ID=" + graphId;

                        } else {
                            graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,X_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_DISPLAY_ROWS,SHOW_GT,JQ_PROPERTIES) "
                                    + "SELECT '" + showGraphTable + "'," + reportId + ",'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
                                    + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "',null,'" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',('" + strXML + "'),'" + graphProperty.toXml() + "','" + displyRows + "','" + showGT + "','" + jqpropertiesString + "'  FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                        }
                    } else {
                        graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,GRAPH_ID,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,X_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_PROPERTY_XML1,GRAPH_PROPERTY_XML2,GRAPH_DISPLAY_ROWS,SHOW_GT,JQ_PROPERTIES) "
                                + "SELECT '" + showGraphTable + "'," + graphId + "," + reportId + ",'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
                                + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "',null,'" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',TO_CLOB('" + strXML + "') ,'" + graphPropertyFirst + "','" + graphPropertySecond + "','" + graphPropertyThird + "','" + displyRows + "','" + showGT + "','" + jqpropertiesString + "' FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                    }

                } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                    if (this.isOverWriteExistingReport()) {
                        deletequery = "delete  from PRG_AR_GRAPH_MASTER where graph_id not in(" + graphId + ") and report_id=" + reportId + "";
                        if (graphId == -100) {
                            graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_PROPERTY_XML1,GRAPH_PROPERTY_XML2,GRAPH_DISPLAY_ROWS,JQ_PROPERTIES) "
                                    + "SELECT 'GM'," + reportId + ",'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
                                    + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "','" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',('" + strXML + "') ,'" + graphPropertyFirst + "','" + graphPropertySecond + "','" + graphPropertyThird + "','" + displyRows + "','" + jqpropertiesString + "' FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                        } //added by srikanth.p
                        else {
                            graphMasterQuery = "UPDATE PRG_AR_GRAPH_MASTER SET SHOW_TABLE='GM',REPORT_ID=" + reportId + ",GRAPH_NAME='" + grpName + "',GRAPH_SIZE=(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "'),GRAPH_TYPE=(SELECT GRAPH_TYPE_ID FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "') ,GRAPH_CLASS=(SELECT GRAPH_CLASS_ID FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "'),GRAPH_ORDER=" + (i + 1) + ",ALLOW_LEGEND='" + grplegend + "',LEGEND_LOC='" + grplegendloc + "',SHOW_GRID_X_AXIS='" + grpshox + "',SHOW_GRID_Y_AXIS='" + grpshoy + "',LEFT_Y_AXIS_LABEL='" + grplyaxislabel + "',ALLOW_LINK='" + grpdrill + "',BACK_COLOR='" + grpbcolor + "',FONT_COLOR='" + grpfcolor + "',SHOW_DATA='" + grpdata + "',RIGHT_Y_AXIS_LABEL='" + grpryaxislabel + "',row_values=('" + strXML + "'),GRAPH_PROPERTY_XML='" + graphPropertyFirst + "',GRAPH_PROPERTY_XML1='" + graphPropertySecond + "',GRAPH_PROPERTY_XML2='" + graphPropertyThird + "',GRAPH_DISPLAY_ROWS='" + displyRows + "',JQ_PROPERTIES='" + jqpropertiesString + "' WHERE GRAPH_ID=" + graphId;
                        }
                    } else {
                        graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_PROPERTY_XML1,GRAPH_PROPERTY_XML2,GRAPH_DISPLAY_ROWS,JQ_PROPERTIES) "
                                + "SELECT 'GM',ident_current('PRG_AR_REPORT_MASTER'),'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
                                + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "','" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',('" + strXML + "') ,'" + graphPropertyFirst + "','" + graphPropertySecond + "','" + graphPropertyThird + "','" + displyRows + "','" + jqpropertiesString + "' FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                    }
                } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                    if (this.isOverWriteExistingReport()) {
                        deletequery = "delete  from PRG_AR_GRAPH_MASTER where graph_id not in(" + graphId + ") and report_id=" + reportId + "";
                        if (graphId == -100) {
                            graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_DISPLAY_ROWS,JQ_PROPERTIES) "
                                    + "SELECT 'GM'," + reportId + ",'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
                                    + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "','" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',('" + strXML + "') ,'" + graphProperty.toXml() + "','" + displyRows + "','" + jqpropertiesString + "' FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                        } //added by srikanth.p
                        else {
                            graphMasterQuery = "UPDATE PRG_AR_GRAPH_MASTER SET SHOW_TABLE='GM',REPORT_ID=" + reportId + ",GRAPH_NAME='" + grpName + "',GRAPH_SIZE=(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "'),GRAPH_TYPE=(SELECT GRAPH_TYPE_ID FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "') ,GRAPH_CLASS=(SELECT GRAPH_CLASS_ID FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "'),GRAPH_ORDER=" + (i + 1) + ",ALLOW_LEGEND='" + grplegend + "',LEGEND_LOC='" + grplegendloc + "',SHOW_GRID_X_AXIS='" + grpshox + "',SHOW_GRID_Y_AXIS='" + grpshoy + "',LEFT_Y_AXIS_LABEL='" + grplyaxislabel + "',ALLOW_LINK='" + grpdrill + "',BACK_COLOR='" + grpbcolor + "',FONT_COLOR='" + grpfcolor + "',SHOW_DATA='" + grpdata + "',RIGHT_Y_AXIS_LABEL='" + grpryaxislabel + "',row_values=('" + strXML + "'),GRAPH_PROPERTY_XML='" + graphProperty.toXml() + "',GRAPH_DISPLAY_ROWS='" + displyRows + "',JQ_PROPERTIES='" + jqpropertiesString + "' WHERE GRAPH_ID=" + graphId;
                        }
                    } else {
                        graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_DISPLAY_ROWS,JQ_PROPERTIES) "
                                + "SELECT 'GM'," + reportId + ",'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
                                + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "','" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',('" + strXML + "') ,'" + graphProperty.toXml() + "','" + displyRows + "','" + jqpropertiesString + "' FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                    }
                } else {
                    graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,GRAPH_ID,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_PROPERTY_XML1,GRAPH_PROPERTY_XML2,GRAPH_DISPLAY_ROWS,JQ_PROPERTIES) "
                            + "SELECT 'GM'," + graphId + "," + reportId + ",'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
                            + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "','" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',TO_CLOB('" + strXML + "') ,'" + graphPropertyFirst + "','" + graphPropertySecond + "','" + graphPropertyThird + "','" + displyRows + "','" + jqpropertiesString + "' FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                }
                if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                    execUpdateSQL(graphMasterQuery);
                } else {
                    queries.add(graphMasterQuery);
                }
                if (graphId == -100 && ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                    String qry = "select LAST_INSERT_ID(GRAPH_ID) from PRG_AR_GRAPH_MASTER order by 1 desc limit 1";
                    PbReturnObject retobj = execSelectSQL(qry);
                    graphId = Integer.parseInt(retobj.getFieldValueString(0, 0));
                }
                String graphDetailsQuery = "";
                String element_ids2 = " case ";

                //hack when we need to save a Pie Chart with Dimension Segment
                if (RTDimensionElement.isRunTimeDimension(originnalColumns.get(0).toString())) {
                    viewByCount--;

                }
                if (container.isReportCrosstab()) {
                    if (!singleGraphColumns[container.getViewByCount()].contains("A_")) {
                        String whichMeasure = singleGraphColumns[container.getViewByCount()];
                        singleGraphColumns = new String[container.getViewByCount() + 1];
                        for (int m = 0; m < container.getViewByCount(); m++) {
                            singleGraphColumns[m] = container.getDisplayColumns().get(m);
                        }

                        Set nonViewByMapSet = container.getReportCollect().getNonViewByMap().keySet();
                        Object[] nonViewByArray = (Object[]) nonViewByMapSet.toArray();
                        for (int l = container.getViewByCount(); l < container.getDisplayColumns().size(); l++) {
                            if (container.getDisplayColumns().get(l).equalsIgnoreCase(whichMeasure)) {
                                ArrayList tempStr = (ArrayList) container.getDisplayLabels().get(l);
                                String grphColName = (String) tempStr.get(tempStr.size() - 1);
                                for (int k = 0; k < nonViewByArray.length; k++) {
                                    // if(grphColName.equalsIgnoreCase((String) container.getReportCollect().getNonViewByMap().get(nonViewByArray[k])))
                                    if (grphColName.equalsIgnoreCase((String) container.getReportCollect().getCrosstabMsrMap().get(nonViewByArray[k]))) {
                                        singleGraphColumns[container.getViewByCount()] = (String) nonViewByArray[k];
                                        break;
                                    } else if (grphColName.equalsIgnoreCase((String) container.getReportCollect().getNonViewByMap().get(nonViewByArray[k]))) {
                                        singleGraphColumns[container.getViewByCount()] = (String) nonViewByArray[k];
                                        break;
                                    } else {
                                    }
                                }
                                break;

                            }
                        }
                    }

                }
                //if (CEP_Elements == null || CEP_Elements.size() == 0) {
                if (singleGraphColumns != null) {
                    String[] singleGraphColumnsarrbkp = new String[singleGraphColumns.length];

                    int m = 0;
                    for (int k = 0; k < singleGraphColumns.length; k++) {
                        if (singleGraphColumns[k] != null && !singleGraphColumns[k].equalsIgnoreCase("null")) {
                            if (singleGraphColumns[k].contains("A_") || singleGraphColumns[k].equalsIgnoreCase("Time")) {
                                singleGraphColumnsarrbkp[m] = singleGraphColumns[k];
                                m++;
                            }
                        }
                    }
                    String[] singleGraphColumnsarr = new String[m];
                    for (int l = 0; l < m; l++) {
                        singleGraphColumnsarr[l] = singleGraphColumnsarrbkp[l];
                    }

                    for (int j = viewByCount; j < singleGraphColumnsarr.length; j++) {
                        ////.println("singleGraphColumnsarr[j] is : "+singleGraphColumnsarr[j]);
                        if (singleGraphColumnsarr[j].equalsIgnoreCase("Time")) {
                            element_ids.append(",-1");
                            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                                element_ids2 += " when element_id =-1 then " + ((j - viewByCount) + 1) + " ";
                            } else {
                                element_ids1.append(",-1," + ((j - viewByCount) + 1));
                            }

                        } else {
                            element_ids.append("," + singleGraphColumnsarr[j].replace("A_", "").replace("_G", ""));

                            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                                element_ids2 += " when element_id = " + singleGraphColumns[j].replace("A_", "").replace("_G", "") + " then " + ((j - viewByCount) + 1) + " ";
                            } else {
                                element_ids1.append("," + singleGraphColumnsarr[j].replace("A_", "").replace("_G", "") + "," + ((j - viewByCount) + 1));
                            }

                        }
                    }
                    element_ids2 += " else 10000 end ";
                    ////.println(" element_ids is : "+element_ids);

                    element_idsStr = element_ids.substring(1);

                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
//
                        //added by srikanth.p for overWriting graphs in sqlserver
                        if (this.isOverWriteExistingReport()) {
                            if (graphId == -100) {
                                graphDetailsQuery = "insert into prg_ar_graph_details (GRAPH_ID,COL_NAME,ELEMENT_ID,COLUMN_ORDER,QUERY_COL_ID,AXIS) select ident_current('PRG_AR_GRAPH_MASTER'),col_disp_name, element_id, " + element_ids2 + ",qry_col_id,0 as Axis from prg_ar_query_detail where element_id in (" + element_idsStr + ") AND report_id=" + reportId + "";
                            } else {
                                graphDetailsQuery = "insert into prg_ar_graph_details (GRAPH_ID,COL_NAME,ELEMENT_ID,COLUMN_ORDER,QUERY_COL_ID,AXIS) select " + graphId + ",col_disp_name, element_id, " + element_ids2 + ",qry_col_id,0 as Axis from prg_ar_query_detail where element_id in (" + element_idsStr + ") AND report_id=" + reportId + "";
                            }
                        } else {
                            graphDetailsQuery = "insert into prg_ar_graph_details (GRAPH_ID,COL_NAME,ELEMENT_ID,COLUMN_ORDER,QUERY_COL_ID,AXIS) select ident_current('PRG_AR_GRAPH_MASTER'),col_disp_name, element_id, " + element_ids2 + ",qry_col_id,0 as Axis from prg_ar_query_detail where element_id in (" + element_idsStr + ") AND report_id=" + reportId + "";
                        }
                    } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                        if (this.isOverWriteExistingReport()) {
                            if (graphId == -100) {
                                graphDetailsQuery = "insert into prg_ar_graph_details (GRAPH_ID,COL_NAME,ELEMENT_ID,COLUMN_ORDER,QUERY_COL_ID,AXIS) select " + graphId + ",col_disp_name, element_id, " + element_ids2 + ",qry_col_id,0 as Axis from prg_ar_query_detail where element_id in (" + element_idsStr + ") AND report_id=" + reportId + "";
                            } else {
                                graphDetailsQuery = "insert into prg_ar_graph_details (GRAPH_ID,COL_NAME,ELEMENT_ID,COLUMN_ORDER,QUERY_COL_ID,AXIS) select " + graphId + ",col_disp_name, element_id, " + element_ids2 + ",qry_col_id,0 as Axis from prg_ar_query_detail where element_id in (" + element_idsStr + ") AND report_id=" + reportId + "";
                            }
                        } else {
                            graphDetailsQuery = "insert into prg_ar_graph_details (GRAPH_ID,COL_NAME,ELEMENT_ID,COLUMN_ORDER,QUERY_COL_ID,AXIS) select " + graphId + ",col_disp_name, element_id, " + element_ids2 + ",qry_col_id,0 as Axis from prg_ar_query_detail where element_id in (" + element_idsStr + ") AND report_id=" + reportId + "";
                        }
                    } else {
                        graphDetailsQuery = "insert into prg_ar_graph_details (GRAPH_COL_ID,GRAPH_ID,COL_NAME,ELEMENT_ID,COLUMN_ORDER,QUERY_COL_ID,AXIS) select prg_ar_graph_details_seq.nextval," + graphId + ",col_disp_name, element_id,decode (element_id," + element_ids1.substring(1) + "),qry_col_id,0 as Axis from prg_ar_query_detail where element_id in (" + element_idsStr + ") AND report_id=" + reportId + "";
                    }

                    queries.add(graphDetailsQuery);
                }
                //}
                graphSize = null;
                grpType = null;
                grpName = null;
                grplegend = null;
                grplegendloc = null;
                grpshox = null;
                grpshoy = null;
                grplyaxislabel = null;
                grpryaxislabel = null;
                grpbDomainaxislabel = null;

                grpdrill = null;
                grpbcolor = null;
                grpfcolor = null;
                grpdata = null;
            }
        }

        DAO.saveReport(queries);
        if (container.getWhatIfScenario() != null) {
            String whatIfxml = container.getWhatIfScenario().toXML();
            DAO.saveWhatifDetails(reportId, whatIfxml);
        }

        DAO.saveDimensionSegmentValues(container, newReportId);
        if (container.getMultiCalendarFlag()) {
            DAO.saveMultiCalendar(container, reportId);
        }

        for (String parameter : container.getParameterElements()) {
            ReportParameterSecurity paramSecurity = container.getParameterSecurity(parameter);
            if (paramSecurity != null) {
                DAO.saveParameterSecurity(newReportId, paramSecurity);
            }
        }
        if (container.getMapMainMeasure().size() != 0) {
            DAO.saveMapMeasures(container, newReportId);
        }
        //start of code by Nazneen for caching AO
        if (container.isAOEnable) {
            createAOForReports(container.getReportCollect(), newReportId);
        }
        //end of code by Nazneen for caching AO
        return newReportId;

    }

    public String buildRowValuesXML(ArrayList alist) {
        StringBuffer sbuffer = new StringBuffer("");
        sbuffer.append("<column-row-values>");
        sbuffer.append("<row-values>");
        if (alist != null) {
            for (int j = 0; j < alist.size(); j++) {
                sbuffer.append("<row-value>" + alist.get(j) + "</row-value>");
            }
        }
        sbuffer.append("</row-values>");
        sbuffer.append("</column-row-values>");

        return sbuffer.toString();
    }

    public String getReportId() {
        return reportId;
    }

    public void setReportId(String reportId) {
        this.reportId = reportId;
    }

    public boolean isOverWriteExistingReport() {
        return overWriteExistingReport;
    }

    public void setOverWriteExistingReport(boolean overWriteExistingReport) {
        this.overWriteExistingReport = overWriteExistingReport;
    }
    //added by santhosh.k on 08-03-2010

    public String backToReportDesigner(String reportId, HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        HashMap ParametersHashMap = null;
        HashMap TableHashMap = null;
        HashMap GraphHashMap = null;
        HashMap ReportHashMap = null;
        HashMap map = null;
        String customReportId = null;
        Container container = null;
        String ParamRegion = "";
        String ParamDispRegion = "";
        String TableRegion = "";
        String GraphRegion = "";
        String customMembers = "";
        String graphIds = "";
        String ReportFolders = "";
        ArrayList parameters = new ArrayList();
        if (session != null) {
            try {
                customReportId = reportId;
                if (session.getAttribute("PROGENTABLES") != null) {
                    map = (HashMap) session.getAttribute("PROGENTABLES");
                    if (map.get(reportId) != null) {
                        container = (Container) map.get(reportId);//to get previous report container object
                        request.setAttribute("PrevReportId", reportId);
                    }
                }
                container.setReportId(customReportId);
                container.setTableId(customReportId);

                ParametersHashMap = container.getParametersHashMap();
                TableHashMap = container.getTableHashMap();
                GraphHashMap = container.getGraphHashMap();
                ReportHashMap = container.getReportHashMap();

                container = reportViewerDAO.customizeReport(container, customReportId, reportId, request);
                ReportFolders = reportTemplateDAO.getUserFoldersByReportId(reportId);
                customMembers = reportTemplateDAO.getCustomMembers(String.valueOf(ParametersHashMap.get("UserFolderIds")));
                graphIds = String.valueOf(GraphHashMap.get("graphIds"));
                parameters = (ArrayList) ParametersHashMap.get("Parameters");
                ParamRegion = reportBD.buildParameters(ParametersHashMap);
                ParamDispRegion = reportBD.dispParameters(parameters, ParametersHashMap);
                TableRegion = reportBD.buildTable(container, request.getContextPath(), session);
                GraphRegion = reportBD.buildGraph(container, request, response, graphIds);

                request.setAttribute("CustomReportId", customReportId);
                request.setAttribute("ReportFolders", ReportFolders);
                request.setAttribute("UserFlds", ReportFolders);//as in report designer it is retrieving using that name
                //UserFlds
                request.setAttribute("customMembers", customMembers);
                request.setAttribute("ParamRegion", ParamRegion);
                request.setAttribute("ParamDispRegion", ParamDispRegion);

                request.setAttribute("TableRegion", TableRegion);
                request.setAttribute("GraphRegion", GraphRegion);

                container.setSessionContext(session, container);

            } catch (Exception exception) {
                logger.error("Exception: ", exception);
            }
        } else {
        }
        return customReportId;
    }

    public void setShowGraphTable(String showGraphTable) {
        this.showGraphTable = showGraphTable;
    }

    public String getShowGraphTable() {
        return showGraphTable;
    }

    public boolean isHideShowColumns() {
        return hideShowColumns;
    }

    public void setHideShowColumns(boolean hideShowColumns) {
        this.hideShowColumns = hideShowColumns;
    }

    public ArrayList getRowEdgeParamValues(ArrayList REP) {

        ArrayList REPValues = new ArrayList();
        PbReturnObject pbro = new PbReturnObject();
        for (int i = 0; i < REP.size(); i++) {
            pbro = reportViewerDAO.getREPValues((String) REP.get(i));
            for (int cnt = 0; cnt < pbro.getRowCount(); cnt++) {
                if (i == 0) {
                    REPValues.add(pbro.getFieldValueString(cnt, 0));
                } else {
                    for (int j = 0; j < REPValues.size(); j++) {
                        REPValues.add(((String) REPValues.get(j)) + "-" + pbro.getFieldValueString(cnt, 0));
                    }
                }
            }
        }
        return REPValues;
    }

    public String addRunTimeColumn(Container container, String colType, String colEleId) {

        return addRunTimeColumn(container, colType, colEleId, null);
    }

    public String addRunTimeColumn(Container container, String colType, String colEleId, String measureName) {
        ArrayList originalColumns = null;
        ArrayList displayColumns = null;
        ArrayList displayLabels = null;
        ArrayList links = null;
        ArrayList prevlinks = null;
        int viewByCount = 0;
        int measIndex;

        ArrayList dataTypes = null;
        ArrayList displayTypes = null;
        HashMap ColumnsVisibility = null;
        ArrayList alignments = null;
        ArrayList Measures = null;
        ArrayList Measures1 = new ArrayList();
        ArrayList MeasuresNames = null;

        String colTypeSuffix = null;
        String colDispSuffix = null;
        RTMeasureElement typToCheck = null;

        String newColId = null;
        String colEleIdm = colEleId;
       String Rankflag="false";

        if (colType.equals(RTMeasureElement.RANK_COLUMN)) {
            colTypeSuffix = RTMeasureElement.RANK.getColumnType();
            colDispSuffix = RTMeasureElement.RANK.getColumnDisplay();
            typToCheck = RTMeasureElement.RANK;
        } else if (colType.equals(RTMeasureElement.PERCENT_COLUMN)) {
            colTypeSuffix = RTMeasureElement.PERCENTWISE.getColumnType();
            colDispSuffix = RTMeasureElement.PERCENTWISE.getColumnDisplay();
            typToCheck = RTMeasureElement.PERCENTWISE;
        } else if (colType.equals(RTMeasureElement.WHATIF_COLUMN)) {
            colTypeSuffix = RTMeasureElement.WHATIF.getColumnType();
            colDispSuffix = RTMeasureElement.WHATIF.getColumnDisplay();
            typToCheck = RTMeasureElement.WHATIF;
        } else if (colType.equals(RTMeasureElement.WHATIF_TARGET_COLUMN)) {
            colTypeSuffix = RTMeasureElement.WHATIFTARGET.getColumnType();
            colDispSuffix = RTMeasureElement.WHATIFTARGET.getColumnDisplay();
            typToCheck = RTMeasureElement.WHATIFTARGET;
        } else if (colType.equals(RTMeasureElement.RUNNING_TOTAL_COLUMN)) {
            colTypeSuffix = RTMeasureElement.RUNNINGTOTAL.getColumnType();
            colDispSuffix = RTMeasureElement.RUNNINGTOTAL.getColumnDisplay();
            typToCheck = RTMeasureElement.RUNNINGTOTAL;
        } else if (colType.equals(RTMeasureElement.DEVIATION_FROM_MEAN)) {
            colTypeSuffix = RTMeasureElement.DEVIATIONFROMMEAN.getColumnType();
            colDispSuffix = RTMeasureElement.DEVIATIONFROMMEAN.getColumnDisplay();
            typToCheck = RTMeasureElement.DEVIATIONFROMMEAN;
        } else if (colType.equals(RTMeasureElement.EXCEL_COLUMN)) {
            colTypeSuffix = RTMeasureElement.EXCELCOLUMN.getColumnType();
            colDispSuffix = RTMeasureElement.EXCELCOLUMN.getColumnDisplay();
            typToCheck = RTMeasureElement.EXCELCOLUMN;
        } else if (colType.equals(RTMeasureElement.EXCEL_TARGET_COLUMN)) {
            colTypeSuffix = RTMeasureElement.EXCELTARGETCOLUMN.getColumnType();
            colDispSuffix = RTMeasureElement.EXCELTARGETCOLUMN.getColumnDisplay();
            typToCheck = RTMeasureElement.EXCELTARGETCOLUMN;
        } else if (colType.equals(RTMeasureElement.PERCENT_ON_SUBTOTAL_COLUMN)) {
            colTypeSuffix = RTMeasureElement.PERCENTWISESUBTOTAL.getColumnType();
            colDispSuffix = RTMeasureElement.PERCENTWISESUBTOTAL.getColumnDisplay();
            typToCheck = RTMeasureElement.PERCENTWISESUBTOTAL;
        } else if (colType.equals(RTMeasureElement.GOAL_SEEK)) {
            colTypeSuffix = RTMeasureElement.GOALSEEK.getColumnType();
            colDispSuffix = RTMeasureElement.GOALSEEK.getColumnDisplay();
            typToCheck = RTMeasureElement.GOALSEEK;
        } else if (colType.equals(RTMeasureElement.GOAL_SEEK_USER)) {
            colTypeSuffix = RTMeasureElement.USERGOALSEEK.getColumnType();
            colDispSuffix = RTMeasureElement.USERGOALSEEK.getColumnDisplay();
            typToCheck = RTMeasureElement.USERGOALSEEK;
        } else if (colType.equals(RTMeasureElement.GOAL_TIME_BASE)) {
            colTypeSuffix = RTMeasureElement.TIMEBASED.getColumnType();
            colDispSuffix = RTMeasureElement.TIMEBASED.getColumnDisplay();
            typToCheck = RTMeasureElement.TIMEBASED;
        } else if (colType.equals(RTMeasureElement.GOAL_TIME_BASE_CHANGEPER)) {
            colTypeSuffix = RTMeasureElement.TIMECHANGEDPER.getColumnType();
            colDispSuffix = RTMeasureElement.TIMECHANGEDPER.getColumnDisplay();
            typToCheck = RTMeasureElement.TIMECHANGEDPER;
        } else if (colType.equals(RTMeasureElement.GOAL_USER_PERCENT)) {
            colTypeSuffix = RTMeasureElement.USERGOALPERCENT.getColumnType();
            colDispSuffix = RTMeasureElement.USERGOALPERCENT.getColumnDisplay();
            typToCheck = RTMeasureElement.USERGOALPERCENT;
        } else if (colType.equals(RTMeasureElement.RANK_ST)) {
            colTypeSuffix = RTMeasureElement.RANKST.getColumnType();
            colDispSuffix = RTMeasureElement.RANKST.getColumnDisplay();
            typToCheck = RTMeasureElement.RANKST;
            //added by anitha for MTD,QTD,YTD in AO report
        } else if (colType.equals(RTMeasureElement.MONTH_JOIN)) {
            colTypeSuffix = RTMeasureElement.MONTHJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.MONTHJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.MONTHJOIN;
        } else if (colType.equals(RTMeasureElement.QTR_JOIN)) {
            colTypeSuffix = RTMeasureElement.QTRJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.QTRJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.QTRJOIN;
        } else if (colType.equals(RTMeasureElement.YEAR_JOIN)) {
            colTypeSuffix = RTMeasureElement.YEARJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.YEARJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.YEARJOIN;
        } else if (colType.equals(RTMeasureElement.PMONTH_JOIN)) {
            colTypeSuffix = RTMeasureElement.PMONTHJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.PMONTHJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.PMONTHJOIN;
        } else if (colType.equals(RTMeasureElement.PQTR_JOIN)) {
            colTypeSuffix = RTMeasureElement.PQTRJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.PQTRJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.PQTRJOIN;
        } else if (colType.equals(RTMeasureElement.PYEAR_JOIN)) {
            colTypeSuffix = RTMeasureElement.PYEARJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.PYEARJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.PYEARJOIN;
        } else if (colType.equals(RTMeasureElement.MOM_JOIN)) {
            colTypeSuffix = RTMeasureElement.MOMJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.MOMJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.MOMJOIN;
        } else if (colType.equals(RTMeasureElement.QOQ_JOIN)) {
            colTypeSuffix = RTMeasureElement.QOQJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.QOQJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.QOQJOIN;
        } else if (colType.equals(RTMeasureElement.YOY_JOIN)) {
            colTypeSuffix = RTMeasureElement.YOYJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.YOYJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.YOYJOIN;
        } else if (colType.equals(RTMeasureElement.MOYM_JOIN)) {
            colTypeSuffix = RTMeasureElement.MOYMJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.MOYMJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.MOYMJOIN;
        } else if (colType.equals(RTMeasureElement.QOYQ_JOIN)) {
            colTypeSuffix = RTMeasureElement.QOYQJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.QOYQJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.QOYQJOIN;
        } else if (colType.equals(RTMeasureElement.MOMPER_JOIN)) {
            colTypeSuffix = RTMeasureElement.MOMPERJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.MOMPERJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.MOMPERJOIN;
        } else if (colType.equals(RTMeasureElement.QOQPER_JOIN)) {
            colTypeSuffix = RTMeasureElement.QOQPERJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.QOQPERJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.QOQPERJOIN;
        } else if (colType.equals(RTMeasureElement.YOYPER_JOIN)) {
            colTypeSuffix = RTMeasureElement.YOYPERJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.YOYPERJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.YOYPERJOIN;
        } else if (colType.equals(RTMeasureElement.MOYMPER_JOIN)) {
            colTypeSuffix = RTMeasureElement.MOYMPERJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.MOYMPERJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.MOYMPERJOIN;
        } else if (colType.equals(RTMeasureElement.QOYQPER_JOIN)) {
            colTypeSuffix = RTMeasureElement.QOYQPERJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.QOYQPERJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.QOYQPERJOIN;
        } else if (colType.equals(RTMeasureElement.MTDRANK_COLUMN)) {
            colTypeSuffix = RTMeasureElement.MTDRANK.getColumnType();
            colDispSuffix = RTMeasureElement.MTDRANK.getColumnDisplay();
            typToCheck = RTMeasureElement.MTDRANK;
        } else if (colType.equals(RTMeasureElement.QTDRANK_COLUMN)) {
            colTypeSuffix = RTMeasureElement.QTDRANK.getColumnType();
            colDispSuffix = RTMeasureElement.QTDRANK.getColumnDisplay();
            typToCheck = RTMeasureElement.QTDRANK;
             colEleIdm=colEleId+"_QTD";Rankflag="true";
        } else if (colType.equals(RTMeasureElement.YTDRANK_COLUMN)) {
            colTypeSuffix = RTMeasureElement.YTDRANK.getColumnType();
            colDispSuffix = RTMeasureElement.YTDRANK.getColumnDisplay();
            typToCheck = RTMeasureElement.YTDRANK;
            colEleIdm=colEleId+"_YTD";Rankflag="true";
        } else if (colType.equals(RTMeasureElement.PMTDRANK_COLUMN)) {
            colTypeSuffix = RTMeasureElement.PMTDRANK.getColumnType();
            colDispSuffix = RTMeasureElement.PMTDRANK.getColumnDisplay();
            typToCheck = RTMeasureElement.PMTDRANK;
            colEleIdm=colEleId+"_PMTD";Rankflag="true";
        } else if (colType.equals(RTMeasureElement.PQTDRANK_COLUMN)) {
            colTypeSuffix = RTMeasureElement.PQTDRANK.getColumnType();
            colDispSuffix = RTMeasureElement.PQTDRANK.getColumnDisplay();
            typToCheck = RTMeasureElement.PQTDRANK;
            colEleIdm=colEleId+"_PQTD";Rankflag="true";
        } else if (colType.equals(RTMeasureElement.PYTDRANK_COLUMN)) {
            colTypeSuffix = RTMeasureElement.PYTDRANK.getColumnType();
            colDispSuffix = RTMeasureElement.PYTDRANK.getColumnDisplay();
            typToCheck = RTMeasureElement.PYTDRANK;
            colEleIdm=colEleId+"_PYTD";Rankflag="true";
        } else if (colType.equals(RTMeasureElement.PYMONTH_JOIN)) {
            colTypeSuffix = RTMeasureElement.PYMONTHJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.PYMONTHJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.PYMONTHJOIN;
        } else if (colType.equals(RTMeasureElement.PYQTR_JOIN)) {
            colTypeSuffix = RTMeasureElement.PYQTRJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.PYQTRJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.PYQTRJOIN;
        } else if (colType.equals(RTMeasureElement.WEEK_JOIN)) {
            colTypeSuffix = RTMeasureElement.WEEKJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.WEEKJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.WEEKJOIN;
        } else if (colType.equals(RTMeasureElement.PWEEK_JOIN)) {
            colTypeSuffix = RTMeasureElement.PWEEKJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.PWEEKJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.PWEEKJOIN;
        } else if (colType.equals(RTMeasureElement.PYWEEK_JOIN)) {
            colTypeSuffix = RTMeasureElement.PYWEEKJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.PYWEEKJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.PYWEEKJOIN;
        } else if (colType.equals(RTMeasureElement.WOWPER_JOIN)) {
            colTypeSuffix = RTMeasureElement.WOWPERJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.WOWPERJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.WOWPERJOIN;
        } else if (colType.equals(RTMeasureElement.WOYWPER_JOIN)) {
            colTypeSuffix = RTMeasureElement.WOYWPERJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.WOYWPERJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.WOYWPERJOIN;
        } else if (colType.equals(RTMeasureElement.WOW_JOIN)) {
            colTypeSuffix = RTMeasureElement.WOWJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.WOWJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.WOWJOIN;
        } else if (colType.equals(RTMeasureElement.WOYW_JOIN)) {
            colTypeSuffix = RTMeasureElement.WOYWJOIN.getColumnType();
            colDispSuffix = RTMeasureElement.WOYWJOIN.getColumnDisplay();
            typToCheck = RTMeasureElement.WOYWJOIN;
        }
        if (colType.equals(RTMeasureElement.EXCEL_COLUMN)) {
            int maxId = 0;
            List<String> rtExcelCols = container.getRtExcelColumns();
            for (String colId : rtExcelCols) {
                String tempArr[] = colId.split(RTMeasureElement.EXCELCOLUMN.getColumnType());
                int tempId = Integer.parseInt(tempArr[0].substring(2));
                if (tempId > maxId) {
                    maxId = tempId;
                }
            }
            newColId = "A_" + (maxId + 1) + RTMeasureElement.EXCELCOLUMN.getColumnType();
        } else {
            newColId = colEleId + colTypeSuffix;
        }

        viewByCount = (container.getViewByCount());
        ColumnsVisibility = container.getColumnsVisibility();
        originalColumns = container.getOriginalColumns();
        displayColumns = container.getDisplayColumns();
        displayLabels = container.getDisplayLabels();
        prevlinks = container.getLinks();
        dataTypes = container.getDataTypes();
        displayTypes = container.getDisplayTypes();
        alignments = container.getAlignments();
        Measures = (ArrayList) ((ArrayList) container.getTableHashMap().get("Measures"));//.clone();
        MeasuresNames = (ArrayList) ((ArrayList) container.getTableHashMap().get("MeasuresNames"));//.clone();
        HashMap ReportHashMap = null;
        ReportHashMap = container.getReportHashMap();
        int index1 =0;
        HashMap DisplayNamesMap = new HashMap();
         ArrayList<String> reportAggregations = null;
         //added by anitha for MTD,QTD,YTD in AO report
        if(container.getAOId()!=null && !container.getAOId().equalsIgnoreCase("") && colTypeSuffix!=null &&
                 (colTypeSuffix.equalsIgnoreCase("_MTD")|| colTypeSuffix.equalsIgnoreCase("_QTD")|| colTypeSuffix.equalsIgnoreCase("_YTD")
                 ||colTypeSuffix.equalsIgnoreCase("_PMTD")|| colTypeSuffix.equalsIgnoreCase("_PQTD")|| colTypeSuffix.equalsIgnoreCase("_PYTD")
                 ||colTypeSuffix.equalsIgnoreCase("_MOM")|| colTypeSuffix.equalsIgnoreCase("_QOQ")|| colTypeSuffix.equalsIgnoreCase("_YOY")|| colTypeSuffix.equalsIgnoreCase("_MOYM")|| colTypeSuffix.equalsIgnoreCase("_QOYQ")
                 ||colTypeSuffix.equalsIgnoreCase("_MOMPer")|| colTypeSuffix.equalsIgnoreCase("_QOQPer")|| colTypeSuffix.equalsIgnoreCase("_YOYPer")|| colTypeSuffix.equalsIgnoreCase("_MOYMPer")|| colTypeSuffix.equalsIgnoreCase("_QOYQPer")|| colTypeSuffix.equalsIgnoreCase("_PYMTD")|| colTypeSuffix.equalsIgnoreCase("_PYQTD")
                 ||colTypeSuffix.equalsIgnoreCase("_WTD")||colTypeSuffix.equalsIgnoreCase("_PWTD")||colTypeSuffix.equalsIgnoreCase("_PYWTD")||colTypeSuffix.equalsIgnoreCase("_WOWPer")||colTypeSuffix.equalsIgnoreCase("_WOYWPer")||colTypeSuffix.equalsIgnoreCase("_WOW")||colTypeSuffix.equalsIgnoreCase("_WOYW"))){
        ArrayList<String> reportQryElementIds = (ArrayList) ReportHashMap.get("reportQryElementIds");
        DisplayNamesMap = (HashMap) ReportHashMap.get("DisplayNamesMap");
        reportAggregations = (ArrayList) ReportHashMap.get("reportQryAggregations");
        colEleId = colEleId.replace(" ", "");
           index1 = reportQryElementIds.indexOf(colEleId.replace("A_", ""));
        }
         //end of code by anitha for MTD,QTD,YTD in AO report
        if (container.isRTMeasurePresent(colEleId, typToCheck)) {

            return "Exists";
        }
        //added by sandeep for Rank tackid-->TA_R_265
if(Rankflag.equalsIgnoreCase("true")){
    if(colEleIdm!=null && displayColumns.contains(colEleIdm)){

    }else{
        return "add relavant measure";
    }
}
        if (!container.isReportCrosstab()) {
            int index = displayColumns.lastIndexOf(colEleIdm);
            int startIndex;
            String displayLabel;
            if (index == -1) {
                startIndex = displayColumns.size();

            } else {
                startIndex = index + 1;

            }
            displayColumns.add(startIndex, newColId);
            if (measureName != null) {
                displayLabel = measureName;

            } else {
                index = displayColumns.lastIndexOf(colEleId);
                displayLabel = displayLabels.get(index) + colDispSuffix;

            }
            container.isRTMeasExists(true);
            String rtElementId = colEleId;
            container.rtMeasMap.put(colEleId, colType);
            displayLabels.add(startIndex, displayLabel);
            dataTypes.add(startIndex, "N");
            displayTypes.add(startIndex, "T");
            alignments.add(startIndex, "RIGHT");
            ColumnsVisibility.put(String.valueOf(displayColumns.get(startIndex)), "''");

            index = displayColumns.lastIndexOf(colEleIdm);
            if (index == -1) {
                startIndex = originalColumns.size();

            } else {
                startIndex = index + 1;

            }
            originalColumns.add(startIndex, newColId);

            measIndex = Measures.lastIndexOf(colEleIdm);
            int measStartIndex;
            if (measIndex == -1) {
                measStartIndex = Measures.size();

            } else {
                measStartIndex = measIndex + 1;

            }
            Measures.add(measStartIndex, newColId);
            if (measureName != null) {
                MeasuresNames.add(measStartIndex, displayLabel);

            } else {
                  index = displayColumns.lastIndexOf(colEleId);
                MeasuresNames.add(measStartIndex, displayLabels.get(index) + colDispSuffix);

            }
            container.setColumnProperties(this.resetColumnProperties(Measures, container));
            this.updateMeasureAlign(container, newColId, displayLabel, "Center");
            this.updateScriptAlign(container, newColId, displayLabel, "Center");
            container.setMeasureColor(newColId, "");
            container.setTextColor(newColId, "");
            ArrayList fontdata = new ArrayList();
            HashMap fontHeaderMaps = null;
            fontHeaderMaps = (container.getTableColumnProperties() == null) ? new HashMap() : container.getTableColumnProperties();
            fontdata.add("12");
            fontdata.add("12");
            fontHeaderMaps.put(newColId, fontdata);
            container.setTableColumnProperties(fontHeaderMaps);
        } else {
            int measCount = container.getReportMeasureCount();//.size();
            int whichMeasure = this.findMeasureIndexInCT(container, colEleId);
            measIndex = whichMeasure - viewByCount;
            String disColName = (String) MeasuresNames.get(measIndex);
            int size = displayColumns.size();
            ArrayList curColLabel;
            ArrayList newColLabel;
            container.isRTMeasExists(true);
            String rtElementId = ((PbReturnObject) container.getRetObj()).crosstabMeasureId.get(colEleId);
            container.rtMeasMap.put(colEleId, colType);
            for (int i = whichMeasure; i < size;) {
                colEleId = (String) displayColumns.get(i);
                //while looping avoid % wise columns
                displayColumns.add(i + 1, colEleId + colTypeSuffix);
                //for the column add %wise measure
                curColLabel = (ArrayList) displayLabels.get(i);
                newColLabel = new ArrayList();
                //multi layer crosstab
                for (int k = 0; k < curColLabel.size() - 1; k++) {
                    newColLabel.add(curColLabel.get(k));
                }
                newColLabel.add(disColName + colDispSuffix);
                displayLabels.add(i + 1, newColLabel);
                dataTypes.add(i + 1, "N");
                displayTypes.add(i + 1, "T");
                alignments.add(i + 1, "RIGHT");
                ColumnsVisibility.put(String.valueOf(displayColumns.get(i + 1)), "''");

                originalColumns.add(i + 1, colEleId + colTypeSuffix);
                i += measCount + 1;
                size++;

            }
            Measures.add(measIndex + 1, (String) Measures.get(measIndex) + colTypeSuffix);
            MeasuresNames.add(measIndex + 1, (String) MeasuresNames.get(measIndex) + colDispSuffix);
            container.setColumnProperties(this.resetColumnProperties(Measures, container));
            this.updateMeasureAlign(container, rtElementId + colTypeSuffix, disColName + colDispSuffix, "Center");
            this.updateScriptAlign(container, rtElementId + colTypeSuffix, disColName + colDispSuffix, "Center");
            container.setMeasureColor(rtElementId + colTypeSuffix, "");
            container.setTextColor(rtElementId + colTypeSuffix, "");
            ArrayList fontdata = new ArrayList();
            HashMap fontHeaderMaps = null;
            fontHeaderMaps = (container.getTableColumnProperties() == null) ? new HashMap() : container.getTableColumnProperties();
            fontdata.add("12");
            fontdata.add("12");
            fontHeaderMaps.put(rtElementId + colTypeSuffix, fontdata);
            container.setTableColumnProperties(fontHeaderMaps);
        }

        links = new ArrayList();

        for (int k = 0; k < viewByCount; k++) {
            links.add(String.valueOf(prevlinks.get(k)));
        }
        for (int k = viewByCount; k < displayColumns.size(); k++) {
            links.add("");
        }
        //added by anitha for MTD,QTD,YTD in AO report
        if(container.getAOId()!=null && !container.getAOId().equalsIgnoreCase("")&& colTypeSuffix!=null &&
                (colTypeSuffix.equalsIgnoreCase("_MTD") || colTypeSuffix.equalsIgnoreCase("_QTD")|| colTypeSuffix.equalsIgnoreCase("_YTD")
                 || colTypeSuffix.equalsIgnoreCase("_PMTD") || colTypeSuffix.equalsIgnoreCase("_PQTD")|| colTypeSuffix.equalsIgnoreCase("_PYTD")
                 ||colTypeSuffix.equalsIgnoreCase("_MOM")|| colTypeSuffix.equalsIgnoreCase("_QOQ")|| colTypeSuffix.equalsIgnoreCase("_YOY")|| colTypeSuffix.equalsIgnoreCase("_MOYM")|| colTypeSuffix.equalsIgnoreCase("_QOYQ")
                 ||colTypeSuffix.equalsIgnoreCase("_MOMPer")|| colTypeSuffix.equalsIgnoreCase("_QOQPer")|| colTypeSuffix.equalsIgnoreCase("_YOYPer")|| colTypeSuffix.equalsIgnoreCase("_MOYMPer")|| colTypeSuffix.equalsIgnoreCase("_QOYQPer")|| colTypeSuffix.equalsIgnoreCase("_PYMTD")|| colTypeSuffix.equalsIgnoreCase("_PYQTD")
                ||colTypeSuffix.equalsIgnoreCase("_WTD")||colTypeSuffix.equalsIgnoreCase("_PWTD")||colTypeSuffix.equalsIgnoreCase("_PYWTD")||colTypeSuffix.equalsIgnoreCase("_WOWPer")||colTypeSuffix.equalsIgnoreCase("_WOYWPer")||colTypeSuffix.equalsIgnoreCase("_WOW")||colTypeSuffix.equalsIgnoreCase("_WOYW"))){
        for(int k=0; k<Measures.size();k++){
            Measures1.add(Measures.get(k).toString().replace("A_", ""));
        }
        }
        //end of code by anitha for MTD,QTD,YTD in AO report
        container.setLinks(links);
        container.setDisplayColumns(displayColumns);
        container.setDisplayLabels(displayLabels);
        if(container.getAOId()!=null && !container.getAOId().equalsIgnoreCase("")&& colTypeSuffix!=null &&(colTypeSuffix.equalsIgnoreCase("_MOMPer")|| colTypeSuffix.equalsIgnoreCase("_QOQPer")|| colTypeSuffix.equalsIgnoreCase("_YOYPer")|| colTypeSuffix.equalsIgnoreCase("_MOYMPer")|| colTypeSuffix.equalsIgnoreCase("_QOYQPer")||colTypeSuffix.equalsIgnoreCase("_WOWPer")||colTypeSuffix.equalsIgnoreCase("_WOYWPer"))){
            container.setSymbol(newColId, "%");
        }        
        //added by anitha for MTD,QTD,YTD in AO report
        if(container.getAOId()!=null && !container.getAOId().equalsIgnoreCase("")&& colTypeSuffix!=null &&
                ( colTypeSuffix.equalsIgnoreCase("_MTD") || colTypeSuffix.equalsIgnoreCase("_QTD")|| colTypeSuffix.equalsIgnoreCase("_YTD")
                || colTypeSuffix.equalsIgnoreCase("_PMTD") || colTypeSuffix.equalsIgnoreCase("_PQTD")|| colTypeSuffix.equalsIgnoreCase("_PYTD")
                ||colTypeSuffix.equalsIgnoreCase("_MOM")|| colTypeSuffix.equalsIgnoreCase("_QOQ")|| colTypeSuffix.equalsIgnoreCase("_YOY")|| colTypeSuffix.equalsIgnoreCase("_MOYM")|| colTypeSuffix.equalsIgnoreCase("_QOYQ")
                ||colTypeSuffix.equalsIgnoreCase("_MOMPer")|| colTypeSuffix.equalsIgnoreCase("_QOQPer")|| colTypeSuffix.equalsIgnoreCase("_YOYPer")|| colTypeSuffix.equalsIgnoreCase("_MOYMPer")|| colTypeSuffix.equalsIgnoreCase("_QOYQPer")|| colTypeSuffix.equalsIgnoreCase("_PYMTD")|| colTypeSuffix.equalsIgnoreCase("_PYQTD")
                ||colTypeSuffix.equalsIgnoreCase("_WTD")||colTypeSuffix.equalsIgnoreCase("_PWTD")||colTypeSuffix.equalsIgnoreCase("_PYWTD")||colTypeSuffix.equalsIgnoreCase("_WOWPer")||colTypeSuffix.equalsIgnoreCase("_WOYWPer")||colTypeSuffix.equalsIgnoreCase("_WOW")||colTypeSuffix.equalsIgnoreCase("_WOYW"))){
        ReportHashMap.put("reportQryElementIds",Measures1);
        if(colTypeSuffix.equalsIgnoreCase("_MOMPer")|| colTypeSuffix.equalsIgnoreCase("_QOQPer")|| colTypeSuffix.equalsIgnoreCase("_YOYPer")|| colTypeSuffix.equalsIgnoreCase("_MOYMPer")|| colTypeSuffix.equalsIgnoreCase("_QOYQPer")||colTypeSuffix.equalsIgnoreCase("_WOWPer")||colTypeSuffix.equalsIgnoreCase("_WOYWPer")){
            reportAggregations.add(index1+1,"avg");  
        }else{
        reportAggregations.add(index1+1,reportAggregations.get(index1) );
        }
        ReportHashMap.put("reportQryColNames",MeasuresNames);
        HashMap newMap = new HashMap();
        for (int k = 0; k < Measures1.size(); k++) {
                if (DisplayNamesMap.get("A_" + String.valueOf(Measures1.get(k))) == null) {
                    DisplayNamesMap.put("A_" + String.valueOf(Measures1.get(k)), String.valueOf(MeasuresNames.get(k)));
                }
            }
        newMap.put("DisplayNamesMap", DisplayNamesMap);
        newMap.put("reportQryElementIds",Measures1 );
        newMap.put("reportQryColNames",MeasuresNames);
        newMap.put("reportQryAggregations",reportAggregations );
        container.setRunTimeComparisionMsr(ReportHashMap);
        container.setRunTimeComparisionMsrHashMap(newMap);
        }
        //end of code by anitha for MTD,QTD,YTD in AO report
        container.setColumnsVisibility(ColumnsVisibility);
        container.setDataTypes(dataTypes);
        container.setDisplayTypes(displayTypes);
        container.setAlignments(alignments);
        container.setOriginalColumns(originalColumns);
        //if(!container.isReportCrosstab())
        container.initializeRuntimeMeasures(); //adding runtime msrs in graph

//            for ( int i=0; i<displayColumns.size(); i++ )
//            {
//                if ( RTMeasureElement.getMeasureType((String)displayColumns.get(i)) == RTMeasureElement.RANK )
//                    Measures.add((String)displayColumns.get(i));
//            }
        return "Does Not Exist";

    }

    public HashMap resetColumnProperties(ArrayList<String> measLst, Container container) {
        HashMap<String, ArrayList<String>> colPropMap = new HashMap<String, ArrayList<String>>();
        HashMap<String, ArrayList<String>> existingsinglecolpropsMap = null;
        ArrayList<String> existingsingleColprops = new ArrayList<String>();
        if (container.getColumnProperties() != null && !container.getColumnProperties().isEmpty()) {
            existingsinglecolpropsMap = container.getColumnProperties();
        }
        String percentWise=container.getPercentWise();
        ArrayList<String> singleColProp;
        for (String meas : measLst) {
            if (existingsinglecolpropsMap != null && !existingsinglecolpropsMap.isEmpty()) {
                existingsingleColprops = (ArrayList<String>) existingsinglecolpropsMap.get(meas);
            }

            singleColProp = new ArrayList<String>();
            if (!RTMeasureElement.isRunTimeMeasure(meas) || (RTMeasureElement.isRunTimeMeasure(meas) && RTMeasureElement.getMeasureType(meas).isSubTotalSupported())) {
                if (container.getGrandTotalReq()) {
                    if (existingsingleColprops != null && !existingsingleColprops.isEmpty()) {
                        if (existingsingleColprops.get(0).equalsIgnoreCase("Y")) {
                            singleColProp.add("Y");
                        } else if (existingsingleColprops.get(0).equalsIgnoreCase("N")) {
                            singleColProp.add("N");
                        } else {
                            singleColProp.add("N");
                        }
                    } else {
                        singleColProp.add("Y");//indicates show Total 0
                    }
                } else //modified by Nazneen for GT showing blank once changed from Table Properties
                //                    singleColProp.add("N");//indicates show Total 0
                {
                    if (existingsingleColprops != null && !existingsingleColprops.isEmpty()) {
                        if (existingsingleColprops.get(0).equalsIgnoreCase("Y")) {
                            singleColProp.add("Y");
                        } else if (existingsingleColprops.get(0).equalsIgnoreCase("N")) {
                            singleColProp.add("N");
                        }
                    } else {
                        singleColProp.add("N");
                    }
                }

                if (container.getNetTotalReq()) {
                    if (existingsingleColprops != null && !existingsingleColprops.isEmpty()) {
                        if (existingsingleColprops.get(1).equalsIgnoreCase("Y")) {
                            singleColProp.add("Y");
                        } else {
                            singleColProp.add("N");
                        }
                    } else {
                        singleColProp.add("Y");//indicates show sub Total 1
                    }
                } else {
                    singleColProp.add("N");//indicates show sub Total 1
                }

                if (container.getAvgTotalReq()) {
                    if (existingsingleColprops != null && !existingsingleColprops.isEmpty()) {
                        if (existingsingleColprops.get(2).equalsIgnoreCase("Y")) {
                            singleColProp.add("Y");
                        } else {
                            singleColProp.add("N");
                        }
                    } else {
                        singleColProp.add("Y"); //indicates show avg Total 2
                    }
                } else {
                    singleColProp.add("N");//indicates show avg Total 2
                }

                if (container.getOverAllMaxValueReq()) {
                    if (existingsingleColprops != null && !existingsingleColprops.isEmpty()) {
                        if (existingsingleColprops.get(3).equalsIgnoreCase("Y")) {
                            singleColProp.add("Y");
                        } else {
                            singleColProp.add("N");
                        }
                    } else {
                        singleColProp.add("Y");//indicates show  over all max 3
                    }
                } else {
                    singleColProp.add("N");//indicates show  over all max 3
                }

                if (container.getOverAllMinValueReq()) {
                    if (existingsingleColprops != null && !existingsingleColprops.isEmpty()) {
                        if (existingsingleColprops.get(4).equalsIgnoreCase("Y")) {
                            singleColProp.add("Y");
                        } else {
                            singleColProp.add("N");
                        }
                    } else {
                        singleColProp.add("Y");//indicates show over all min 4
                    }
                } else {
                    singleColProp.add("N");//indicates show over all min 4
                }

                if (container.getCatMaxValueReq()) {
                    if (existingsingleColprops != null && !existingsingleColprops.isEmpty()) {
                        if (existingsingleColprops.get(5).equalsIgnoreCase("Y")) {
                            singleColProp.add("Y");
                        } else {
                            singleColProp.add("N");
                        }
                    } else {
                        singleColProp.add("Y");//indicates show cat max 5
                    }
                } else {
                    singleColProp.add("N");//indicates show cat max 5
                }

                if (container.getCatMinValueReq()) {
                    if (existingsingleColprops != null && !existingsingleColprops.isEmpty()) {
                        if (existingsingleColprops.get(6).equalsIgnoreCase("Y")) {
                            singleColProp.add("Y");
                        } else {
                            singleColProp.add("N");
                        }
                    } else {
                        singleColProp.add("Y");//indicates show cat min 6
                    }
                } else {
                    singleColProp.add("N");//indicates show cat min 6
                }
                if (existingsingleColprops != null && !existingsingleColprops.isEmpty()) {
                    if (existingsingleColprops.get(7).equalsIgnoreCase("Y")) {
                        singleColProp.add(existingsingleColprops.get(7));
                    } else {
                        singleColProp.add(existingsingleColprops.get(7));
                    }
                    
                }
                
                else if((meas.contains("percentwise") || meas.contains("_pwst"))&& !percentWise.equalsIgnoreCase("PercentColumn"))
                 {
                    singleColProp.add("%");  
                 }
                else {
                    singleColProp.add(" ");
                }
                if (container.isRowCountReq()) {
                    singleColProp.add("Y");//indicates show row count 7
                }
                 
                else {
                    singleColProp.add("N");//indicates show row count 7
                }
                //added by sruthi for numberformat
                if (existingsingleColprops != null && !existingsingleColprops.isEmpty()) {
                    if (existingsingleColprops.get(9).equalsIgnoreCase("Y")) {
                        singleColProp.add("Y");
                    } else {
                        singleColProp.add("N");
                    }
                } else {
                    singleColProp.add("Y");//indicates show cat min 6
                }
                //ended by sruthi
                //added by anitha for GT on RunTime Time Aggregation measures
            }else if(RTMeasureElement.isRunTimeMeasure(meas)&&container.getAOId()!=null && !container.getAOId().equalsIgnoreCase("")&&( meas.contains("_MTD") || meas.contains("_QTD")|| meas.contains("_YTD")
                || meas.contains("_PMTD") || meas.contains("_PQTD")|| meas.contains("_PYTD")
                ||meas.contains("_MOM")||meas.contains("_QOQ")|| meas.contains("_YOY")||meas.contains("_MOYM")|| meas.contains("_QOYQ")
                ||meas.contains("_MOMPer")|| meas.contains("_QOQPer")|| meas.contains("_YOYPer")|| meas.contains("_MOYMPer")|| meas.contains("_QOYQPer")|| meas.contains("_PYMTD")|| meas.contains("_PYQTD")
                    ||meas.contains("_WTD")||meas.contains("_PWTD")||meas.contains("_PYWTD")||meas.contains("_WOWPer")||meas.contains("_WOYWPer")||meas.contains("_WOW")||meas.contains("_WOYW"))){
                if (container.getGrandTotalReq()) {
                    if (existingsingleColprops != null && !existingsingleColprops.isEmpty()) {
                        if (existingsingleColprops.get(0).equalsIgnoreCase("Y")) {
                            singleColProp.add("Y");
                        } else if (existingsingleColprops.get(0).equalsIgnoreCase("N")) {
                            singleColProp.add("N");
            } else {
                            singleColProp.add("N");
                        }
                    } else {
                        singleColProp.add("Y");//indicates show Total 0
                    }
                } else 
                {
                    if (existingsingleColprops != null && !existingsingleColprops.isEmpty()) {
                        if (existingsingleColprops.get(0).equalsIgnoreCase("Y")) {
                            singleColProp.add("Y");
                        } else if (existingsingleColprops.get(0).equalsIgnoreCase("N")) {
                            singleColProp.add("N");
                        }
                    } else {
                        singleColProp.add("N");
                    }
                }
                singleColProp.add("N");
                singleColProp.add("N");
                singleColProp.add("N");
                singleColProp.add("N");
                singleColProp.add("N");
                singleColProp.add("N");
                singleColProp.add(" ");
                singleColProp.add("N");
                singleColProp.add("Y");
                //end of code by anitha for GT on RunTime Time Aggregation measures
            } else {
                singleColProp.add("N");//indicates show Total 0
                singleColProp.add("N");
                singleColProp.add("N");
                singleColProp.add("N");
                singleColProp.add("N");
                singleColProp.add("N");
                singleColProp.add("N");
                singleColProp.add(" ");
                singleColProp.add("N");
                singleColProp.add("Y");//added by sruthi for numberformat
            }

            if (container.isIndicatorEnabled(meas)) {
                container.setIndicatorEnabled(meas, true);
            } else {
                container.setIndicatorEnabled(meas, false);
            }

            colPropMap.put(meas, singleColProp);
        }
        return colPropMap;
    }

    public String addRunTimeColumnWithPrior(Container container, String colType, String colEleId) {
        String priorCol = "";
        UserLayerDAO userLayerDAO = new UserLayerDAO();
        String status;
        ArrayList signs = null;
        String statusPrior = null;
        priorCol = userLayerDAO.getPriorMeasure(colEleId.replace("A_", ""));
        if (priorCol != null) {
            ArrayList dispCols = container.getDisplayColumns();
            if (dispCols.contains("A_" + priorCol)) {
                status = this.addRunTimeColumn(container, colType, colEleId);

                //only for RANK we will add signs to Original Column
                if (colType.equals(RTMeasureElement.RANK_COLUMN)) {
                    ColorHelper signHelper = new ColorHelper();
                    signHelper.setDependentMeasure("A_" + priorCol + RTMeasureElement.RANK.getColumnType());
                    signHelper.setEvaluationMethod("RANK_PRIOR");
                    container.setSignForMeasure(colEleId + RTMeasureElement.RANK.getColumnType(), signHelper);

                }

                statusPrior = this.addRunTimeColumn(container, colType, "A_" + priorCol);
            } else {
                status = "Prior Not Selected";

            }
        } else {
            status = "Prior Does Not Exist";

        }
        if (statusPrior != null) {
            status = statusPrior;

        }
        return status;
    }

    public void hideMeasure(Container container, String measEleId) {
        ArrayList<String> displayColumns = container.getDisplayColumns();
        HashMap ColumnsVisibility = container.getColumnsVisibility();
        int measIndex;
        if (container.isReportCrosstab()) {
            measIndex = this.findMeasureIndexInCT(container, measEleId);
            int measCount = container.getReportMeasureCount();//.size();

            int size = displayColumns.size();

            for (int i = measIndex; i < size;) {
                ColumnsVisibility.put(displayColumns.get(i), "none");
                i += measCount;
            }
        } else {
            measIndex = displayColumns.lastIndexOf(measEleId);
            ColumnsVisibility.put(displayColumns.get(measIndex), "none");
        }

        container.setColumnsVisibility(ColumnsVisibility);
    }

    public boolean tableMeasureChanges(Container container, String tableMsrs) {
        String REPORTID = null;
        ArrayList reportQryElementIds = null;
        ArrayList reportQryAggregations = null;
        ArrayList reportQryColNames = null;
        ArrayList reportQryColTypes = null;
        ArrayList originalReportQryColTypes = null;
        HashMap ReportHashMap = null;
        Iterable<String> grpColumnsArray = null;
        HashMap DisplayNamesMap = null;
        ArrayList displayColumns = null;
        ArrayList displayLabels = null;
        ArrayList originalColumns = null;
        ArrayList dataTypes = null;
        ArrayList links = null;
        ArrayList prevlinks = null;
//        ArrayList signs = null;
        int viewByCount = 1;
        HashMap ColumnsVisibility = null;

        ArrayList prevdisplayColumns = null;
        ArrayList prevdisplayLabels = null;
        ArrayList prevdataTypes = null;

        HashMap TableProperties = null;
        HashMap TableHashMap = null;
        HashMap columnProperties = null;
        ArrayList Measures = null;
        ArrayList MeasuresNames = null;
        ReportHashMap = container.getReportHashMap();
        TableHashMap = container.getTableHashMap();
        Measures = (ArrayList) TableHashMap.get("Measures");
        MeasuresNames = (ArrayList) TableHashMap.get("MeasuresNames");
        grpColumnsArray = Splitter.on(",").split(tableMsrs);
        reportQryElementIds = (ArrayList) ReportHashMap.get("reportQryElementIds");
        reportQryAggregations = (ArrayList) ReportHashMap.get("reportQryAggregations");
        TableProperties = (TableHashMap.get("TableProperties") == null) ? new HashMap() : (HashMap) TableHashMap.get("TableProperties");
        ColumnsVisibility = container.getColumnsVisibility();
        String[] msrStr = tableMsrs.split(",");
        ColumnsVisibility = new HashMap();

        boolean fireQuery = false;
        Iterable<String> newMeasures = Iterables.filter(grpColumnsArray, not(in(reportQryElementIds)));
        for (String measure : newMeasures) {
            if (RTMeasureElement.isRunTimeMeasure(measure)) {
                continue;
            } else {
                fireQuery = true;
                break;
            }
        }
        if (!container.isReportCrosstab()) {
            for (String measure : grpColumnsArray) {
                if (!reportQryElementIds.contains(measure)) //if (!grpColumnsArray[i].contains("_percentwise"))
                {
                    if (!RTMeasureElement.isRunTimeMeasure(measure)) {
                        reportQryElementIds.add(measure);
                    }
                }
            }
//            reportQryElementIds.clear();
//            for(int d=0;d<msrStr.length;d++){
//                if (!RTMeasureElement.isRunTimeMeasure("A_"+msrStr[d])) {
//                    reportQryElementIds.add(msrStr[d]);
//                }
//            }
            reportQryAggregations = reportTemplateDAO.getReportQryAggregations(reportQryElementIds);
            reportQryColNames = reportTemplateDAO.getReportQryColNames();
            reportQryColTypes = reportTemplateDAO.getReportQryColTypes();
            originalReportQryColTypes = reportTemplateDAO.getOriginalReportQryColTypes();
            ReportHashMap.put("reportQryElementIds", reportQryElementIds);
            ReportHashMap.put("reportQryAggregations", reportQryAggregations);
            ReportHashMap.put("reportQryColNames", reportQryColNames);
            ReportHashMap.put("getReportQryAggregations", reportQryColTypes);

            // container.setReportHashMap(ReportHashMap);
            originalColumns = container.getOriginalColumns();
//            signs = container.getSigns();
            links = container.getLinks();
            prevlinks = (ArrayList) container.getLinks().clone();
            prevdisplayColumns = (ArrayList) container.getDisplayColumns().clone();
            prevdisplayLabels = (ArrayList) container.getDisplayLabels().clone();
            prevdataTypes = (ArrayList) container.getDataTypes().clone();
            viewByCount = container.getViewByCount();
//                //.println("measures first are : "+Measures);
            //try {
            // if (ReportHashMap != null && displayColumns != null && originalColumns != null) {

            displayColumns = new ArrayList();
            displayLabels = new ArrayList();
            dataTypes = new ArrayList();
            //links = (ArrayList) prevlinks.clone();
//            signs = new ArrayList();

            for (int k = 0; k < viewByCount; k++) {
                if (!displayColumns.contains(String.valueOf(prevdisplayColumns.get(k)))) {
                    displayColumns.add(String.valueOf(prevdisplayColumns.get(k)));
                    displayLabels.add(String.valueOf(prevdisplayLabels.get(k)));
                    dataTypes.add(String.valueOf(prevdataTypes.get(k)));
                }
            }

            HashMap runtimeMarHashMap = container.getRunTimeComparisionMsrHashMap();

            DisplayNamesMap = (HashMap) ReportHashMap.get("DisplayNamesMap");
            if (DisplayNamesMap == null) {
                DisplayNamesMap = new HashMap();
            }
            for (int k = 0; k < reportQryElementIds.size(); k++) {
                if (DisplayNamesMap.get("A_" + String.valueOf(reportQryElementIds.get(k))) == null) {
                    DisplayNamesMap.put("A_" + String.valueOf(reportQryElementIds.get(k)), String.valueOf(reportQryColNames.get(k)));
                }
            }

            for (String measure : grpColumnsArray) {
                if (!displayColumns.contains("A_" + measure)) {
                    displayColumns.add("A_" + measure);
                    if (DisplayNamesMap.get("A_" + measure) != null) {
                        if (container.getMeasureName("A_" + measure) == null) {
                            displayLabels.add(String.valueOf(DisplayNamesMap.get("A_" + measure)));
                        } else {
                            displayLabels.add(container.getMeasureName("A_" + measure));
                        }
                    } else if (RTMeasureElement.isRunTimeMeasure("A_" + measure)) {
                        displayLabels.add(container.getMeasureName("A_" + measure));//origLabel + RTMeasureElement.getMeasureType("A_" + measure).getColumnDisplay());
                    } else {
                        displayLabels.add("A_" + measure);

                    }
                }
                if (!originalColumns.contains("A_" + measure)) {
                    originalColumns.add("A_" + measure);
                }
            }

            ReportHashMap.put("DisplayNamesMap", DisplayNamesMap);
            container.setOriginalColumns(originalColumns);
            container.setDisplayColumns(displayColumns);
            container.setDisplayLabels(displayLabels);
            container.getReportCollect().updateReportQueryInfo(reportQryAggregations, reportQryColNames, originalReportQryColTypes);
            HashMap nfmap = new HashMap();
            PbDb pbdb = new PbDb();
            nfmap = (HashMap) container.getTableHashMap().get("NFMap");
            for (int j = 0; j < displayColumns.size(); j++) {
                if (prevdisplayColumns.contains(displayColumns.get(j))) {
                } else {
                    String numberFormatQuery = "select no_format from prg_user_sub_folder_elements where element_id=" + displayColumns.get(j).toString().replace("A_", "").trim();
                    PbReturnObject returnObject = new PbReturnObject();
                    String numberRoundQuery = "select round from prg_user_sub_folder_elements where element_id=" + displayColumns.get(j).toString().replace("A_", "").trim();
                    PbReturnObject returnObject1 = new PbReturnObject();
                    String numberSymbolQuery = "select symbols from prg_user_sub_folder_elements where element_id=" + displayColumns.get(j).toString().replace("A_", "").trim();
                    PbReturnObject returnObject2 = new PbReturnObject();

                    try {
                        returnObject = pbdb.execSelectSQL(numberFormatQuery);
                        returnObject1 = pbdb.execSelectSQL(numberRoundQuery);
                        returnObject2 = pbdb.execSelectSQL(numberSymbolQuery);
                    } catch (SQLException ex) {
                        logger.error("Exception:", ex);
                    }
                    if (returnObject != null && returnObject.getFieldValueString(0, 0) != null) {

                        nfmap.put(displayColumns.get(j), returnObject.getFieldValueString(0, 0));
                    }
                    if (returnObject1 != null && returnObject1.getFieldValueString(0, 0) != null) {
                        if (returnObject1.getFieldValueString(0, 0).equalsIgnoreCase("")) {
                            logger.info(container.measRoundingPrecisions.get(displayColumns.get(j)));
                        } else {
                            container.measRoundingPrecisions.put(displayColumns.get(j).toString(), Integer.parseInt(returnObject1.getFieldValueString(0, 0)));
                        }
                    }
                    if (returnObject2 != null && returnObject2.getFieldValueString(0, 0) != null) {
                        container.symbol.put(displayColumns.get(j).toString(), returnObject2.getFieldValueString(0, 0));
                    }
                }
            }
            container.getTableHashMap().put("NFMap", nfmap);
//            for (int k = 0; k < displayColumns.size(); k++) {
//                if (String.valueOf(displayColumns.get(k)).toUpperCase().contains("CHANGE")) {
//                    if (!signs.contains(String.valueOf(displayColumns.get(k)))) {
//                        signs.add(String.valueOf(displayColumns.get(k)));
//                    }
//                }
//            }

            for (int k = links.size(); k < originalColumns.size(); k++) {
                links.add(" ");
            }

            container.setLinks(links);
//            container.setSigns(signs);

            if (container.getGrandTotalReq()) {
                TableProperties.put("ShowTotalValues", "Y");//indicates show Total 0
            } else {
                TableProperties.put("ShowTotalValues", "N");//indicates show Total 0
            }
            if (container.getNetTotalReq()) {
                TableProperties.put("ShowSubTotalValues", "Y");//indicates show sub Total 1
            } else {
                TableProperties.put("ShowSubTotalValues", "N");//indicates show sub Total 1
            }

            if (container.getAvgTotalReq()) {
                TableProperties.put("ShowAvgValues", "Y");//indicates show avg Total 2
            } else {
                TableProperties.put("ShowAvgValues", "N");//indicates show avg Total 2
            }

            if (container.getOverAllMaxValueReq()) {
                TableProperties.put("ShowOvrAllMaxValues", "Y");//indicates show  over all max 3
            } else {
                TableProperties.put("ShowOvrAllMaxValues", "N");//indicates show  over all max 3
            }

            if (container.getOverAllMinValueReq()) {
                TableProperties.put("ShowOvrAllMinValues", "Y");//indicates show over all min 4
            } else {
                TableProperties.put("ShowOvrAllMinValues", "N");//indicates show over all min 4
            }

            if (container.getCatMaxValueReq()) {
                TableProperties.put("ShowCatMaxValues", "Y");//indicates show cat max 5
            } else {
                TableProperties.put("ShowCatMaxValues", "N");//indicates show cat max 5
            }

            if (container.getCatMinValueReq()) {
                TableProperties.put("ShowCatMinValues", "Y");//indicates show cat min 6
            } else {
                TableProperties.put("ShowCatMinValues", "N");//indicates show cat min 6
            }

            if (container.getTableSymbols() != null) {
                TableProperties.put("ColumnSymbols", container.getTableSymbols());
            } else {
                TableProperties.put("ColumnSymbols", " ");
            }
            if (container.getDefaultSortedColumn() != null) {
                TableProperties.put("DefaultSortedColumn", container.getDefaultSortedColumn());
            } else {
                TableProperties.put("DefaultSortedColumn", " ");
            }

            columnProperties = container.getColumnProperties();
            //if (columnProperties == null) {
            //will reset the ColumnProperties in TableHashMap
            columnProperties = new HashMap();
            //}
//                        //.println("measures before are : "+Measures);
            int k = 0;
            for (int i = viewByCount; i < displayColumns.size(); i++) {
                String disCol = String.valueOf(displayColumns.get(i));
                String disLabel = String.valueOf(displayLabels.get(i));
                if (RTMeasureElement.isRunTimeMeasure(disCol)) {
                    dataTypes.add("N");
                } else {
                    for (int j = 0; j < reportQryElementIds.size(); j++) {
                        if (disCol.replace("A_", "").equalsIgnoreCase((String) reportQryElementIds.get(j))) {
                            dataTypes.add(reportQryColTypes.get(j));
                        }
                    }
                }
//                else
//                    dataTypes.add(reportQryColTypes.get(k++));

                if (i == viewByCount) {
                    Measures.clear();
                    MeasuresNames.clear();
                }
                Measures.add(disCol);
                MeasuresNames.add(disLabel);

//                if (disCol.lastIndexOf("_percentwise") == -1) {
//                    if (i == viewByCount) {
//                        Measures.clear();
//                        MeasuresNames.clear();
//                    }
//                    //Measures.add(disCol.replace("A_", ""));
//                    Measures.add(disCol);
//                    MeasuresNames.add(disLabel);
//                } else {
//                    //Measures.add(disCol.replace("A_", ""));
//                    Measures.add(disCol);
//                    MeasuresNames.add(disLabel);
//                }
            }
            columnProperties = this.resetColumnProperties(Measures, container);
//                        //.println("TableHashMap0000000======" + TableHashMap);

            container.setDataTypes(dataTypes);
        } else {
            fireQuery = true;
            reportQryElementIds.clear();
//                    reportQryColNames.clear();
//                    reportQryAggregations.clear();
            for (String measure : grpColumnsArray) {
                if (!measure.contains("_percentwise") && !measure.contains("_pwst")) {

                    if (!reportQryElementIds.contains(measure)) //condition added by Govardhan
                    {
                        reportQryElementIds.add(measure);
                    }
                }
            }
//            reportQryAggregations = reportTemplateDAO.getReportQryAggregations(reportQryElementIds);
//            reportQryColNames = reportTemplateDAO.getReportQryColNames();
//            reportQryColTypes = reportTemplateDAO.getReportQryColTypes();
//            ReportHashMap.put("reportQryElementIds", reportQryElementIds);
//            ReportHashMap.put("reportQryAggregations", reportQryAggregations);
//            ReportHashMap.put("reportQryColNames", reportQryColNames);
//            ReportHashMap.put("reportQryColTypes", reportQryColTypes);

            Measures.clear();
            MeasuresNames.clear();

            reportQryAggregations = reportTemplateDAO.getReportQryAggregations(reportQryElementIds);
            reportQryColNames = reportTemplateDAO.getReportQryColNames();
            reportQryColTypes = reportTemplateDAO.getReportQryColTypes();
            originalReportQryColTypes = reportTemplateDAO.getOriginalReportQryColTypes();

            for (int i = 0; i < reportQryElementIds.size(); i++) {
                Measures.add("A_" + reportQryElementIds.get(i));
                MeasuresNames.add(reportQryColNames.get(i));
            }

            //set Column Properties
            columnProperties = this.resetColumnProperties(Measures, container);
            container.getReportCollect().updateReportQueryInfo(reportQryAggregations, reportQryColNames, originalReportQryColTypes);
//            reportQryElementIds.clear();
//            for(int d=0;d<msrStr.length;d++){
//                reportQryElementIds.add(msrStr[d]);
//            }
            ReportHashMap.put("reportQryElementIds", reportQryElementIds);
            ReportHashMap.put("reportQryAggregations", reportQryAggregations);
            ReportHashMap.put("reportQryColNames", reportQryColNames);
            ReportHashMap.put("reportQryColTypes", reportQryColTypes);
        }

        TableHashMap.put("Measures", Measures);
        TableHashMap.put("MeasuresNames", MeasuresNames);
        //  TableProperties.put("ColumnProperties", columnProperties);
//        container.setColumnProperties(columnProperties);
        TableHashMap.put("TableProperties", TableProperties);
        container.setTableHashMap(TableHashMap);
        container.setReportHashMap(ReportHashMap);
        container.setColumnProperties(columnProperties);
        container.setColumnsVisibility(ColumnsVisibility);
        //Code added by Amar on Aug 4,2015
        container.getReportCollect().columnProperties.putAll(columnProperties);
        //end of code
//        container.setDisplayTypes(reportQryColTypes);

        if (fireQuery && displayColumns != null) {
            if (RTDimensionElement.isRunTimeDimension((String) displayColumns.get(0))) {
                this.removeMeasureAtIndex(container, 0);
            }
        }

        return fireQuery;
    }

    public int findMeasureIndexInCT(Container container, String colName) {
        ArrayList displayColumns = container.getDisplayColumns();
        int index = displayColumns.lastIndexOf(colName);
        int measCount = container.getReportMeasureCount();//.size();
//        int viewByCount = (container.getViewByCount());
        int viewByCount = container.getReportCollect().reportRowViewbyValues.size();

        index = index - viewByCount;
        //find out which measure numberformat is to be added
        //the measure will be repeated in a Crosstab for each column (dimension)
        //user can click the measure under any of the columns
        //so we find the measure index and from the begining we add numberformat column for each of the col dimension element
        int whichMeasure = (index % measCount) + viewByCount;
        return whichMeasure;
    }

    public void addDimensionSegmentToContainer(Container container, Segment segment) {
        this.addRunTimeDimensionColumn(container, RTDimensionElement.SEGMENT.getColumnType(), segment);
        container.setSortColumn(null, (String) null);
        container.setSortColumn(segment.getDimension() + RTDimensionElement.SEGMENT.getColumnType(), "0");
        container.addDimensionSegment(segment.getDimension(), segment);
        this.updateSegmentDataInContainer(container, segment.getDimension());
    }

    public void updateSegmentDataInContainer(Container container, String dimension) {
        ProgenDataSet qryObj = container.getRetObj();
        Segment segment = container.getDimensionSegment(dimension);
        ArrayList<String> segmentNames = new ArrayList<String>();
        DimensionSegmentHelper helper = new DimensionSegmentHelper();
        DataFacade facade = new DataFacade(container);
        segmentNames = helper.makeBucketNames(facade, segment);
        qryObj.setRuntimeDimension(dimension + RTDimensionElement.SEGMENT.getColumnType(), segmentNames);
    }

    public boolean addRunTimeDimensionColumn(Container container, String colType, Segment segment) {
        ArrayList<String> originalColumns = null;
        ArrayList<String> displayColumns = null;
        ArrayList<String> displayLabels = null;
        ArrayList<String> links = null;
        ArrayList<String> prevlinks = null;
        int viewByCount = 0;

        ArrayList dataTypes = null;
        ArrayList displayTypes = null;
        HashMap ColumnsVisibility = null;
        ArrayList alignments = null;
        originalColumns = container.getOriginalColumns();

        if (RTDimensionElement.isRunTimeDimension(originalColumns.get(0)) == true) {
            return false;
        }

        if (colType == null ? RTDimensionElement.SEGMENT.getColumnType() == null : colType.equals(RTDimensionElement.SEGMENT.getColumnType())) {
            originalColumns = container.getOriginalColumns();
            displayColumns = container.getDisplayColumns();
            displayLabels = container.getDisplayLabels();
            links = container.getLinks();
            dataTypes = container.getDataTypes();
            displayTypes = container.getDisplayTypes();
            alignments = container.getAlignments();
            ColumnsVisibility = container.getColumnsVisibility();
            viewByCount = (container.getViewByCount());
            originalColumns.add(0, segment.getDimension() + RTDimensionElement.SEGMENT.getColumnType());
            displayColumns.add(0, segment.getDimension() + RTDimensionElement.SEGMENT.getColumnType());
            displayLabels.add(0, segment.getSegName());
            dataTypes.add(0, "C");
            displayTypes.add(0, "T");
            alignments.add(0, "LEFT");
            viewByCount++;
            container.setViewByCount(viewByCount);
            ColumnsVisibility.put(String.valueOf(displayColumns.get(0)), "''");
            links.add(0, "");
            container.setLinks(links);
            container.setDisplayColumns(displayColumns);
            container.setDisplayLabels(displayLabels);
            container.setColumnsVisibility(ColumnsVisibility);
            container.setDataTypes(dataTypes);
            container.setDisplayTypes(displayTypes);
            container.setAlignments(alignments);
            container.setOriginalColumns(originalColumns);
        }
        return true;
    }

    public void removeRunTimeColumn(Container container, RTMeasureElement colType) {
        ArrayList originalColumns = null;
        ArrayList displayColumns = null;
        ArrayList displayLabels = null;
        ArrayList links = null;
        ArrayList dataTypes = null;
        ArrayList displayTypes = null;
        HashMap ColumnsVisibility = null;
        ArrayList alignments = null;
        String elementId;
        ColumnsVisibility = container.getColumnsVisibility();
        originalColumns = container.getOriginalColumns();
        displayColumns = container.getDisplayColumns();
        displayLabels = container.getDisplayLabels();
        links = container.getLinks();
        dataTypes = container.getDataTypes();
        displayTypes = container.getDisplayTypes();
        alignments = container.getAlignments();
        ArrayList Measures = (ArrayList) ((ArrayList) container.getTableHashMap().get("Measures"));//.clone();
        ArrayList MeasuresNames = (ArrayList) ((ArrayList) container.getTableHashMap().get("MeasuresNames"));

        for (int i = 0; i < displayColumns.size(); i++) {
            elementId = (String) displayColumns.get(i);
            if (RTMeasureElement.isRunTimeMeasure(elementId) && RTMeasureElement.getMeasureType(elementId) == colType) {

                displayColumns.remove(i);
                displayLabels.remove(i);
                dataTypes.remove(i);
                displayTypes.remove(i);
                alignments.remove(i);
                ColumnsVisibility.remove(elementId);
                //links.remove(i);
                originalColumns.remove(elementId);
                container.setLinks(links);
                container.setDisplayColumns(displayColumns);
                container.setDisplayLabels(displayLabels);
                container.setColumnsVisibility(ColumnsVisibility);
                container.setDataTypes(dataTypes);
                container.setDisplayTypes(displayTypes);
                container.setAlignments(alignments);
                container.setOriginalColumns(originalColumns);

                HashMap<String, ArrayList<String>> colPropMap = container.getColumnProperties();
                colPropMap.remove(elementId);
                container.setColumnProperties(colPropMap);
            }
        }
        for (int j = 0; j < Measures.size(); j++) {
            if (RTMeasureElement.isRunTimeMeasure((String) Measures.get(j)) && RTMeasureElement.getMeasureType((String) Measures.get(j)) == colType) {
                Measures.remove(j);
                MeasuresNames.remove(j);
                j = 0;
            }
        }

        container.getTableHashMap().put("Measures", Measures);
        container.getTableHashMap().put("MeasuresNames", MeasuresNames);
    }

    public void removeMeasureColumn(Container container, String measEleId) {

        ArrayList displayColumns = null;
        String elementId;
        //modified by Nazneen
//        String measEleId1[] = measEleId.split("_percentwise");
        String measEleId1[] = null;
        if (measEleId.contains("_pwst")) {
            measEleId1 = measEleId.split("_pwst");
        } else {
            measEleId1 = measEleId.split("_percentwise");
        }
//end of code by Nazneen
        displayColumns = container.getDisplayColumns();
        int indexmeasEleId1 = displayColumns.indexOf(measEleId1[0]);

        displayColumns = container.getDisplayColumns();
        ArrayList Measures = (ArrayList) ((ArrayList) container.getTableHashMap().get("Measures"));//.clone();
        ArrayList MeasuresNames = (ArrayList) ((ArrayList) container.getTableHashMap().get("MeasuresNames"));
        int measIndex;
        int size = displayColumns.size();
        int viewCount = container.getViewByCount();
        if (container.isReportCrosstab()) {
            measIndex = this.findMeasureIndexInCT(container, measEleId);
            measEleId = (String) Measures.get(measIndex - viewCount);
            int measCount = container.getReportMeasureCount();//.size();
            for (int i = measIndex; i < size;) {
                this.removeMeasureAtIndex(container, i);
                i += measCount;
                i--;
                size--;
            }
        } else if (indexmeasEleId1 != -1) {
//                for (int i = 0; i < displayColumns.size(); i++) {
//                elementId = (String) displayColumns.get(i);
//                if (elementId.equals(measEleId)) {
//                  displayColumns.add(i,measEleId1[0]);
//
//                  break;
//                }
//                }
            for (int i = 0; i < displayColumns.size(); i++) {
                elementId = (String) displayColumns.get(i);

                if (elementId.equals(measEleId)) {
                    this.removeMeasureAtIndex(container, i);
                    break;
                }
            }

        } else {
            ArrayList originalColumns = null;
            ArrayList displayLabels = null;
            ArrayList links = null;
            ArrayList prevlinks = null;
            int viewByCount = 0;
            ArrayList dataTypes = null;
            ArrayList displayTypes = null;
            HashMap ColumnsVisibility = null;
            ArrayList alignments = null;
            String colTypeSuffix = null;
            RTMeasureElement typToCheck = null;
            String newColId = null;

            viewByCount = (container.getViewByCount());
            ColumnsVisibility = container.getColumnsVisibility();
            originalColumns = container.getOriginalColumns();
            displayColumns = container.getDisplayColumns();
            displayLabels = container.getDisplayLabels();
            prevlinks = container.getLinks();
            dataTypes = container.getDataTypes();
            displayTypes = container.getDisplayTypes();
            alignments = container.getAlignments();
            Measures = (ArrayList) ((ArrayList) container.getTableHashMap().get("Measures"));//.clone();
            MeasuresNames = (ArrayList) ((ArrayList) container.getTableHashMap().get("MeasuresNames"));//.clone();

            if (!container.isReportCrosstab()) {
                int index = displayColumns.lastIndexOf(measEleId);
                int startIndex;
                String displayLabel;
                if (index == -1) {
                    startIndex = displayColumns.size();

                } else {
                    startIndex = index + 1;

                }
                displayColumns.add(startIndex, measEleId1[0]);
//            if (measureName != null) {
//                displayLabel = measureName;

//            } else {
                displayLabel = displayLabels.get(index).toString();
//                    String displayLabel1[] = displayLabel.split("\\(% wise\\)");
                String displayLabel1[] = null;
                if (displayLabel.contains("%wise subtotal")) {//added by Nazneen
                    displayLabel1 = displayLabel.split("\\(%wise subtotal\\)");
                } else {
                    displayLabel1 = displayLabel.split("\\(% wise\\)");
                }

                displayLabels.add(startIndex, displayLabel1[0]);
                dataTypes.add(startIndex, "N");
                displayTypes.add(startIndex, "T");
                alignments.add(startIndex, "RIGHT");
                ColumnsVisibility.put(String.valueOf(displayColumns.get(startIndex)), "''");

                index = displayColumns.lastIndexOf(measEleId);

                measIndex = Measures.lastIndexOf(measEleId);
                int measStartIndex;
                if (measIndex == -1) {
                    measStartIndex = Measures.size();

                } else {
                    measStartIndex = measIndex + 1;

                }
                Measures.add(measStartIndex, measEleId1[0]);
//            if (measureName != null) {
//                MeasuresNames.add(measStartIndex, displayLabel);
//
//            } else {
                MeasuresNames.add(measStartIndex, displayLabel1[0]);

                container.setColumnProperties(this.resetColumnProperties(Measures, container));

            }

            links = new ArrayList();

            for (int k = 0; k < viewByCount; k++) {
                links.add(String.valueOf(prevlinks.get(k)));
            }
            for (int k = viewByCount; k < displayColumns.size(); k++) {
                links.add("");
            }

            container.setLinks(links);
            container.setDisplayColumns(displayColumns);
            container.setDisplayLabels(displayLabels);
            container.setColumnsVisibility(ColumnsVisibility);
            container.setDataTypes(dataTypes);
            container.setDisplayTypes(displayTypes);
            container.setAlignments(alignments);
            container.setOriginalColumns(originalColumns);
            for (int i = 0; i < displayColumns.size(); i++) {
                elementId = (String) displayColumns.get(i);

                if (elementId.equals(measEleId)) {
                    this.removeMeasureAtIndex(container, i);
                    break;
                }
            }

        }
        for (int j = 0; j < Measures.size(); j++) {
            if (measEleId.equals(Measures.get(j))) {
                Measures.remove(j);
                MeasuresNames.remove(j);
                j = 0;
            }
        }

        container.getTableHashMap().put("Measures", Measures);
        container.getTableHashMap().put("MeasuresNames", MeasuresNames);

    }

    private void removeMeasureAtIndex(Container container, int index) {
        ArrayList originalColumns = null;
        ArrayList displayColumns = null;
        ArrayList displayLabels = null;
        ArrayList links = null;
        ArrayList dataTypes = null;
        ArrayList displayTypes = null;
        HashMap ColumnsVisibility = null;
        ArrayList alignments = null;
        String elementId;
        ColumnsVisibility = container.getColumnsVisibility();
        originalColumns = container.getOriginalColumns();
        displayColumns = container.getDisplayColumns();
        displayLabels = container.getDisplayLabels();
        links = container.getLinks();
        dataTypes = container.getDataTypes();
        displayTypes = container.getDisplayTypes();
        alignments = container.getAlignments();

        elementId = (String) displayColumns.get(index);
        displayColumns.remove(index);
        displayLabels.remove(index);
        dataTypes.remove(index);
        displayTypes.remove(index);
        alignments.remove(index);
        ColumnsVisibility.remove(elementId);
        links.remove(index);
        originalColumns.remove(elementId);
        container.setLinks(links);
        container.setDisplayColumns(displayColumns);
        container.setDisplayLabels(displayLabels);
        container.setColumnsVisibility(ColumnsVisibility);
        container.setDataTypes(dataTypes);
        container.setDisplayTypes(displayTypes);
        container.setAlignments(alignments);
        container.setOriginalColumns(originalColumns);

        HashMap<String, ArrayList<String>> colPropMap = container.getColumnProperties();
        colPropMap.remove(elementId);
        container.setColumnProperties(colPropMap);
    }

    public String getDimSegDefinitionDialogJSON(String reportId, String measure, Container container) {
        BigDecimal maxcount = null;
        BigDecimal mincount = null;
        BigDecimal avgCount = null;
        ProgenDataSet returnObject = null;
        returnObject = container.getRetObj();
        String avgStr = "";
        String segvalue = "initialize";
        Segment seg = null;

        if (returnObject != null && returnObject.getRowCount() != 0) {
            maxcount = returnObject.getColumnMaximumValue(measure);
            mincount = returnObject.getColumnMinimumValue(measure);
            avgCount = returnObject.getColumnAverageValue(measure);
//            avgCount=avgCount.setScale(2, RoundingMode.HALF_DOWN);
        }
        StringBuilder segmentAllowed = new StringBuilder();
        segmentAllowed.append("{" + "\"SegmentAllowed\"" + ":" + "\"" + segvalue + "\"" + "," + "\"maximum\"" + ":").append(NumberFormatter.getModifidNumber(maxcount)).append("," + "\"minimum\"" + ":").append(NumberFormatter.getModifidNumber(mincount)).append("," + "\"average\"" + ":").append(NumberFormatter.getModifidNumber(avgCount));//.append(";");
        String segmentAllowedJSON = segmentAllowed.toString();
        String dimension = container.getDisplayColumns().get(0);//+RTDimensionElement.SEGMENT.getColumnType();

        if (RTDimensionElement.getDimensionType(dimension) == RTDimensionElement.SEGMENT) {

            segmentAllowedJSON = segmentAllowedJSON.replace("initialize", "updated");
            dimension = container.getDisplayColumns().get(1);
            seg = container.getDimensionSegment(dimension);
            //seg = segment.getSegment();

            segmentAllowedJSON = segmentAllowedJSON.concat(seg.getDataForJSON());

            return segmentAllowedJSON;
        } else {
            segmentAllowedJSON = segmentAllowedJSON.concat("}");
        }
        return segmentAllowedJSON;
    }

    public String getValueDimSegDefinitionDialogJSON(String reportId, Container container) {
        String dimension = container.getDisplayColumns().get(1) + RTDimensionElement.SEGMENT.getColumnType();
        String segvalue = "initialize";
        Segment segment = null;
        String SegmentAllowedJSON = "{" + "\"SegmentAllowed\"" + ":" + "\"" + segvalue + "\"";

        if (RTDimensionElement.getDimensionType(dimension) == RTDimensionElement.SEGMENT) {
            SegmentAllowedJSON = SegmentAllowedJSON.replace("initialize", "updated");
            dimension = container.getDisplayColumns().get(1);
            segment = container.getDimensionSegment(dimension);

            SegmentAllowedJSON = SegmentAllowedJSON.concat(segment.getDataForJSON());
            return SegmentAllowedJSON;

        } else {
            SegmentAllowedJSON = SegmentAllowedJSON.concat("}");

        }

        return SegmentAllowedJSON;
    }

    public void fireCrosstabReportQuery(Container container, String userId) {

//        ProgenLog.log(ProgenLog.FINE, this, "fireCrosstabReportQuery", "Entered " + System.currentTimeMillis());
        logger.info("Entered " + System.currentTimeMillis());
        PbReportCollection collect = null;
        PbReportQuery repQuery = null;
        PbReturnObject pbretObj = null;
        PbReturnObject newCrossRetObj = null;
        ArrayList originalColumns = new ArrayList();
        ArrayList displayColumns = new ArrayList();
        ArrayList displayLabels = new ArrayList();
        ArrayList dataTypes = new ArrayList();
        ArrayList displayTypes = new ArrayList();
        ArrayList links = new ArrayList();
        ArrayList alignments = new ArrayList();
        HashMap columnsVisibility = new HashMap();
        String[] dbColumns = null;
        String[] columnTypes = null;
        HashMap ParametersHashMap = null;
        HashMap TableHashMap = null;
        HashMap GraphHashMap = null;
        HashMap ReportHashMap = null;
        ArrayList reportQryElementIds = null;
        ArrayList reportQryAggregations = null;
        String reportSql = null;

        StringBuffer bizRolesSb = new StringBuffer();

        try {
            ParametersHashMap = container.getParametersHashMap();
            TableHashMap = container.getTableHashMap();
            GraphHashMap = container.getGraphHashMap();
            ReportHashMap = container.getReportHashMap();

            ParametersHashMap = (ParametersHashMap == null) ? new HashMap() : ParametersHashMap;
            TableHashMap = (TableHashMap == null) ? new HashMap() : TableHashMap;
            GraphHashMap = (GraphHashMap == null) ? new HashMap() : GraphHashMap;
            ReportHashMap = (ReportHashMap == null) ? new HashMap() : ReportHashMap;

            collect = container.getReportCollect();
            repQuery = new PbReportQuery();
            repQuery.setRowViewbyCols(container.getViewByElementIds());
            repQuery.setColViewbyCols(container.getColumnViewByElementIds());

            reportQryElementIds = (ArrayList) ReportHashMap.get("reportQryElementIds");
            reportQryAggregations = (ArrayList) ReportHashMap.get("reportQryAggregations");

            repQuery.setQryColumns(reportQryElementIds);
            repQuery.setColAggration(reportQryAggregations);
            repQuery.setParamValue(collect.reportParametersValues);
            repQuery.isTimeDrill = collect.isTimeDrill;
            repQuery.setTimeDetails(collect.timeDetailsArray);

            repQuery.isTimeSeries = container.isTimeSeries();
            repQuery.setDefaultMeasure(String.valueOf(reportQryElementIds.get(0)));
            repQuery.setDefaultMeasureSumm(String.valueOf(reportQryAggregations.get(0)));

            repQuery.setUserId(userId);
            for (int str = 0; str < collect.reportBizRoles.length; str++) {
                if (str == (collect.reportBizRoles.length - 1)) {
                    bizRolesSb.append(collect.reportBizRoles[str]);
                } else {
                    bizRolesSb.append(collect.reportBizRoles[str] + ",");
                }
            }
            repQuery.setBizRoles(bizRolesSb.toString());
            repQuery.setReportId(container.getReportId());
            boolean defSortExists = false;

            //default sorted column here is the order number of the columns in select query
            if (collect.defaultSortedColumn != null) {
                if (collect.reportRowViewbyValues.contains(collect.defaultSortedColumn)) {
                    for (int i = 0; i < collect.reportRowViewbyValues.size(); i++) {
                        if (collect.reportRowViewbyValues.get(i).toString().equalsIgnoreCase(collect.defaultSortedColumn)) {
                            collect.defaultSortedColumn = String.valueOf(i + 1);
                            defSortExists = true;
                        }
                    }
                } else if (collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() == 0) {
                    if (collect.reportQryElementIds.contains(collect.defaultSortedColumn)) {
                        defSortExists = true;
                        for (int i = 0; i < collect.reportQryElementIds.size(); i++) {
                            if (collect.reportQryElementIds.get(i).toString().equalsIgnoreCase(collect.defaultSortedColumn)) {
                                defSortExists = true;
                                collect.defaultSortedColumn = String.valueOf(i + collect.reportRowViewbyValues.size() + 1);
                            }
                        }
                    }
                }
            }

            if (defSortExists) {
                repQuery.setDefaultSortedColumn(collect.defaultSortedColumn);//need to be removed later
            }

            if (collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() != 0) {
                repQuery.setGrandTotalSubTotalDisplayPosition(container.getCrosstabGrandTotalDisplayPosition(), container.getCrosstabSubTotalDisplayPosition());
            }

            repQuery.setGrandTotalSubTotalDisplayPosition(container.getCrosstabGrandTotalDisplayPosition(), container.getCrosstabSubTotalDisplayPosition());

//            ProgenLog.log(ProgenLog.FINE, this, "prepareReport", "Call Query Layer " + System.currentTimeMillis());
            logger.info("Call Query Layer " + System.currentTimeMillis());
            pbretObj = repQuery.getPbReturnObjectWithFlag(String.valueOf(reportQryElementIds.get(0)));///, session);
            PbReturnObject retObj = (PbReturnObject) pbretObj;
            retObj.rowViewBys = repQuery.getOrgRowViewbyCols();
            retObj.ColViewBys = repQuery.getColViewbyCols();
            retObj.totalViewBys = repQuery.getRowViewbyCols().size();
            retObj.totalOrderbys = repQuery.getRowViewbyCols().size();
            retObj.rowViewCount = repQuery.getOrgRowViewbyCols().size();
            retObj.colViewCount = repQuery.getColViewbyCols().size();
            retObj.nonViewInput = repQuery.NonViewByMap;
            retObj.Qrycolumns = repQuery.getQryColumns();
            retObj.meausreOnCol = true;

            if (container.getMeasurePosition() != -1) {
                retObj.MeasurePos = container.getMeasurePosition();
            } else {
                retObj.MeasurePos = repQuery.getColViewbyCols().size();
                container.setMeasurePosition(retObj.MeasurePos);
            }
//            retObj.set
//            retObj.MeasurePos = repQuery.getColViewbyCols().size();
            retObj.gtType = container.getCrosstabGrandTotalDisplayPosition();
            retObj.subGtType = container.getCrosstabSubTotalDisplayPosition();
            if (retObj.gtType.equalsIgnoreCase("NONE") || retObj.gtType.equalsIgnoreCase("") || retObj.gtType == null) {
                retObj.isGTNone = true;
            }
            if (retObj.subGtType.equalsIgnoreCase("NONE") || retObj.subGtType.equalsIgnoreCase("") || retObj.subGtType == null) {
                retObj.isSTNone = true;
            }

            newCrossRetObj = retObj.transposeReturnObject();
            container.setRetObj(newCrossRetObj);
            container.getRetObj().resetViewSequence();

            reportSql = repQuery.getGeneratedQuery();
//            ProgenLog.log(ProgenLog.FINE, this, "prepareReport", "Query Fired " + System.currentTimeMillis());
            logger.info("Query Fired " + System.currentTimeMillis());
            // // ////.println("session.getAttribute(sqlStr) is : "+session.getAttribute("sqlStr"));

//            container.setRetObj(pbretObj);
//            dbColumns = pbretObj.getColumnNames();
//            columnTypes = pbretObj.getColumnTypes();
            container.setSqlStr(reportSql);
            dbColumns = newCrossRetObj.getColumnNames();
            //       
            columnTypes = newCrossRetObj.getColumnTypes();

            int viewByCount = collect.reportRowViewbyValues.size();
            int size = 0;
            //modified by Bhargavi
            size = newCrossRetObj.nonViewByMapNew.size() + viewByCount;
//            if (retObj.gtType.equalsIgnoreCase("None")) {
//                size = newCrossRetObj.nonViewByMapNew.size() + viewByCount;
//            } else {
//                size = newCrossRetObj.nonViewByMapNew.size() - viewByCount;
//            }
            for (int colNum = 0; colNum < size; colNum++) {
                originalColumns.add(dbColumns[colNum]);
//                displayColumns.add(dbColumns[colNum]);
                if (colNum <= (viewByCount - 1)) {
                    displayLabels.add(collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(colNum))));
                    displayColumns.add(dbColumns[colNum]);
                } else {
//                    displayLabels.add(repQuery.crossTabNonViewByMap.get(String.valueOf(originalColumns.get(colNum))));
                    displayLabels.add(newCrossRetObj.nonViewByMapNew.get(String.valueOf(newCrossRetObj.CrossTabfinalOrder.get(colNum - viewByCount))));
                    displayColumns.add(newCrossRetObj.CrossTabfinalOrder.get(colNum - viewByCount));
                }
                if (columnTypes[colNum].equalsIgnoreCase("VARCHAR2")) {
                    dataTypes.add("C");
                    alignments.add("LEFT");
                } else if (columnTypes[colNum].equalsIgnoreCase("NUMBER")
                        || columnTypes[colNum].equalsIgnoreCase("NUMERIC")
                        || columnTypes[colNum].equalsIgnoreCase("FLOAT")
                        || columnTypes[colNum].equalsIgnoreCase("DOUBLE")
                        || columnTypes[colNum].equalsIgnoreCase("DECIMAL")
                        || columnTypes[colNum].equalsIgnoreCase("BIGINT")
                        || columnTypes[colNum].equalsIgnoreCase("INTEGER")
                        || columnTypes[colNum].equalsIgnoreCase("INT")) {
                    dataTypes.add("N");
                    alignments.add("RIGHT");
                } else if (columnTypes[colNum].equalsIgnoreCase("CALCULATED")) {
                    dataTypes.add("N");
                    alignments.add("RIGHT");
                } else if (columnTypes[colNum].equalsIgnoreCase("SUMMARISED")) {
                    dataTypes.add("N");
                    alignments.add("RIGHT");
                } else if (columnTypes[colNum].equalsIgnoreCase("DATE") || columnTypes[colNum].equalsIgnoreCase("datetime")) {
                    dataTypes.add("D");
                    alignments.add("RIGHT");
                } else {
                    dataTypes.add("C");
                    alignments.add("LEFT");
                }
                if (colNum == 0) {
                    displayTypes.add(((String) container.getDisplayTypes().get(0)));
                    links.add(container.getLinks().get(0));
                } else {
                    displayTypes.add("T");
                    links.add(" ");
                }
            }

            columnsVisibility = container.getColumnsVisibility();
            for (int i = 0; i < displayColumns.size(); i++) {
                if (columnsVisibility.get(String.valueOf(displayColumns.get(i))) == null) {
                    columnsVisibility.put(String.valueOf(displayColumns.get(i)), "''");
                }
            }
            container.setColumnsVisibility(columnsVisibility);
            container.setOriginalColumns(originalColumns);
            container.setDisplayColumns(displayColumns);
            container.setDisplayLabels(displayLabels);
            container.setDataTypes(dataTypes);
            container.setDisplayTypes(displayTypes);
            container.setLinks(links);
            container.setAlignments(alignments);
            container.setReportCollect(collect);
//            container.setCrosstabColumnSpan(repQuery.getCrosstabColumnSpan());
            container.setCrosstabColumnSpan(newCrossRetObj.colSpanMap);

        } catch (Exception exp) {

            logger.error("Exception:", exp);
        }
    }

    public void initializeFontColorForMeasures(Container container) {
        ArrayList<String> measuresList = container.getTableDisplayMeasures();
        for (String measure : measuresList) {
            if (RTMeasureElement.getMeasureType(measure) == RTMeasureElement.WHATIF) {
                if (!container.isFontColorSetForMeasure(measure)) {
                    ColorHelper colorhelper = new ColorHelper();
                    colorhelper.setDependentMeasure(RTMeasureElement.getOriginalColumn(measure));
                    colorhelper.setEvaluationMethod("WHATIF");
                    container.setFontColorMap(measure, colorhelper);
                }
            }
        }

    }

    private void initializeSignsForMeasures(Container container) {
        ArrayList<String> measuresList = container.getTableDisplayMeasures();
        //added by anitha
        if(container.getAOId()!=null && !container.getAOId().equalsIgnoreCase("")){

        }else{
        container.resetSignsForMeasure();
        }
        
        UserLayerDAO userLayerDAO = new UserLayerDAO();

        for (String measure : measuresList) {
            ColorHelper colorHelper = new ColorHelper();
            //added by anitha
            if(container.getAOId()!=null&&!container.getAOId().equalsIgnoreCase("")){
            ColorHelper colorHelperOld = new ColorHelper();
            colorHelperOld = container.getSignForMeasure(measure);
            if(colorHelperOld!=null){
            String dependentelementid = colorHelperOld.getDependentMeasure();
            if(RTMeasureElement.isRunTimeMeasure(dependentelementid)){
                colorHelper = colorHelperOld;
            }else{
               
            }
            }else{
               String dependentelementid = container.getrtMeasureCompareWith(measure);
               if(dependentelementid!=null && !dependentelementid.equalsIgnoreCase("")&& !dependentelementid.equalsIgnoreCase("reset")){
               container.setMeasureType(measure,"Standard");
               ColorHelper signHelper = new ColorHelper();
                    signHelper.setDependentMeasure(dependentelementid);
                    signHelper.setEvaluationMethod("RTCompare");
                    container.setSignForMeasure(measure, signHelper);
               }
            }
            }else{
               
            }
            if (!RTMeasureElement.isRunTimeMeasure(measure)) {
                String elementId = measure.replace("A_", "");
                HashMap<String, String> priorChangMeas = userLayerDAO.getPriorAndChangeMeasures(elementId);
                if (!priorChangMeas.isEmpty()) {
                    if (priorChangMeas.get("Prior") != null) {
                        if (measuresList.contains("A_" + priorChangMeas.get("Prior"))) {
                            colorHelper.setDependentMeasure("A_" + priorChangMeas.get("Prior"));
                            colorHelper.setEvaluationMethod("Prior");
                            container.setSignForMeasure(measure, colorHelper);
                        }
                    } else if (priorChangMeas.get("Change") != null) {
                        if (measuresList.contains("A_" + priorChangMeas.get("Change"))) {
                            colorHelper.setDependentMeasure("A_" + priorChangMeas.get("Change"));
                            colorHelper.setEvaluationMethod("Change");
                            container.setSignForMeasure(measure, colorHelper);
                        }
                    } else if (priorChangMeas.get("Change%") != null) {
                        if (measuresList.contains("A_" + priorChangMeas.get("Change%"))) {
                            colorHelper.setDependentMeasure("A_" + priorChangMeas.get("Change%"));
                            colorHelper.setEvaluationMethod("Change%");
                            container.setSignForMeasure(measure, colorHelper);
                        }
                    }
                }

            } else //for rank only we have signs now
            {
                if (RTMeasureElement.getMeasureType(measure) == RTMeasureElement.RANK) {

                    String originalMes = RTMeasureElement.getOriginalColumn(measure);
                    if (!RTMeasureElement.isRunTimeMeasure(originalMes)) {
                        String priorCol = userLayerDAO.getPriorMeasure(originalMes.replace("A_", ""));
                        if (priorCol == null ? "" != null : !priorCol.equals("")) {
                            if (measuresList.contains("A_" + priorCol) && measuresList.contains("A_" + priorCol + RTMeasureElement.RANK.getColumnType())) {
                                ColorHelper signHelper = new ColorHelper();
                                signHelper.setDependentMeasure("A_" + priorCol + RTMeasureElement.RANK.getColumnType());
                                signHelper.setEvaluationMethod("RANK_PRIOR");
                                container.setSignForMeasure(measure, signHelper);
                            }
                        }
                    }
                }
            }
        }
    }

    private void updateSortSearchColumnsBasedOnDisplayColumns(Container container) {
        ArrayList<String> displayColumns = container.getDisplayColumns();
        ArrayList<String> sortColumns = container.getSortColumns();

        Iterator colsToRemove = Iterables.filter(sortColumns, and(in(sortColumns), not(in(displayColumns)))).iterator();

        if (colsToRemove.hasNext()) {
            container.setSortColumn((String) null, (String) null);
            container.resetTopBottom();
        }

        ArrayList<String> searchColumns = container.getSearchColumns();

        colsToRemove = Iterables.filter(searchColumns, and(in(searchColumns), not(in(displayColumns)))).iterator();
        if (colsToRemove.hasNext()) {
            container.setSearchColumn(null, null, null, null);
        }
    }

    public boolean filterDuplicatesOnlyForDimension(Container container, String dimId) {
        ProgenDataSet retObj = container.getRetObj();

        ArrayList<Integer> filterSequence = retObj.filterDuplicateRecords(dimId);

        if (filterSequence.size() == retObj.getRowCount()) {
            return false;
        } else {
            retObj.setViewSequence(filterSequence);
            return true;
        }

    }

    public Container prepareReport(PbReportCollection collect, String reportId, String userId) {

//        ProgenLog.log(ProgenLog.FINE, this, "prepareReport", "Entered " + System.currentTimeMillis());
        logger.info("Entered " + System.currentTimeMillis());
        HashMap map = null;
        Container container = null;
        PbReportQuery reportQuery = null;
        QueryExecutor qryExec = new QueryExecutor();
        PbReturnObject pbretObj = null;

        ArrayList originalColumns = new ArrayList();
        ArrayList displayColumns = new ArrayList();
        ArrayList displayLabels = new ArrayList();
        ArrayList dataTypes = new ArrayList();
        ArrayList displayTypes = new ArrayList();
        ArrayList links = new ArrayList();
        ArrayList alignments = new ArrayList();
        HashMap columnsVisibility = new HashMap();
        String dataType = "";
        String[] dbColumns = null;
        String[] columnTypes = null;
        HashMap ParametersHashMap = null;
        HashMap TableHashMap = null;
        HashMap ReportHashMap = null;
        ArrayList REP = null;
        ArrayList REPNames = null;
        ArrayList CEPNames = null;
        ArrayList Measures = null;
        ArrayList MeasuresNames = null;
        ArrayList Parameters = null;
        ArrayList ParametersNames = null;
        ArrayList ReportTimeParams = null;
        ArrayList ReportTimeParamsNames = null;
        String[] ParameterStr = null;
        String[] TimeParametersStr = null;
        HashMap DisplayNamesMap = null;
        ArrayList reportQryElementIds = null;
        ArrayList reportQryAggregations = null;
        ArrayList reportQryColNames = null;

        StringBuffer bizRolesSb = new StringBuffer();

        HashMap TableProperties = null;

        try {
            container = new Container();
            container.setReportCollect(collect);
            container.setTableId(reportId);
            container.setReportId(reportId);
            container.setViewByChanged(false);

            ParametersHashMap = new HashMap();
            TableHashMap = new HashMap();
            ReportHashMap = (ReportHashMap == null) ? new HashMap() : ReportHashMap;

            reportQryElementIds = collect.reportQryElementIds;
            reportQryAggregations = collect.reportQryAggregations;
            reportQryColNames = collect.reportQryColNames;

            container.setTableMeasure(reportQryElementIds);
            container.setTableMeasureNames(reportQryColNames);

            ReportHashMap.put("reportQryElementIds", reportQryElementIds);
            ReportHashMap.put("reportQryAggregations", reportQryAggregations);
            ReportHashMap.put("reportQryColNames", reportQryColNames);

            if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("year")) {
                    container.setTimeLevel("YEAR");
                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Qtr")) {
                    container.setTimeLevel("QUARTER");
                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Month")) {
                    container.setTimeLevel("MONTH");
                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Week")) {
                    container.setTimeLevel("WEEK");
                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Day")) {
                    container.setTimeLevel("DAY");
                }
            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_DATE_RANGE")) {
                container.setTimeLevel("MONTH");
            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_MONTH_RANGE")) {
                container.setTimeLevel("QUARTER");
            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_QTR_RANGE")) {
                container.setTimeLevel("YEAR");
            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_YEAR_RANGE")) {
                container.setTimeLevel("YEAR");
            }

            container.setViewByColNames(collect.reportRowViewbyValues);
            container.setViewByElementIds(collect.reportRowViewbyValues);
            container.setTimeDetailsArray(collect.timeDetailsArray);
            container.setTimeSeries(false);

            container.setGrandTotalReq(collect.showTableTotals);
            container.setNetTotalReq(collect.showTableSubTotals);
            container.setAvgTotalReq(collect.showTableAvg);
            container.setOverAllMaxValueReq(collect.showTableMax);
            container.setOverAllMinValueReq(collect.showTableMin);
            container.setCatMaxValueReq(collect.showTableCatMax);
            container.setCatMinValueReq(collect.showTableCatMin);
            container.setTableSymbols(collect.tableSymbols);
            container.setColumnProperties(collect.columnProperties);
            container.setDefaultSortedColumn(collect.defaultSortedColumn);
            container.setPagesPerSlide(collect.tableDisplayRows);
            container.setSearchReq(collect.showAdvSearch);
            container.setMeasDrill(collect.drillMeasure);
            container.setCatAvgTotalReq(collect.showTableCatAvg);

            if (collect.tablePropertiesXML != null) {
                ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.updateTablePropertiesInContainer(container, collect.tablePropertiesXML);
            }

            if (collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() != 0) {
                String[] totalDisplayPositions = ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.getCrosstabTotalsDisplayProperty(collect.tablePropertiesXML);
                if (totalDisplayPositions.length > 0) {
                    container.setCrosstabGrandTotalDisplayPosition(totalDisplayPositions[0]);
                    container.setCrosstabSubTotalDisplayPosition(totalDisplayPositions[1]);
                }
                collect.crosstabGTDisplayPos = container.getCrosstabGrandTotalDisplayPosition();
                collect.crosstabSTDisplayPos = container.getCrosstabGrandTotalDisplayPosition();
            }

            reportQuery = qryExec.formulateQuery(collect, userId);
            String query = reportQuery.generateViewByQry();
            //  pbretObj = ReportCacheManager.MANAGER.retrieveReportQry(reportId, query);
            PbReturnObject newCrossRetObj = null;

            if (pbretObj == null || pbretObj.getRowCount() == 0) {
//                ProgenLog.log(ProgenLog.FINE, this, "prepareReport", "Going to Fire Query " + System.currentTimeMillis());
                logger.info("Going to Fire Query " + System.currentTimeMillis());
                pbretObj = qryExec.executeQuery(collect, query);
                if (collect.reportColViewbyValues != null && !collect.reportColViewbyValues.isEmpty()) {
                    PbReturnObject retObj = (PbReturnObject) pbretObj;
                    if (collect.getCrosstabelements(collect.reportColViewbyValues.get(0)) != null) {
                        retObj.setCrosstabelements(collect.getCrosstabelements(collect.reportColViewbyValues.get(0)), collect.reportColViewbyValues.get(0));
                    }
                    retObj.rowViewBys = reportQuery.getOrgRowViewbyCols();
                    retObj.ColViewBys = reportQuery.getColViewbyCols();
                    retObj.totalViewBys = reportQuery.getRowViewbyCols().size();
                    retObj.totalOrderbys = reportQuery.getRowViewbyCols().size();
                    retObj.rowViewCount = reportQuery.getOrgRowViewbyCols().size();
                    retObj.colViewCount = reportQuery.getColViewbyCols().size();
                    retObj.nonViewInput = reportQuery.NonViewByMap;
                    retObj.Qrycolumns = reportQuery.getQryColumns();
                    retObj.meausreOnCol = true;
                    if (container.getMeasurePosition() != -1) {
                        retObj.MeasurePos = container.getMeasurePosition();
                    } else {
                        retObj.MeasurePos = reportQuery.getColViewbyCols().size();
                        container.setMeasurePosition(retObj.MeasurePos);
                    }

                    retObj.gtType = collect.crosstabGTDisplayPos;
                    retObj.subGtType = collect.crosstabSTDisplayPos;
                    if (retObj.gtType.equalsIgnoreCase("NONE") || retObj.gtType.equalsIgnoreCase("") || retObj.gtType == null) {
                        retObj.isGTNone = true;
                    }
                    if (retObj.subGtType.equalsIgnoreCase("NONE") || retObj.subGtType.equalsIgnoreCase("") || retObj.subGtType == null) {
                        retObj.isSTNone = true;
                    }
                    //repQuery.setGrandTotalSubTotalDisplayPosition(collect.crosstabGTDisplayPos, collect.crosstabSTDisplayPos);
                    newCrossRetObj = retObj.transposeReturnObject();

                    //container.setRetObj(newCrossRetObj);
                    //container.setCrosstabColumnSpan(newCrossRetObj.colSpanMap);
                    boolean ismeasurePos = container.setMeasurePosition(reportQuery.getColViewbyCols().size());
                    dbColumns = newCrossRetObj.getColumnNames();
                    columnTypes = newCrossRetObj.getColumnTypes();
                    pbretObj = newCrossRetObj;

                }
                ReportCacheManager.MANAGER.storeReportQry(reportId, query, pbretObj);
//                ProgenLog.log(ProgenLog.FINE, this, "prepareReport", "Query Fired " + System.currentTimeMillis());
                logger.info("Query Fired " + System.currentTimeMillis());
            }

            // // ////.println("session.getAttribute(sqlStr) is : "+session.getAttribute("sqlStr"));
            container.setRetObj(pbretObj);
            container.setSqlStr(query);
            container.setNoOfDays(reportQuery.getNoOfDays());
            dbColumns = pbretObj.getColumnNames();
            columnTypes = pbretObj.getColumnTypes();

            container.setReportMode("view");
            if ("".equals(collect.tableDisplayRows) || "All".equalsIgnoreCase(collect.tableDisplayRows)) {
                container.setPagesPerSlide(((Integer) pbretObj.getRowCount()).toString());
            } else if (Integer.parseInt(collect.tableDisplayRows) > pbretObj.getRowCount()) {
                container.setPagesPerSlide(((Integer) pbretObj.getRowCount()).toString());
            }

            if (collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() != 0) {
                container.setColumnViewByCount(String.valueOf(collect.reportColViewbyValues.size()));
                container.setColumnViewByName(collect.getElementName(String.valueOf(collect.reportColViewbyValues.get(0))));
                container.setColumnViewByElementIds(collect.reportColViewbyValues);
            } else {
                container.setColumnViewByCount("0");
            }

            if ((collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() != 0)) {
                //for cross tab report
                int viewByCount = collect.reportRowViewbyValues.size();
                if (CEPNames == null) {
                    CEPNames = new ArrayList();
                }
//                    for (int colNum = 0; colNum < dbColumns.length-1; colNum++)
//                    {
//                        originalColumns.add(dbColumns[colNum]);
//
//                        if (colNum <= (viewByCount - 1)) {
//                            displayLabels.add(collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(colNum))));
//                             displayColumns.add(dbColumns[colNum]);
//                        } else {
//                            displayLabels.add(newCrossRetObj.nonViewByMapNew.get(String.valueOf(newCrossRetObj.CrossTabfinalOrder.get(colNum-viewByCount))));
//                            displayColumns.add(newCrossRetObj.CrossTabfinalOrder.get(colNum-viewByCount));
//                        }
                int count = 0;
                for (int colNum = 0; colNum < dbColumns.length; colNum++) {
                    if (dbColumns[colNum].equalsIgnoreCase("A1")) {
                        for (int j = colNum; j < dbColumns.length; j++) {
                            count = count + 1;
                        }
                        break;
                    }

                }
                if (collect.getFinalcrosstaborder() != null && !collect.getFinalcrosstaborder().isEmpty()) {
                    Object obj = collect.getFinalcrosstaborder().get(0);
                    String objstr = obj.toString();
                    ArrayList finalcrosstaborder = new ArrayList(Arrays.asList(objstr.split(",")));
                    LinkedHashMap<String, ArrayList> nonviewbyhashmapcreated = new LinkedHashMap<String, ArrayList>();
                    String[] columnTypesmodified = new String[finalcrosstaborder.size()];
//                                nonviewbyhashmapcreated.put(, Measures)
                    for (int i = 0; i < finalcrosstaborder.size(); i++) {
                        nonviewbyhashmapcreated.put(finalcrosstaborder.get(i).toString(), (ArrayList) newCrossRetObj.nonViewByMapNew.get(finalcrosstaborder.get(i).toString()));

                    }
                    newCrossRetObj.CrossTabfinalOrder = finalcrosstaborder;
                    newCrossRetObj.nonViewByMapNew = nonviewbyhashmapcreated;
                }
                for (int colNum = 0; colNum < count; colNum++) {
                    originalColumns.add(dbColumns[colNum]);
//                        displayColumns.add(dbColumns[colNum]);
                    if (colNum <= (viewByCount - 1)) {
                        displayLabels.add(collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(colNum))));
                        displayColumns.add(dbColumns[colNum]);
                    } else {//order need to changes here
//                          displayLabels.add(reportQuery.crossTabNonViewByMap.get(String.valueOf(originalColumns.get(colNum))));
//                          displayLabels.add(newCrossRetObj.nonViewByMapNew.get(String.valueOf(originalColumns.get(colNum))));
                        displayLabels.add(newCrossRetObj.nonViewByMapNew.get(String.valueOf(newCrossRetObj.CrossTabfinalOrder.get(colNum - viewByCount))));
                        displayColumns.add(newCrossRetObj.CrossTabfinalOrder.get(colNum - viewByCount));
//                          // Code has been changed here for column order
//                            if (String.valueOf(displayLabels.get(colNum)).toUpperCase().contains("CHANGE")) {
////                                signs.add(String.valueOf(displayLabels.get(colNum)));
//                            }
                    }
                    if (columnTypes[colNum].equalsIgnoreCase("VARCHAR2")) {
                        dataTypes.add("C");
                        alignments.add("LEFT");
                    } else if (columnTypes[colNum].equalsIgnoreCase("NUMBER")
                            || columnTypes[colNum].equalsIgnoreCase("NUMERIC")
                            || columnTypes[colNum].equalsIgnoreCase("FLOAT")
                            || columnTypes[colNum].equalsIgnoreCase("DOUBLE")
                            || columnTypes[colNum].equalsIgnoreCase("DECIMAL")
                            || columnTypes[colNum].equalsIgnoreCase("BIGINT")
                            || columnTypes[colNum].equalsIgnoreCase("INTEGER")
                            || columnTypes[colNum].equalsIgnoreCase("INT")) {
                        dataTypes.add("N");
                        alignments.add("RIGHT");
                    } else if (columnTypes[colNum].equalsIgnoreCase("CALCULATED")) {
                        dataTypes.add("N");
                        alignments.add("RIGHT");
                    } else if (columnTypes[colNum].equalsIgnoreCase("SUMMARISED")) {
                        dataTypes.add("N");
                        alignments.add("RIGHT");
                    } else if (columnTypes[colNum].equalsIgnoreCase("DATE") || columnTypes[colNum].equalsIgnoreCase("datetime")) {
                        dataTypes.add("D");
                        alignments.add("RIGHT");
                    } else {
                        dataTypes.add("C");
                        alignments.add("LEFT");
                    }
                    if (colNum == 0) {
                        displayTypes.add("H");
                    } else {
                        displayTypes.add("T");
                    }
                }
                links = collect.getRowViewDrillUrl(userId);

                for (int colviewByIndex = 0; colviewByIndex < collect.reportColViewbyValues.size(); colviewByIndex++) {
                    if (CEPNames == null) {
                        CEPNames = new ArrayList();
                    }
                    CEPNames.add(collect.getElementName(String.valueOf(collect.reportColViewbyValues.get(colviewByIndex))));
                }

                //end of code to get CEP Names
                columnsVisibility = container.getColumnsVisibility();
                if (columnsVisibility == null || columnsVisibility.size() == 0) {
                    for (int i = 0; i < displayColumns.size(); i++) {
                        columnsVisibility.put(String.valueOf(displayColumns.get(i)), "''");
                    }
                }
//                    if (columnsVisibility.size() != displayColumns.size()) {
                for (int i = 0; i < displayColumns.size(); i++) {
                    if (columnsVisibility.get(String.valueOf(displayColumns.get(i))) == null) {
                        columnsVisibility.put(String.valueOf(displayColumns.get(i)), "''");
                    }
                }
//                    }
                REP = collect.reportRowViewbyValues;//actuall viewbys getting from collection object
                REPNames = collect.reportRowViewbyValues;

                ArrayList viewByColumnsAlist = new ArrayList();
                ArrayList viewByElementdIdAlist = new ArrayList();
                for (int i = 0; i < viewByCount; i++) {
                    viewByColumnsAlist.add(String.valueOf(displayLabels.get(i)));
                    if (String.valueOf(displayColumns.get(i)).equalsIgnoreCase("TIME")) {
                        viewByElementdIdAlist.add(String.valueOf(displayColumns.get(i)));

                    } else {
                        viewByElementdIdAlist.add(String.valueOf(displayColumns.get(i)).substring(2));

                    }
                }
                container.setViewByColNames(viewByColumnsAlist);
                container.setViewByElementIds(viewByElementdIdAlist);
                REP = collect.reportRowViewbyValues;
                REPNames = collect.reportRowViewbyValues;
                container.setViewByCount((viewByCount));
                //container.setCrosstabColumnSpan(reportQuery.getCrosstabColumnSpan());
                container.setCrosstabColumnSpan(pbretObj.colSpanMap);
            } else {

                int viewByCount = collect.reportRowViewbyValues.size();
                //for change by view we will always reset view by count
                container.setViewByCount((collect.reportRowViewbyValues.size()));

                originalColumns = new ArrayList();
                for (int i = 0; i < collect.reportRowViewbyValues.size(); i++) {
                    originalColumns.add("A_" + String.valueOf(collect.reportRowViewbyValues.get(i)));
                }

                for (String tableElement : collect.tableElementIds) {
                    if (!originalColumns.contains(tableElement)) {
                        originalColumns.add(tableElement);
                    }
                }

                displayColumns = collect.tableElementIds;
                dataTypes = collect.tableColTypes;
                displayTypes = collect.tableColDispTypes;
                //links = collect.getRowViewDrillUrl(userId);
                links = new ArrayList<String>();
                links.add("");

                displayLabels = collect.tableColNames;

                ArrayList viewByColumnsAlist = new ArrayList();
                ArrayList viewByElementdIdAlist = new ArrayList();
                for (int i = 0; i < viewByCount; i++) {
                    if (String.valueOf(displayColumns.get(i)).equalsIgnoreCase("TIME")) {
                        viewByElementdIdAlist.add(String.valueOf(displayColumns.get(i)));
                    } else {
                        viewByElementdIdAlist.add(String.valueOf(displayColumns.get(i)).substring(2));
                    }
                    viewByColumnsAlist.add(String.valueOf(displayLabels.get(i)));
                }
                container.setViewByColNames(viewByColumnsAlist);
                container.setViewByElementIds(viewByElementdIdAlist);
                REP = viewByElementdIdAlist;
                REPNames = viewByColumnsAlist;
            }

            for (int i = 0; i < dataTypes.size(); i++) {
                dataType = String.valueOf(dataTypes.get(i));
                if ("C".equals(dataType)) {
                    alignments.add("LEFT");
                } else if ("D".equals(dataType)) {
                    alignments.add("CENTER");
                } else if ("N".equals(dataType)) {
                    alignments.add("RIGHT");
                } else if ("CBX".equals(dataType)) {
                    alignments.add("CENTER");
                }
            }

            container.setColumnsVisibility(columnsVisibility);
            container.setSearchReq(true);
            container.setCurrentPage(1);
            container.setOriginalColumns(originalColumns);
            container.setDisplayColumns(displayColumns);
            container.setDisplayLabels(displayLabels);

            container.setDataTypes(dataTypes);
            container.setDisplayTypes(displayTypes);
            container.setLinks(links);
            container.setSelected(new ArrayList());
//                container.setSigns(signs);
            container.setAlignments(alignments);
            container.setReportCollect(collect);
            container.setReportName(collect.reportName);
            container.setReportDesc(collect.reportDesc);

            //code to refresh progen tables
            container.setSortRetObj(null);
//                container.setPagesPerSlide("All");
            container.getRetObj().resetViewSequence();

            ParameterStr = (String[]) (collect.reportParameters.keySet()).toArray(new String[0]);
            TimeParametersStr = (String[]) (collect.timeDetailsMap.keySet()).toArray(new String[0]);

            for (int paramIndex = 0; paramIndex < ParameterStr.length; paramIndex++) {
                ArrayList alist = (ArrayList) collect.reportParameters.get(ParameterStr[paramIndex]);
                if (Parameters == null) {
                    Parameters = new ArrayList();
                    ParametersNames = new ArrayList();
                }
                Parameters.add(ParameterStr[paramIndex]);
                ParametersNames.add(String.valueOf(alist.get(1)));
                alist = null;

            }
            for (int timeIndex = 0; timeIndex < TimeParametersStr.length; timeIndex++) {
                ArrayList alist = (ArrayList) collect.timeDetailsMap.get(TimeParametersStr[timeIndex]);
                if (ReportTimeParams == null) {
                    ReportTimeParams = new ArrayList();
                    ReportTimeParamsNames = new ArrayList();
                }
                ReportTimeParams.add(TimeParametersStr[timeIndex]);
                ReportTimeParamsNames.add(String.valueOf(alist.get(2)));
                alist = null;
            }
            for (int msrIndex = (container.getViewByCount()); msrIndex < collect.tableElementIds.size(); msrIndex++) {
                if (Measures == null) {
                    Measures = new ArrayList();
                    MeasuresNames = new ArrayList();
                }
                Measures.add(String.valueOf(collect.tableElementIds.get(msrIndex)));
                MeasuresNames.add(String.valueOf(collect.tableColNames.get(msrIndex)));
            }
//                ReportHashMap.put("ReportName", collect.reportName);
//                ReportHashMap.put("ReportDesc", collect.reportDesc);
            ReportHashMap.put("ReportFolders", collect.reportBizRoles);

            ArrayList alist = new ArrayList();
            for (String str : collect.reportBizRoles) {
                alist.add(str);
            }
            ParametersHashMap.put("UserFolderIds", alist.toString().replace("[", "").replace("]", ""));
            if (collect.reportColViewbyValues == null || collect.reportColViewbyValues.size() == 0) {
                if (ReportHashMap.get("DisplayNamesMap") != null) {
                    DisplayNamesMap = (HashMap) ReportHashMap.get("DisplayNamesMap");
                } else {
                    DisplayNamesMap = new HashMap();
                }
                DisplayNamesMap = reportQuery.NonViewByMap;
                ReportHashMap.put("DisplayNamesMap", DisplayNamesMap);
            }
            ParametersHashMap.put("Parameters", Parameters);
            ParametersHashMap.put("ParametersNames", ParametersNames);
            ParametersHashMap.put("TimeParameters", ReportTimeParams);
            ParametersHashMap.put("TimeParametersNames", ReportTimeParamsNames);
            if (getIsSnapShot()) {
            } else {
                ParametersHashMap.put("TimeDimHashMap", collect.timeDetailsMap);
                ParametersHashMap.put("TimeDetailstList", collect.timeDetailsArray);
            }

            TableHashMap.put("REP", REP);
            TableHashMap.put("REPNames", REPNames);
            TableHashMap.put("CEP", collect.reportColViewbyValues);
            TableHashMap.put("CEPNames", CEPNames);
            //setting measure only in case of open event
            //measures can be changed by hide/show measures and that time its set independently in ReportViewerAction.tableMeasureChanges
            if (container.isReportCrosstab()) {
                if (collect.getNumberFormat() != null) {
                    Set nfKeys = collect.getNumberFormat().keySet();
                    HashMap NFMap = collect.getNumberFormat();
                    HashMap NFMapCT = new HashMap();
                    Iterator nfKeysIter = nfKeys.iterator();
                    int whichMeasure;
                    while (nfKeysIter.hasNext()) {
                        String measElement = (String) nfKeysIter.next();
                        String nbrSymbol = (String) NFMap.get(measElement);
                        if (nbrSymbol != null && !nbrSymbol.equals("")) {
                            whichMeasure = Measures.lastIndexOf(measElement);
                            whichMeasure += (container.getViewByCount());
                            int size = displayColumns.size();
                            String colName;
                            for (int i = whichMeasure; i < size;) {
                                colName = (String) displayColumns.get(i);
                                NFMapCT.put(colName, nbrSymbol);
                                i += Measures.size();
                            }
                            NFMapCT.put(measElement, nbrSymbol);
                        }
                    }
                    TableHashMap.put("NFMap", NFMapCT);
                }

            } else {

                if (collect.getNumberFormat() != null) {
                    TableHashMap.put("NFMap", collect.getNumberFormat());
                }
                if (collect.getRoundingPrecision() != null) {
                    Set RndPrcsnKeys = collect.getRoundingPrecision().keySet();
                    HashMap<String, Integer> RndPrcsnMap = collect.getRoundingPrecision();
                    Iterator precisionItr = RndPrcsnKeys.iterator();
                    while (precisionItr.hasNext()) {
                        String measElement = (String) precisionItr.next();
                        int Precision = RndPrcsnMap.get(measElement);
                        container.setRoundPrecisionForMeasure(measElement, Precision);
                    }

                }

            }

            TableHashMap.put("Measures", Measures);
            TableHashMap.put("MeasuresNames", MeasuresNames);

            container.setReportHashMap(ReportHashMap);
            container.setParametersHashMap(ParametersHashMap);
            container.setTableHashMap(TableHashMap);
            TableHashMap.put("TableProperties", TableProperties);
            if (!isonespeedreduce) {
                container.setColumnDrillLinks(collect.getColumnViewDrillUrl(userId));
            }
            if (collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() > 0) {
                container.setReportCrosstab(true);
            } else {
                container.setReportCrosstab(false);
            }
            if (container.isReportCrosstab()) {
                if (container.isReportCrosstab()) {
                    if (collect.getRoundingPrecision() != null) {
                        int whichMeasure;
                        Set RndPrcsnKeys = collect.getRoundingPrecision().keySet();
                        HashMap<String, Integer> RndPrcsnMap = collect.getRoundingPrecision();
                        Iterator precisionItr = RndPrcsnKeys.iterator();
                        while (precisionItr.hasNext()) {
                            String measElement = (String) precisionItr.next();
                            int Precision = RndPrcsnMap.get(measElement);
                            container.setRoundPrecisionForMeasure(measElement, Precision);

                        }

                    }
                }
            }

            ReportParameter repParam = container.getReportParameter();
            if (repParam == null) {
                repParam = new ReportParameter();
            }
            repParam.setReportParameters(collect.reportParametersValues);
            ArrayList<String> colViewBys = new ArrayList<String>();
            if (container.isReportCrosstab()) {
                colViewBys = container.getColumnViewByElementIds();
            }
            ArrayList rowViewBys = container.getViewByElementIds();
            repParam.setViewBys(rowViewBys, colViewBys);
            repParam.notifyObserversOfUpdate(container.getNoOfDays());
            container.setReportParameter(repParam);

            //from search page reportId is invalid and it will be a String
            try {
                Integer.parseInt(reportId);
                //if its a valid report
                ColorCodeBuilder codeBuilder = new ColorCodeBuilder();
                ColorGroup colorGroup = (ColorGroup) codeBuilder.buildColorCode(reportId, container);
                container.setColorGroup(colorGroup);
                repParam.addObserver(colorGroup);
                repParam.notifyObserversOfUpdate(container.getNoOfDays());
                container.initializeRuntimeMeasures();
            } catch (NumberFormatException nfe) {
            }

        } catch (Exception exp) {

            logger.error("Exception:", exp);
        }
        return container;
    }

    public PbReturnObject fireTrendQuery(Container container, String userId, boolean isTimeSeries) {
        PbReportQuery reportQuery = new PbReportQuery();
        QueryExecutor qryExec = new QueryExecutor();
        PbReportCollection collect = container.getReportCollect();
        PbReportCollection timeCollect = (PbReportCollection) collect.clone();

        //added by Nazneen
        collect.timeDetailsArray.remove(3);
        collect.timeDetailsArray.add(3, "Year");
        collect.timeDetailsArray.remove(4);
        collect.timeDetailsArray.add(4, "Last Year");
        //ended by Nazneen

        timeCollect.reportRowViewbyValues.clear();
        timeCollect.reportRowViewbyValues.add("TIME");
        timeCollect.isTimeSeries = isTimeSeries;
        String query = null;
        reportQuery = qryExec.formulateQuery(timeCollect, userId);
        try {
            query = reportQuery.generateViewByQry();
        } catch (Exception ex) {
            logger.error("Exception:", ex);
        }
        PbReturnObject pbretObj = qryExec.executeQuery(timeCollect, query);
        return pbretObj;
    }

    public Segment createDimensionSegment(SegmentType type, String segmentName, String dimension, String measure, String segName) {
        dimension = RTDimensionElement.getOriginalColumnName(dimension);
        DimensionSegmentHelper helper = new DimensionSegmentHelper();
        Segment segment;
        if (type == SegmentType.MEASURE_BASED) {
            segment = helper.createSegment(type, segmentName, dimension, measure, segName);
        } else {
            segment = helper.createSegment(type, segmentName, dimension, segName);
        }
        return segment;
    }

    public void changeViewByOfReport(Container container, String userId, ArrayList<String> rowViewBys, ArrayList<String> colViewBys) {

//        ProgenLog.log(ProgenLog.FINE, this, "changeViewByOfReport", "Entered " + System.currentTimeMillis());
        logger.info("Entered " + System.currentTimeMillis());
        PbReportCollection collect = null;
        QueryExecutor qryExec = new QueryExecutor();
        PbReportQuery reportQuery = null;
        PbReturnObject pbretObj = null;
        ArrayList originalColumns = new ArrayList();
        ArrayList displayColumns = new ArrayList();
        ArrayList displayLabels = new ArrayList();
        ArrayList dataTypes = new ArrayList();
        ArrayList displayTypes = new ArrayList();
        ArrayList links = new ArrayList();
        HashMap replinks = new HashMap();
        ArrayList alignments = new ArrayList();
//        ArrayList signs = new ArrayList();
        HashMap columnsVisibility = new HashMap();

        String[] dbColumns = null;
        String[] columnTypes = null;

        //ArrayList unDisplayedColumns = new ArrayList();
        //variables defined by santhosh.kumar@progenbusiness.com for performance tuning of customize report
        HashMap ParametersHashMap = null;
        HashMap TableHashMap = null;
        HashMap GraphHashMap = null;
        HashMap ReportHashMap = null;
        ArrayList REP = null;
        ArrayList REPNames = null;
        ArrayList CEPNames = null;
        ArrayList Measures = null;
        ArrayList MeasuresNames = null;
        ArrayList Parameters = null;
        ArrayList ParametersNames = null;
        ArrayList ReportTimeParams = null;
        ArrayList ReportTimeParamsNames = null;
        String[] ParameterStr = null;
        String[] TimeParametersStr = null;
        HashMap DisplayNamesMap = null;
        ArrayList reportQryElementIds = null;
        ArrayList reportQryAggregations = null;
        ArrayList reportQryColNames = null;

        ArrayList<String> rowViewIds = new ArrayList<String>();
        ArrayList<String> colViewIds = new ArrayList<String>();

        //code added by susheela on 02/12/2009
        String PbUserId = null;
        StringBuffer bizRolesSb = new StringBuffer();

        HashMap TableProperties = null;

        try {

            container.setViewByChanged(true);

            ParametersHashMap = container.getParametersHashMap();
            TableHashMap = container.getTableHashMap();
            GraphHashMap = container.getGraphHashMap();
            ReportHashMap = container.getReportHashMap();

            collect = container.getReportCollect();

            if (collect.reportRowViewbyValues.toString().equalsIgnoreCase(rowViewIds.toString()) && collect.reportColViewbyValues.toString().equalsIgnoreCase(colViewIds.toString())) {
                return;
            } else {
                //collect.getChangeViewByData(rowViewIds, colViewIds);
                collect.reportQryElementIds = (ArrayList) ReportHashMap.get("reportQryElementIds");
                collect.reportQryColNames = (ArrayList) ReportHashMap.get("reportQryColNames");
                collect.reportQryAggregations = (ArrayList) ReportHashMap.get("reportQryAggregations");
                if (colViewIds.size() > 0) {
                    //you are making a Crosstab
                    //if we use ReportHashMap Crosstab will display back all the Measures
                    //Instead we will have to use only the Measures shown in table
                    //limitation Graph will take the same Measure
                    //from here on in the Analysis we will be limited to the bunch of Measures in Progen Table
                    //alternative would be maintain Crosstab Measures in separate list or something
                    //and also maintain Hidden Crosstab Measures
                    ArrayList measLst = (ArrayList) container.getTableHashMap().get("Measures");
                    ArrayList measNameLst = (ArrayList) container.getTableHashMap().get("MeasuresNames");
                    reportQryElementIds = new ArrayList();
                    for (int i = 0; i < measLst.size(); i++) {
                        //if there is a %wise measure do not add it to the Report Query Elements
                        //if ( ((String)measLst.get(i)).lastIndexOf(PercentColumn) == -1 )
                        if (!RTMeasureElement.isRunTimeMeasure(measLst.get(i).toString())) {
                            reportQryElementIds.add(((String) measLst.get(i)).substring(2)); //remove A_
                        } else {
                            //remove all Run Time Measures while converting to Crosstab
                            measLst.remove(i);
                            measNameLst.remove(i);
                            i--;
                        }

                    }
                    reportQryAggregations = reportTemplateDAO.getReportQryAggregations(reportQryElementIds);
                    reportQryColNames = reportTemplateDAO.getReportQryColNames();
                    collect.reportQryElementIds = reportQryElementIds;
                    collect.reportQryColNames = reportQryColNames;
                    collect.reportQryAggregations = reportQryAggregations;
                } else //making a Normal Report from Crosstab
                //When we get Measure list, if we user has hidden any column in Table
                //it also need to be included in the Query, because the hidden column may appear in graph
                {
                    if (collect.reportColViewbyValues != null && !collect.reportColViewbyValues.isEmpty()) {
                        ArrayList measLst = (ArrayList) ((ArrayList) container.getTableHashMap().get("Measures")).clone();
                        String graphIds = (String) container.getGraphHashMap().get("graphIds");//.split(",");
                        if (graphIds != null && graphIds.length() > 0) {
                            String[] aGraphId = graphIds.split(",");
                            for (int i = 0; i < aGraphId.length; i++) {
                                HashMap graphMap = (HashMap) container.getGraphHashMap().get(aGraphId[i]);
                                LinkedHashMap grphMeasMap = (LinkedHashMap) graphMap.get("graphMeasures");
                                if (grphMeasMap != null) {
                                    Set<String> elementIdSet = grphMeasMap.keySet();
                                    Iterator iter = elementIdSet.iterator();
                                    while (iter.hasNext()) {
                                        String aGraphMeas = (String) iter.next();
                                        if (!measLst.contains(aGraphMeas)) {
                                            measLst.add(aGraphMeas);
                                        }
                                    }
                                }
                            }
                        }
                        reportQryElementIds = new ArrayList();
                        for (int i = 0; i < measLst.size(); i++) {
                            //if there is a %wise measure do not add it to the Report Query Elements
                            if (!RTMeasureElement.isRunTimeMeasure((String) measLst.get(i))) {
                                reportQryElementIds.add(((String) measLst.get(i)).substring(2)); //remove A_
                                reportQryAggregations = reportTemplateDAO.getReportQryAggregations(reportQryElementIds);
                                reportQryColNames = reportTemplateDAO.getReportQryColNames();
                            }
                        }
                        collect.reportQryElementIds = reportQryElementIds;
                        collect.reportQryColNames = reportQryColNames;
                        collect.reportQryAggregations = reportQryAggregations;
                    }
                }
            }
            collect.reportRowViewbyValues = rowViewBys;
            collect.reportColViewbyValues = colViewBys;
            TableHashMap.put("ColorCodeMap", null);

            container.setViewByColNames(collect.reportRowViewbyValues);
            container.setViewByElementIds(collect.reportRowViewbyValues);

            reportQuery = qryExec.formulateQuery(collect, userId);

            String query = reportQuery.generateViewByQry();

            pbretObj = ReportCacheManager.MANAGER.retrieveReportQry(collect.reportId, query);

            if (pbretObj == null) {
//                ProgenLog.log(ProgenLog.FINE, this, "prepareReport", "Going to Fire Query " + System.currentTimeMillis());
                logger.info("Going to Fire Query " + System.currentTimeMillis());
                pbretObj = qryExec.executeQuery(collect, query);//repQuery.getPbReturnObjectWithFlag(String.valueOf(reportQryElementIds.get(0)), query);//, session);

                ReportCacheManager.MANAGER.storeReportQry(collect.reportId, query, pbretObj);
//                ProgenLog.log(ProgenLog.FINE, this, "prepareReport", "Query Fired " + System.currentTimeMillis());
                logger.info("Query Fired " + System.currentTimeMillis());
            }

            // // ////.println("session.getAttribute(sqlStr) is : "+session.getAttribute("sqlStr"));
            container.setRetObj(pbretObj);
            container.setSqlStr(query);
            container.setNoOfDays(reportQuery.getNoOfDays());
            dbColumns = pbretObj.getColumnNames();
            columnTypes = pbretObj.getColumnTypes();

            //TODO need to investigate how this is set reportColViewByValues
            //is it set from param section?
            if (collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() != 0) {
                container.setColumnViewByCount(String.valueOf(collect.reportColViewbyValues.size()));
                container.setColumnViewByName(collect.getElementName(String.valueOf(collect.reportColViewbyValues.get(0))));
                container.setColumnViewByElementIds(collect.reportColViewbyValues);
            } else {
                container.setColumnViewByCount("0");
            }
            // // ////.println("reportColViewbyValuesin BD=====" + collect.reportColViewbyValues);
            // // ////.println("reportColViewbyValuesin BD=====" + repQuery.isBucketCrossTab);

            if ((collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() != 0)) {//for cross tab report
                int viewByCount = collect.reportRowViewbyValues.size();
                if (CEPNames == null) {
                    CEPNames = new ArrayList();
                }
                /*
                 * if(repQuery.isCrossTabBucket){
                 * if(repQuery.isBucketNewViewBy){ viewByCount=viewByCount+1; }
                }
                 */
                for (int colNum = 0; colNum < dbColumns.length; colNum++) {
                    originalColumns.add(dbColumns[colNum]);
                    displayColumns.add(dbColumns[colNum]);
                    if (colNum <= (viewByCount - 1)) {
                        displayLabels.add(collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(colNum))));
                    } else {
                        displayLabels.add(reportQuery.crossTabNonViewByMap.get(String.valueOf(originalColumns.get(colNum))));
//                            if (String.valueOf(displayLabels.get(colNum)).toUpperCase().contains("CHANGE")) {
//                                signs.add(String.valueOf(displayLabels.get(colNum)));
//                            }
                    }
                    if (columnTypes[colNum].equalsIgnoreCase("VARCHAR2")) {
                        dataTypes.add("C");
                        alignments.add("LEFT");
                    } else if (columnTypes[colNum].equalsIgnoreCase("NUMBER")
                            || columnTypes[colNum].equalsIgnoreCase("NUMERIC")
                            || columnTypes[colNum].equalsIgnoreCase("FLOAT")
                            || columnTypes[colNum].equalsIgnoreCase("DOUBLE")
                            || columnTypes[colNum].equalsIgnoreCase("DECIMAL")
                            || columnTypes[colNum].equalsIgnoreCase("BIGINT")
                            || columnTypes[colNum].equalsIgnoreCase("INTEGER")
                            || columnTypes[colNum].equalsIgnoreCase("INT")) {
                        dataTypes.add("N");
                        alignments.add("RIGHT");
                    } else if (columnTypes[colNum].equalsIgnoreCase("CALCULATED")) {
                        dataTypes.add("N");
                        alignments.add("RIGHT");
                    } else if (columnTypes[colNum].equalsIgnoreCase("SUMMARISED")) {
                        dataTypes.add("N");
                        alignments.add("RIGHT");
                    } else if (columnTypes[colNum].equalsIgnoreCase("DATE") || columnTypes[colNum].equalsIgnoreCase("datetime")) {
                        dataTypes.add("D");
                        alignments.add("RIGHT");
                    } else {
                        dataTypes.add("C");
                        alignments.add("LEFT");
                    }
                    if (colNum == 0) {
                        displayTypes.add("H");
                    } else {
                        displayTypes.add("T");
                    }
                }
                if (!isonespeedreduce) {
                    links = collect.getRowViewDrillUrl(userId);
                    replinks = collect.getRepDrillMap(userId);
                }
                for (int colviewByIndex = 0; colviewByIndex < collect.reportColViewbyValues.size(); colviewByIndex++) {
                    if (CEPNames == null) {
                        CEPNames = new ArrayList();
                    }
                    CEPNames.add(collect.getElementName(String.valueOf(collect.reportColViewbyValues.get(colviewByIndex))));
                }

                //end of code to get CEP Names
                columnsVisibility = container.getColumnsVisibility();
                if (columnsVisibility == null || columnsVisibility.size() == 0) {
                    for (int i = 0; i < displayColumns.size(); i++) {
                        columnsVisibility.put(String.valueOf(displayColumns.get(i)), "''");
                    }
                }
//                    if (columnsVisibility.size() != displayColumns.size()) {
                for (int i = 0; i < displayColumns.size(); i++) {
                    if (columnsVisibility.get(String.valueOf(displayColumns.get(i))) == null) {
                        columnsVisibility.put(String.valueOf(displayColumns.get(i)), "''");
                    }
                }
//                    }
                REP = collect.reportRowViewbyValues;//actuall viewbys getting from collection object
                REPNames = collect.reportRowViewbyValues;

//                            container.setViewByColNames(collect.reportRowViewbyValues);
//                            container.setViewByElementIds(collect.reportRowViewbyValues);
                ArrayList viewByColumnsAlist = new ArrayList();
                ArrayList viewByElementdIdAlist = new ArrayList();
                for (int i = 0; i < viewByCount; i++) {
                    viewByColumnsAlist.add(String.valueOf(displayLabels.get(i)));
                    if (String.valueOf(displayColumns.get(i)).equalsIgnoreCase("TIME")) {
                        viewByElementdIdAlist.add(String.valueOf(displayColumns.get(i)));

                    } else {
                        viewByElementdIdAlist.add(String.valueOf(displayColumns.get(i)).substring(2));

                    }
                }
                container.setViewByColNames(viewByColumnsAlist);
                container.setViewByElementIds(viewByElementdIdAlist);

                REP = collect.reportRowViewbyValues;
                REPNames = collect.reportRowViewbyValues;

                container.setViewByCount((viewByCount));//added by santhosh.k on 01-03-2010 for row consolidation
                container.setCrosstabColumnSpan(reportQuery.getCrosstabColumnSpan());

            } else {//for normal report
                originalColumns = container.getOriginalColumns();
                displayColumns = container.getDisplayColumns();
                displayLabels = container.getDisplayLabels();
                dataTypes = container.getDataTypes();
                displayTypes = container.getDisplayTypes();
                links = container.getLinks();
                replinks = container.getRepLinks();
//                    signs = container.getSigns();
                alignments = container.getAlignments();
                columnsVisibility = container.getColumnsVisibility();
                if (!isonespeedreduce) {
                    links = collect.getRowViewDrillUrl(userId);//collect.tableColDrill;
                    replinks = collect.getRepDrillMap(userId);
                }
                int viewByCount = collect.reportRowViewbyValues.size();
                //for change by view we will always reset view by count
                container.setViewByCount((collect.reportRowViewbyValues.size()));

                viewByCount = collect.reportRowViewbyValues.size();//Integer.parseInt(container.getViewByCount());

//                                displayColumns = collect.tableElementIds;
//                                originalColumns = collect.tableElementIds;
                originalColumns = this.constructOrigDispCols(originalColumns, collect.reportRowViewbyValues, container, "original");
                displayColumns = this.constructOrigDispCols(displayColumns, collect.reportRowViewbyValues, container, "display");

                //for Change View By Event
                //Construct Data Types/Display Types and Links
                //We can't get it from Collect because
                dataTypes.clear();
                alignments.clear();
                displayTypes.clear();
                links.clear();

                int colNum = 0;
                String dispCol;
                for (int dispIndex = 0; dispIndex < displayColumns.size(); dispIndex++) {
                    dispCol = (String) displayColumns.get(dispIndex);
                    if (!RTMeasureElement.isRunTimeMeasure(dispCol)) {
                        for (int j = 0; j < dbColumns.length; j++) {
                            if (dispCol.equals(dbColumns[j])) {
                                colNum = j;
                                break;
                            }
                        }

                        if (columnTypes[colNum].equalsIgnoreCase("VARCHAR2")) {
                            dataTypes.add("C");
                            alignments.add("LEFT");
                        } else if (columnTypes[colNum].equalsIgnoreCase("NUMBER")
                                || columnTypes[colNum].equalsIgnoreCase("NUMERIC")
                                || columnTypes[colNum].equalsIgnoreCase("FLOAT")
                                || columnTypes[colNum].equalsIgnoreCase("DOUBLE")
                                || columnTypes[colNum].equalsIgnoreCase("DECIMAL")
                                || columnTypes[colNum].equalsIgnoreCase("BIGINT")
                                || columnTypes[colNum].equalsIgnoreCase("INTEGER")
                                || columnTypes[colNum].equalsIgnoreCase("INT")) {
                            dataTypes.add("N");
                            alignments.add("RIGHT");
                        } else if (columnTypes[colNum].equalsIgnoreCase("CALCULATED")) {
                            dataTypes.add("N");
                            alignments.add("RIGHT");
                        } else if (columnTypes[colNum].equalsIgnoreCase("SUMMARISED")) {
                            dataTypes.add("N");
                            alignments.add("RIGHT");
                        } else if (columnTypes[colNum].equalsIgnoreCase("DATE") || columnTypes[colNum].equalsIgnoreCase("datetime")) {
                            dataTypes.add("D");
                            alignments.add("RIGHT");
                        } else {
                            dataTypes.add("C");
                            alignments.add("LEFT");
                        }
                        if (colNum < viewByCount) {
                            displayTypes.add("H");
                        } else {
                            displayTypes.add("T");
                        }
                    } else {
                        //it's a calculated column - PercentWise
                        dataTypes.add("N");
                        displayTypes.add("T");
                        alignments.add("RIGHT");
                    }
                }
                if (!isonespeedreduce) {
                    links = collect.getRowViewDrillUrl(userId);//tableColDrill;
                    replinks = collect.getRepDrillMap(userId);
                }

                // // ////.println(collect.tableElementIds+" "+collect.reportQryElementIds);
                displayColumns = (displayColumns == null || displayColumns.size() == 0) ? collect.tableElementIds : displayColumns;
                dataTypes = (dataTypes == null || dataTypes.size() == 0) ? collect.tableColTypes : dataTypes;
                displayTypes = (displayTypes == null || displayTypes.size() == 0) ? collect.tableColDispTypes : displayTypes;
                if (!isonespeedreduce) {
                    links = (links == null || links.size() == 0) ? collect.getRowViewDrillUrl(userId) : links;
                    replinks = (replinks == null || replinks.size() == 0) ? collect.getRepDrillMap(userId) : replinks;
                }
//                    signs = collect.columnSignType;

                displayLabels = new ArrayList();
                for (int viewByIndex = 0; viewByIndex < collect.reportRowViewbyValues.size(); viewByIndex++) {
                    displayLabels.add(collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(viewByIndex))));
                }
                HashMap tableHM = container.getTableHashMap();
                List measures = (List) tableHM.get("Measures");
                List measNames = (List) tableHM.get("MeasuresNames");
                for (int viewByIndex = collect.reportRowViewbyValues.size(); viewByIndex < displayColumns.size(); viewByIndex++) {
                    String columnName = String.valueOf(displayColumns.get(viewByIndex));
                    if (RTMeasureElement.isRunTimeMeasure(columnName)) {
                        if (measures.contains(columnName)) {
                            int index = measures.indexOf(columnName);
                            displayLabels.add(measNames.get(index));
                        } else {
                            String colSuffix = RTMeasureElement.getMeasureType(columnName).getColumnDisplay();
                            columnName = RTMeasureElement.getOriginalColumn(columnName);
                            displayLabels.add(reportQuery.NonViewByMap.get(columnName) + colSuffix);
                        }
                    } else {
                        displayLabels.add(reportQuery.NonViewByMap.get(columnName));
                    }
                    columnName = null;
                }

                for (int i = 0; i < displayColumns.size(); i++) {
                    if (columnsVisibility.get((String) displayColumns.get(i)) == null) {
                        columnsVisibility.put((String) displayColumns.get(i), "''");

                    }
                }

                ArrayList viewByColumnsAlist = new ArrayList();
                ArrayList viewByElementdIdAlist = new ArrayList();
                for (int i = 0; i < viewByCount; i++) {
                    if (String.valueOf(displayColumns.get(i)).equalsIgnoreCase("TIME")) {
                        viewByElementdIdAlist.add(String.valueOf(displayColumns.get(i)));

                    } else {
                        viewByElementdIdAlist.add(String.valueOf(displayColumns.get(i)).substring(2));

                    }
                    viewByColumnsAlist.add(String.valueOf(displayLabels.get(i)));
                }
                container.setViewByColNames(viewByColumnsAlist);
                container.setViewByElementIds(viewByElementdIdAlist);
                REP = viewByElementdIdAlist;
                REPNames = viewByColumnsAlist;
            }

            container.setColumnsVisibility(columnsVisibility);
            //container.setDefaultPagesPerSlide(25);
            container.setSearchReq(true);
            container.setCurrentPage(1);
            container.setOriginalColumns(originalColumns);
            container.setDisplayColumns(displayColumns);
            container.setDisplayLabels(displayLabels);

            container.setDataTypes(dataTypes);
            container.setDisplayTypes(displayTypes);
            container.setLinks(links);
            container.setRepLinks(replinks);
            container.setSelected(new ArrayList());
            container.setAlignments(alignments);
            container.setReportCollect(collect);
            container.setReportName(collect.reportName);
            container.setReportDesc(collect.reportDesc);

            //code to refresh progen tables
            container.setSortRetObj(null);
//                container.setPagesPerSlide("All");
            container.getRetObj().resetViewSequence();

            container.getRtExcelColumns().clear();
            for (int i = 0; i < displayColumns.size(); i++) {
                String col = (String) displayColumns.get(i);
                if (RTMeasureElement.isRunTimeExcelColumn(col)) {
                    container.getRtExcelColumns().add(col);
                }
            }

            ParameterStr = (String[]) (collect.reportParameters.keySet()).toArray(new String[0]);
            TimeParametersStr = (String[]) (collect.timeDetailsMap.keySet()).toArray(new String[0]);

            for (int paramIndex = 0; paramIndex < ParameterStr.length; paramIndex++) {
                ArrayList alist = (ArrayList) collect.reportParameters.get(ParameterStr[paramIndex]);
                if (Parameters == null) {
                    Parameters = new ArrayList();
                    ParametersNames = new ArrayList();
                }
                Parameters.add(ParameterStr[paramIndex]);
                ParametersNames.add(String.valueOf(alist.get(1)));
                alist = null;

            }
            for (int timeIndex = 0; timeIndex < TimeParametersStr.length; timeIndex++) {
                ArrayList alist = (ArrayList) collect.timeDetailsMap.get(TimeParametersStr[timeIndex]);
                if (ReportTimeParams == null) {
                    ReportTimeParams = new ArrayList();
                    ReportTimeParamsNames = new ArrayList();
                }
                ReportTimeParams.add(TimeParametersStr[timeIndex]);
                ReportTimeParamsNames.add(String.valueOf(alist.get(2)));
                alist = null;
            }
            //we will use viewCount instead of collect.reportRowViewByValues because during Group By Analysis viewCount is incremented by 1
            ReportHashMap.put("ReportName", collect.reportName);
            ReportHashMap.put("ReportDesc", collect.reportDesc);
            ReportHashMap.put("ReportFolders", collect.reportBizRoles);

            ArrayList alist = new ArrayList();
            for (String str : collect.reportBizRoles) {
                alist.add(str);
            }
            ParametersHashMap.put("UserFolderIds", alist.toString().replace("[", "").replace("]", ""));
            if (collect.reportColViewbyValues == null || collect.reportColViewbyValues.size() == 0) {
                if (ReportHashMap.get("DisplayNamesMap") != null) {
                    DisplayNamesMap = (HashMap) ReportHashMap.get("DisplayNamesMap");
                } else {
                    DisplayNamesMap = new HashMap();
                }
                DisplayNamesMap = reportQuery.NonViewByMap;
                ReportHashMap.put("DisplayNamesMap", DisplayNamesMap);
            }
            ParametersHashMap.put("Parameters", Parameters);
            ParametersHashMap.put("ParametersNames", ParametersNames);
            ParametersHashMap.put("TimeParameters", ReportTimeParams);
            ParametersHashMap.put("TimeParametersNames", ReportTimeParamsNames);
            if (getIsSnapShot()) {
            } else {
                ParametersHashMap.put("TimeDimHashMap", collect.timeDetailsMap);
                ParametersHashMap.put("TimeDetailstList", collect.timeDetailsArray);
            }
            // // ////.println("vb dsn cms===" + ParametersHashMap);
            TableHashMap.put("REP", REP);
            TableHashMap.put("REPNames", REPNames);
            TableHashMap.put("CEP", collect.reportColViewbyValues);
            TableHashMap.put("CEPNames", CEPNames);

            if (GraphHashMap.get("graphIds") != null && (collect.reportColViewbyValues == null || collect.reportColViewbyValues.size() == 0)) {
                this.resetGraphProperties(container);
            }

            container.setReportHashMap(ReportHashMap);
            container.setParametersHashMap(ParametersHashMap);
            container.setTableHashMap(TableHashMap);

            //For setting start index and next index needed for graph next previous first last navigation
            if (GraphHashMap.get("graphIds") != null) {
                String[] graphIds = String.valueOf(GraphHashMap.get("graphIds")).split(",");
                HashMap[] graphMapDetails = new HashMap[graphIds.length];
                for (int i = 0; i < graphIds.length; i++) {
                    graphMapDetails[i] = (HashMap) GraphHashMap.get(graphIds[i]);
                    String dispRows = (String) graphMapDetails[i].get("graphDisplayRows");
                    if (graphMapDetails[i] != null) {
                        graphMapDetails[i].put("startindex", "0");
                        graphMapDetails[i].put("endindex", dispRows);

                        GraphHashMap.put(graphIds[i], graphMapDetails[i]);
                    }
                }
            }
            container.setGraphHashMap(GraphHashMap);

            container.setColumnProperties(container.getColumnProperties());
            TableHashMap.put("TableProperties", TableProperties);

//                container.setColumnDrillURL(collect.colDrillUrl);
            if (!isonespeedreduce) {
                container.setColumnDrillLinks(collect.getColumnViewDrillUrl(PbUserId));
            }
            StringBuffer SBViewByParam = new StringBuffer();
            StringBuffer SBViewByParamNames = new StringBuffer();

            for (int i = 0; i < collect.reportRowViewbyValues.size(); i++) {
                if (i == (collect.reportRowViewbyValues.size() - 1)) {
                    SBViewByParam.append(String.valueOf(collect.reportRowViewbyValues.get(i)));
                    if (String.valueOf(collect.reportRowViewbyValues.get(i)).equalsIgnoreCase("Time")) {
                        SBViewByParamNames.append("Time");
                    } else {
                        SBViewByParamNames.append(collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(i))));
                    }
                } else {
                    SBViewByParam.append("-" + String.valueOf(collect.reportRowViewbyValues.get(i)));
                    if (String.valueOf(collect.reportRowViewbyValues.get(i)).equalsIgnoreCase("Time")) {
                        SBViewByParamNames.append("Time" + " - ");
                    } else {
                        SBViewByParamNames.append(collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(i))) + " - ");
                    }
                }
            }

            container.setFromColumn((container.getViewByCount())); //added by asnthosh.k on 06-03-2010 so as to start the displaying of columns in columns properties based on no of view bys
            if (collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() > 0) {
                container.setReportCrosstab(true);

            } else {
                container.setReportCrosstab(false);

            }

            ReportParameter repParam = container.getReportParameter();
            if (repParam == null) {
                repParam = new ReportParameter();

            }
            repParam.setReportParameters(collect.reportParametersValues);
            ArrayList<String> colViewBys1 = new ArrayList<String>();
            if (container.isReportCrosstab()) {
                colViewBys = container.getColumnViewByElementIds();

            }
            ArrayList rowViewBys1 = container.getViewByElementIds();
            repParam.setViewBys(rowViewBys1, colViewBys1);
            repParam.notifyObserversOfUpdate(container.getNoOfDays());
            container.setReportParameter(repParam);

            if (container.isTransposed()) {
                if ((container.getViewByCount()) > 1 || container.isReportCrosstab()) {
                    container.setTransposeTable(false);

                }
            }

            container.setGraphHashMap(GraphHashMap);
        } catch (Exception exp) {

            logger.error("Exception:", exp);
        }
    }

    public void unhideMeasure(Container container, String measEleId) {
        ArrayList<String> displayColumns = container.getDisplayColumns();
        HashMap ColumnsVisibility = container.getColumnsVisibility();
        int measIndex;
        if (container.isReportCrosstab()) {
            measIndex = this.findMeasureIndexInCT(container, measEleId);
            if (measIndex >= 0) {
                int measCount = container.getReportMeasureCount();//.size();

                int size = displayColumns.size();

                for (int i = measIndex; i < size;) {
                    ColumnsVisibility.put(displayColumns.get(i), "block");
                    i += measCount;
                }
            }
        } else {
            measIndex = displayColumns.lastIndexOf(measEleId);
            if (measIndex >= 0) {
                ColumnsVisibility.put(displayColumns.get(measIndex), "block");
            }
        }

    }

    public void updateTableMeasureName(Container container, String colName, String dispLabel) {
        container.changeLabelForMeasure(colName, dispLabel);
    }

    public void updateGlobalTableMeasureName(Container container, String colName, String dispLabel) {
        container.changeGlobalLabelForMeasure(colName, dispLabel);
    }

    public void setRowViewIds(ArrayList<String> rowViewBys) {
        this.rowViewIds = rowViewBys;
    }

    public void setColViewIds(ArrayList<String> colViewBys) {
        this.colViewIds = colViewBys;
    }

    public void setTimeDetails(ArrayList<String> timeDetails) {
        this.timeDetails = timeDetails;
    }

    public HashMap getNFMapForCT(HashMap NFMap, Container container) {
        PbReportViewerBD reportViewerBd = new PbReportViewerBD();
        Set nfKeys = NFMap.keySet();
        HashMap NFMapCT = new HashMap();
        Iterator nfKeysIter = nfKeys.iterator();
        String colEleName;
        int whichMeasure;

        while (nfKeysIter.hasNext()) {
            String measElement = (String) nfKeysIter.next();
            String nbrSymbol = (String) NFMap.get(measElement);
            // if(measElement.contains("A_")){
            if (nbrSymbol != null && !nbrSymbol.equals("")) {
                colEleName = String.valueOf(container.getReportCollect().getNonViewByMap().get(measElement));
                whichMeasure = container.getViewByCount();
                String crossTabColumnName = "";
                for (int k = whichMeasure; k < container.getReportMeasureCount() + container.getViewByCount(); k++) {
                    ArrayList tempStr = (ArrayList) container.getDisplayLabels().get(k);
                    if (colEleName.equalsIgnoreCase((String) tempStr.get(1))) {
                        crossTabColumnName = container.getDisplayColumns().get(k);
                        break;
                    }
                }
                whichMeasure = findMeasureIndexInCT(container, crossTabColumnName);
                if (whichMeasure != -1) {
                    int size = container.getDisplayColumns().size();
                    String colName;
                    for (int i = whichMeasure; i < size;) {
                        colName = (String) container.getDisplayColumns().get(i);
                        //added by sruthi for numberformate in crosstab
                        if (NFMap.get(colName) != null) {
                            NFMapCT.put(colName, nbrSymbol);
                        }//ended by sruthi
                        i += container.getReportMeasureCount();
                    }
                }
            }
            NFMapCT.put(measElement, nbrSymbol);

        }
        return NFMapCT;
    }

    public boolean getIsCrossTab() {
        return isCrosstab;
    }

    public void setIsCrossTab(Boolean Val) {
        this.isCrosstab = Val;
    }

    public String generateReportForReportSchedule(String reportId, String schedulerId, String userId, String contentType, String schedulerName) {
        String FileName = null;
        Container container = new Container();
        try {
            //Container container = new Container();
            container = this.generateContainer(reportId, schedulerId, userId, schedulerName);
            //Added By Amar
            ReportSchedulerJob.containerNew = container;
            //end of code
            DataSnapshotGenerator snapshotgenerator = new DataSnapshotGenerator();
            snapshotgenerator.setScheduleFileName(schedulerName + "_");
//
//         if ( container.getReportCollect().tablePropertiesXML != null )
//         ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.updateTablePropertiesInContainer(container, container.getReportCollect().tablePropertiesXML);

            PbReportTableBD reportTableBD = new PbReportTableBD();
            reportTableBD.searchDataSet(container);

//            //added by Nazneen on 25 Nov 2014 for including sorting
//
//             ProgenDataSet retObj = container.getRetObj();
//             container.getRetObj().resetViewSequence();
//             ArrayList<String> sortCols = null;
//              char[] sortTypes = null;//ArrayList sortTypes = null;
//              char[] sortDataTypes = null;
//              ArrayList<Integer> rowSequence;
//             sortCols = container.getSortColumns();
//             if (!sortCols.isEmpty() && !container.isSubTotalSort()) {
//                 sortTypes = container.getSortTypes();
//                 sortDataTypes = container.getSortDataTypes();
//                 rowSequence = retObj.sortDataSet(sortCols, sortTypes, sortDataTypes);
//                 retObj.setViewSequence(rowSequence);
//             }
            //  
            if (contentType.equals("H")) {
                FileName = snapshotgenerator.generateAndStoreHtmlSnapshot(container, userId, "dailyScheduleReport");
            } else if (contentType.equals("E")) {
                FileName = snapshotgenerator.generateReportInfoExcel(container);
            } else if (contentType.equals("P")) {
                FileName = snapshotgenerator.generateReportInfoPdf(container);
            } else if (contentType.equals("C")) {
                FileName = snapshotgenerator.generateReportInfoCSV(container, userId);
            } else if (contentType.equals("Ex")) {
                FileName = snapshotgenerator.generateReportInfoExcelX(container);
            } else {
                snapshotgenerator.generateEmailForReport(container);
            }
        } catch (Exception ex) {
            //code Added By Amar
            if (container.getReportCollect().getLogReadWriterObject() != null) {
                StringWriter str = new StringWriter();
                PrintWriter writer = new PrintWriter(str);
//                ex.printStackTrace(writer);
                container.getReportCollect().setLogBoolean(true);
                try {
                    container.getReportCollect().getLogReadWriterObject().fileWriter(str.getBuffer().toString());
                } catch (IOException eo) {
                }
            }//end of code

            return null;
        }
        return FileName;

    }
    //Start of code by sandeep on 16/10/14 for schedule// update local files in oneview

    public String generateoneviewforschedule(String reportId, ReportSchedule schedule, String schedulerId, String userId, String contentType, String schedulerName) {
        String FileName = null;
        PbDb pbdb = new PbDb();
        String onefileName = null;
        String oneVersion = "";
        String tempdir = "";
        String regString = "";
        String fileName = null;
        String completeurl = "";
        String checkFile = "";
        StringBuilder finalStringVal = new StringBuilder();
        SnapshotDesigner SSDesigner = new SnapshotDesigner();
        String filePath = null;
        String filePathsecure = null;
        PbReturnObject retObj = null;
        PbReturnObject retObj1 = null;
        OnceViewContainer onecontainer = null;
        OnceViewContainer onecontainer1 = null;
        Container container = new Container();
        try {

            DataSnapshotGenerator snapshotgenerator = new DataSnapshotGenerator();
            snapshotgenerator.setScheduleFileName(schedulerName + "_");
            ReportTemplateDAO reportTemplateDAO = new ReportTemplateDAO();
            OneViewBD oneViewBD = new OneViewBD();
            retObj = reportTemplateDAO.getOneviewFileNam(reportId);
            String query = "select FILE_NAME,FILE_PATH from prg_ar_oneview_assignment where oneview_id=" + reportId + " and user_id =" + userId;
            retObj1 = pbdb.execSelectSQL(query);

            onefileName = retObj.getFieldValueString(0, 1);
            oneVersion = retObj.getFieldValueString(0, 9);
            filePath = retObj.getFieldValueString(0, 11);
            filePathsecure = filePath;
            String result = "";
// fileName = schedule.getfilename();
//        System.out.println("users");
//String oneviewtypedate =(String) session.getAttribute("oneviewdatetype");
            File file1 = new File(filePath + "/" + onefileName);
            if (file1.exists()) {
                if (onefileName == null ? "" != null : !onefileName.equals("")) {
                    FileInputStream fis = new FileInputStream(filePath + "/" + onefileName);
                    ObjectInputStream ois = new ObjectInputStream(fis);
                    onecontainer = (OnceViewContainer) ois.readObject();
                    ois.close();
                }
// if ( onecontainer.timedetails!=null &&  onecontainer.timedetails.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                List<OneViewLetDetails> oneviewletDetails = onecontainer.onviewLetdetails;
                String advHtmlFileProps1 = schedule.getadvHtmlFileProps();
                fileName = onecontainer.getContainerFileName();

                for (int i1 = 0; i1 < oneviewletDetails.size(); i1++) {
                    OneViewLetDetails detail = oneviewletDetails.get(i1);
                    String reptype = detail.getReptype();
                    onecontainer.setContextPath(schedule.getContextPath());
                    if (reptype != null && (reptype.equalsIgnoreCase("repGraph") || reptype.equalsIgnoreCase("repTable"))) {

                        container = detail.getContainer();
//PbReportCollection collect=container.getReportCollect();
                        SSDesigner.isoneviewschedule = "true";
                        PbDb pbDB = new PbDb();
                        PbReturnObject PbRetObj;
                        if (detail.isOneviewReportTimeDetails()) {
                            reporttime = true;
//    schedule.setDataSelection("reportdate");
                        } else {
                            reporttime = false;

                            PbReportCollection collect = container.getReportCollect();
//          if ( collect.timeDetailsArray!=null &&  collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_DATE_RANGE")) {
                            ArrayList tempTimeDetails = new ArrayList();
                            collect.timeDetailsArray = (ArrayList) onecontainer.timedetails;
//          collect.timeDetailsMap=onecontainer.timeHashMap;
                            HashMap timememdetails = container.getParametersHashMap();
                            String[] timemapkey = {"PRG_PERIOD_TYPE", "AS_OF_DATE", "PRG_COMPARE"};
                            String[] timeType = {collect.timeDetailsArray.get(3).toString(), collect.timeDetailsArray.get(2).toString(), collect.timeDetailsArray.get(4).toString()};
                            collect.timeDetailsMap.clear();
                            for (int i = 0; i < timemapkey.length; i++) {
                                ArrayList timedetails = new ArrayList();
                                timedetails.add(timeType[i]);
                                timedetails.add("CBO_" + timemapkey[i]);
                                timedetails.add("DATE");
                                timedetails.add("1");
                                timedetails.add("1");
                                timedetails.add(timeType[i]);
                                timedetails.add(timemapkey[i]);
                                collect.timeDetailsMap.put(timemapkey[i], timedetails);
                            }

                            timememdetails.put("TimeDetailstList", collect.timeDetailsArray);
                            timememdetails.put("TimeDimHashMap", collect.timeDetailsMap);
                            container.timememdetails = timememdetails;
                            container.setParametersHashMap(timememdetails);
                            container.setReportCollect(collect);
//            }

                            SSDesigner.setContainer(container);
                            this.setContainer(container);
                            SSDesigner.contextpath = schedule.getContextPath();
//                          String sql = "select PRG_REPORT_CUST_NAME from PRG_AR_PERSONALIZED_REPORTS where PRG_REPORT_ID=" + reportId + " and PRG_REPORT_CUST_NAME='" + schedulerName + "'";
//            PbRetObj = pbDB.execSelectSQL(sql);
//            if (!(PbRetObj.getRowCount() > 0 && PbRetObj != null)) {
                            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                                SSDesigner.createDocument(reportId, completeurl, null, "now()", "", userId, schedulerName, "scheduler");
                            } else {
                                SSDesigner.createDocument(reportId, completeurl, null, "sysdate", "", userId, schedulerName, "scheduler");
                            }
//            }
                            ReportTemplateDAO reportDAO = new ReportTemplateDAO();
                            String SchedulerId = reportDAO.getSchedulerID(Integer.parseInt(reportId), schedulerName);
                            SSDesigner.schedulerId1 = SchedulerId;
                            schedule.setReportScheduledId(Integer.parseInt(SchedulerId));
                            List<ReportSchedule> scheduleList = new ArrayList<ReportSchedule>();
                            scheduleList.add(schedule);
                            Gson gson = new Gson();
                            String gsonString = gson.toJson(scheduleList);
                            reportDAO.updateSchedulerDetails(SchedulerId, schedule);
//                    SchedulerId=  schedule.getReportScheduledId();
                            fromoneviewschedule = true;
                            oneviewid = reportId;

                            container = this.generateContainer(detail.getRepId(), SchedulerId, userId, schedulerName);
                            result = oneViewBD.updateoneviewschedule(container, detail.getRepId(), schedulerId, userId, schedulerName, onecontainer, detail, schedule);
                            onecontainer.timedetails = container.getReportCollect().timeDetailsArray;
                            HashMap tempRegHashMap = onecontainer.getTempRegHashMap();
                            if (tempRegHashMap != null && (advHtmlFileProps1 == null ? "" != null : !advHtmlFileProps1.equals(""))) {
                                String tempRegFileName = (String) tempRegHashMap.get(Integer.parseInt(detail.getNoOfViewLets()));
                                if (tempRegFileName != null) {
                                    FileOutputStream fos1 = new FileOutputStream(advHtmlFileProps1 + "/" + tempRegFileName);
                                    ObjectOutputStream oos1 = new ObjectOutputStream(fos1);
                                    oos1.writeObject(result);
                                    oos1.flush();
                                    oos1.close();
                                }
                            }
                            HashMap regHashMap = onecontainer.getRegHashMap();
                            String regFileName = (String) regHashMap.get(Integer.parseInt(detail.getNoOfViewLets()));

                            if (regFileName != null) {
                                FileOutputStream fos1 = new FileOutputStream(filePath + "/" + regFileName);
                                ObjectOutputStream oos1 = new ObjectOutputStream(fos1);
                                oos1.writeObject(result);
                                oos1.flush();
                                oos1.close();
                            }
                        }
                    } else if (reptype != null && reptype.equalsIgnoreCase("measures")) {
                        String realDate = "";
                        if (schedule.getDataSelection() != null) {
                            SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
                            Date date = new Date();
                            if (schedule.getDataSelection().equals("Current Day")) {
                                realDate = (dateFormat.format(date.getTime()));
                            } else if (schedule.getDataSelection().equals("Previous Day")) {
                                int MILLIS_IN_DAY = 1000 * 60 * 60 * 24;
                                realDate = (dateFormat.format(date.getTime() - MILLIS_IN_DAY));
                            }
                            onecontainer.timedetails.set(2, realDate);
                            // 
                        }
                        result = oneViewBD.updateoneviewschedule(null, detail.getRepId(), schedulerId, userId, schedulerName, onecontainer, detail, schedule);

                        HashMap tempRegHashMap = onecontainer.getTempRegHashMap();
                        if (tempRegHashMap != null && (advHtmlFileProps1 == null ? "" != null : !advHtmlFileProps1.equals(""))) {
                            String tempRegFileName = (String) tempRegHashMap.get(Integer.parseInt(detail.getNoOfViewLets()));
                            if (tempRegFileName != null) {
                                FileOutputStream fos1 = new FileOutputStream(advHtmlFileProps1 + "/" + tempRegFileName);
                                ObjectOutputStream oos1 = new ObjectOutputStream(fos1);
                                oos1.writeObject(result);
                                oos1.flush();
                                oos1.close();
                            }
                        }
                        HashMap regHashMap = onecontainer.getRegHashMap();
                        String regFileName = (String) regHashMap.get(Integer.parseInt(detail.getNoOfViewLets()));

                        if (regFileName != null) {
                            FileOutputStream fos1 = new FileOutputStream(filePath + "/" + regFileName);
                            ObjectOutputStream oos1 = new ObjectOutputStream(fos1);
                            oos1.writeObject(result);
                            oos1.flush();
                            oos1.close();
                        }
                    }
                }

//                  String qurey ="UPDATE PRG_AR_ONEVIEW_FILE_DATA set SCHEDULER_DETAILS = '&' ,SCHEDULE_START_DATE = '&',SCHEDULE_END_DATE = '&', where ONEVIEWID='&'";
//                   execUpdateSQL(qurey);
//                  onecontainer.setisfromschedule(true);
//                  onecontainer.setDataSelection(schedule.getDataSelection());
                FileInputStream fis = new FileInputStream(filePath + "/" + onefileName);
                ObjectInputStream ois = new ObjectInputStream(fis);
                onecontainer = (OnceViewContainer) ois.readObject();
                ois.close();
                String realDate = "";
                if (schedule.getDataSelection() != null) {
                    SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
                    Date date = new Date();
                    if (schedule.getDataSelection().equals("Current Day")) {
                        realDate = (dateFormat.format(date.getTime()));
                    } else if (schedule.getDataSelection().equals("Previous Day")) {
                        int MILLIS_IN_DAY = 1000 * 60 * 60 * 24;
                        realDate = (dateFormat.format(date.getTime() - MILLIS_IN_DAY));
                    }
                    onecontainer.timedetails.set(2, realDate);
                    // 
                }
                String conFileName = reportTemplateDAO.getOneviewFileName(reportId);
                file1 = new File(filePath + "/" + onefileName);
                if (file1.exists()) {
                    if (onefileName != null && filePath != null) {
                        FileOutputStream fos = new FileOutputStream(filePath + "/" + onefileName);
                        ObjectOutputStream oos = new ObjectOutputStream(fos);
                        oos.writeObject(onecontainer);
                        oos.flush();
                        oos.close();
                    }
                    fileName = schedule.getfilename();
                    if (fileName != null && advHtmlFileProps1 != null && (advHtmlFileProps1 == null ? "" != null : !advHtmlFileProps1.equals(""))) {
                        FileOutputStream fosLocal = new FileOutputStream(advHtmlFileProps1 + "/" + fileName);
                        ObjectOutputStream oosLoca = new ObjectOutputStream(fosLocal);
                        oosLoca.writeObject(onecontainer);
                        oosLoca.flush();
                        oosLoca.close();
                        fosLocal.close();
                    }
                }
//               OneViewBD oneViewBD = new OneViewBD();
//                 }
//            }
//
//         if ( container.getReportCollect().tablePropertiesXML != null )
//         ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.updateTablePropertiesInContainer(container, container.getReportCollect().tablePropertiesXML);

//            PbReportTableBD reportTableBD = new PbReportTableBD();
//            reportTableBD.searchDataSet(container);
//            //  
//            if (contentType.equals("H")) {
//                FileName = snapshotgenerator.generateAndStoreHtmlSnapshot(container, userId, "dailyScheduleReport");
//            } else if (contentType.equals("E")) {
//                FileName = snapshotgenerator.generateReportInfoExcel(container);
//            } else if (contentType.equals("P")) {
//                FileName = snapshotgenerator.generateReportInfoPdf(container);
//            }
            }
//            }
        } catch (Exception ex) {
            logger.error("Exception:", ex);
            return null;
        }
        return FileName;

    }

    public Container getContainer() {
        return container1;
    }

    public void setContainer(Container container1) {
        this.container1 = container1;
    }

    public Container generateContainer(String reportId, String schedulerId, String userId, String schedulerName) {
        Container container;
        PbReportCollection collect;

        //Code added by Amar to generate logger text file
        LogReadWriter log4u = new LogReadWriter();
        log4u.setLogFileName(schedulerName + "_" + schedulerId + "_");
        //code end by Amar

        //Start of code by sandeep on 16/10/14 for schedule// update local files in oneview
        if (fromoneviewschedule) {
//             SnapshotDesigner SSDesigner = new SnapshotDesigner();
            container = this.getContainer();
        } else {
            container = new Container();
        }
        try {
            if (fromoneviewschedule) {
                collect = container.getReportCollect();
            } else {
                collect = new PbReportCollection();
            }
            //End of code by sandeep on 16/10/14 for schedule// update local files in oneview
            QueryExecutor qryExec = new QueryExecutor();
            ProgenDataSet pbretObj = null;
            PbReturnObject newCrossRetObj = null;
            String[] dbColumns = null;
            String[] columnTypes = null;
            String FileName = "";
            String url = "";
            collect.reportId = reportId;
            ArrayList displayColumns = new ArrayList();
            ArrayList displayLabels = new ArrayList();
            ArrayList dataTypes = new ArrayList();
            ArrayList displayTypes = new ArrayList();
//            ArrayList paramwe = new ArrayList();
            ReportTemplateDAO reportDao = new ReportTemplateDAO();
            //Start of code by sandeep on 16/10/14 for schedule// update local files in oneview
            if (fromoneviewschedule) {
                url = reportDao.getURL(oneviewid, schedulerId);
            } else {
                url = reportDao.getURL(reportId, schedulerId);
            }
            //End of code by sandeep on 16/10/14 for schedule// update local files in oneview
            String[] reportParameters = url.split(";");
            PbReportRequestParameter param = new PbReportRequestParameter();
            Gson gson = new Gson();
            Type tarType = new TypeToken<List<String>>() {
            }.getType();
            for (int i = 2; i < reportParameters.length; i++) {
                String[] val = reportParameters[i].split("=");
                if (val.length > 0 && val[0].contains("CBOARP")) {
                    List<String> filterList = null;
                    try {
                        filterList = gson.fromJson(val[1], tarType);

                    } catch (com.google.gson.JsonParseException e) {
                        String normalString = val[1];
                        String[] splitedStr = normalString.split(",");
                        filterList = Arrays.asList(splitedStr);
                    }
                    param.requestParamValues.put(val[0], filterList);
                } else {
                    param.requestParamValues.put(val[0], val[1]);
                }
            }
            collect.reportIncomingParameters = param.requestParamValues;
            container.setReportCollect(collect);
            // collect.updateCollection(true);
            //Added by Amar
            collect.setLogReadWriterObject(log4u);
            //end of code
            collect.getParamMetaData(true);
            //Start of code by sandeep on 17/10/14 for schedule// update local files in oneview
            if (fromoneviewschedule) {
                container = readSnapShotXML1(container, schedulerId, collect);
            } else {
                container = readSnapShotXML(container, schedulerId, collect, reportId);
            }
            //End of code by sandeep on 17/10/14 for schedule// update local files in oneview
            //added by sruthi set path after scheduling 22/12/2014
//              PbReturnObject schedulerretObj = new PbReturnObject();
//              String sql="select filepath from prg_ar_personalized_reports where PRG_PERSONALIZED_ID="+schedulerId;
//              try{
//              schedulerretObj = execSelectSQL(sql);
//              } catch(SQLException e){
//                  logger.error("Exception: ",e);
//              }
            String filepath1 = "";
//              if(schedulerretObj!=null && schedulerretObj.getRowCount()>0){
//                filepath1=schedulerretObj.getFieldValueString(0,0);
//              }
            //Added by Amar for file path
            if (filepath1 == null || filepath1.isEmpty()) {
                filepath1 = File.separator + "usr" + File.separator + "local" + File.separator + "cache";
            }
            //end of code
            container.setfilepath(filepath1);
            //ended by sruthi
            HashMap<String, String> CrosstabMsrMap = new HashMap<String, String>();
            HashMap TableHashMap = container.getTableHashMap();
            ArrayList Measures = (ArrayList) TableHashMap.get("Measures");
            HashMap ReportHashMap = container.getReportHashMap();
            collect.reportQryElementIds = (ArrayList) ReportHashMap.get("reportQryElementIds");
            collect.reportQryAggregations = (ArrayList) ReportHashMap.get("reportQryAggregations");
            collect.reportQryColNames = (ArrayList) ReportHashMap.get("reportQryColNames");
            collect.reportQryColTypes = (ArrayList) ReportHashMap.get("reportQryColTypes");
            container.setTableMeasure(collect.reportQryElementIds);
            container.setTableMeasureNames(collect.reportQryColNames);

            if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                collect.timeDetailsArray = (ArrayList) (container.getParametersHashMap()).get("TimeDetailstList");
                collect.timeDetailsMap = (HashMap) (container.getParametersHashMap()).get("TimeDimHashMap");
            }
            // container=prepareReport(collect, reportId, userId);
            if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("year")) {
                    container.setTimeLevel("YEAR");
                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Qtr")) {
                    container.setTimeLevel("QUARTER");
                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Month")) {
                    container.setTimeLevel("MONTH");
                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Week")) {
                    container.setTimeLevel("WEEK");
                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Day")) {
                    container.setTimeLevel("DAY");
                }
            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_DATE_RANGE")) {
                container.setTimeLevel("MONTH");
            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_MONTH_RANGE")) {
                container.setTimeLevel("QUARTER");
            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_QTR_RANGE")) {
                container.setTimeLevel("YEAR");
            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_YEAR_RANGE")) {
                container.setTimeLevel("YEAR");
            }

            container.setViewByColNames(collect.reportRowViewbyValues);
            container.setViewByElementIds(collect.reportRowViewbyValues);
            container.setTimeDetailsArray(collect.timeDetailsArray);

            HashMap ParametersHashMap = container.getParametersHashMap();
//             SnapshotDesigner SSDesigner = new SnapshotDesigner();
//             paramwe=params;
            ParametersHashMap.put("TimeDetailstList", collect.timeDetailsArray);
            ParametersHashMap.put("TimeDimHashMap", collect.timeDetailsMap);
//            ParametersHashMap.put("Parameters", paramwe);
            container.setParametersHashMap(ParametersHashMap);
            //System.out.println("***"+collect.columnProperties.toString());
            container.setColumnProperties(collect.columnProperties);
            //code added by Amar on sep 22,2015
            collect.crosstabGTDisplayPos = container.getCrosstabGrandTotalDisplayPosition();
            //end of code
            //generating multilevel reportquery

            PbReportViewerDAO dao = new PbReportViewerDAO();
            //level 1
            ArrayList dependentlist1 = dao.getDependentViewByidsandReps(reportId);
            if (dependentlist1 != null && !dependentlist1.isEmpty()) {
                HashMap map1 = (HashMap) dependentlist1.get(0);
                HashMap map2 = (HashMap) dependentlist1.get(1);
                if (map2 != null && !map2.isEmpty()) {
                    Set<String> viewbys = map2.keySet();
                    String dependentReportId = map2.get(viewbys.toArray()[0]).toString();
                    if (dependentReportId != null && !dependentReportId.equalsIgnoreCase("")) {
                        //level 2
                        ArrayList dependentlist2 = dao.getDependentViewByidsandReps(dependentReportId);
                        if (dependentlist2 != null && !dependentlist2.isEmpty()) {
                            HashMap map11 = (HashMap) dependentlist2.get(0);
                            HashMap map21 = (HashMap) dependentlist2.get(1);
                            if (map21 != null && !map21.isEmpty()) {
                                Set<String> viewbys21 = map21.keySet();
                                String dependentReportId21 = map21.get(viewbys21.toArray()[0]).toString();
                                if (dependentReportId21 != null && !dependentReportId21.equalsIgnoreCase("")) {
                                    //level 3
                                    ArrayList dependentlist3 = dao.getDependentViewByidsandReps(dependentReportId21);
                                    if (dependentlist3 != null && !dependentlist3.isEmpty()) {
                                        HashMap map12 = (HashMap) dependentlist3.get(0);
                                        HashMap map22 = (HashMap) dependentlist3.get(1);
                                        if (map22 != null && !map22.isEmpty()) {
                                            Set<String> viewbys31 = map22.keySet();
                                            String dependentReportId31 = map22.get(viewbys31.toArray()[0]).toString();
                                            if (dependentReportId31 != null && !dependentReportId31.isEmpty()) {
                                                //level 4
                                                ArrayList dependentlist4 = dao.getDependentViewByidsandReps(dependentReportId31);
                                                if (dependentlist4 != null && !dependentlist4.isEmpty()) {
                                                    HashMap map13 = (HashMap) dependentlist4.get(0);
                                                    HashMap map23 = (HashMap) dependentlist4.get(1);
                                                    if (map23 != null && !map23.isEmpty()) {
                                                        Set<String> viewbys41 = map23.keySet();
                                                        String dependentReportId41 = map23.get(viewbys41.toArray()[0]).toString();
                                                        if (dependentReportId41 != null && !dependentReportId41.equalsIgnoreCase("")) {
                                                            //level5
                                                            ArrayList dependentlist5 = dao.getDependentViewByidsandReps(dependentReportId41);
                                                            if (dependentlist5 != null && !dependentlist5.isEmpty()) {
                                                                HashMap map14 = (HashMap) dependentlist5.get(0);
                                                                HashMap map24 = (HashMap) dependentlist5.get(1);
                                                                if (map24 != null && !map24.isEmpty()) {
                                                                    Set<String> viewbys51 = map24.keySet();
                                                                    String dependentReportId51 = map24.get(viewbys51.toArray()[0]).toString();
                                                                    if (dependentReportId51 != null && !dependentReportId51.isEmpty()) {
                                                                        PbReportCollection collect51 = new PbReportCollection();
                                                                        collect51.reportId = dependentReportId51;
                                                                        collect51.timeDetailsArray = new ArrayList();
                                                                        collect51.timeDetailsArray = collect.timeDetailsArray;
                                                                        PbReportQuery depRepQry51 = new PbReportQuery();
                                                                        depRepQry51 = qryExec.formulateQuery(collect51, userId);
                                                                        String depquery51 = depRepQry51.generateViewByQry();
                                                                        HashMap viewbyidandqryMap51 = new HashMap();
                                                                        viewbyidandqryMap51.put(viewbys51.toArray()[0].toString(), depquery51);
                                                                        container.dependentviewbyIdQry.clear();
                                                                        container.depViewByConditionsmap.clear();
                                                                        container.setDependentviewbyIdQry(viewbyidandqryMap51);

                                                                    }
                                                                }
                                                                if (map14 != null && map14.isEmpty()) {
                                                                    container.setDepViewByConditionsmap(map14);
                                                                }
                                                            }
                                                            //end of level5
                                                            PbReportCollection collect41 = new PbReportCollection();
                                                            collect41.reportId = dependentReportId41;
                                                            boolean openVal = true;
                                                            collect41.getParamMetaData(openVal);
                                                            collect41.timeDetailsArray = new ArrayList();
                                                            collect41.timeDetailsArray = collect.timeDetailsArray;
                                                            PbReportQuery depRepQry41 = new PbReportQuery();
                                                            depRepQry41 = qryExec.formulateQuery(collect41, userId);
                                                            depRepQry41.parameterType = container.getDepViewByConditionsmap();
                                                            depRepQry41.parameterQuery = container.getDependentviewbyIdQry();
                                                            String depquery41 = depRepQry41.generateViewByQry();
                                                            HashMap viewbyidandqryMap41 = new HashMap();
                                                            viewbyidandqryMap41.put(viewbys41.toArray()[0].toString(), depquery41);
                                                            container.dependentviewbyIdQry.clear();
                                                            container.depViewByConditionsmap.clear();
                                                            container.setDependentviewbyIdQry(viewbyidandqryMap41);
                                                        }
                                                    }
                                                    if (map13 != null && !map13.isEmpty()) {
                                                        container.setDepViewByConditionsmap(map13);
                                                    }
                                                }
                                                //end of level4
                                                PbReportCollection collect31 = new PbReportCollection();
                                                collect31.reportId = dependentReportId31;
                                                collect31.ctxPath = requestCtxPath;//request.getContextPath();
                                                boolean openVal = true;
                                                collect31.getParamMetaData(openVal);
                                                collect31.timeDetailsArray = new ArrayList();
                                                collect31.timeDetailsArray = collect.timeDetailsArray;
                                                PbReportQuery depRepQry31 = new PbReportQuery();
                                                depRepQry31 = qryExec.formulateQuery(collect31, userId);
                                                depRepQry31.parameterType = container.getDepViewByConditionsmap();
                                                depRepQry31.parameterQuery = container.getDependentviewbyIdQry();
                                                String depquery31 = depRepQry31.generateViewByQry();
                                                HashMap viewbyidandqryMap31 = new HashMap();
                                                viewbyidandqryMap31.put(viewbys31.toArray()[0].toString(), depquery31);
                                                container.dependentviewbyIdQry.clear();
                                                container.depViewByConditionsmap.clear();
                                                container.setDependentviewbyIdQry(viewbyidandqryMap31);
                                            }
                                        }
                                        if (map12 != null && !map12.isEmpty()) {
                                            container.setDepViewByConditionsmap(map12);
                                        }
                                    }
                                    //end of level 3
                                    PbReportCollection collect21 = new PbReportCollection();
                                    collect21.reportId = dependentReportId21;
                                    collect21.ctxPath = requestCtxPath;//request.getContextPath();
                                    boolean openVal = true;
                                    collect21.getParamMetaData(openVal);
                                    collect21.timeDetailsArray = new ArrayList();
                                    collect21.timeDetailsArray = collect.timeDetailsArray;
                                    PbReportQuery depRepQry21 = new PbReportQuery();
                                    depRepQry21 = qryExec.formulateQuery(collect21, userId);
                                    depRepQry21.parameterType = container.getDepViewByConditionsmap();
                                    depRepQry21.parameterQuery = container.getDependentviewbyIdQry();
                                    String depquery21 = depRepQry21.generateViewByQry();
                                    HashMap viewbyidandqryMap21 = new HashMap();
                                    viewbyidandqryMap21.put(viewbys21.toArray()[0].toString(), depquery21);
                                    container.dependentviewbyIdQry.clear();
                                    container.depViewByConditionsmap.clear();
                                    container.setDependentviewbyIdQry(viewbyidandqryMap21);
                                }
                            }
                            if (map11 != null && !map11.isEmpty()) {
                                container.setDepViewByConditionsmap(map11);
                            }
                        }
                        //end of level2
                        PbReportCollection collect1 = new PbReportCollection();
                        collect1.reportId = dependentReportId;
                        collect1.ctxPath = requestCtxPath;//request.getContextPath();
                        boolean openVal = true;
                        collect1.getParamMetaData(openVal);
                        collect1.timeDetailsArray = new ArrayList();
                        collect1.timeDetailsArray = collect.timeDetailsArray;
                        PbReportQuery depRepQry = new PbReportQuery();
                        depRepQry = qryExec.formulateQuery(collect1, userId);
                        if (container.getDepViewByConditionsmap() != null && !container.getDepViewByConditionsmap().isEmpty()) {
                            depRepQry.parameterType = container.getDepViewByConditionsmap();
                        }
                        if (container.getDependentviewbyIdQry() != null && !container.getDependentviewbyIdQry().isEmpty()) {
                            depRepQry.parameterQuery = container.getDependentviewbyIdQry();
                        }
                        String depquery = depRepQry.generateViewByQry();
                        HashMap viewbyidandqryMap = new HashMap();
                        viewbyidandqryMap.put(viewbys.toArray()[0].toString(), depquery);
                        container.dependentviewbyIdQry.clear();
                        container.depViewByConditionsmap.clear();
                        container.setDependentviewbyIdQry(viewbyidandqryMap);
                    }
                }
                if (map1 != null && !map1.isEmpty()) {
                    container.setDepViewByConditionsmap(map1);
                }

            }
            //end of level 1
            // end of generating multilevel reportquery
            // Code Added By Amar for Hybrid Report
            PbReturnObject summerizedMsrRetObj = null;
            if (container.isSummarizedMeasuresEnabled()) {
                summerizedMsrRetObj = this.summerizedMeasuresReturnObject(container, userId);
            }
            // end of code
            PbReportQuery reportQuery = qryExec.formulateQuery(collect, userId);
            if (container.getDepViewByConditionsmap() != null && !container.getDepViewByConditionsmap().isEmpty()) {
                reportQuery.parameterType = container.getDepViewByConditionsmap();
            }
            if (container.getDependentviewbyIdQry() != null && !container.getDependentviewbyIdQry().isEmpty()) {
                reportQuery.parameterQuery = container.getDependentviewbyIdQry();
            }
            // System.out.println("reportQuery"+reportQuery);
            if (Boolean.parseBoolean(container.getgTAverage()) == true) {
                PbReturnObject KpiretObj = new PbReturnObject();
                KpiretObj = this.getKpiRetObjforgrandtotals(container, collect, userId);
                container.setKpiRetObj(KpiretObj);
            }
            reportQuery.setFilePath(filepath1);//added by sruthi for setpath scheduling 22/12/2014 after
            String query = reportQuery.generateViewByQry();
            container.setViewbyqry(reportQuery);
            //Added by Amar for renaming measure
            if (collect.tableColNames != null && !collect.tableColNames.isEmpty()) {  // for generating crosstab msrnames while in renaming msr
                for (int i = container.getViewByCount(); i < collect.tableColNames.size(); i++) {
                    CrosstabMsrMap.put(collect.tableElementIds.get(i).toString(), collect.tableColNames.get(i).toString());
                }
            }
            //end of code
            if (pbretObj == null) {
//                ProgenLog.log(ProgenLog.FINE, this, "prepareReport", "Going to Fire Query " + System.currentTimeMillis());
                logger.info("Going to Fire Query " + System.currentTimeMillis());
//                    pbretObj = qryExec.executeQuery(collect, query);//repQuery.getPbReturnObjectWithFlag(String.valueOf(reportQryElementIds.get(0)), query);//, session);
                pbretObj = qryExec.executeQuery(collect, query, false);

                if (collect.reportColViewbyValues != null && !collect.reportColViewbyValues.isEmpty()) {
                    PbReturnObject retObj = (PbReturnObject) pbretObj;
                    retObj.rowViewBys = reportQuery.getOrgRowViewbyCols();
                    retObj.ColViewBys = reportQuery.getColViewbyCols();
                    retObj.totalViewBys = reportQuery.getRowViewbyCols().size();
                    retObj.totalOrderbys = reportQuery.getRowViewbyCols().size();
                    retObj.rowViewCount = reportQuery.getOrgRowViewbyCols().size();
                    retObj.colViewCount = reportQuery.getColViewbyCols().size();
                    retObj.nonViewInput = reportQuery.NonViewByMap;
                    retObj.Qrycolumns = reportQuery.getQryColumns();
                    retObj.crosstabMsrMap = CrosstabMsrMap;
                    collect.setCrosstabMsrMap(CrosstabMsrMap);
                    retObj.meausreOnCol = true;
                    if (container.getMeasurePosition() != -1) {
                        retObj.MeasurePos = container.getMeasurePosition();
                    } else {
                        retObj.MeasurePos = reportQuery.getColViewbyCols().size();
                        container.setMeasurePosition(retObj.MeasurePos);
                    }

                    //              retObj.MeasurePos = reportQuery.getColViewbyCols().size();
//                    retObj.gtType = "LAST";
                    retObj.subGtType = "AFTER";
                    //retObj.gtType = collect.crosstabGTDisplayPos;
                    retObj.gtType = container.getCrosstabGrandTotalDisplayPosition();
                    //                   retObj.subGtType = collect.crosstabSTDisplayPos;
                    if (retObj.gtType.equalsIgnoreCase("NONE") || retObj.gtType.equalsIgnoreCase("") || retObj.gtType == null) {
                        retObj.isGTNone = true;
                    }
//                    if (retObj.subGtType.equalsIgnoreCase("NONE") || retObj.subGtType.equalsIgnoreCase("") || retObj.subGtType == null) {
//                        retObj.isSTNone = true;
//                    }
//                          if(retObj.gtType.equalsIgnoreCase("NONE") || retObj.gtType.equalsIgnoreCase("") || retObj.gtType == null)
//                            retObj.isGTNone=true;
//                         if(retObj.subGtType.equalsIgnoreCase("NONE") || retObj.subGtType.equalsIgnoreCase("") || retObj.subGtType == null)
//                            retObj.isSTNone=true;
                    //repQuery.setGrandTotalSubTotalDisplayPosition(collect.crosstabGTDisplayPos, collect.crosstabSTDisplayPos);
                    // Code added by Amar for Hybrid report
                    retObj.summarizedMeasuresEnabled = container.isSummarizedMeasuresEnabled();
                    retObj.summerizedTableHashMap = container.getSummerizedTableHashMap();
                    retObj.summerizedMsrRetObj = summerizedMsrRetObj;
                    // end of code
                    newCrossRetObj = retObj.transposeReturnObject();
                    ProgenChartDatasets dataset = new ProgenChartDatasets();
                    dataset.isIsCrosstab();
                    container.setRetObj(newCrossRetObj);
                    collect.setNonViewByMap(reportQuery.NonViewByMap);
                    boolean ismeasurePos = container.setMeasurePosition(reportQuery.getColViewbyCols().size());
                    dbColumns = newCrossRetObj.getColumnNames();
                    columnTypes = newCrossRetObj.getColumnTypes();
//                          if (isMeasChangeEvent == false && ChangeViewByEvent == false && isGrpMeasChgEvent == false && isParmChngEvent == false && isMapMeasChgEvent == false) {
                    container.setReportMode("view");
//                            container.resetBackUpVariables();//newly added by santhosh.kumar@progenbusiness.com to reset back up variables;
//                            if ("".equals(collect.tableDisplayRows) || "All".equalsIgnoreCase(collect.tableDisplayRows)) {
////                        container.setTableDisplayRows(((Integer) pbretObj.getRowCount()).toString());
//                                container.setPagesPerSlide(((Integer) newCrossRetObj.getRowCount()).toString());
//                }
//                        }
                    container.setCrosstabColumnSpan(newCrossRetObj.colSpanMap);
                    // System.out.println("newCrossRetObj.colSpanMap in scheduler"+newCrossRetObj.colSpanMap+"size"+newCrossRetObj.colSpanMap.size());
                } else {
                    container.setRetObj(pbretObj);
                    container.setGrret(pbretObj);
                    container.setSqlStr(query);
                    container.setNoOfDays(reportQuery.getNoOfDays());
                    collect.setNonViewByMap(reportQuery.NonViewByMap);
                }
                container.setNoOfDays(reportQuery.getNoOfDays());
            }
            container.setSqlStr(query);
            if (collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() != 0) {
                container.setColumnViewByCount(String.valueOf(collect.reportColViewbyValues.size()));
                container.setColumnViewByName(collect.getElementName(String.valueOf(collect.reportColViewbyValues.get(0))));
                container.setColumnViewByElementIds(collect.reportColViewbyValues);
            } else {
                container.setColumnViewByCount("0");
            }

            if ((collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() != 0)) {//for cross tab report

                int viewByCount = collect.reportRowViewbyValues.size();

                int count = 0;
                for (int colNum = 0; colNum < dbColumns.length; colNum++) {
                    if (dbColumns[colNum].equalsIgnoreCase("A1")) {
                        for (int j = colNum; j < dbColumns.length; j++) {
                            count = count + 1;
                        }
                        break;
                    }

                }
                for (int colNum = 0; colNum < count; colNum++) {
                    if (colNum <= (viewByCount - 1)) {
                        displayLabels.add(collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(colNum))));
                        displayColumns.add(dbColumns[colNum]);
                    } else {//order need to changes here
                        displayLabels.add(newCrossRetObj.nonViewByMapNew.get(String.valueOf(newCrossRetObj.CrossTabfinalOrder.get(colNum - viewByCount))));
                        displayColumns.add(newCrossRetObj.CrossTabfinalOrder.get(colNum - viewByCount));

                    }

                }

                ArrayList viewByColumnsAlist = new ArrayList();
                ArrayList viewByElementdIdAlist = new ArrayList();
                for (int i = 0; i < viewByCount; i++) {
                    viewByColumnsAlist.add(String.valueOf(displayLabels.get(i)));
                    if (String.valueOf(displayColumns.get(i)).equalsIgnoreCase("TIME")) {
                        viewByElementdIdAlist.add(String.valueOf(displayColumns.get(i)));

                    } else {
                        viewByElementdIdAlist.add(String.valueOf(displayColumns.get(i)).substring(2));

                    }
                }
                container.setViewByColNames(viewByColumnsAlist);
                container.setViewByElementIds(viewByElementdIdAlist);
                container.setViewByCount((viewByCount));

                dataTypes = container.getDataTypes();
                displayTypes = container.getDisplayTypes();
                // Code added by Amar to add dataTypes on 24 Dec, 2014
                if (displayColumns.size() > displayTypes.size()) {
                    for (int i = 0; i < displayColumns.size(); i++) {
                        if (i >= displayTypes.size()) {
                            displayTypes.add("T");
                        }
                    }
                }
                if (displayColumns.size() > dataTypes.size()) {
                    for (int i = 0; i < displayColumns.size(); i++) {
                        if (i >= dataTypes.size()) {
                            dataTypes.add("N");
                        }
                    }
                }
                container.setDataTypes(dataTypes);
                container.setDisplayTypes(displayTypes);
                // end of code
            } else {
                displayColumns = container.getDisplayColumns();
                displayLabels = container.getDisplayLabels();
                dataTypes = container.getDataTypes();
                displayTypes = container.getDisplayTypes();
                displayColumns = (displayColumns == null || displayColumns.isEmpty()) ? collect.tableElementIds : displayColumns;
                dataTypes = (dataTypes == null || dataTypes.isEmpty()) ? collect.tableColTypes : dataTypes;
                displayTypes = (displayTypes == null || displayTypes.isEmpty()) ? collect.tableColDispTypes : displayTypes;
//                    signs = collect.columnSignType;
                if (displayLabels == null || displayLabels.isEmpty()) {
                    displayLabels = collect.tableColNames;
                }
                // Added by Amar to add dataTypes on 24 Dec, 2014
                if (displayColumns.size() > dataTypes.size()) {
                    for (int i = 0; i < displayColumns.size(); i++) {
                        if (i >= dataTypes.size()) {
                            dataTypes.add("N");
                        }
                    }
                }
                // end of code
//                    container.setDisplayColumns(displayColumns);
                container.setDataTypes(dataTypes);
                container.setDisplayTypes(dataTypes);
//                    container.setDisplayLabels(displayLabels);
            }
            container.setDisplayLabels(displayLabels);
            container.setDisplayColumns(displayColumns);

//code commentted by Amar to resolve hidden measure issue while applying properties like sorting and exxcluse/include zero
//// Start of code by Nazneen for hidding measures during Excel download report
//            ArrayList cols = (ArrayList) container.getDisplayColumns().clone();
//                ArrayList disCols = (ArrayList) container.getDisplayLabels().clone();
//                ArrayList dTypes = (ArrayList) container.getDataTypes().clone();
//                 ArrayList<String> hiddenCols = container.getReportCollect().getHideMeasures();
//                 HashMap<String, String> crosstabMeasureId = ((PbReturnObject) container.getRetObj()).crosstabMeasureId;
//                             if (container.isReportCrosstab() || crosstabMeasureId!=null && !crosstabMeasureId.isEmpty()) {
//                                    String eleIdss = "";
//                            for (Object hiddenCol : hiddenCols) {
//                                     for(int i=0;i<cols.size();i++){
//                                         eleIdss = crosstabMeasureId.get(cols.get(i));
//                                         if(eleIdss!=null && !eleIdss.equalsIgnoreCase("null") && !eleIdss.equalsIgnoreCase("")){
//                                         if(hiddenCols.contains(eleIdss.replace("A_", ""))){
//                                             cols.remove(i);
//                                            disCols.remove(i);
//                                            dTypes.remove(i);
//                                         }}
//                                     }
//                                 }
//                             } else {
//                              for (Object hiddenCol : hiddenCols) {
//                                int index = cols.indexOf("A_" + hiddenCol.toString());
//                                if (index != -1) {
//                                    cols.remove(index);
//                                    disCols.remove(index);
//                                    dTypes.remove(index);
//                                }
//                            }}
//                 container.setDisplayLabels(disCols);
//            container.setDisplayColumns(cols);
//            container.setDisplayTypes(dTypes);
//            //Added By Amar to hidden measure while applying sorting
//            container.setDataTypes(dTypes);
//            //end of code
//// End of code by Nazneen for hidding measures during Excel download report
            //System.out.println("displayLabels"+displayLabels.toString());
            container.setViewByCount((collect.reportRowViewbyValues.size()));
            if (collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() > 0) { //code uncomentted by Amar
                container.setReportCrosstab(true);

            } else {
                container.setReportCrosstab(false);
            }
            HashMap GraphHashMap = container.getGraphHashMap();
            if (GraphHashMap.get("graphIds") != null && !GraphHashMap.get("graphIds").toString().isEmpty()) {//modified by Dinanath
                String[] graphIds = String.valueOf(GraphHashMap.get("graphIds")).split(",");
                HashMap[] graphMapDetails = new HashMap[graphIds.length];
                for (int i = 0; i < graphIds.length; i++) {
                    graphMapDetails[i] = (HashMap) GraphHashMap.get(graphIds[i]);
                    String dispRows = (String) graphMapDetails[i].get("graphDisplayRows");
                    if (graphMapDetails[i] != null) {
                        graphMapDetails[i].put("startindex", "0");
                        graphMapDetails[i].put("endindex", dispRows);

                        GraphHashMap.put(graphIds[i], graphMapDetails[i]);
                    }
                }
            }
            container.setGraphHashMap(GraphHashMap);
//
//                        }
            if (collect.reportColViewbyValues != null && !collect.reportColViewbyValues.isEmpty()) {
                if (collect.getNumberFormat() != null) {
                    Set nfKeys = collect.getNumberFormat().keySet();
                    HashMap NFMap = collect.getNumberFormat();
                    HashMap NFMapCT = new HashMap();
                    Iterator nfKeysIter = nfKeys.iterator();
                    int whichMeasure;
                    while (nfKeysIter.hasNext()) {
                        String measElement = (String) nfKeysIter.next();
                        String nbrSymbol = (String) NFMap.get(measElement);
                        if (nbrSymbol != null && !nbrSymbol.equals("")) {
                            whichMeasure = Measures.lastIndexOf(measElement);
                            whichMeasure += (container.getViewByCount());
                            int size = displayColumns.size();
                            String colName;
                            for (int i = whichMeasure; i < size;) {
                                colName = (String) displayColumns.get(i);
                                NFMapCT.put(colName, nbrSymbol);
                                i += Measures.size();
                            }
                            NFMapCT.put(measElement, nbrSymbol);
                        }
                    }
                    TableHashMap.put("NFMap", NFMapCT);
                }
                if (collect.getRoundingPrecision() != null) {
                    int whichMeasure;
                    Set RndPrcsnKeys = collect.getRoundingPrecision().keySet();
                    HashMap<String, Integer> RndPrcsnMap = collect.getRoundingPrecision();
                    Iterator precisionItr = RndPrcsnKeys.iterator();
                    while (precisionItr.hasNext()) {
                        String measElement = (String) precisionItr.next();
                        int Precision = RndPrcsnMap.get(measElement);
                        container.setRoundPrecisionForMeasure(measElement, Precision);

                    }

                }

            } else {
                //this.initializeSignsForMeasures(container);
                if (collect.getNumberFormat() != null) {
                    TableHashMap.put("NFMap", collect.getNumberFormat());
                }
                if (collect.getRoundingPrecision() != null) {
                    Set RndPrcsnKeys = collect.getRoundingPrecision().keySet();
                    HashMap<String, Integer> RndPrcsnMap = collect.getRoundingPrecision();
                    Iterator precisionItr = RndPrcsnKeys.iterator();
                    while (precisionItr.hasNext()) {
                        String measElement = (String) precisionItr.next();
                        int Precision = RndPrcsnMap.get(measElement);
                        container.setRoundPrecisionForMeasure(measElement, Precision);

                    }

                }

            }
            container.initializeRuntimeMeasures();
            //Added by Amar On Aug 6, 2015
//            ReportParameter repParam = container.getReportParameter();
//                    if (repParam == null) {
//                        repParam = new ReportParameter();
//
//                    }
//                    repParam.setReportParameters(collect.reportParametersValues);
//                    ArrayList<String> colViewBys = new ArrayList<String>();
//                    if (container.isReportCrosstab()) {
//                        colViewBys = container.getColumnViewByElementIds();
//
//                    }
//                    ArrayList rowViewBys = container.getViewByElementIds();
//                    repParam.setViewBys(rowViewBys, colViewBys);
//                    ColorGroup clr = container.getColorGroup();
//                    repParam.addObserver(clr);
//                    repParam.notifyObserversOfUpdate(container.getNoOfDays());
            //end of code
            //added by Nazneen on 25 Nov 2014 for including sorting
//            if (collect.tablePropertiesXML != null) {
//                        ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.updateTablePropertiesInContainer(container, collect.tablePropertiesXML);
//                    }
            //TableHashMap.put("TableProperties", TableProperties);
            //ended by Nazneen on 25 Nov 2014 for including sorting
        } catch (Exception ex) {
            try {
                StringWriter str = new StringWriter();
                PrintWriter writer = new PrintWriter(str);
//                ex.printStackTrace(writer);
                container.getReportCollect().setLogBoolean(true);
                log4u.fileWriter(str.getBuffer().toString());
            } catch (Exception e) {
            }
        }
        return container;
    }

    public String getScheduledNames(String reportId, String userId) {
        PbReportViewerDAO dao = new PbReportViewerDAO();
        PbReturnObject retobj = dao.getScheduledNames(reportId, userId);
        HashMap<String, List> map = new HashMap<String, List>();
        if (retobj != null) {
            List<String> schedulerId = new LinkedList<String>();
            List<String> schedulerNames = new LinkedList<String>();
            List<ReportSchedule> schedule = new LinkedList();
            for (int i = 0; i < retobj.getRowCount(); i++) {
                Gson json = new Gson();
                java.lang.reflect.Type type = new TypeToken<List<ReportSchedule>>() {
                }.getType();
                List<ReportSchedule> scheduleList = json.fromJson(retobj.getFieldValueString(i, "SCHEDULER_DETAILS"), type);
                Date sdate = retobj.getFieldValueDate(i, "SCHEDULE_START_DATE");
                Date edate = retobj.getFieldValueDate(i, "SCHEDULE_END_DATE");
                if (scheduleList != null && !scheduleList.isEmpty()) {
                    for (ReportSchedule schedule1 : scheduleList) {
                        schedule1.setStartDate(sdate);
                        schedule1.setEndDate(edate);
                        schedule.add(schedule1);
                    }
                }
            }
            for (int i = 0; i < schedule.size(); i++) {
                ReportSchedule rschedule = new ReportSchedule();
                rschedule = schedule.get(i);
                // 
                Date today = new Date();
                SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
                int MILLIS_IN_DAY = 1000 * 60 * 60 * 24;
                if (today.before(new Date(formatter.format(rschedule.getEndDate().getTime() + MILLIS_IN_DAY)))) {
                    schedulerId.add(String.valueOf(rschedule.getReportScheduledId()));
                    schedulerNames.add(rschedule.getSchedulerName());
                }
            }
            map.put("schedulerIds", schedulerId);
            map.put("schedulerNames", schedulerNames);
        }
        Gson json = new Gson();
        String jsonString = json.toJson(map);
        return jsonString;
    }

    public String getSchedulerDetails(String schedulerId) {
        PbReportViewerDAO dao = new PbReportViewerDAO();
        ReportSchedule schedule = dao.getSchedulerDetails(schedulerId);
        Gson json = new Gson();
        String jsonString = json.toJson(schedule);
        return jsonString;

    }
//Added By Ram 02Nov2015 For Dashboard Schedule

    public String getSchedulerDashboardDetails(String schedulerId) {
        PbReportViewerDAO dao = new PbReportViewerDAO();
        ReportSchedule schedule = dao.getSchedulerDetailsDashboard(schedulerId);
        Gson json = new Gson();
        String jsonString = json.toJson(schedule);
        return jsonString;

    }

    public HashMap viewScheduleReportDetails(String userId) throws SQLException {
        PbReportViewerDAO dao = new PbReportViewerDAO();
        PbReturnObject retobj = dao.viewScheduleReportDetails(userId);
        HashMap<String, List> map = new HashMap<String, List>();
        if (retobj != null) {
            List<String> url = new LinkedList<String>();
            List<ReportSchedule> schedule = new LinkedList<ReportSchedule>();
            List<String> schedulerNames = new LinkedList<String>();
            List<String> sreportId = new LinkedList<String>();
            List<String> reportName = new LinkedList<String>();
            List<String> schedulerId = new LinkedList<String>();
            for (int i = 0; i < retobj.getRowCount(); i++) {
                schedulerId.add(retobj.getFieldValueString(i, "PRG_PERSONALIZED_ID"));
                if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                    String snapurl = retobj.getFieldUnknown(i, 11).replace(";", "&") + "&isSnapShot=true&SnapShotId=" + retobj.getFieldValueString(i, 0);
                    url.add(snapurl);
                } else {
                    String snapurl = retobj.getFieldValueClobString(i, "SNAP_URL").replace(";", "&") + "&isSnapShot=true&SnapShotId=" + retobj.getFieldValueString(i, "PRG_PERSONALIZED_ID");
                    url.add(snapurl);
                }

                Gson json = new Gson();
                java.lang.reflect.Type type = new TypeToken<List<ReportSchedule>>() {
                }.getType();
                List<ReportSchedule> scheduleList = json.fromJson(retobj.getFieldValueString(i, "SCHEDULER_DETAILS"), type);
                Date sdate = retobj.getFieldValueDate(i, "SCHEDULE_START_DATE");
                Date edate = retobj.getFieldValueDate(i, "SCHEDULE_END_DATE");
                if (scheduleList != null && !scheduleList.isEmpty()) {
                    for (ReportSchedule schedule1 : scheduleList) {
                        schedule1.setStartDate(sdate);
                        schedule1.setEndDate(edate);
                        schedule.add(schedule1);
                    }
                }
            }
            for (int i = 0; i < schedule.size(); i++) {
                ReportSchedule rschedule = new ReportSchedule();
                rschedule = schedule.get(i);
                // 
                Date today = new Date();
                SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
                int MILLIS_IN_DAY = 1000 * 60 * 60 * 24;
                if (!today.before(new Date(formatter.format(rschedule.getEndDate().getTime() + MILLIS_IN_DAY)))) {
                    int index = schedulerId.indexOf(String.valueOf(rschedule.getReportScheduledId()));
                    schedulerId.remove(index);
                    url.remove(index);
                } else {
                    schedulerNames.add(schedule.get(i).getSchedulerName());
                    sreportId.add(String.valueOf(schedule.get(i).getReportId()));
                    PbDb pbdb = new PbDb();
                    PbReturnObject pbretObj = pbdb.execSelectSQL("select * from prg_ar_report_table_master where report_id=" + schedule.get(i).getReportId());
                    reportName.add(pbretObj.getFieldValueString(0, 2));
                }
            }
            map.put("schedulerNames", schedulerNames);
            map.put("reportName", reportName);
            map.put("url", url);
        }

        return map;
    }

    public void updateScriptAlign(Container container, String colname, String disColname, String scriptAlign) {

        container.setTextAlignments(colname, scriptAlign);

    }

    public void updateMeasureAlign(Container container, String colname, String disColname, String measureAlign) {

        container.setMeasureAlignments(colname, measureAlign);

    }//added by sruthi for measurecolor

    public void updateMeasureColor(Container container, String colname, String disColname, String measureColor) {

        container.setMeasureColor(colname, measureColor);

    }//ended by sruthi

    public void updateScriptColor(Container container, String colname, String disColname, String scriptColor) {

        container.setTextColor(colname, scriptColor);

    }
    //added by sruthi for background color in tablecolumn pro
     public void updateMeasureBgColor(Container container, String colname, String disColname, String measurebgColor) {

        container.setMeasureBgColor(colname, measurebgColor);

    }//ended by sruthi
public void updateviewbyalign(Container container, String colname, String disColname, String viewbyalign){
    container.setviewbyAlignments(colname,viewbyalign);
}
public void updateviewbydataalign(Container container, String colname, String disColname, String viewbydataalign){
    container.setViewbydataAlignments(colname, viewbydataalign);
}
    public void intializeMeasureCall(Container container) {
        this.initializeSignsForMeasures(container);
    }

    public String getViewbysRelatedReport(String reportid, String from) {
        PbReportViewerDAO dao = new PbReportViewerDAO();
        Map map = dao.getViewbysRelatedReport(reportid, from);
        ArrayList viewbys = (ArrayList) map.get("viewbys");
        HashMap reportmap = (HashMap) map.get("reports");
        HashMap assignedMap = (HashMap) map.get("assigned");
        HashMap conditionMap = (HashMap) map.get("conditions");
        ArrayList reportrltdViewById = new ArrayList();

        String viewByinfo = null;
        String[] viewByArr = null;
        String reportinfo = null;
        String[] reportArr = null;

        String assignedInfo = null;
        String conditionInfo = null;

        StringBuilder viewBys = new StringBuilder();
        StringBuilder reports = new StringBuilder();
        StringBuilder viewbyIds = new StringBuilder();
        StringBuilder assignedIds = new StringBuilder();
        StringBuilder conditions = new StringBuilder();

        viewBys.append("{ ViewByIdNames:[");
        viewbyIds.append(" ViewByIds:[");
        reports.append(" reports:[");
        assignedIds.append(" assignedIds:[");
        conditions.append(" conditions:[");

        HashMap gsonMap = new HashMap();
        for (int i = 0; i < viewbys.size(); i++) {
            viewByinfo = (String) viewbys.get(i);

            viewBys.append("\"").append(viewByinfo).append("\"");
//            

            viewByArr = viewByinfo.split("&");
            if (reportmap.get(viewByArr[1]) != null) {
                reportrltdViewById.add(viewByArr[1]);
            }
            assignedInfo = (String) assignedMap.get(viewByArr[1]);
            conditionInfo = (String) conditionMap.get(viewByArr[1]);
            assignedIds.append("\"").append(assignedInfo).append("\"");
            conditions.append("\"").append(conditionInfo).append("\"");
            if (i != viewbys.size() - 1) {
                viewBys.append(",");
                assignedIds.append(",");
                conditions.append(",");
            }
        }
//        gsonMap.put("ViewBYIDNAME", viewBys.toString());
//        gsonMap.put("viewbyIds", viewbyIds.toString());
        for (int k = 0; k < reportrltdViewById.size(); k++) {
            viewbyIds.append("\"").append(reportrltdViewById.get(k)).append("\"");
//               
            ArrayList reportlist = (ArrayList) reportmap.get(reportrltdViewById.get(k));

            if (!reportlist.isEmpty() && reportlist != null) {
                for (int j = 0; j < reportlist.size(); j++) {
                    reportinfo = (String) reportlist.get(j);
                    reports.append("\"").append(reportinfo).append("\"");
                    if (j != reportlist.size() - 1) {
                        reports.append(",");
                    }
                }

            }
            gsonMap.put(reportrltdViewById.get(k), reports.toString());
            if (k != reportrltdViewById.size() - 1) {
                reports.append(",").append("\"").append("a12ab").append("\"").append(",");
                viewbyIds.append(",");
            }
        }

        viewBys.append("] ,").append(viewbyIds).append("],").append(reports).append("] ,").append(assignedIds).append("] ,").append(conditions).append("] }");
        // 

//        gsonMap.put("ViewBYIDNAME", viewBys.toString());
//        gsonMap.put("viewbyIds", viewbyIds.toString());
        return viewBys.toString();
    }

    public String modifyMeasure(String reportid) {
        PbReportViewerDAO dao = new PbReportViewerDAO();
        Map map = dao.modifyMeasure(reportid);

        ArrayList measureName = (ArrayList) map.get("measureName");
        ArrayList measureId = (ArrayList) map.get("measureId");
        ArrayList<String> Symbols = (ArrayList) map.get("symbols");
        ArrayList<String> Alignment = (ArrayList) map.get("Alignment");
        ArrayList<String> Fontcolor = (ArrayList) map.get("fontcolor");
        ArrayList<String> BGcolor = (ArrayList) map.get("bgcolor");
        ArrayList<String> Negative_val = (ArrayList) map.get("negative_val");
        ArrayList<String> No_format = (ArrayList) map.get("no_format");
        ArrayList<String> Round = (ArrayList) map.get("round");
        Map fcolorsmap = (Map) map.get("fcolorsmap");
        StringBuilder measurename = new StringBuilder();
        StringBuilder measureid = new StringBuilder();
        StringBuilder symbols = new StringBuilder();
        StringBuilder alignment = new StringBuilder();
        StringBuilder fontcolor = new StringBuilder();
        StringBuilder bgcolor = new StringBuilder();
        StringBuilder negative_val = new StringBuilder();
        StringBuilder no_format = new StringBuilder();
        StringBuilder round = new StringBuilder();

        StringBuilder colors = new StringBuilder();
        StringBuilder colorIds = new StringBuilder();

        String measurenames = null;
        String measureids = null;
        measurename.append("{ measureName:[");
        measureid.append(" measureId:[");
        symbols.append(" symbols:[");
        alignment.append(" alignment:[");
        fontcolor.append(" fontcolor:[");
        bgcolor.append(" bgcolor:[");
        negative_val.append(" negative_val:[");
        no_format.append(" no_format:[");
        round.append(" round:[");
        colors.append("colors:[");
        colorIds.append("colorIds:[");
        for (Object entry : fcolorsmap.entrySet()) {
            colorIds.append("\"").append(((Map.Entry<String, String>) entry).getValue()).append("\",");
            colors.append("\"").append(((Map.Entry<String, String>) entry).getKey()).append("\",");
        }

        for (int i = 0; i < measureName.size(); i++) {
            measurenames = (String) measureName.get(i);
            measureids = (String) measureId.get(i);

            measurename.append("\"").append(measurenames).append("\"");
            measureid.append("\"").append(measureids).append("\"");
            symbols.append("\"").append((String) Symbols.get(i)).append("\"");
            alignment.append("\"").append((String) Alignment.get(i)).append("\"");
            fontcolor.append("\"").append((String) Fontcolor.get(i)).append("\"");
            bgcolor.append("\"").append((String) BGcolor.get(i)).append("\"");
            negative_val.append("\"").append((String) Negative_val.get(i)).append("\"");
            no_format.append("\"").append((String) No_format.get(i)).append("\"");
            round.append("\"").append((String) Round.get(i)).append("\"");

//            
//           if(reportmap.get(viewByArr[1])!=null){
//           reportrltdViewById.add(viewByArr[1]);
//           }
//           assignedInfo=(String)assignedMap.get(viewByArr[1]);
//           conditionInfo=(String)conditionMap.get(viewByArr[1]);
//           assignedIds.append("\"").append(assignedInfo).append("\"");
//           conditions.append("\"").append(conditionInfo).append("\"");
            if (i != measureName.size() - 1) {
                measurename.append(",");
                measureid.append(",");
                symbols.append(",");
                alignment.append(",");
                fontcolor.append(",");
                bgcolor.append(",");
                negative_val.append(",");
                no_format.append(",");
                round.append(",");
//                assignedIds.append(",");
//                conditions.append(",");
            }
        }
        measurename.append("] ,").append(measureid).append("] ,").append(colors).append("] ,").append(colorIds).append("] ,").append(symbols).append("] ,").append(alignment).append("] ,").append(fontcolor).append("] ,").append(bgcolor).append("] ,").append(negative_val).append("] ,").append(no_format).append("] ,").append(round).append("] }");
        return measurename.toString();
    }

    public String generateInsightDrillData(String viewById, String dimValue, String paramVals, String masterDimId, String reportId, HttpServletRequest request, String childDimId) {
        InsightsBD insightbd = new InsightsBD();
        boolean drillAvailable = false;
        ArrayList<String> rowviewBys = new ArrayList<String>();

        String paramId = null;
        String pmName = "";
        String firstDimId = null;
        StringBuilder pmFunction = new StringBuilder();
        Container container = Container.getContainerFromSession(request, reportId);
        Map<String, String> drillMap = container.getReportCollect().getDrillMap();
        ArrayList paramIds = (ArrayList) container.getParametersHashMap().get("Parameters");
        ArrayList paramNames = (ArrayList) container.getParametersHashMap().get("ParametersNames");
        // 
        ArrayList<String> displayCols = container.getDisplayColumns();
        ArrayList<String> displayLabels = container.getDisplayLabels();

        String tempDimId = childDimId;
        if (tempDimId == null) {
            tempDimId = viewById;
        }

        //int dimIndex = -1;
        if (childDimId != null) {
            masterDimId = masterDimId + "," + childDimId;
        } else {
            masterDimId = viewById;
        }

        //HashMap paramMap =getParamMap(paramVals);
        HashMap paramMap = getNewParamMap(paramVals);

        if (dimValue != null) {
            List<String> parameterValue = new ArrayList<String>();
            parameterValue.add(dimValue);
            paramMap.put(viewById, parameterValue);
        }
        for (int j = 0; j < paramNames.size(); j++) {
            paramId = paramIds.get(j).toString();
            pmName = paramNames.get(j).toString();

            if (masterDimId != null) {
                if (!masterDimId.contains(paramId)) {
                    if (firstDimId == null) {
                        firstDimId = paramId;
                    }
                    pmFunction.append("<li><a class=\"collapsed\" onclick=\"").append("loadChildDrillData('DIV_ID','").append(masterDimId).append("','").append(tempDimId).append("','DIMENSION_DATA','CHILD_DIV_ID','").append(paramMap.toString()).append("','").append(paramId).append("',true);\"").append(">").append(pmName).append("</a></li>");
                }
            }
        }
        StringBuilder drillHtml = new StringBuilder();
        if (pmFunction.length() > 0) {
            drillHtml.append("<ul class=\"dropDownMenu\">");
            drillHtml.append("<li><a href=\"#\" style=\"background-color:#FFFFFF\">DIMENSION_DATA</a>");
            drillHtml.append("<ul style=\"width:20x\">");
            drillHtml.append(pmFunction);
            drillHtml.append("</ul></li></ul>");
        }
        String drillHtmlStr = drillHtml.toString();

        int dimIndex = -1;
        if (childDimId == null) {
            drillAvailable = insightbd.isDrillAvailable(drillMap, viewById, paramIds);
            rowviewBys.add(viewById);
            dimIndex = paramIds.indexOf(viewById);
        } else {
            drillAvailable = insightbd.isDrillAvailable(drillMap, childDimId, paramIds);
            rowviewBys.add(childDimId);
            dimIndex = paramIds.indexOf(childDimId);
        }
        String dimName = null;
        if (dimIndex >= 0) {
            dimName = (String) paramNames.get(dimIndex);
        }

        PbReportQuery repQuery = new PbReportQuery();
        PbReturnObject retObj = null;
        ArrayList<String> qryColIds = new ArrayList<String>();
        ArrayList<String> qryColsNames = new ArrayList<String>();

        PbReportCollection collect = container.getReportCollect();
        qryColIds = collect.reportQryElementIds;
        qryColsNames = collect.reportQryColNames;
        QueryExecutor qryExec = new QueryExecutor();

        StringBuilder output = new StringBuilder();
        if (!qryColIds.isEmpty()) {
            repQuery.setRowViewbyCols(rowviewBys);
            repQuery.setColViewbyCols(collect.reportColViewbyValues);
            repQuery.setInMap(paramMap);
            logger.info("inMap........." + paramMap);
            //repQuery.setParamValue(paramMap);
            repQuery.setQryColumns(collect.reportQryElementIds);
            repQuery.setColAggration(collect.reportQryAggregations);

            repQuery.setTimeDetails(collect.timeDetailsArray);
            repQuery.isKpi = false;
            repQuery.setReportId(collect.reportId);
            repQuery.setBizRoles(collect.reportBizRoles[0]);
            repQuery.setUserId(userId);
            try {
                String query = repQuery.generateViewByQry();
                //   
                retObj = (PbReturnObject) qryExec.executeQuery(collect, query, false);
            } catch (Exception ex) {
                logger.error("Exception:", ex);
            }

        }
        output.append("<table width=\"100%\" border=\"1\" id=\"tablesorter\"  class=\"tablesorter\" style=\"border-collapse:collapse;border-left-style: hidden;border-right-style: hidden;\">");
        if (!qryColIds.isEmpty()) {
            if (retObj != null && retObj.getRowCount() > 0) {
                output.append("<thead>");
                output.append("<tr>");
                if (drillAvailable || (!drillHtmlStr.isEmpty())) {
                    output.append("<th />");
                }
//                output.append("<th />");
                output.append("<th align=\"center\">").append("<font color=\"#000000\">").append(dimName).append("</font>").append("</th>");
//                for (int k=0;k<qryColsNames.size();k++)
//                  output.append("<th align=\"center\">").append("<font color=\"#000000\">").append(qryColsNames.get(k)).append("</font>").append("</th>");
                for (int k = 1; k < displayLabels.size(); k++) {
                    output.append("<th align=\"center\">").append("<font color=\"#000000\">").append(displayLabels.get(k)).append("</font>").append("</th>");
                }
                output.append("</tr>");
                output.append("</thead>");
                output.append("<tbody>");
                StringBuffer elementId = new StringBuffer();
                PbDb pbdb = new PbDb();
                HashMap<String, String> nfrmat = new HashMap<String, String>();
                HashMap<String, String> round = new HashMap<String, String>();
                NumberFormatter nf = new NumberFormatter();
                for (int i = 0; i < collect.reportQryElementIds.size(); i++) {
                    elementId.append(",'").append(collect.reportQryElementIds.get(i)).append("'");
                }
                String qry = "SELECT ELEMENT_ID,NO_FORMAT,ROUND FROM PRG_USER_SUB_FOLDER_ELEMENTS WHERE ELEMENT_ID in (" + elementId.substring(1) + ")";
                try {
                    PbReturnObject retObj1 = pbdb.execSelectSQL(qry);
                    if (retObj1.getRowCount() > 0) {
                        for (int i = 0; i < retObj1.getRowCount(); i++) {
                            nfrmat.put(retObj1.getFieldValueString(i, 0), retObj1.getFieldValueString(i, 1));
                            round.put(retObj1.getFieldValueString(i, 0), retObj1.getFieldValueString(i, 2));
                        }
                    }
                } catch (SQLException ex) {
                    logger.error("Exception:", ex);
                }
                for (int i = 0; i < retObj.getRowCount(); i++) {
                    String[] amount = new String[retObj.getColumnCount()];
                    for (int a = 0; a < retObj.getColumnCount(); a++) {
                        amount[a] = retObj.getModifiedNumber(retObj.getFieldValueBigDecimal(i, a), "", -1);
                    }

                    String dimData = retObj.getFieldValueString(i, 0);
                    String temp = dimData.replace(" ", "");
                    temp = temp.replace(".", "");
                    temp = temp.replace("(", "");
                    temp = temp.replace(")", "");
                    String str = UUID.randomUUID().toString();
                    String divId = str + "Div";
                    String childDivId = str + "ChildDiv";
                    output.append("<tr id='").append(divId).append("'>");
                    String tempStr = drillHtmlStr;
                    tempStr = tempStr.replaceAll("CHILD_DIV_ID", childDivId);
                    tempStr = tempStr.replaceAll("DIV_ID", divId);
                    tempStr = tempStr.replaceAll("DIMENSION_DATA", dimData);
                    if (drillAvailable || (!tempStr.isEmpty())) {
                        output.append("<td align=\"center\" class=\"collapsible\" rowspan=\"2\" width=\"20px\" style=\"border-bottom-style:hidden;\">");
                        if (drillAvailable) {
                            firstDimId = "";
                        }
                        if (childDimId == null) {
                            output.append("<a class=\"collapsed\" onclick=\"loadChildDrillData('").append(divId).append("','").append(masterDimId).append("','").append(viewById).append("','").append(dimData).append("','").append(childDivId).append("','").append(paramMap.toString()).append("','").append(firstDimId).append("',false);\"></a></td>");
                        } else {
                            output.append("<a class=\"collapsed\" onclick=\"loadChildDrillData('").append(divId).append("','").append(masterDimId).append("','").append(childDimId).append("','").append(dimData).append("','").append(childDivId).append("','").append(paramMap.toString()).append("','").append(firstDimId).append("',false);\"></a></td>");
                        }

                    }//if
                    if (tempStr.isEmpty()) {
                        output.append("<td align=\"center\" style=\"border-left-style: hidden;\">" + dimData + "</td>");
                    } else {
                        output.append("<td align=\"center\" style=\"border-left-style: hidden;\">" + tempStr + "</td>");
                    }
//                        for(int m=1;m<retObj.getColumnCount();m++)
//                             output.append("<td style=\"border-left-style: hidden;\" align='right'>").append(retObj.getModifiedNumber(retObj.getFieldValueBigDecimal(i,m), "", -1)).append("</td>");
//
                    for (int m = container.getViewByCount(); m < displayCols.size(); m++) {
                        if (nfrmat.get(displayCols.get(m).replace("A_", "")) != null && nfrmat.get(displayCols.get(m).replace("A_", "")) != "" && !nfrmat.get(displayCols.get(m).replace("A_", "")).equalsIgnoreCase("") && round.get(displayCols.get(m).replace("A_", "")) != null && round.get(displayCols.get(m).replace("A_", "")) != "" && !round.get(displayCols.get(m).replace("A_", "")).equalsIgnoreCase("")) {
                            BigDecimal currVal = retObj.getFieldValueBigDecimal(i, displayCols.get(m));
                            String frmtVal = nf.getModifiedNumber(currVal, String.valueOf(nfrmat.get(displayCols.get(m).replace("A_", ""))), Integer.parseInt(String.valueOf(round.get(displayCols.get(m).replace("A_", "")))));
                            //
                            output.append("<td style=\"border-left-style: hidden;\" align='center'>").append(frmtVal).append("</td>");
                        } else if (nfrmat.get(displayCols.get(m).replace("A_", "")) != null && nfrmat.get(displayCols.get(m).replace("A_", "")) != "" && !nfrmat.get(displayCols.get(m).replace("A_", "")).equalsIgnoreCase("")) {
                            BigDecimal currVal = retObj.getFieldValueBigDecimal(i, displayCols.get(m));
                            String frmtVal = nf.getModifiedNumber(currVal, String.valueOf(nfrmat.get(displayCols.get(m).replace("A_", ""))));
                            //
                            output.append("<td style=\"border-left-style: hidden;\" align='center'>").append(frmtVal).append("</td>");
                        } else {
                            output.append("<td style=\"border-left-style: hidden;\" align='center'>").append(retObj.getModifiedNumber(retObj.getFieldValueBigDecimal(i, displayCols.get(m)), "", -1)).append("</td>");
                        }
                    }
                    output.append("</tr>");
                    if (drillAvailable || (!tempStr.isEmpty())) {
                        // int newMsrCount=qryColsNames.size();
                        int newMsrCount = displayCols.size();
                        output.append("<tr class=\"expand-child\"><td style=\"display: none;border-style: hidden;\" colspan='").append(3 + newMsrCount).append("'>");
                        output.append("<div id='").append(childDivId).append("prgBar").append("'></div>");
                        output.append("<div id='").append(childDivId).append("'></div>");
                        output.append("</td></tr>");
                    }
                }
                output.append("</tbody>");
            }

        }

        output.append("</table>");
        return output.toString();
    }

    private HashMap getNewParamMap(String paramVals) {
        HashMap inMap = new HashMap();
        if (paramVals != null && !("".equals(paramVals))) {
            paramVals = paramVals.replace("{", "");
            paramVals = paramVals.replace("}", "");
            String[] dimValPairs = paramVals.split(",");
            for (String pair : dimValPairs) {
                List<String> parameterValue = new ArrayList<String>();
                String[] nameVal = pair.split("=");
                // parameterValue =(List<String>)nameVal[1].replace("~", ",");
                parameterValue.add(nameVal[1].replace("~", ",").replace("[", "").replace("]", ""));
                inMap.put(nameVal[0].trim(), parameterValue);
            }
        }
        return inMap;
    }

    private HashMap getParamMap(String paramVals) {
        HashMap map = new HashMap();
        if (paramVals != null && !("".equals(paramVals))) {
            paramVals = paramVals.replace("{", "");
            paramVals = paramVals.replace("}", "");
            String[] dimValPairs = paramVals.split(",");

            for (String pair : dimValPairs) {
                String[] nameVal = pair.split("=");
                nameVal[1] = nameVal[1].replace("~", ",");
                map.put(nameVal[0], nameVal[1]);
            }
        }
        return map;
    }

    public HashMap getFactDetails(String reportId) {
        PbReportViewerDAO dao = new PbReportViewerDAO();
        PbReturnObject returnObj = dao.getFactDetails(reportId);
        ArrayList<String> filterId = new ArrayList<String>();
        ArrayList<String> filterName = new ArrayList<String>();
        ArrayList<String> filterFormula = new ArrayList<String>();
        HashMap<String, ArrayList<String>> map = new HashMap<String, ArrayList<String>>();

        if (returnObj.getRowCount() != 0) {
            for (int i = 0; i < returnObj.getRowCount(); i++) {
                filterId.add(returnObj.getFieldValueString(i, 0));
                filterName.add(returnObj.getFieldValueString(i, 3));
                filterFormula.add(returnObj.getFieldValueString(i, 4));
            }
            map.put("filterId", filterId);
            map.put("filterName", filterName);
            map.put("filterFormula", filterFormula);
            // 
        }
        return map;
    }

    public void updatefactFilter(String oldReportId, String newReportId) {
        // 
        PbReportViewerDAO dao = new PbReportViewerDAO();
        PbReturnObject retObj = dao.getFactDetails(oldReportId);
        if (retObj.getRowCount() > 0) {
            for (int i = 0; i < retObj.getRowCount(); i++) {
                String factFormula = retObj.getFieldValueString(i, 4).replaceAll("'", "''");
                dao.insertFactFilterDetails(retObj.getFieldValueString(i, 1), newReportId, retObj.getFieldValueString(i, 3), factFormula, retObj.getFieldValueString(i, 6), "", "");
            }
        }
    }

    public void updateAdavanceParameterDeatils(String oldReportId, String newReportId) {
        PbReportViewerDAO dao = new PbReportViewerDAO();
        ArrayList list = dao.getDependentViewByidsandReps(oldReportId);
        if (list != null && !list.isEmpty()) {
            HashMap viewbysandConditions = (HashMap) list.get(0);
            HashMap viewbyRepHashMap = (HashMap) list.get(1);
            String[] ViewbyIds = null, conditions = null, CheckViewbyIdArr = null, checkReportIdArr = null, checkReportIdArr1 = null, uncheckViewbyIdArr = null;

            if (viewbysandConditions != null && !viewbysandConditions.isEmpty()) {
                Object[] viewbyid = viewbysandConditions.keySet().toArray();
                ViewbyIds = Arrays.copyOf(viewbyid, viewbyid.length, String[].class);
                Object[] conds = viewbysandConditions.values().toArray();
                conditions = Arrays.copyOf(conds, conds.length, String[].class);
            }
            if (viewbyRepHashMap != null && !viewbyRepHashMap.isEmpty()) {
                Object[] checkviewby = viewbyRepHashMap.keySet().toArray();
                CheckViewbyIdArr = Arrays.copyOf(checkviewby, checkviewby.length, String[].class);
                Object[] viewbyrep = viewbyRepHashMap.values().toArray();
                checkReportIdArr = Arrays.copyOf(viewbyrep, viewbyrep.length, String[].class);
            }
            PbReportViewerDAO savedao = new PbReportViewerDAO();
            savedao.saveAdvanceParameterOptions(newReportId, ViewbyIds, conditions, CheckViewbyIdArr, checkReportIdArr, checkReportIdArr1, uncheckViewbyIdArr);
        }
    }

    public static void main(String[] a) {
        String STR = "'a,1','b,2','c,3','d,4'";
        String[] strList = STR.split(",");
    }

    public OnceViewContainer deleteIfEmptyDetails(OnceViewContainer oneviewContainer) {
        List<OneViewLetDetails> onevieLet = oneviewContainer.onviewLetdetails;

        for (int i = 0; i < onevieLet.size(); i++) {
            if (onevieLet.get(i).getRepName() == null) {
                oneviewContainer.onviewLetdetails.remove(i);
            }
        }

        return oneviewContainer;
    }

    public boolean isOverWriteReport() {
        return overWriteReport;
    }

    public void setOverWriteReport(boolean overWriteReport) {
        this.overWriteReport = overWriteReport;
    }

    public void updateRepParameterDeatils(String oldReportId, String newReportId, Container container) {
        ArrayList resetParamlist = new ArrayList();
        resetParamlist = getParamdetails(oldReportId);
        ReportTemplateDAO rdao = new ReportTemplateDAO();
        String selectedParams = rdao.getSelectedParamDetails(oldReportId);
        if (selectedParams != null && !selectedParams.isEmpty()) {
            container.setSelectedParameterIds(selectedParams);
            boolean result = rdao.saveSelectedParamDetails(newReportId, selectedParams);
        }
        if (resetParamlist != null && !resetParamlist.isEmpty()) {
            ArrayList<String> paramIds = (ArrayList<String>) resetParamlist.get(0);
            HashMap paramsandtypeHashmap = (HashMap) resetParamlist.get(1);
            String[] params;
            Object[] Ids = paramIds.toArray();
            params = Arrays.copyOf(Ids, Ids.length, String[].class);
            PbReportViewerDAO dao = new PbReportViewerDAO();
            dao.updateRepParams(newReportId, params, paramsandtypeHashmap, container);
        }

    }

    public ArrayList getParamdetails(String reportId) {
        ArrayList resetParamdetails = new ArrayList();
        try {
            String qry = "select PARAM_DISP_ID,PARAMETER_TYPE from PRG_AR_REPORT_PARAM_DETAILS where REPORT_ID=" + reportId;
            PbReturnObject retObj = new PbReturnObject();
            retObj = execSelectSQL(qry);
            HashMap paramsandtypeHashmap = new HashMap();
            ArrayList<String> paramIds = new ArrayList<String>();
            String[] params;
            for (int i = 0; i < retObj.getRowCount(); i++) {
                paramsandtypeHashmap.put(retObj.getFieldValueString(i, "PARAM_DISP_ID"), retObj.getFieldValueString(i, "PARAMETER_TYPE"));
                paramIds.add(retObj.getFieldValueString(i, "PARAM_DISP_ID"));
            }
            resetParamdetails.add(paramIds);
            resetParamdetails.add(paramsandtypeHashmap);

        } catch (SQLException ex) {
            logger.error("Exception:", ex);
        }
        return resetParamdetails;
    }

    public PbReturnObject getKpiRetObjforgrandtotals(Container container, PbReportCollection collect, String PbuserId) {
        PbReturnObject retObject = new PbReturnObject();
//        PbReportQuery KpiQuery = new PbReportQuery();
//        ArrayList<String> repqrycls = new ArrayList<String>();
//        ArrayList<String> reqrynames = new ArrayList<String>();
//        ArrayList<String> repqryaggs = new ArrayList<String>();
//        QueryExecutor qryExec = new QueryExecutor();
//        ArrayList<String> allqrycls = new ArrayList<String>();
//        ArrayList<String> allqryAggs = new ArrayList<String>();
//        ArrayList<String> ctqryCls = new ArrayList<String>();
        return retObject;

//          //Start of code by Nazneen
//        ArrayList<String> qryEle = new ArrayList<String>();
//        ArrayList<String> qryEleWithoutKpiQry = new ArrayList<String>();
//        ArrayList<String> qryEleWithKpiQry = new ArrayList<String>();
//          for(int i=0;i<collect.reportQryElementIds.size();i++){
//                boolean flag = true;
//              String query = "select  REF_ELEMENT_TYPE , AGGREGATION_TYPE,USER_COL_TYPE from  PRG_USER_ALL_INFO_DETAILS where ELEMENT_ID ="+collect.reportQryElementIds.get(i);
//              PbDb pbdb = new PbDb();
//              try{
//              PbReturnObject retobj = pbdb.execSelectSQL(query);
//              if(retobj.getFieldValueString(0, "REF_ELEMENT_TYPE").equalsIgnoreCase("4")){
//                 String query1 = "SELECT ELEMENT_ID FROM PRG_USER_ALL_INFO_DETAILS WHERE ref_element_id IN (SELECT ref_element_id FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id="+ collect.reportQryElementIds.get(i) +") "
//                         + " AND REF_ELEMENT_TYPE in (1,2)";
//                 PbReturnObject retobj1 = pbdb.execSelectSQL(query1);
//                 if(retobj1.getRowCount()>0){
//                     for(int j=0;j<retobj1.getRowCount();j++){
//                         if(!collect.reportQryElementIds.contains(retobj1.getFieldValueString(j,0))){
//                             flag = false;
//                             break;
//                         }
//                     }
//                 }
//                 if(flag){qryEleWithoutKpiQry.add(collect.reportQryElementIds.get(i)); }
//                 else{qryEleWithKpiQry.add(collect.reportQryElementIds.get(i));}
//              }
//              if(!retobj.getFieldValueString(0, "USER_COL_TYPE").equalsIgnoreCase("summarized") && !retobj.getFieldValueString(0, "REF_ELEMENT_TYPE").equalsIgnoreCase("4") && retobj.getFieldValueString(0, "AGGREGATION_TYPE").equalsIgnoreCase("avg")){
//                  qryEleWithKpiQry.add(collect.reportQryElementIds.get(i));
//              }
//              } catch (SQLException ex) {
//                logger.error("Exception:",ex);
//            }
//          }
//        DataFacade facade = new DataFacade(container);
//        facade.container.setEleWithoutKpiQry(qryEleWithoutKpiQry);
//        facade.container.setEleWithKpiQry(qryEleWithKpiQry);
////            if(!qryEleWithoutKpiQry.isEmpty()){
////                facade.container.setEleWithoutKpiQry(qryEleWithoutKpiQry);
////            }
        //end of code by Nazneen
//          for(int i=0;i<collect.reportQryElementIds.size();i++){
//          String query = "select  REF_ELEMENT_TYPE , AGGREGATION_TYPE,USER_COL_TYPE from  PRG_USER_ALL_INFO_DETAILS where ELEMENT_ID ="+collect.reportQryElementIds.get(i);
//            PbDb pbdb = new PbDb();
//            try {
//                PbReturnObject retobj = pbdb.execSelectSQL(query);
//          boolean flag = true;
//          if(retobj.getFieldValueString(0, "REF_ELEMENT_TYPE").equalsIgnoreCase("4")){
//                 String query1 = "SELECT ELEMENT_ID FROM PRG_USER_ALL_INFO_DETAILS WHERE ref_element_id IN (SELECT ref_element_id FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id="+ collect.reportQryElementIds.get(i) +") "
//                         + " AND REF_ELEMENT_TYPE in (1,2)";
//                 PbReturnObject retobj1 = pbdb.execSelectSQL(query1);
//                 if(retobj1.getRowCount()>0){
//                     for(int j=0;j<retobj1.getRowCount();j++){
//                         if(!collect.reportQryElementIds.contains(retobj1.getFieldValueString(j,0))){
//                             flag = false;
//                             break;
//                         }
//                     }
//                 }
//                 if(flag){
//                    repqrycls.add(collect.reportQryElementIds.get(i));
//                    repqryaggs.add(collect.reportQryAggregations.get(i));
//                    reqrynames.add(collect.reportQryColNames.get(i));
//                }
//              }
//
//          if(!retobj.getFieldValueString(0, "USER_COL_TYPE").equalsIgnoreCase("summarized") && !retobj.getFieldValueString(0, "REF_ELEMENT_TYPE").equalsIgnoreCase("4") && retobj.getFieldValueString(0, "AGGREGATION_TYPE").equalsIgnoreCase("avg")){
//              repqrycls.add(collect.reportQryElementIds.get(i));
//              repqryaggs.add(collect.reportQryAggregations.get(i));
//              reqrynames.add(collect.reportQryColNames.get(i));
//          }
//            } catch (SQLException ex) {
//                Logger.getLogger(PbReportViewerBD.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//          if(repqrycls!=null && !repqrycls.isEmpty()){
//          for(int i=0; i<repqrycls.size();i++){
//                //SELECT element_id FROM prg_user_all_info_details WHERE ref_element_id IN (SELECT ref_element_id FROM prg_user_all_info_details WHERE element_id      =2784147) and ref_element_type in (1,2)
//            String query = "SELECT ELEMENT_ID , AGGREGATION_TYPE FROM PRG_USER_ALL_INFO_DETAILS WHERE ref_element_id IN (SELECT ref_element_id FROM PRG_USER_ALL_INFO_DETAILS WHERE element_id="+repqrycls.get(i) +") ";
//                PbDb pbdb = new PbDb();
//            try{
//                    PbReturnObject retobj = pbdb.execSelectSQL(query);
//                if(retobj!=null && retobj.getRowCount() > 0){
//                for(int j=0;j<retobj.getRowCount();j++){
//                            allqrycls.add(retobj.getFieldValueString(j, 0));
//                            allqryAggs.add(retobj.getFieldValueString(j, 1));
//                        }
//                    }
//                } catch (SQLException ex) {
//                    logger.error("Exception:",ex);
//                }
//            }
//        }
//        container.setKpiQrycls(repqrycls);
//        if (collect.reportColViewbyValues != null && !collect.reportColViewbyValues.isEmpty()) {
//            KpiQuery.setRowViewbyCols(collect.reportColViewbyValues);
//            KpiQuery.setColViewbyCols(ctqryCls);
//        } else {
//            KpiQuery.setRowViewbyCols(collect.reportRowViewbyValues);
//            KpiQuery.setColViewbyCols(collect.reportColViewbyValues);
//        }
//
//
//        //KpiQuery.setColViewbyCols(collect.reportColViewbyValues);
//        KpiQuery.setParamValue(collect.reportParametersValues);
//
//        KpiQuery.setQryColumns(allqrycls);
//        KpiQuery.setColAggration(allqryAggs);
//        KpiQuery.setTimeDetails(collect.timeDetailsArray);
//        if (collect.reportColViewbyValues != null && !collect.reportColViewbyValues.isEmpty()) {
////            KpiQuery.isKpi = false;
//        } else {
//            KpiQuery.isKpi = true;
//        }
//        //Start of code by Nazneen in March14 for Dimension Segmentation
//        KpiQuery.setFilePath(this.filesPath);
//        //End of code by Nazneen in March14 for Dimension Segmentation
//        HashMap<String, List> inMap = (HashMap<String, List>) collect.operatorFilters.get("IN");
//        HashMap<String, List> notInMap = (HashMap<String, List>) collect.operatorFilters.get("NOTIN");
//        HashMap<String, List> likeMap = (HashMap<String, List>) collect.operatorFilters.get("LIKE");
//        HashMap<String, List> notLikeMap = (HashMap<String, List>) collect.operatorFilters.get("NOTLIKE");
//        if (inMap != null) {
//            KpiQuery.setInMap(inMap);
//        }
//        if (notInMap != null) {
//            KpiQuery.setNotInMap(notInMap);
//        }
//        if (likeMap != null) {
//            KpiQuery.setLikeMap(likeMap);
//        }
//        if (notLikeMap != null) {
//            KpiQuery.setNotLikeMap(notLikeMap);
//        }
//        KpiQuery.setReportId(collect.reportId);
//        KpiQuery.setBizRoles(collect.reportBizRoles[0]);
//        KpiQuery.setUserId(PbuserId);
//        try {
//            if (allqrycls != null && !allqrycls.isEmpty()) {
//                String query = KpiQuery.generateViewByQry();
//                //
//                retObject = (PbReturnObject) qryExec.executeQuery(collect, query, false);
//            }
//            if (collect.reportColViewbyValues != null && !collect.reportColViewbyValues.isEmpty()) {
//                HashMap retObjHashmap = new HashMap();
//                if (retObject != null && retObject.getRowCount() > 0) {
//                    if (reqrynames != null && !reqrynames.isEmpty()) {
//                        for (int j = 0; j < reqrynames.size(); j++) {
//                            for (int i = 0; i < retObject.getRowCount(); i++) {
//                                String keystr = retObject.getFieldValueString(i, 0) + ", " + reqrynames.get(j);
//                                retObjHashmap.put(keystr.trim(), retObject.getFieldValueString(i, "A_" + repqrycls.get(j)).trim());
//                            }
//                        }
//                    }
////                    for(int i=0;i<retObject.getRowCount();i++){
////                        String keystr = retObject.getFieldValueString(i, 0) + ", "+reqrynames.get(0);
////                        retObjHashmap.put(keystr, retObject.getFieldValueString(i, 1));
////                    }
//
//                }
//                container.retObjHashmap = retObjHashmap;
//            }
////            if(retObject!=null && retObject.getRowCount()>0){
////                for(int i=0;i<repqrycls.size();i++){
////                     
////                }
////
////            }
//        } catch (Exception ex) {
//            Logger.getLogger(PbReportViewerBD.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        return retObject;
    }

    public void saveTimeDetails(Container container, String date, int reportId, HttpServletRequest request) throws SQLException, ParseException {
        HttpSession session = request.getSession(false);

        ArrayList queries = new ArrayList();
        ArrayList queries1 = new ArrayList();
        HashMap parametersMap = container.getParametersHashMap();
        HashMap TableHashMap = container.getTableHashMap();
        String qry = "select REP_TIME_ID from PRG_AR_REPORT_TIME where REPORT_ID = " + reportId;
        PbDb pbdb = new PbDb();
        LinkedHashMap modulesList = new LinkedHashMap();
        PbReturnObject roleIdResult1 = new PbReturnObject();
        PbReturnObject roleIdResult2 = new PbReturnObject();
        int value = 0;
//                        try {
//                            PbReturnObject roleIdResult =  pbdb.execSelectSQL(qry);
//                            if(roleIdResult!=null && roleIdResult.getRowCount()>0){
//                            for(int k=0;k<roleIdResult.getRowCount();k++){
//                               value = roleIdResult.getFieldValueInt(k, "REP_TIME_ID");
//                               String finalqry1 = "select COLUMN_TYPE, DEFAULT_VALUE from PRG_AR_REPORT_TIME_DETAIL where REP_TIME_ID = "+value;
//                               String finalqry2 = "select DEFAULT_DATE from PRG_AR_REPORT_TIME_DETAIL where REP_TIME_ID = "+value;
//                               roleIdResult1 = pbdb.execSelectSQL(finalqry1);
//                               roleIdResult2 = pbdb.execSelectSQL(finalqry2);
//                               for (int i = 0; i < roleIdResult1.getRowCount(); i++) {
//                modulesList.put(roleIdResult1.getFieldValueString(i, "COLUMN_TYPE"), roleIdResult1.getFieldValueString(i, "DEFAULT_VALUE")+"#"+roleIdResult2.getFieldValueDate(i, "DEFAULT_DATE"));
//                               }
//                            }
//                            }
//                        } catch (SQLException ex) {
//                            logger.error("Exception:",ex);
//                        }
//          container.setCurrentTimeDetails(modulesList);
//       LinkedHashMap currentTimeDetails = container.getCurrentTimeDetails();
        ArrayList timeDetails = (ArrayList) parametersMap.get("TimeDetailstList");
        HashMap timeDimHashMap = (HashMap) parametersMap.get("TimeDimHashMap");
        if (timeDetails.get(1).toString().equalsIgnoreCase("PRG_STD")) {
            String date2 = "";
            String simdate = timeDetails.get(2).toString().trim();
            date2 = this.parseDate(simdate);
            modulesList.put("AS_OF_DATE", timeDetails.get(3) + "#" + date2);
            modulesList.put("PRG_COMPARE", timeDetails.get(4) + "#" + null);
            modulesList.put("PRG_PERIOD_TYPE", timeDetails.get(3) + "#" + null);
        } else if (timeDetails.get(1).toString().equalsIgnoreCase("PRG_DATE_RANGE")) {
            String date1 = "";
            String date2 = "";
            String cpmdate1 = "";
            String cpmdate2 = "";
            String AsDate1 = timeDetails.get(2).toString().trim();
            String AsDate2 = timeDetails.get(3).toString().trim();
            String CmpAsDate1 = timeDetails.get(4).toString().trim();
            String CmpAsDate2 = timeDetails.get(5).toString().trim();
            date1 = this.parseDate(AsDate1);
            date2 = this.parseDate(AsDate2);
            cpmdate1 = this.parseDate(CmpAsDate1);
            cpmdate2 = this.parseDate(CmpAsDate2);
            modulesList.put("AS_OF_DATE1", timeDetails.get(2) + "#" + date1);
            modulesList.put("AS_OF_DATE2", timeDetails.get(3) + "#" + date2);
            modulesList.put("CMP_AS_OF_DATE1", timeDetails.get(4) + "#" + cpmdate1);
            modulesList.put("CMP_AS_OF_DATE2", timeDetails.get(5) + "#" + cpmdate2);
        }
        container.setCurrentTimeDetails(modulesList);
        LinkedHashMap currentTimeDetails = container.getCurrentTimeDetails();
        ArrayList timeParams = (ArrayList) parametersMap.get("timeParameters");
        String deleteReportTimeDetailsQuery = "delete from PRG_AR_REPORT_TIME_DETAIL where rep_time_id in ( select rep_time_id from PRG_AR_REPORT_TIME where report_id='" + reportId + "')";
        String deleteReportTimeDimensionsQuery = "delete from PRG_AR_REPORT_TIME where report_id='" + reportId + "'";
        queries.add(deleteReportTimeDetailsQuery);
        queries.add(deleteReportTimeDimensionsQuery);
        try {
            boolean result = executeMultiple(queries);
        } catch (Exception ex) {
            logger.error("Exception:", ex);
        }
        if (timeDetails != null && timeDetails.size() > 0) {
            queries1 = DAO.insertReportTimeDimensions(timeDetails, timeDimHashMap, reportId, queries1, timeParams, date, currentTimeDetails, true);//inserting time dimensions and time details
        } else {
            //for Progen NON_STD time , means progentime is not used
            queries1 = DAO.insertNonStdReportTimeDimensions(reportId, queries1);//inserting non standard time dimensions

        }
        DAO.saveReport(queries1);
    }

    public void saveParameterSection(Container container, int reportId) throws Exception {
        reportTemplateDAO.deleteParameterRegionQuerys(reportId);
        HashMap parametersMap = container.getParametersHashMap();
        HashMap TableHashMap = container.getTableHashMap();
        ArrayList params = (ArrayList) parametersMap.get("Parameters");
        ArrayList repExclude = (ArrayList) parametersMap.get("repExclude");
        ArrayList cepExclude = (ArrayList) parametersMap.get("cepExclude");
        ArrayList REP_Elements = (ArrayList) TableHashMap.get("REP");
        ArrayList CEP_Elements = (ArrayList) TableHashMap.get("CEP");
        StringBuffer Parameters = new StringBuffer();
        StringBuffer ParametersOrder = new StringBuffer();
        ArrayList queries = new ArrayList();
        if (params != null) {
            for (int i = 0; i < params.size(); i++) {
                Parameters.append("," + String.valueOf(params.get(i)).replace("A_", ""));
            }
            DAO.updateReportParamDetails(reportId, Parameters.substring(1), container);
        }
        queries = DAO.insertReportViewByMaster(REP_Elements, CEP_Elements, reportId, queries, repExclude, cepExclude, true, container);
        DAO.saveReport(queries);
    }

    public void saveGraphRegion(Container container, int reportId) throws Exception {
        HashMap parametersMap = container.getParametersHashMap();
        ArrayList timeDetails = (ArrayList) parametersMap.get("TimeDetailstList");
        HashMap GraphHashMap = container.getGraphHashMap();
        HashMap graphcolumnHashMap = container.getChangeGraphColumns();
        ArrayList<String> displayColumns = container.getDisplayColumns();
        ArrayList<String> originnalColumns = container.getOriginalColumns();
        int viewByCount = (container.getViewByCount());
        updateQryColumns(container, reportId);
        ArrayList queries = new ArrayList();
        String qry = " select DISTINCT graph_id from PRG_AR_GRAPH_MASTER where report_id ='" + reportId + "'";
        PbReturnObject pbret = new PbReturnObject();
        pbret = DAO.execSelectSQL(qry);
        String graphIds = "";
        String deleteReportGraphDetailsQuery = "";
        for (int i = 0; i < pbret.getRowCount(); i++) {
            if (i == 0) {
                graphIds = pbret.getFieldValueString(i, 0);
            } else {
                graphIds = graphIds + "," + pbret.getFieldValueString(i, 0);
            }

        }
        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
            deleteReportGraphDetailsQuery = "delete  from PRG_AR_GRAPH_DETAILS  where graph_id in ( '" + graphIds + "' ) ";
        } else {
            deleteReportGraphDetailsQuery = "delete  from PRG_AR_GRAPH_DETAILS  where graph_id in ( select DISTINCT a.graph_id from PRG_AR_GRAPH_DETAILS a ,PRG_AR_GRAPH_MASTER b where a.graph_id= b.graph_id and b.report_id ='" + reportId + "' ) ";

        }
        DAO.execModifySQL(deleteReportGraphDetailsQuery);
//       String delgraphdetailsqry="delete  from PRG_AR_GRAPH_DETAILS  where graph_id in ( "+graphIds+" ) ";
//       DAO.execModifySQL(delgraphdetailsqry);
//        String delmasterqry="delete  from PRG_AR_GRAPH_MASTER where graph_id in ( "+graphIds+" )  and report_id ='" + reportId + "'";
//       DAO.execModifySQL(deleteReportGraphDetailsQuery);

        this.overWriteExistingReport = true;
        String[] no_of_graphs = null;
        if (GraphHashMap.size() != 0) {
            if (GraphHashMap.get("graphIds") != null) {
                no_of_graphs = ((String) GraphHashMap.get("graphIds")).split(",");
            }
        }
        String graphSize = null;
        String grpType = null;
        String grpName = null;
        String grplegend = null;
        String grplegendloc = null;
        String grpshox = null;
        String grpshoy = null;
        String grplyaxislabel = null;
        String grpryaxislabel = null;
        String grpbDomainaxislabel = null;
        String grpdrill = null;
        String grpbcolor = null;
        String grpfcolor = null;
        String grpdata = null;
        String displyRows = "";
        String showGT = "";
        String graphSymbol = null;
        String measNamePosition = null;
        String targetRange = null;
        String startValue = null;
        String endValue = null;
        String showlyAxis = null;
        String showryAxis = null;
        String showxAxis = null;
        String fromDate = null;
        String toDate = null;
        double targetPerDay;
        String stackedType = "";
        GraphProperty graphProperty = null;
        String measureFormat = null;
        String measureValueRounding = null;
        String axisLabelPosition = null;
        boolean isShowLabels = false;
        String calibration = null;
        String firstChartType = null;
        String secondChartType = null;
        String[] rgbColorArr = null;
        String jqpropertiesString = null;
        String jqsingleproperties = null;
//       ArrayList  graphid=new ArrayList();
        ArrayList delquery = new ArrayList();
        if (getShowGraphTable() == null) {

            String deletequery = "";
            // deletequery ="delete  from PRG_AR_GRAPH_MASTER where graph_id not in("+graphid.toString().replace("[", "").replace("]", "") +") and report_id="+reportId+"";
            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                deletequery = "delete from PRG_AR_GRAPH_MASTER where graph_id not in(" + Joiner.on(",").join(no_of_graphs) + ") and report_id=" + reportId;
            } else {
                deletequery = "delete from PRG_AR_GRAPH_MASTER where report_id=" + reportId;
            }
            DAO.execModifySQL(deletequery);
        }
        if (GraphHashMap.size() != 0 && no_of_graphs != null) {
            for (int i = 0; i < no_of_graphs.length; i++) {
                jqpropertiesString = null;
                jqsingleproperties = null;
                JqplotGraphProperty graphproperty = new JqplotGraphProperty();
                ProGenJqPlotProperties singleproperty = new ProGenJqPlotProperties();
                HashMap graphDetails = (HashMap) GraphHashMap.get(no_of_graphs[i]);
                if (container.getSlectedGraphType(no_of_graphs[i]) != null && container.getSlectedGraphType(no_of_graphs[i]).equalsIgnoreCase("jq")) {

                    graphproperty = (JqplotGraphProperty) GraphHashMap.get("jqgraphproperty" + no_of_graphs[i]);
                    singleproperty = (ProGenJqPlotProperties) GraphHashMap.get("jqsingleproperty" + no_of_graphs[i]);
                    Gson gson = new Gson();
                    jqpropertiesString = gson.toJson(graphproperty);
                    jqsingleproperties = gson.toJson(singleproperty);
                }

                int graphId = -1;

                //graphId = (String) graphDetails.get("graphId");
                graphSize = (String) graphDetails.get("graphSize");
                grpType = (String) graphDetails.get("graphTypeName");
                grpName = (String) graphDetails.get("graphName");
                grplegend = (String) graphDetails.get("graphLegend");
                grplegendloc = (String) graphDetails.get("graphLegendLoc");
                grpshox = (String) graphDetails.get("graphshowX");
                grpshoy = (String) graphDetails.get("graphshowY");
                grplyaxislabel = (String) graphDetails.get("graphLYaxislabel");
                grpryaxislabel = (String) graphDetails.get("graphRYaxislabel");
                grpbDomainaxislabel = (String) graphDetails.get("grpbDomainaxislabel");
                grpdrill = (String) graphDetails.get("graphDrill");
                grpbcolor = (String) graphDetails.get("graphBcolor");
                grpfcolor = (String) graphDetails.get("graphFcolor");
                grpdata = (String) graphDetails.get("graphData");
                displyRows = (String) graphDetails.get("graphDisplayRows");
                showGT = (String) graphDetails.get("showGT");
                graphSymbol = (String) graphDetails.get("graphSymbol");
                measNamePosition = (String) graphDetails.get("measureNamePosition");
                targetRange = (String) graphDetails.get("targetRange");
                if (graphDetails.get("startValue") != null) {
                    startValue = graphDetails.get("startValue").toString();
                }
                endValue = (String) graphDetails.get("endValue");
                showlyAxis = (String) graphDetails.get("showlyAxis");
                showryAxis = (String) graphDetails.get("showryAxis");
                showxAxis = (String) graphDetails.get("showxAxis");
                stackedType = (String) graphDetails.get("stackedType");
                fromDate = (String) timeDetails.get(2);
                toDate = (String) timeDetails.get(3);
//                if(graphDetails.isEmpty())
//                {
                if (graphDetails.get("showLabels") != null) {
                    isShowLabels = (Boolean) graphDetails.get("showLabels");
                }
//                }
                // 
                if (graphDetails.get("measureFormat") != null) {
                    measureFormat = (String) graphDetails.get("measureFormat");
                }
                measureValueRounding = (String) graphDetails.get("measureValueRounding");
                axisLabelPosition = (String) graphDetails.get("axisLabelPosition");
                calibration = (String) graphDetails.get("calibration");

                firstChartType = (String) graphDetails.get("firstChartType");
                secondChartType = (String) graphDetails.get("secondChartType");
                rgbColorArr = (String[]) graphDetails.get("rgbColorArr");
//                toDate= (String)graphDetails.get("toDate");
                targetPerDay = container.getNoOfDays();
                if (graphDetails.get("GraphProperty") != null) {
                    graphProperty = (GraphProperty) graphDetails.get("GraphProperty");
                } else {
                    graphProperty = new GraphProperty();
                }
                if (startValue == null) {
                    startValue = "";
                }
                if (endValue == null) {
                    endValue = "";
                }

                graphProperty.setRgbColorArr(rgbColorArr);
                graphProperty.setFirstChartType(firstChartType);
                graphProperty.setSecondChartType(secondChartType);
                graphProperty.setLabelsDisplayed(isShowLabels);
                graphProperty.setMeasureFormat(measureFormat);
                graphProperty.setMeasureValueRounding(measureValueRounding);
                graphProperty.setAxisLabelPosition(axisLabelPosition);
                graphProperty.setCalibration(calibration);
                graphProperty.setGraphDisplayRows(displyRows);

                graphProperty.setSwapGraphColumns((String) graphDetails.get("SwapColumn"));
                graphProperty.setSymbol(graphSymbol);
                graphProperty.setMeasurePosition(measNamePosition);
                graphProperty.setShowlyAxis(showlyAxis);
                graphProperty.setShowryAxis(showryAxis);
                graphProperty.setShowxAxis(showxAxis);
                graphProperty.setBarChartColumnNames1((String[]) graphDetails.get("barChartColumnNames1"));
                graphProperty.setBarChartColumnNames2((String[]) graphDetails.get("barChartColumnNames2"));
                graphProperty.setBarChartColumnTitles1((String[]) graphDetails.get("barChartColumnTitles1"));
                graphProperty.setBarChartColumnTitles2((String[]) graphDetails.get("barChartColumnTitles2"));
                graphProperty.setTargetValueType(targetRange);
                if (!startValue.equalsIgnoreCase("")) {
                    graphProperty.setStartValue(Double.parseDouble(startValue));
                } else {
                    graphProperty.setStartValue(0);
                }
                if (!endValue.equalsIgnoreCase("")) {
                    graphProperty.setEndValue(Double.parseDouble(endValue));
                } else {
                    graphProperty.setEndValue(0);
                }
                graphProperty.setFromDate(fromDate);
                graphProperty.setToDate(toDate);
                if (targetPerDay != 0) {
                    targetPerDay = graphProperty.getStartValue() / targetPerDay;
                    graphProperty.setTargetPerDay(targetPerDay);
                    graphProperty.setStartValue(targetPerDay * container.getNoOfDays());
                }

                graphProperty.setStackedType(stackedType);

                String graphPropertyFirst = "";
                String graphPropertySecond = "";
                String graphPropertyThird = "";

                if (graphProperty != null && graphProperty.toXml() != null && !graphProperty.toXml().isEmpty()) {
                    if (graphProperty.toXml().length() > 7000) {
                        graphPropertyFirst = graphProperty.toXml().substring(0, 3500);
                        graphPropertySecond = graphProperty.toXml().substring(3500, 7000);
                        graphPropertyThird = graphProperty.toXml().substring(7000, graphProperty.toXml().length());
                    } else if (graphProperty.toXml().length() > 3500) {
                        graphPropertyFirst = graphProperty.toXml().substring(0, 3500);
                        graphPropertySecond = graphProperty.toXml().substring(3500, graphProperty.toXml().length());
                        graphPropertyThird = "";
                    } else {
                        graphPropertyFirst = graphProperty.toXml();
                        graphPropertySecond = "";
                        graphPropertyThird = "";
                    }
                }

                ArrayList RowValuesList = new ArrayList();
                String strXML = null;
                if (graphDetails.get("RowValuesList") != null) {
                    RowValuesList = (ArrayList) graphDetails.get("RowValuesList");
                    ////.println("RowValuesList is : "+RowValuesList);
                    strXML = buildRowValuesXML(RowValuesList);
                }
                String[] singleGraphColumns = (String[]) graphDetails.get("barChartColumnNames");

                String[] axis = (String[]) graphDetails.get("axis");
                if (isOverWriteExistingReport()) {
                    graphId = Integer.parseInt((String) graphDetails.get("graphId"));
                } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                    graphId = -1;
                } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                    graphId = DAO.getSequence("LAST_INSERT_ID(GRAPH_ID) from PRG_AR_GRAPH_MASTER order by 1 desc limit 1");
                } else {
                    graphId = DAO.getSequence("PRG_AR_GRAPH_MASTER_SEQ");
                }

                StringBuffer element_ids = new StringBuffer();
                StringBuffer element_ids1 = new StringBuffer();

                String element_idsStr = null;
                String element_ids1Str = null;
                String graphMasterQuery = "";
                String showGraphTable = "";
                String deletequery = "";

                element_ids.append("");
                element_ids1.append("");
                grpName = grpName.replace("'", "''");
                if (getShowGraphTable() != null) {
                    showGraphTable = (String) getShowGraphTable();
                    // // ////.println("showGraphTable----::::"+showGraphTable);
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                        if (this.isOverWriteExistingReport()) {
//                          graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,X_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_DISPLAY_ROWS,SHOW_GT,JQ_PROPERTIES) "
//                                + "SELECT '" + showGraphTable + "',"+reportId+",'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
//                                + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "',null,'" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',('" + strXML + "'),'"+graphProperty.toXml()+"','"+displyRows+"','"+showGT+"','"+jqpropertiesString+"'  FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                            //added by srikanth.p
                            graphMasterQuery = "UPDATE PRG_AR_GRAPH_MASTER SET SHOW_TABLE='" + showGraphTable + "',REPORT_ID=" + reportId + ",GRAPH_NAME='" + grpName + "',GRAPH_SIZE=(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "'),GRAPH_TYPE=(SELECT GRAPH_TYPE_ID FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "') ,GRAPH_CLASS=(SELECT GRAPH_CLASS_ID FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ),GRAPH_ORDER=" + (i + 1) + ",ALLOW_LEGEND='" + grplegend + "',LEGEND_LOC='" + grplegendloc + "',SHOW_GRID_X_AXIS='" + grpshox + "',SHOW_GRID_Y_AXIS='" + grpshoy + "',LEFT_Y_AXIS_LABEL='" + grplyaxislabel + "',X_AXIS_LABEL=null,ALLOW_LINK='" + grpdrill + "',BACK_COLOR='" + grpbcolor + "',FONT_COLOR='" + grpfcolor + "',SHOW_DATA='" + grpdata + "',RIGHT_Y_AXIS_LABEL='" + grpryaxislabel + "',row_values=('" + strXML + "'),GRAPH_PROPERTY_XML='" + graphPropertyFirst + "',GRAPH_PROPERTY_XML1='" + graphPropertySecond + "',GRAPH_PROPERTY_XML2='" + graphPropertyThird + "',GRAPH_DISPLAY_ROWS='" + displyRows + "',SHOW_GT='" + showGT + "',JQ_PROPERTIES='" + jqpropertiesString + "' WHERE GRAPH_ID=" + graphId;

                        } else {
                            graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,X_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_PROPERTY_XML1,GRAPH_PROPERTY_XML2,GRAPH_DISPLAY_ROWS,SHOW_GT,JQ_PROPERTIES) "
                                    + "SELECT '" + showGraphTable + "',ident_current('PRG_AR_REPORT_MASTER'),'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
                                    + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "',null,'" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',('" + strXML + "'),'" + graphPropertyFirst + "','" + graphPropertySecond + "','" + graphPropertyThird + "','" + displyRows + "','" + showGT + "','" + jqpropertiesString + "'  FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                        }
                    } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                        if (this.isOverWriteExistingReport()) {
//                          graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,X_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_DISPLAY_ROWS,SHOW_GT,JQ_PROPERTIES) "
//                                + "SELECT '" + showGraphTable + "',"+reportId+",'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
//                                + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "',null,'" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',('" + strXML + "'),'"+graphProperty.toXml()+"','"+displyRows+"','"+showGT+"','"+jqpropertiesString+"'  FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                            //added by srikanth.p
                            graphMasterQuery = "UPDATE PRG_AR_GRAPH_MASTER SET SHOW_TABLE='" + showGraphTable + "',REPORT_ID=" + reportId + ",GRAPH_NAME='" + grpName + "',GRAPH_SIZE=(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "'),GRAPH_TYPE=(SELECT GRAPH_TYPE_ID FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "') ,GRAPH_CLASS=(SELECT GRAPH_CLASS_ID FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ),GRAPH_ORDER=" + (i + 1) + ",ALLOW_LEGEND='" + grplegend + "',LEGEND_LOC='" + grplegendloc + "',SHOW_GRID_X_AXIS='" + grpshox + "',SHOW_GRID_Y_AXIS='" + grpshoy + "',LEFT_Y_AXIS_LABEL='" + grplyaxislabel + "',X_AXIS_LABEL=null,ALLOW_LINK='" + grpdrill + "',BACK_COLOR='" + grpbcolor + "',FONT_COLOR='" + grpfcolor + "',SHOW_DATA='" + grpdata + "',RIGHT_Y_AXIS_LABEL='" + grpryaxislabel + "',row_values=('" + strXML + "'),GRAPH_PROPERTY_XML='" + graphProperty.toXml() + "',GRAPH_DISPLAY_ROWS='" + displyRows + "',SHOW_GT='" + showGT + "',JQ_PROPERTIES='" + jqpropertiesString + "' WHERE GRAPH_ID=" + graphId;

                        } else {
                            graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,X_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_DISPLAY_ROWS,SHOW_GT,JQ_PROPERTIES) "
                                    + "SELECT '" + showGraphTable + "'," + reportId + ",'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
                                    + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "',null,'" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',('" + strXML + "'),'" + graphProperty.toXml() + "','" + displyRows + "','" + showGT + "','" + jqpropertiesString + "'  FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                        }
                    } else {
                        graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,GRAPH_ID,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,X_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_PROPERTY_XML1,GRAPH_PROPERTY_XML2,GRAPH_DISPLAY_ROWS,SHOW_GT,JQ_PROPERTIES) "
                                + "SELECT '" + showGraphTable + "'," + graphId + "," + reportId + ",'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
                                + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "',null,'" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',TO_CLOB('" + strXML + "') ,'" + graphPropertyFirst + "','" + graphPropertySecond + "','" + graphPropertyThird + "','" + displyRows + "','" + showGT + "','" + jqpropertiesString + "' FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                    }

                } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                    if (this.isOverWriteExistingReport()) {
                        deletequery = "delete  from PRG_AR_GRAPH_MASTER where graph_id not in(" + graphId + ") and report_id=" + reportId + "";
                        String qry1 = "select * from prg_ar_graph_master where report_id =" + reportId;
                        PbDb pb = new PbDb();
                        PbReturnObject pbret1 = execSelectSQL(qry1);
                        if (pbret1.getRowCount() <= 0) {
                            graphId = -100;
                        }
                        if (graphId == -100) {
                            graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_PROPERTY_XML1,GRAPH_PROPERTY_XML2,GRAPH_DISPLAY_ROWS,JQ_PROPERTIES) "
                                    + "SELECT 'GM'," + reportId + ",'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
                                    + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "','" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',('" + strXML + "') ,'" + graphPropertyFirst + "','" + graphPropertySecond + "','" + graphPropertyThird + "','" + displyRows + "','" + jqpropertiesString + "' FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                        } //added by srikanth.p
                        else {
                            graphMasterQuery = "UPDATE PRG_AR_GRAPH_MASTER SET SHOW_TABLE='GM',REPORT_ID=" + reportId + ",GRAPH_NAME='" + grpName + "',GRAPH_SIZE=(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "'),GRAPH_TYPE=(SELECT GRAPH_TYPE_ID FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "') ,GRAPH_CLASS=(SELECT GRAPH_CLASS_ID FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "'),GRAPH_ORDER=" + (i + 1) + ",ALLOW_LEGEND='" + grplegend + "',LEGEND_LOC='" + grplegendloc + "',SHOW_GRID_X_AXIS='" + grpshox + "',SHOW_GRID_Y_AXIS='" + grpshoy + "',LEFT_Y_AXIS_LABEL='" + grplyaxislabel + "',ALLOW_LINK='" + grpdrill + "',BACK_COLOR='" + grpbcolor + "',FONT_COLOR='" + grpfcolor + "',SHOW_DATA='" + grpdata + "',RIGHT_Y_AXIS_LABEL='" + grpryaxislabel + "',row_values=('" + strXML + "'),GRAPH_PROPERTY_XML='" + graphPropertyFirst + "',GRAPH_PROPERTY_XML1='" + graphPropertySecond + "',GRAPH_PROPERTY_XML2='" + graphPropertyThird + "',GRAPH_DISPLAY_ROWS='" + displyRows + "',JQ_PROPERTIES='" + jqpropertiesString + "' WHERE GRAPH_ID=" + graphId;
                        }
                    } else {
                        graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_PROPERTY_XML1,GRAPH_PROPERTY_XML2,GRAPH_DISPLAY_ROWS,JQ_PROPERTIES) "
                                + "SELECT 'GM',ident_current('PRG_AR_REPORT_MASTER'),'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
                                + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "','" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',('" + strXML + "') ,'" + graphPropertyFirst + "','" + graphPropertySecond + "','" + graphPropertyThird + "','" + displyRows + "','" + jqpropertiesString + "' FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                    }
                } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                    if (this.isOverWriteExistingReport()) {
                        deletequery = "delete  from PRG_AR_GRAPH_MASTER where graph_id not in(" + graphId + ") and report_id=" + reportId + "";
                        String qry1 = "select * from prg_ar_graph_master where report_id =" + reportId;
                        PbDb pb = new PbDb();
                        PbReturnObject pbret1 = execSelectSQL(qry1);
                        if (pbret1.getRowCount() <= 0) {
                            graphId = -100;
                        }
                        if (graphId == -100) {
                            graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_DISPLAY_ROWS,JQ_PROPERTIES) "
                                    + "SELECT 'GM'," + reportId + ",'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
                                    + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "','" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',('" + strXML + "') ,'" + graphProperty.toXml() + "','" + displyRows + "','" + jqpropertiesString + "' FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                        } //                            if(pbret1.getRowCount()<=0){
                        //                                graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_DISPLAY_ROWS,JQ_PROPERTIES) "
                        //                                + "SELECT 'GM',"+reportId+",'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
                        //                                + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "','" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',('" + strXML + "') ,'"+graphProperty.toXml()+"','"+displyRows+"','"+jqpropertiesString+"' FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                        //                                
                        //                            }
                        //added by srikanth.p
                        else {
                            graphMasterQuery = "UPDATE PRG_AR_GRAPH_MASTER SET SHOW_TABLE='GM',REPORT_ID=" + reportId + ",GRAPH_NAME='" + grpName + "',GRAPH_SIZE=(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "'),GRAPH_TYPE=(SELECT GRAPH_TYPE_ID FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "') ,GRAPH_CLASS=(SELECT GRAPH_CLASS_ID FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "'),GRAPH_ORDER=" + (i + 1) + ",ALLOW_LEGEND='" + grplegend + "',LEGEND_LOC='" + grplegendloc + "',SHOW_GRID_X_AXIS='" + grpshox + "',SHOW_GRID_Y_AXIS='" + grpshoy + "',LEFT_Y_AXIS_LABEL='" + grplyaxislabel + "',ALLOW_LINK='" + grpdrill + "',BACK_COLOR='" + grpbcolor + "',FONT_COLOR='" + grpfcolor + "',SHOW_DATA='" + grpdata + "',RIGHT_Y_AXIS_LABEL='" + grpryaxislabel + "',row_values=('" + strXML + "'),GRAPH_PROPERTY_XML='" + graphProperty.toXml() + "',GRAPH_DISPLAY_ROWS='" + displyRows + "',JQ_PROPERTIES='" + jqpropertiesString + "' WHERE GRAPH_ID=" + graphId;
                        }
                    } else {
                        graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_DISPLAY_ROWS,JQ_PROPERTIES) "
                                + "SELECT 'GM'," + reportId + ",'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
                                + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "','" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',('" + strXML + "') ,'" + graphProperty.toXml() + "','" + displyRows + "','" + jqpropertiesString + "' FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                    }
                } else {
                    graphMasterQuery = "insert into PRG_AR_GRAPH_MASTER (SHOW_TABLE,GRAPH_ID,REPORT_ID,GRAPH_NAME,GRAPH_SIZE,GRAPH_TYPE,GRAPH_CLASS,GRAPH_ORDER,ALLOW_LEGEND,LEGEND_LOC,SHOW_GRID_X_AXIS,SHOW_GRID_Y_AXIS,LEFT_Y_AXIS_LABEL,ALLOW_LINK,BACK_COLOR,FONT_COLOR,SHOW_DATA,RIGHT_Y_AXIS_LABEL,row_values,GRAPH_PROPERTY_XML,GRAPH_PROPERTY_XML1,GRAPH_PROPERTY_XML2,GRAPH_DISPLAY_ROWS,JQ_PROPERTIES) "
                            + "SELECT 'GM'," + graphId + "," + reportId + ",'" + grpName + "',(SELECT DISTINCT graph_size_id FROM PRG_AR_GRAPH_SIZES where graph_size_name='" + graphSize + "') as Graph_size, "
                            + "GRAPH_TYPE_ID, GRAPH_CLASS_ID," + (i + 1) + ",'" + grplegend + "','" + grplegendloc + "','" + grpshox + "','" + grpshoy + "','" + grplyaxislabel + "','" + grpdrill + "','" + grpbcolor + "','" + grpfcolor + "','" + grpdata + "','" + grpryaxislabel + "',TO_CLOB('" + strXML + "') ,'" + graphPropertyFirst + "','" + graphPropertySecond + "','" + graphPropertyThird + "','" + displyRows + "','" + jqpropertiesString + "' FROM PRG_AR_GRAPH_TYPE where graph_type_name='" + grpType + "' ";
                }
                if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                    execUpdateSQL(graphMasterQuery);
                } else {
                    queries.add(graphMasterQuery);
                }
                if (graphId == -100 && ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                    String qry1 = "select LAST_INSERT_ID(GRAPH_ID) from PRG_AR_GRAPH_MASTER order by 1 desc limit 1";
                    PbReturnObject retobj = execSelectSQL(qry1);
                    graphId = Integer.parseInt(retobj.getFieldValueString(0, 0));
                }
                String graphDetailsQuery = "";
                String element_ids2 = " case ";

                //hack when we need to save a Pie Chart with Dimension Segment
                if (RTDimensionElement.isRunTimeDimension(originnalColumns.get(0).toString())) {
                    viewByCount--;

                }
                if (container.isReportCrosstab()) {
                    if (!singleGraphColumns[container.getViewByCount()].contains("A_")) {
                        String whichMeasure = singleGraphColumns[container.getViewByCount()];
                        singleGraphColumns = new String[container.getViewByCount() + 1];
                        for (int m = 0; m < container.getViewByCount(); m++) {
                            singleGraphColumns[m] = container.getDisplayColumns().get(m);
                        }

                        Set nonViewByMapSet = container.getReportCollect().getNonViewByMap().keySet();
                        Object[] nonViewByArray = (Object[]) nonViewByMapSet.toArray();
                        for (int l = container.getViewByCount(); l < container.getDisplayColumns().size(); l++) {
                            if (container.getDisplayColumns().get(l).equalsIgnoreCase(whichMeasure)) {
                                ArrayList tempStr = (ArrayList) container.getDisplayLabels().get(l);
                                String grphColName = (String) tempStr.get(tempStr.size() - 1);
                                for (int k = 0; k < nonViewByArray.length; k++) {
                                    if (grphColName.equalsIgnoreCase((String) container.getReportCollect().getNonViewByMap().get(nonViewByArray[k]))) {
                                        singleGraphColumns[container.getViewByCount()] = (String) nonViewByArray[k];
                                        break;
                                    }
                                }
                                break;

                            }
                        }
                    }

                }
                //if (CEP_Elements == null || CEP_Elements.size() == 0) {
                if (singleGraphColumns != null) {
                    String[] singleGraphColumnsarrbkp = new String[singleGraphColumns.length];

                    int m = 0;
                    for (int k = 0; k < singleGraphColumns.length; k++) {
                        if (singleGraphColumns[k].contains("A_") || singleGraphColumns[k].equalsIgnoreCase("Time")) {
                            singleGraphColumnsarrbkp[m] = singleGraphColumns[k];
                            m++;
                        }
                    }
                    String[] singleGraphColumnsarr = new String[m];
                    for (int l = 0; l < m; l++) {
                        singleGraphColumnsarr[l] = singleGraphColumnsarrbkp[l];
                    }

                    for (int j = viewByCount; j < singleGraphColumnsarr.length; j++) {
                        ////.println("singleGraphColumnsarr[j] is : "+singleGraphColumnsarr[j]);
                        if (singleGraphColumnsarr[j].equalsIgnoreCase("Time")) {
                            element_ids.append(",-1");
                            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                                element_ids2 += " when element_id =-1 then " + ((j - viewByCount) + 1) + " ";
                            } else {
                                element_ids1.append(",-1," + ((j - viewByCount) + 1));
                            }

                        } else {
                            element_ids.append("," + singleGraphColumnsarr[j].replace("A_", "").replace("_G", ""));

                            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                                element_ids2 += " when element_id = " + singleGraphColumns[j].replace("A_", "").replace("_G", "") + " then " + ((j - viewByCount) + 1) + " ";
                            } else {
                                element_ids1.append("," + singleGraphColumnsarr[j].replace("A_", "").replace("_G", "") + "," + ((j - viewByCount) + 1));
                            }

                        }
                    }
                    element_ids2 += " else 10000 end ";
                    ////.println(" element_ids is : "+element_ids);

                    element_idsStr = element_ids.substring(1);

                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
//
                        //added by srikanth.p for overWriting graphs in sqlserver
                        if (this.isOverWriteExistingReport()) {
                            if (graphId == -100) {
                                graphDetailsQuery = "insert into prg_ar_graph_details (GRAPH_ID,COL_NAME,ELEMENT_ID,COLUMN_ORDER,QUERY_COL_ID,AXIS) select ident_current('PRG_AR_GRAPH_MASTER'),col_disp_name, element_id, " + element_ids2 + ",qry_col_id,0 as Axis from prg_ar_query_detail where element_id in (" + element_idsStr + ") AND report_id=" + reportId + "";
                            } else {
                                graphDetailsQuery = "insert into prg_ar_graph_details (GRAPH_ID,COL_NAME,ELEMENT_ID,COLUMN_ORDER,QUERY_COL_ID,AXIS) select " + graphId + ",col_disp_name, element_id, " + element_ids2 + ",qry_col_id,0 as Axis from prg_ar_query_detail where element_id in (" + element_idsStr + ") AND report_id=" + reportId + "";
                            }
                        } else {
                            graphDetailsQuery = "insert into prg_ar_graph_details (GRAPH_ID,COL_NAME,ELEMENT_ID,COLUMN_ORDER,QUERY_COL_ID,AXIS) select ident_current('PRG_AR_GRAPH_MASTER'),col_disp_name, element_id, " + element_ids2 + ",qry_col_id,0 as Axis from prg_ar_query_detail where element_id in (" + element_idsStr + ") AND report_id=" + reportId + "";
                        }
                    } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                        if (this.isOverWriteExistingReport()) {
                            if (graphId == -100) {
                                graphDetailsQuery = "insert into prg_ar_graph_details (GRAPH_ID,COL_NAME,ELEMENT_ID,COLUMN_ORDER,QUERY_COL_ID,AXIS) select " + graphId + ",col_disp_name, element_id, " + element_ids2 + ",qry_col_id,0 as Axis from prg_ar_query_detail where element_id in (" + element_idsStr + ") AND report_id=" + reportId + "";
                            } else {
                                graphDetailsQuery = "insert into prg_ar_graph_details (GRAPH_ID,COL_NAME,ELEMENT_ID,COLUMN_ORDER,QUERY_COL_ID,AXIS) select " + graphId + ",col_disp_name, element_id, " + element_ids2 + ",qry_col_id,0 as Axis from prg_ar_query_detail where element_id in (" + element_idsStr + ") AND report_id=" + reportId + "";
                            }
                        } else {
                            graphDetailsQuery = "insert into prg_ar_graph_details (GRAPH_ID,COL_NAME,ELEMENT_ID,COLUMN_ORDER,QUERY_COL_ID,AXIS) select " + graphId + ",col_disp_name, element_id, " + element_ids2 + ",qry_col_id,0 as Axis from prg_ar_query_detail where element_id in (" + element_idsStr + ") AND report_id=" + reportId + "";
                        }
                    } else {
                        graphDetailsQuery = "insert into prg_ar_graph_details (GRAPH_COL_ID,GRAPH_ID,COL_NAME,ELEMENT_ID,COLUMN_ORDER,QUERY_COL_ID,AXIS) select prg_ar_graph_details_seq.nextval," + graphId + ",col_disp_name, element_id,decode (element_id," + element_ids1.substring(1) + "),qry_col_id,0 as Axis from prg_ar_query_detail where element_id in (" + element_idsStr + ") AND report_id=" + reportId + "";
                    }

                    queries.add(graphDetailsQuery);
                }
                //
                //}
                graphSize = null;
                grpType = null;
                grpName = null;
                grplegend = null;
                grplegendloc = null;
                grpshox = null;
                grpshoy = null;
                grplyaxislabel = null;
                grpryaxislabel = null;
                grpbDomainaxislabel = null;

                grpdrill = null;
                grpbcolor = null;
                grpfcolor = null;
                grpdata = null;
            }
        }
        DAO.saveReport(queries);
    }

    public void updateQryColumns(Container container, int reportId) throws Exception {
        HashMap GraphHashMap = container.getGraphHashMap();
        HashMap graphcolumnHashMap = container.getChangeGraphColumns();
        //added by sruthi for hybrid report save
        HashMap<String, ArrayList<String>> summerizedTableHashMap = container.getSummerizedTableHashMap();
        ArrayList<String> displayColumns = container.getDisplayColumns();
        ArrayList<String> originnalColumns = container.getOriginalColumns();
        ArrayList<String> Measures = new ArrayList<String>();
        int viewByCount = (container.getViewByCount());
        ArrayList<String> qryColumnListfrmContainer = new ArrayList<String>();
        if (Integer.parseInt(container.getColumnViewByCount()) == 0) {
            Measures = container.getTableDisplayMeasures();
            String graphmeasId = null;
            ArrayList graphmeasures = null;
            String[] graphColumns = null;
            String graphId[] = null;
            HashMap singleGraphDetails = null;
            String[] PrevbarChartColumnNames = null;
            if (graphcolumnHashMap.size() != 0) {
                if (graphcolumnHashMap.get("GraphColumns") != null && !graphcolumnHashMap.get("GraphColumns").toString().isEmpty()) {
                    graphColumns = graphcolumnHashMap.get("GraphColumns").toString().split(",");
                    graphId = graphcolumnHashMap.get("grpIds").toString().split(",");
                }

                if (graphId != null && !graphId.toString().isEmpty()) {
                    for (int k = 0; k < graphId.length; k++) {
                        singleGraphDetails = (HashMap) GraphHashMap.get(graphId[k]);
                        PrevbarChartColumnNames = (String[]) singleGraphDetails.get("barChartColumnNames");
                        for (int j = 0; j < PrevbarChartColumnNames.length; j++) {
                            if (!displayColumns.contains(PrevbarChartColumnNames[j])) {
                                displayColumns.add(PrevbarChartColumnNames[j]);
                            }
                        }
                    }
                }
            } else {
                if (GraphHashMap.size() != 0) {
                    if (GraphHashMap.get("AllGraphColumns") != null) {
                        graphmeasures = (ArrayList) (GraphHashMap.get("AllGraphColumns"));
                    }
                }
                if (graphmeasures != null && !graphmeasures.isEmpty()) {
                    for (int i = 0; i < graphmeasures.size(); i++) {
                        if (graphmeasures != null && !graphmeasures.isEmpty()) {
                            graphmeasId = graphmeasures.get(i).toString();
                            if (!displayColumns.contains(graphmeasId)) {
                                displayColumns.add(graphmeasId);
                            }

                        }
                    }
                }
            }
            // 
            String showtable = (String) getShowGraphTable();
            if (showtable == null || showtable.equals("GM")) {
                for (int i = viewByCount; i < displayColumns.size(); i++) {
                    if (!RTMeasureElement.isRunTimeMeasure(displayColumns.get(i).toString())) {
                        qryColumnListfrmContainer.add(displayColumns.get(i).toString().replace("A_", ""));

                    }
                }

            } else {
                for (int i = viewByCount; i < originnalColumns.size(); i++) {
                    if (!RTMeasureElement.isRunTimeMeasure(originnalColumns.get(i).toString())) {
                        qryColumnListfrmContainer.add(originnalColumns.get(i).toString().replace("A_", ""));

                    }
                }
            }
        } else {
            Measures = container.getTableDisplayMeasures();
            for (int i = 1; i <= Measures.size(); i++) {
                if (!RTMeasureElement.isRunTimeMeasure(originnalColumns.get(i).toString())) {
                    qryColumnListfrmContainer.add(Measures.get(i - 1).toString().replace("A_", ""));
                }
            }
            //added by sruthi for  hybrid localsave
            if (container.isReportCrosstab() && container.isSummarizedMeasuresEnabled() && summerizedTableHashMap != null && summerizedTableHashMap.get("summerizedQryeIds") != null) {
                ArrayList<String> summerizedqryEIDs = (ArrayList<String>) summerizedTableHashMap.get("summerizedQryeIds");
                for (int i = 0; i < summerizedqryEIDs.size(); i++) {
                    qryColumnListfrmContainer.add(summerizedqryEIDs.get(i).toString().replace("A_", ""));
                }
            }
            //ended by sruthi
        }
        ArrayList<String> qryColumnListfrmDB = new ArrayList<String>();
        ArrayList<String> ADDQryColumnListtoDB = new ArrayList<String>();
        ArrayList<String> RemoveQryColumnListtoDB = new ArrayList<String>();

        qryColumnListfrmDB = DAO.getQryColumnsFromDB(reportId);
        if (qryColumnListfrmContainer.size() > 0 && qryColumnListfrmDB.size() > 0) {
            for (int i = 0; i < qryColumnListfrmContainer.size(); i++) {
                if (!qryColumnListfrmDB.contains(qryColumnListfrmContainer.get(i))) {
                    ADDQryColumnListtoDB.add(qryColumnListfrmContainer.get(i));
                }
                //added by sruthi for  hybrid localsave
                if (summerizedTableHashMap.get("summerizedQryeIds") != null) {
                    if (summerizedTableHashMap.get("summerizedQryeIds").contains(qryColumnListfrmContainer.get(i))) {
                        ADDQryColumnListtoDB.add(qryColumnListfrmContainer.get(i));
                    }
                }
                //ended by sruthi
            }
            for (int i = 0; i < qryColumnListfrmDB.size(); i++) {

                if (!qryColumnListfrmContainer.contains(qryColumnListfrmDB.get(i))) {
                    if (!displayColumns.contains("A_" + qryColumnListfrmDB.get(i) + "_percentwise") && !displayColumns.contains("A_" + qryColumnListfrmDB.get(i) + "_pwst"))//added by Nazneen for %wise without absolute saving
                    {
                        RemoveQryColumnListtoDB.add(qryColumnListfrmDB.get(i));
                    }
                }
            }

        }
        ArrayList queries = new ArrayList();
        StringBuffer QueryColumns = new StringBuffer();
        StringBuffer QueryColumnsOrder = new StringBuffer();
        String QueryColumnsOrder1 = " case ";
        if (ADDQryColumnListtoDB.size() > 0) {
            for (int i = 0; i < ADDQryColumnListtoDB.size(); i++) {
                //added by sruthi for  hybrid localsave
                if (summerizedTableHashMap.get("summerizedQryeIds") != null) {
                    if (summerizedTableHashMap.get("summerizedQryeIds").contains(ADDQryColumnListtoDB.get(i))) {
                        QueryColumns.append("," + ADDQryColumnListtoDB.get(i).toString().replace("A_", ""));
                        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                            QueryColumnsOrder1 += " when element_id = " + ADDQryColumnListtoDB.get(i).toString().replace("A_", "") + " then " + (i + 1) + " ";
                        } else {
                            QueryColumnsOrder.append("," + ADDQryColumnListtoDB.get(i).toString().replace("A_", "") + "," + (i + 1));
                        }
                    }
                } else {
                    //ended by sruthi
                    QueryColumns.append("," + ADDQryColumnListtoDB.get(i).toString().replace("A_", ""));
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) { //changed by sruthi for hybrid localsave
                        QueryColumnsOrder1 += " when element_id = " + ADDQryColumnListtoDB.get(i).toString() + " then " + (i + 1) + " ";
                    } else {
                        QueryColumnsOrder.append("," + ADDQryColumnListtoDB.get(i).toString() + "," + (i + 1));
                    }
                }
            }
            QueryColumnsOrder1 += " else 10000 end ";
            if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {  //changed by sruthi for hybrid localsave
                queries = DAO.insertReportQueryDetails(reportId, QueryColumns.substring(1), QueryColumnsOrder1, queries, false, container);//inserting into query details
            } else {
                queries = DAO.insertReportQueryDetails(reportId, QueryColumns.substring(1), QueryColumnsOrder.substring(1), queries, false, container);//inserting into query details
            }
            DAO.saveReport(queries);
        }
        if (RemoveQryColumnListtoDB.size() > 0) {
            DAO.removeQryColumns(reportId, RemoveQryColumnListtoDB);
        }
        if (ADDQryColumnListtoDB.size() > 0 || RemoveQryColumnListtoDB.size() > 0) {
            DAO.updateQryColSequence(reportId, qryColumnListfrmContainer);
        }
    }

    public void saveTableRegion(Container container, int reportId) throws Exception {
        ArrayList queries = new ArrayList();
        String reportName = container.getReportName();
        // 
        HashMap TableHashMap = container.getTableHashMap();
        ArrayList Measures = (ArrayList) TableHashMap.get("Measures");
        for (int i = 0; i < Measures.size(); i++) {

            if (container.getisrenamed().containsKey(Measures.get(i))) {

                String Element_rename = container.getisrenamed().get(Measures.get(i).toString()).toString();
                PbReportViewerDAO Daofrrename = new PbReportViewerDAO();
                Daofrrename.renameelementname(Measures.get(i).toString(), Element_rename, reportId);
            }
        }
        DAO.setTableHashMap(TableHashMap);
        DAO.removeTableDetails(reportId);
        DAO.updateReportMaster(reportId, container);
        updateQryColumns(container, reportId);
        queries = DAO.insertReportTableMaster(reportId, reportName, container, queries, true);
        DAO.saveReport(queries);
        if (container.getWhatIfScenario() != null) {
            String whatIfxml = container.getWhatIfScenario().toXML();
            DAO.saveWhatifDetails(reportId, whatIfxml);
        }

        DAO.saveDimensionSegmentValues(container, String.valueOf(reportId));

        for (String parameter : container.getParameterElements()) {
            ReportParameterSecurity paramSecurity = container.getParameterSecurity(parameter);
            if (paramSecurity != null) {
                DAO.saveParameterSecurity(String.valueOf(reportId), paramSecurity);
            }
        }
    }

    public String parseDate(String date) throws ParseException {
        Date date1 = null;
        String date2 = null;
        SimpleDateFormat format2 = new SimpleDateFormat("MM/dd/yyyy");
        try {
            date1 = format2.parse(date);
            SimpleDateFormat sdfDestination = new SimpleDateFormat();
            sdfDestination.applyPattern("yyyy-MM-dd hh:mm:ss.s");
            date2 = sdfDestination.format(date1);
        } catch (ParseException ex) {
            logger.error("Exception:", ex);
        }
        return date2;
    }
    //code written by swathi purpose of summerizedMsrs

    public PbReturnObject summerizedMeasuresReturnObject(Container container, String PbUserId) {
        PbReportQuery reportQuery = new PbReportQuery();
        QueryExecutor qryExec = new QueryExecutor();
        ProgenDataSet summerizedpbretObj = null;
        PbReportCollection reportCollectObj = (PbReportCollection) container.getReportCollect().clone();
        reportCollectObj.reportColViewbyValues = new ArrayList<String>();
        // 
        HashMap<String, ArrayList<String>> summerizedTableHashMap = container.getSummerizedTableHashMap();
        if (summerizedTableHashMap != null && summerizedTableHashMap.get("summerizedQryeIds") != null) {
            reportCollectObj.reportQryElementIds = new ArrayList<String>();
            reportCollectObj.reportQryAggregations = new ArrayList<String>();
            reportCollectObj.reportQryColNames = new ArrayList<String>();
            reportCollectObj.reportQryColTypes = new ArrayList<String>();
            reportCollectObj.reportQryElementIds.addAll((List<String>) summerizedTableHashMap.get("summerizedQryeIds"));
            reportCollectObj.reportQryAggregations.addAll((List<String>) summerizedTableHashMap.get("summerizedQryAggregations"));
            reportCollectObj.reportQryColNames.addAll((List<String>) summerizedTableHashMap.get("summerizedQryColNames"));
            reportCollectObj.reportQryColTypes.addAll((List<String>) summerizedTableHashMap.get("summerizedQryColTypes"));
        }
        reportQuery = qryExec.formulateQuery(reportCollectObj, PbUserId);
        String query = null;
        try {
            if (summerizedTableHashMap != null && summerizedTableHashMap.get("summerizedQryeIds") != null) {
                reportQuery.reportQryElementIds = summerizedTableHashMap.get("summerizedQryeIds");//by Nazneen for AO
            }
            query = reportQuery.generateViewByQry();
            this.isAOEnable = reportQuery.isAOEnable;
            //
        } catch (Exception e) {
            logger.error("Exception: ", e);
        }
        summerizedpbretObj = qryExec.executeQuery(reportCollectObj, query, false);
        PbReturnObject summerizedRetObj = (PbReturnObject) summerizedpbretObj;
        return summerizedRetObj;
    }

    //code ended
    /*
     *
     * @author srikanth.p for Initialize Report
     *
     * It is resposible to build the assigned reports and to set the resultent
     * filtered String as filter to the Parameter of assigning report
     */
    public HashMap getInitialRepFilters(Container container, HashMap assignedMap, String reportId, String PbUserId) {
        HashMap<String, String> filterMap = new HashMap<String, String>();
        PbReportCollection collect = container.getReportCollect();
        ArrayList paramIds = collect.reportParamIds;
        LinkedHashMap reportParametersValues = collect.reportParametersValues;
        LinkedHashMap<String, ArrayList<String>> reportParameters = collect.reportParameters;
        HashMap resetParamHashmap = collect.resetParamHashmap;
        PbReportViewerDAO viewerDao = new PbReportViewerDAO();
          HashMap inMap = collect.operatorFilters.get("IN");
        String completeUrl = collect.completeUrl;
        QueryExecutor qryExec = new QueryExecutor();
        ArrayList originalColumns = new ArrayList();
        ArrayList displayColumns = new ArrayList();
        ArrayList displayLabels = new ArrayList();
        ArrayList dataTypes = new ArrayList();
        ArrayList displayTypes = new ArrayList();
        for (Object param : paramIds) {
            if (assignedMap.get(param) != null) {
                boolean isReportTobuild = false;
                String assignedReportId = assignedMap.get(param).toString();
                 if (!"".equals(assignedReportId)) {
                isReportTobuild = viewerDao.isViewByMatchedToInitialize(assignedReportId, param.toString());
                if (isReportTobuild) {
                    Container tempContainer = new Container();
                    PbReportCollection tempCollection = new PbReportCollection();
                    tempContainer.setReportCollect(tempCollection);
                    tempContainer.setReportId(assignedReportId);

                    try {

                        tempCollection.reportId = assignedReportId;
                        tempCollection.parentRepId = container.parentid;
                        tempCollection.ctxPath = requestCtxPath;//request.getContextPath();
                        tempCollection.getParamMetaData(true);
                        tempCollection.timeDetailsArray = collect.timeDetailsArray;

                        tempContainer.setTableMeasure(tempCollection.reportQryElementIds);
                        tempContainer.setTableMeasureNames(tempCollection.reportQryColNames);
                        tempContainer.setViewByColNames(tempCollection.reportRowViewbyValues);
                        tempContainer.setViewByElementIds(tempCollection.reportRowViewbyValues);
                        tempContainer.setTimeDetailsArray(tempCollection.timeDetailsArray);
                        tempContainer.setViewByCount((tempCollection.reportRowViewbyValues.size()));
                        for (int i = 0; i < tempCollection.reportRowViewbyValues.size(); i++) {
                            originalColumns.add("A_" + tempCollection.reportRowViewbyValues.get(i).toString());
                        }
                        for (int j = 0; j < tempCollection.reportQryElementIds.size(); j++) {
                            originalColumns.add("A_" + tempCollection.reportQryElementIds.get(j).toString());
                        }
                        tempContainer.setOriginalColumns(originalColumns);
                        tempContainer.setDisplayColumns(tempCollection.tableElementIds);
                        tempContainer.setDisplayLabels(tempCollection.tableColNames);
                        tempContainer.setDataTypes(tempCollection.tableColTypes);
                        tempContainer.setDisplayTypes(tempCollection.tableColDispTypes);

                        PbReportQuery depRepQry = new PbReportQuery();
                        depRepQry = qryExec.formulateQuery(tempCollection, PbUserId);
                        String query = depRepQry.generateViewByQry();
                        PbReturnObject retObj = (PbReturnObject) qryExec.executeQuery(collect, query, false);
                        tempContainer.setRetObj(retObj);
                         try {
                        if (tempCollection.tablePropertiesXML != null) {
//                            ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.updateTablePropertiesInContainer(container, tempCollection.tablePropertiesXML);
                            ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.updateTablePropertiesInContainer(tempContainer, tempCollection.tablePropertiesXML);
                        }
                         } catch (Exception e) {
                        logger.error("Exception: ", e);
                    }
                        PbReportTableBD reportTableBD = new PbReportTableBD();
                        reportTableBD.searchDataSet(tempContainer);
                        ArrayList<Integer> viewSequence = retObj.getViewSequence();

                        String viewBy = "A_" + tempCollection.reportRowViewbyValues.get(0).toString();
                        if (viewSequence != null && !viewSequence.isEmpty()) {
                            List<String> filterParams = new ArrayList();
                            StringBuilder filterParamsStr = new StringBuilder();
                            for (int i = 0; i < viewSequence.size(); i++) {
                                filterParams.add(retObj.getFieldValueString((Integer) viewSequence.get(i), viewBy));
                                filterParamsStr.append(retObj.getFieldValueString((Integer) viewSequence.get(i), viewBy)).append(",");
                            }
                            String filteredStr = filterParamsStr.toString().substring(0, filterParamsStr.length() - 1);
                            ArrayList mapedList = reportParameters.get(param);
                            mapedList.add(8, filterParams);
                            mapedList.remove(9);
                            mapedList.add(10, "INCLUDED");
                            mapedList.remove(11);
                            inMap.put(param.toString(), filterParams);
                collect.operatorFilters.put("IN", inMap);
                            reportParametersValues.put(param.toString(), filterParams);
                            resetParamHashmap.put(param, "INCLUDED");
                            String pattern = "CBOARP" + param.toString() + "=";
                            int foundAt = completeUrl.indexOf(pattern);
                            String str1 = completeUrl.substring(0, foundAt + pattern.length());
                            String str2 = completeUrl.substring(foundAt);
                            int secoundInd = str2.indexOf(';');
                            completeUrl = str1 + filteredStr + str2.substring(str2.indexOf(';'));
                            collect.completeUrl = completeUrl;
                        }

                    } catch (Exception e) {
                        logger.error("Exception: ", e);
                    }
                }
            }
        }
        }
        return filterMap;
    }

    public String prepareBrdCrmb(BreadCurmbBean brdcrmb, String reportName) {
        StringBuffer brdcrmbBuffer = new StringBuffer();
        String pgnam = "";
        brdcrmbBuffer.append("<ul class='dropDownMenu1' style='width:0px;list-style-type: none'>");
        brdcrmbBuffer.append("<li style='width:50%'>");
        brdcrmbBuffer.append("<img alt='' src='images/arrow-back-1.png' width='15px' height='20px' border='o'/>");
        brdcrmbBuffer.append("<ul style=' list-style-type: none;width:100px'>");

        if (brdcrmb.getPgname1() != null) {
            pgnam = brdcrmb.getPgname1().toString();
            if (pgnam.equalsIgnoreCase(reportName)) {
                brdcrmbBuffer.append("<li style='font-family:helvetica;font-size:11px;color: #967117;font-weight:bold;'>").append(brdcrmb.getPgname1()).append("</li>");
            } else {
                brdcrmbBuffer.append("<li><a href='").append(brdcrmb.getPgurl1()).append("'>").append(brdcrmb.getPgname1()).append("</a></li>");
            }
        }
        if (brdcrmb.getPgname2() != null) {
            pgnam = brdcrmb.getPgname2().toString();
            if (pgnam.equalsIgnoreCase(reportName)) {
                brdcrmbBuffer.append("<li style='font-family:helvetica;font-size:11px;color: #967117;font-weight:bold;'>").append(brdcrmb.getPgname2()).append("</li>");
            } else {
                brdcrmbBuffer.append("<li><a href='").append(brdcrmb.getPgurl2()).append("'>").append(brdcrmb.getPgname2()).append("</a></li>");
            }
        }
        if (brdcrmb.getPgname3() != null) {
            pgnam = brdcrmb.getPgname3().toString();
            if (pgnam.equalsIgnoreCase(reportName)) {
                brdcrmbBuffer.append("<li style='font-family:helvetica;font-size:11px;color: #967117;font-weight:bold;'>").append(brdcrmb.getPgname3()).append("</li>");
            } else {
                brdcrmbBuffer.append("<li><a href='").append(brdcrmb.getPgurl3()).append("'>").append(brdcrmb.getPgname3()).append("</a></li>");
            }
        }
        if (brdcrmb.getPgname4() != null) {
            pgnam = brdcrmb.getPgname4().toString();
            if (pgnam.equalsIgnoreCase(reportName)) {
                brdcrmbBuffer.append("<li style='font-family:helvetica;font-size:11px;color: #967117;font-weight:bold;'>").append(brdcrmb.getPgname4()).append("</li>");
            } else {
                brdcrmbBuffer.append("<li><a href='").append(brdcrmb.getPgurl4()).append("'>").append(brdcrmb.getPgname4()).append("</a></li>");
            }
        }
        if (brdcrmb.getPgname5() != null) {
            pgnam = brdcrmb.getPgname5().toString();
            if (pgnam.equalsIgnoreCase(reportName)) {
                brdcrmbBuffer.append("<li style='font-family:helvetica;font-size:11px;color: #967117;font-weight:bold;'>").append(brdcrmb.getPgname5()).append("</li>");
            } else {
                brdcrmbBuffer.append("<li><a href='").append(brdcrmb.getPgurl5()).append("'>").append(brdcrmb.getPgname5()).append("</a></li>");
            }
        }
        if (brdcrmb.getPgname6() != null) {
            pgnam = brdcrmb.getPgname6().toString();
            if (pgnam.equalsIgnoreCase(reportName)) {
                brdcrmbBuffer.append("<li style='font-family:helvetica;font-size:11px;color: #967117;font-weight:bold;'>").append(brdcrmb.getPgname6()).append("</li>");
            } else {
                brdcrmbBuffer.append("<li><a href='").append(brdcrmb.getPgurl6()).append("'>").append(brdcrmb.getPgname6()).append("</a></li>");
            }
        }
        if (brdcrmb.getPgname7() != null) {
            pgnam = brdcrmb.getPgname7().toString();
            if (pgnam.equalsIgnoreCase(reportName)) {
                brdcrmbBuffer.append("<li style='font-family:helvetica;font-size:11px;color: #967117;font-weight:bold;'>").append(brdcrmb.getPgname7()).append("</li>");
            } else {
                brdcrmbBuffer.append("<li><a href='").append(brdcrmb.getPgurl7()).append("'>").append(brdcrmb.getPgname7()).append("</a></li>");
            }
        }
        if (brdcrmb.getPgname8() != null) {
            pgnam = brdcrmb.getPgname8().toString();
            if (pgnam.equalsIgnoreCase(reportName)) {
                brdcrmbBuffer.append("<li style='font-family:helvetica;font-size:11px;color: #967117;font-weight:bold;'>").append(brdcrmb.getPgname8()).append("</li>");
            } else {
                brdcrmbBuffer.append("<li><a href='").append(brdcrmb.getPgurl8()).append("'>").append(brdcrmb.getPgname8()).append("</a></li>");
            }
        }
        if (brdcrmb.getPgname9() != null) {
            pgnam = brdcrmb.getPgname9().toString();
            if (pgnam.equalsIgnoreCase(reportName)) {
                brdcrmbBuffer.append("<li style='font-family:helvetica;font-size:11px;color: #967117;font-weight:bold;'>").append(brdcrmb.getPgname9()).append("</li>");
            } else {
                brdcrmbBuffer.append("<li><a href='").append(brdcrmb.getPgurl9()).append("'>").append(brdcrmb.getPgname9()).append("</a></li>");
            }
        }
        if (brdcrmb.getPgname10() != null) {
            pgnam = brdcrmb.getPgname10().toString();
            if (pgnam.equalsIgnoreCase(reportName)) {
                brdcrmbBuffer.append("<li style='font-family:helvetica;font-size:11px;color: #967117;font-weight:bold;'>").append(brdcrmb.getPgname10()).append("</li>");
            } else {
                brdcrmbBuffer.append("<li><a href='").append(brdcrmb.getPgurl10()).append("'>").append(brdcrmb.getPgname10()).append("</a></li>");
            }
        }

        brdcrmbBuffer.append("</ul>  </li>  </ul>");
        return brdcrmbBuffer.toString();
    }

    public String displayFiltersGlobal(PbReportCollection collect, String reportId) {
        StringBuilder result = new StringBuilder();
        ArrayList<String> reportParam = collect.reportParamIds;
        ArrayList reportParamNames = collect.reportParamNames;
        HashMap reportParametersValues = (HashMap) collect.operatorFilters.get("IN");
        HashMap reportexcludevalues = (HashMap) collect.operatorFilters.get("NOTIN");
        LinkedHashMap reportParameters = collect.reportParameters;
        result.append("<div id=\"globalFilter_" + reportId + "\" class=\"globalfilterShow\">");
        StringBuilder innerResult = new StringBuilder();
        StringBuilder innerResult1 = new StringBuilder();
        // Modified by Mayank
//        innerResult1.append("<div><table><tr><td><a title=\"Edit ViewBy\" onclick=\"editViewBy();\" class=\"ui-icon ui-icon-copy\" href=\"javascript:void(0)\"></a></td></tr></table></div>");
        innerResult1.append("<div><table><tr><td><a title=\"Edit ViewBy\" onclick=\"\" class=\"\" href=\"javascript:void(0)\"></a></td></tr></table></div>");
        if (reportParam != null) {
            for (int i = 0; i < reportParam.size(); i++) {
                ArrayList<String> paramDetails = (ArrayList) reportParameters.get(reportParam.get(i));
                String Name = paramDetails.get(9);
                List<String> values = (List<String>) reportParametersValues.get(reportParam.get(i));
                if (values != null) {
                    for (String filter : values) {
                        if (!filter.equalsIgnoreCase("All")) {
                            String divId = Name + "_" + filter + "_Global";
                            innerResult.append("<div id='" + divId + "' class='newparamView' style='width:" + (10 * (filter.length())) + ";float:left;'>");
                            innerResult.append("<table><tr>");
                            innerResult.append("<td><span class='newParamName' >" + filter + "</span></td>");
                            innerResult.append("<td ><a href=\"javascript:deleteglobalParam('" + Name + "','" + divId + "','" + filter + "')\" style=\"float:left\" class=\"ui-icon ui-icon-close\" ></a></td>");
                            innerResult.append("</tr></table>");
                            innerResult.append("</div>");
                        }
                    }
                }
            }
        }
//        //added by sruthi
//         if(reportParam !=null){
//                for (int i = 0; i < reportParam.size(); i++) {
//                ArrayList<String> excludeDetails = (ArrayList) reportParameters.get(reportParam.get(i));
//                 String tooltipname =  excludeDetails.get(1);
//                  String Name =excludeDetails.get(9);
//            List<String> excludevalues = (List<String>)reportexcludevalues.get(reportParam.get(i));
//            if(excludevalues!=null)
//            {
//              for(String filter : excludevalues)
//               {
//                  if (!filter.equalsIgnoreCase("All")) {
//                    String exdivId = Name + "_exval_" + filter + "_Global";
//                    innerResult.append("<div id='" + exdivId + "' class='newparamView' style='width:" + (10 * (filter.length())) + ";float:left;background-color:#79C9EC;'>");
//                    innerResult.append("<table><tr>");
//                    innerResult.append("<td ><span id='newParamName'  title= '"+tooltipname+"' >" + filter + "</span></td>");//changed by sruthi
//                    innerResult.append("<td ><a href=\"javascript:deleteglobalParam('" + Name + "_exval','" + exdivId + "','" + filter + "')\" style=\"float:left\" class=\"ui-icon ui-icon-close\" ></a></td>");
//                    innerResult.append("</tr></table>");
//                    innerResult.append("</div>");
//              }
//              }
//            }
//
//           }
//         }
//        //ended by sruthi
        if (innerResult.toString().equalsIgnoreCase("")) {
            innerResult.append("<table><tr><td>");
            innerResult.append(innerResult1);
            innerResult.append("</td><td><div><table><tr><td style=\"color:#E72B2B; font-size: 9pt; font-family: Calibri, Calibri, Calibri, sans-serif;\"><strong > No Filters Applied </strong></td></tr></table></div></td></tr></table>");
            result.append(innerResult);
        } else {
            result.append("<table><tr><td>");
            result.append(innerResult1);
            result.append("</td><td>");
            result.append(innerResult);
            result.append("</td></tr></table>");
        }
        result.append("</div>");
        return result.toString();
    }

    public Object readFileDetails(String filePath) throws FileNotFoundException, IOException, ClassNotFoundException {
        Object redObj = null;
        FileInputStream fis = null;
        ObjectInputStream ois = null;
//        try{
        fis = new FileInputStream(filePath);
        ois = new ObjectInputStream(fis);
        redObj = ois.readObject();
        ois.close();
        fis.close();
//        }catch(Exception e){
//            logger.error("Exception: ", e);
//        }
        return redObj;
    }

    public void writeBackUpFile(PbReportCollection collect, String filepath) throws FileNotFoundException, IOException {
        File file = new File(filepath);

        FileOutputStream fos1 = new FileOutputStream(file);
        ObjectOutputStream oos1 = new ObjectOutputStream(fos1);
        oos1.writeObject(collect);
        oos1.flush();
        oos1.close();

    }

    public void writeContainerToTextFile(Container container, String filepath) throws FileNotFoundException, IOException {
        File file = new File(filepath);

        FileOutputStream fos1 = new FileOutputStream(file);
        ObjectOutputStream oos1 = new ObjectOutputStream(fos1);
        oos1.writeObject(container);
        oos1.flush();
        oos1.close();

    }

    public void homePageRefresh(String hotFilePath, String reportId) throws Exception {
        PbReportViewerDAO repDao = new PbReportViewerDAO();
        PbReturnObject pbReturnObject = null;
        ArrayList fileName = new ArrayList();
        ArrayList graphorRep = new ArrayList();
        String qry1 = "";
        String qry = "";
        if (reportId != null && !reportId.equalsIgnoreCase("") && !reportId.equalsIgnoreCase("null")) {
            qry1 = "Select * from PRG_AR_HOMEPAGE_GRAPH where REPORT_ID=" + reportId;
        } else {
            qry1 = "Select * from PRG_AR_HOMEPAGE_GRAPH ";
        }
        try {
            pbReturnObject = DAO.execSelectSQL(qry1);
        } catch (SQLException ex) {
            logger.error("Exception:", ex);
        }
        if (pbReturnObject != null && pbReturnObject.rowCount > 0) {
            for (int k = 0; k < pbReturnObject.getRowCount(); k++) {
                fileName.add(pbReturnObject.getFieldValueString(k, "FILE_NAME"));
                File delFile = new File(hotFilePath + "/" + pbReturnObject.getFieldValueString(k, "FILE_NAME"));
                if (delFile.exists()) {
                    delFile.delete();
                }

            }
        }
        if (reportId != null && !reportId.equalsIgnoreCase("") && !reportId.equalsIgnoreCase("null")) {
            qry = "delete from PRG_AR_HOMEPAGE_GRAPH where REPORT_ID=" + reportId;
        } else {
            qry = "delete from PRG_AR_HOMEPAGE_GRAPH";
        }

        DAO.execModifySQL(qry);

    }

    public String modifyMeasureAttr(String reportid, Container container) {
//          Container container = new Container();
        PbReportViewerDAO dao = new PbReportViewerDAO();
        HashMap map = dao.modifyMeasureAttr(reportid, container);
//        container.setmodifymeasure( map1);
//        Map map=container.getmodifymeasure();
        ArrayList measureName = (ArrayList) map.get("measureName");
        ArrayList measureId = (ArrayList) map.get("measureId");
        ArrayList<String> Symbols = (ArrayList) map.get("symbols");
        ArrayList<String> Col_type = (ArrayList) map.get("col_type");
        ArrayList<String> Aggregation = (ArrayList) map.get("Aggregation");
        ArrayList<String> measureType = (ArrayList) map.get("measureType");
        ArrayList<String> No_format = (ArrayList) map.get("no_format");
        ArrayList<String> Round = (ArrayList) map.get("round");
        StringBuilder measurename = new StringBuilder();
        StringBuilder measureid = new StringBuilder();
        StringBuilder symbols = new StringBuilder();
        StringBuilder col_type = new StringBuilder();
        StringBuilder aggregation = new StringBuilder();
        StringBuilder measuretype = new StringBuilder();
        StringBuilder no_format = new StringBuilder();
        StringBuilder round = new StringBuilder();

        String measurenames = null;
        String measureids = null;
        measurename.append("{ measureName:[");
        measureid.append(" measureId:[");
        symbols.append(" symbols:[");
        col_type.append(" col_type:[");
        aggregation.append(" Aggregation:[");
        measuretype.append(" measureType:[");
        no_format.append(" no_format:[");
        round.append(" round:[");

        for (int i = 0; i < measureName.size(); i++) {
            measurenames = (String) measureName.get(i);
            measureids = (String) measureId.get(i);

            measurename.append("\"").append(measurenames).append("\"");
            measureid.append("\"").append(measureids).append("\"");
            symbols.append("\"").append((String) Symbols.get(i)).append("\"");
            col_type.append("\"").append((String) Col_type.get(i)).append("\"");
////           aggregation.append("\"").append((String)Aggregation.get(i)).append("\"");
            no_format.append("\"").append((String) No_format.get(i)).append("\"");
            round.append("\"").append((String) Round.get(i)).append("\"");
            aggregation.append("\"").append((String) Aggregation.get(i)).append("\"");
            measuretype.append("\"").append((String) measureType.get(i)).append("\"");
////            
//
////           if(reportmap.get(viewByArr[1])!=null){
////           reportrltdViewById.add(viewByArr[1]);
////           }
////           assignedInfo=(String)assignedMap.get(viewByArr[1]);
////           conditionInfo=(String)conditionMap.get(viewByArr[1]);
////           assignedIds.append("\"").append(assignedInfo).append("\"");
////           conditions.append("\"").append(conditionInfo).append("\"");
            if (i != measureName.size() - 1) {
                measurename.append(",");
                measureid.append(",");
                symbols.append(",");
                col_type.append(",");
                no_format.append(",");
                round.append(",");
                aggregation.append(",");
                measuretype.append(",");
////                assignedIds.append(",");
////                conditions.append(",");
            }
        }
//        measurenames=(String)measureName.get(0);
//           measureids=(String)measureId.get(0);

//           measurename.append("\"").append(measurenames).append("\"");
//           measureid.append("\"").append(measureids).append("\"");
//           symbols.append("\"").append((String)Symbols.get(0)).append("\"");
//           aggregation.append("\"").append((String)Aggregation.get(i)).append("\"");
//           no_format.append("\"").append((String)No_format.get(0)).append("\"");
//           round.append("\"").append((String)Round.get(0)).append("\"");
//        aggregation.append("\"").append((String)Aggregation.get(0)).append("\"");
        measurename.append("] ,").append(measureid).append("] ,").append(symbols).append("] ,").append(col_type).append("] ,").append(aggregation).append("] ,").append(measuretype).append("] ,").append(no_format).append("] ,").append(round).append("] }");
        return measurename.toString();
    }

    public String modifyMeasureAttrchnge(String reportid, String elmntid, Container container) {
//         Container container = new Container();
        PbReportViewerDAO dao = new PbReportViewerDAO();
        HashMap map = dao.modifyMeasureAttr(reportid, elmntid, container);
//       container.setmodifymeasureAttrChnge( map1);
//        Map map=container.getmodifymeasureAttrChng();
//         Map map=container.getmodifymeasure();
        String Symbols = map.get("symbols").toString();
        String Datatype = map.get("datatype").toString();
        String msrType = map.get("msrType").toString();
        String Aggregation = map.get("Aggregation").toString();
        String No_format = map.get("no_format").toString();
        String Round = map.get("round").toString();
        String defDateFrmt = "NONE";
        String connType = map.get("connType").toString();
        if (container.getDateFormatt("A_" + elmntid) != null && Datatype.equalsIgnoreCase("date")) {
            defDateFrmt = container.getDateFormatt("A_" + elmntid);
        }
        StringBuilder measurename = new StringBuilder();
        measurename.append("{ Symbol:[\"").append(Symbols).append("\"],datatype:[\"").append(Datatype.toUpperCase()).append("\"],msrType:[\"").append(msrType).append("\"],Aggregation:[\"").append(Aggregation.toUpperCase()).append("\"],numfrmt:[\"").append(No_format).append("\"],Rounding:[\"").append(Round).append("\"],defDateFrmt:[\"").append(defDateFrmt.toUpperCase()).append("\"],connType:[\"").append(connType.toUpperCase()).append("\"]}");
        return measurename.toString();

    }

    public void insertQuickRefreshOption(String reportId, boolean quickRefreshEnable, Container container, String userId, ReportSchedule schedule, boolean autorefresh) throws FileNotFoundException, IOException {
        PbReportViewerDAO dao = new PbReportViewerDAO();
        String folderPath = container.getReportCollect().getReportAdvHtmlFileProps() + "/Reports";
        //
        File folderDir = new File(folderPath);
        if (!folderDir.exists()) {
            folderDir.mkdir();
        }
        DateFormat dateFormat = new SimpleDateFormat("ddMMyyyy");
        Calendar cal = Calendar.getInstance();
        String date = dateFormat.format(cal.getTime());
        //
        String filePath = folderPath + "/" + reportId + "_" + date + "_time stamp.txt";
        container.setQuickRefreshEnabled(quickRefreshEnable);
        container.setQuickautoRefresh(autorefresh);
        dao.insertQuickRefreshOption(reportId, quickRefreshEnable, filePath, schedule, autorefresh);
        ReportTemplateBD bd = new ReportTemplateBD();
        container.setFacadePath(filePath);
        DataFacade facade = new DataFacade(container);
        facade.setUserId(userId);
        try {
            // 
            if (container.getViewByCount() < 2 && container.getReportCollect().reportColViewbys.isEmpty()) {
                facade = bd.generateReportQrys(reportId, facade, userId);
            }
            this.writeBackUpFile(facade, filePath);
        } catch (Exception ex) {
            logger.error("Exception:", ex);
        }
    }

    public void prepareReportFrmFile(String ReportId, String UserId, String filePath, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        Container container;
        boolean flag = false;
        boolean timeDetailsflag = false;
        try {
            DataFacade facade = (DataFacade) readFileDetails(filePath);
            container = facade.container;
            container.setFacadePath(filePath);
            flag = this.checkParameterSequence(ReportId, container);
            timeDetailsflag = this.checktimeDetails(ReportId, container);
            boolean autoRefresh = container.isQuickautoRefresh();
            if (flag && timeDetailsflag && autoRefresh) {
                request.setAttribute("quickAutoRefresh", autoRefresh);
                container.setRefreshCompareFlag(true);
                container.setSessionContext(session, container);
                this.prepareReport(ReportId, UserId, request, response,false);
            } else if (flag && timeDetailsflag) {
                container.setRefreshCompareFlag(true);
                container.setSessionContext(session, container);
                request.setAttribute("currentURL", container.getReportCollect().completeUrl);
                request.setAttribute("REPORTID", ReportId);
            } else {
                container.setRefreshCompareFlag(false);
                this.prepareReport(ReportId, UserId, request, response,false);
            }

        } catch (Exception ex) {
            logger.error("Exception:", ex);
        }

    }

    public void prepareReportFrmSharedFile(String ReportId, String UserId, String sharedFilePath, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        //Container container;
        boolean flag = false;
        boolean timeDetailsflag = false;
        try {
            Container container = (Container) readFileDetails(sharedFilePath);
            container.setSessionContext(session, container);
            request.setAttribute("currentURL", container.getReportCollect().completeUrl);
            request.setAttribute("REPORTID", ReportId);
        } catch (Exception ex) {
            logger.error("Exception:", ex);
        }
    }

    public boolean checkParameterSequence(String ReportId, Container container) {
        boolean flag = false;
        PbReportCollection collect = new PbReportCollection();
        PbReturnObject retObj = collect.getParmetersData(ReportId);
        ArrayList<String> parameterIds = new ArrayList<String>();
        LinkedHashMap reportParametersValues = new LinkedHashMap();

        String[] colNames = retObj.getColumnNames();
        List<String> valulist = null;
        Gson gson = new Gson();
        Type typeList = new TypeToken<List<String>>() {
        }.getType();
        if (retObj != null && retObj.getRowCount() > 0) {
            for (int i = 0; i < retObj.getRowCount(); i++) {
                parameterIds.add(retObj.getFieldValueString(i, "ELEMENT_ID"));
                if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                    if (retObj.getFieldValueClobString(i, colNames[8]) != null) {
                        try {
                            valulist = gson.fromJson(retObj.getFieldValueClobString(i, colNames[8]), typeList);
                        } catch (com.google.gson.JsonParseException e) {
                            String normalString = retObj.getFieldValueClobString(i, colNames[8]);
                            String[] splitedStr = normalString.split(",");
                            valulist = Arrays.asList(splitedStr);
                        }
                    }
                } else {
                    try {
                        valulist = gson.fromJson(retObj.getFieldUnknown(i, 8), typeList);
                    } catch (com.google.gson.JsonParseException e) {
                        String normalString = retObj.getFieldUnknown(i, 8);
                        String[] splitedStr = normalString.split(",");
                        valulist = Arrays.asList(splitedStr);
                    }
                }

                reportParametersValues.put(retObj.getFieldValueString(i, "ELEMENT_ID"), valulist);
            }
        }
        //
        ArrayList fileParameterIds = (ArrayList) container.getParametersHashMap().get("Parameters");
        LinkedHashMap filereportParametersValues = (LinkedHashMap) container.getReportCollect().reportParametersValues;
        //
        if (parameterIds.equals(fileParameterIds) && filereportParametersValues.equals(reportParametersValues)) {
            flag = true;
        }
        return flag;
    }

    public boolean checktimeDetails(String ReportId, Container container) {
        boolean flag = false;
        ArrayList filetimedetails = new ArrayList();
        PbReportCollection collect = new PbReportCollection();
        filetimedetails = container.getTimeDetailsArray();
        ArrayList timeDetailsArray = collect.quickRefreshDate(ReportId);
        if (filetimedetails != null && timeDetailsArray != null && filetimedetails.size() == timeDetailsArray.size()) {
            for (int i = 0; i < filetimedetails.size(); i++) {
                if (filetimedetails.get(i).toString().equals(timeDetailsArray.get(i).toString())) {
                    flag = true;
                } else {
                    flag = false;
                    break;
                }
            }
        } else {
            flag = false;
        }
        return flag;
    }

    public void writeBackUpFile(DataFacade facade, String filepath) throws FileNotFoundException, IOException {
        File file = new File(filepath);
        FileOutputStream fos1 = new FileOutputStream(file);
        ObjectOutputStream oos1 = new ObjectOutputStream(fos1);
        oos1.writeObject(facade);
        oos1.flush();
        oos1.close();

    }

    public void generateMutliPeriodReturnObject(String reportId, Container container, String UserId) {
        ArrayList<String> queryCols = new ArrayList<String>();
        ArrayList<String> queryAggs = new ArrayList<String>();

        PbReportCollection collect = container.getReportCollect();
//        container.setTopBottomTableEnable(true);
        queryCols = collect.reportQryElementIds;
        queryAggs = collect.reportQryAggregations;
        if (!queryCols.isEmpty()) {
            try {
                PbReportQuery repQuery = new PbReportQuery();
                repQuery.setQryColumns(collect.reportQryElementIds);
                repQuery.setColAggration(collect.reportQryAggregations);
                repQuery.setDefaultMeasure(String.valueOf(queryCols.get(0)));
                repQuery.setDefaultMeasureSumm(String.valueOf(queryCols.get(0)));
                repQuery.setReportId(collect.reportId);
                repQuery.setBizRoles(collect.reportBizRoles[0]);
                repQuery.setUserId(UserId);
                repQuery.setRowViewbyCols(collect.reportRowViewbyValues);
                repQuery.setColViewbyCols(collect.reportColViewbyValues);
                repQuery.setParamValue(collect.reportParametersValues);
                repQuery.setTimeDetails(collect.timeDetailsArray);
                repQuery.setInMap(collect.operatorFilters.get("IN"));
                MultiPeriodKPI multiPeriodKPI = new MultiPeriodKPI();
                ArrayList<String> reportperiods = new ArrayList<String>();
                reportperiods.add("Year");
                reportperiods.add("Qtr");
                reportperiods.add("Month");
                reportperiods.add("Week");
                reportperiods.add("Day");
                PbReturnObject reportMultyObject = new PbReturnObject();
                ArrayList tempTimeDetailsArrayList = (ArrayList) collect.timeDetailsArray.clone();
                for (String str : reportperiods) {
                    tempTimeDetailsArrayList.set(3, str);
                    repQuery.setTimeDetails(tempTimeDetailsArrayList);
                    reportMultyObject = repQuery.getPbReturnObjectWithFlag(String.valueOf(queryCols.get(0)));
                    HashMap vals111 = new HashMap();
                    vals111 = repQuery.getTimememdetails();
                    collect.setTimememdetails(vals111);
                    container.setTimememdetails(vals111);
                    if (str.equalsIgnoreCase("Year")) {
                        multiPeriodKPI.setYearObject(reportMultyObject);
                    } else if (str.equalsIgnoreCase("Qtr")) {
                        multiPeriodKPI.setQuarterObject(reportMultyObject);
                    } else if (str.equalsIgnoreCase("Month")) {
                        multiPeriodKPI.setMonthObject(reportMultyObject);
                    } else if (str.equalsIgnoreCase("Week")) {
                        // multiPeriodKPI.setDayObject(reportMultyObject);
                        multiPeriodKPI.setWeekObject(reportMultyObject);
                    } else if (str.equalsIgnoreCase("Day")) {
                        multiPeriodKPI.setDayObject(reportMultyObject);
                    }
                }

                container.setMultiPeriodKPI(multiPeriodKPI);
            } catch (Exception ex) {
                logger.error("Exception:", ex);
            }
        }
    }

    public PbReturnObject generatefinalReturnObjectforExcelImport(String reportId, Container container, PbReturnObject retObj) {
        PbReportQuery reportQuery = container.getViewbyqry();
        retObj.rowViewBys = reportQuery.getOrgRowViewbyCols();
        retObj.totalViewBys = reportQuery.getRowViewbyCols().size();
        retObj.totalOrderbys = reportQuery.getRowViewbyCols().size();
        retObj.rowViewCount = reportQuery.getOrgRowViewbyCols().size();
        retObj.nonViewInput = reportQuery.NonViewByMap;
        reportQuery.NonViewByMap = retObj.nonViewInput;
        retObj.Qrycolumns = reportQuery.getQryColumns();
        retObj.importExcelDeatil = container.importExcelDetails;
        PbReturnObject newImportRetObj = null;
        if (container.importExcelDetails.getExcelViewbys().size() == retObj.rowViewBys.size()) {
            retObj.importExcelRetObj = (PbReturnObject) container.importExcelDetails.getReturnObject().get(0);
            newImportRetObj = retObj.generateRetObjforExcelImport();
        } else if (container.importExcelDetails.getExcelViewbys().size() > retObj.rowViewBys.size()) {
            retObj.importExcelRetObj = ((PbReturnObject) container.importExcelDetails.getReturnObject().get(0));
            retObj.importExcelRetObj = retObj.genereateNewReturnObjectForExcel();
            newImportRetObj = retObj.generateRetObjforExcelImport();
        }

//        String[] dbColumns = newImportRetObj.getColumnNames();
//        String[] columnTypes = newImportRetObj.getColumnTypes();
//        int count=retObj.getColumnNames().length;
////        for(int i=count;i<newImportRetObj.cols.length;i++){
//         container.getDisplayColumns().add(dbColumns[i]);
//         container.getDisplayLabels().add(dbColumns[i]);
//        }
        return newImportRetObj;
    }

    public void getImportReturnObjectfromPath(String reportId, Container container) {
        ImportExcelDetail importExcel;
        if (container.getReportCollect().isIsExcelimportEnable()) {
            try {
                FileInputStream fis2 = new FileInputStream(container.getReportCollect().importExcelFilePath);
                ObjectInputStream ois2 = new ObjectInputStream(fis2);
                importExcel = (ImportExcelDetail) ois2.readObject();
                container.importExcelDetails = importExcel;
                ois2.close();
            } catch (FileNotFoundException foe) {
                logger.error("Exception:", foe);
            } catch (IOException ie) {
                logger.error("Exception:", ie);
            } catch (Exception ex) {
                logger.error("Exception:", ex);
            }
        }
    }

    //Start of Code by Govardhan for getting subtotal search filters if any....in the format of JSON
    public String getAppliedFilterOnSubTotal(String reportId, String measure, Container container) {
        String segmentAllowedJSON = "";
        if (container.getIsSubToTalSearchFilterApplied()) {
            if (container.getSubTotalSrchColumns().contains(measure)) {
                int indx = container.getSubTotalSrchColumns().indexOf(measure);
                String SearchValue = container.getSubTotalSrchValue().get(indx);
                String Searchcondition = container.getSubTotalSrchCondition().get(indx);
                StringBuilder segmentAllowed = new StringBuilder();
                segmentAllowed.append("{" + "\"Searchcondition\"" + ":" + "\"" + Searchcondition + "\"" + "," + "\"SearchValue\"" + ":" + SearchValue);
                segmentAllowedJSON = segmentAllowed.toString();
                segmentAllowedJSON = segmentAllowedJSON.concat("}");
            } else {
                segmentAllowedJSON.concat("not applied");
            }
        } else {
            segmentAllowedJSON.concat("not applied");
        }
//     
        return segmentAllowedJSON;
    }
    //ended Code By Govardhan

    public String getAppliedFilterOnSubTotal(String reportId, Container container) {

        String segmentAllowedJSON = "";

        if (container.getIsSubToTalSearchFilterApplied()) {

            ArrayList<String> subTotalSrchColumns = container.getSubTotalSrchColumns();
            ArrayList<String> subTotalSrchValue = container.getSubTotalSrchValue();
            ArrayList<String> subTotalSrchCondition = container.getSubTotalSrchCondition();
            StringBuilder segmentAllowed = new StringBuilder();
            ArrayList<String> sss = container.getDisplayColumns();
            ArrayList<String> ggg = container.getDisplayLabels();
            int DistinctViewBys = container.getDistinctViewBys().size();
            String FirstViewByname = container.getDisplayLabels().get(0).toString();
            segmentAllowed.append("{" + "\"subTotalSrchColumns\"" + ":" + "\"" + container.getDisplayLabels().get(container.getDisplayColumns().indexOf(subTotalSrchColumns.get(0))) + "\"" + "," + "\"Searchcondition\"" + ":" + "\"" + subTotalSrchCondition.get(0) + "\"" + "," + "\"SearchValue\"" + ":" + "\"" + subTotalSrchValue.get(0) + "\"" + "," + "\"DistinctViewBys\"" + ":" + "\"" + DistinctViewBys + "\"" + "," + "\"FirstViewByname\"" + ":" + "\"" + FirstViewByname + "\"");
            segmentAllowedJSON = segmentAllowed.toString();
            segmentAllowedJSON = segmentAllowedJSON.concat("}");
        } else {
            segmentAllowedJSON.concat("not applied");
        }

        return segmentAllowedJSON;
    }

    public void prepareReportForXtend(String reportId) throws SQLException, ClassNotFoundException {
        PbReportCollection collect;
        String repname = "";
        ProgenDataSet repObj = null;
        QueryExecutor qryExec = new QueryExecutor();
        String query = null;
        String repNameQuery = "select REPORT_NAME from prg_ar_report_master where report_id=" + reportId;
        try {
            XtendAdapter adapter = new XtendAdapter();
            PbDb pbdb = new PbDb();
            repObj = pbdb.execSelectSQL(repNameQuery);
            repname = repObj.getFieldValueString(0, "REPORT_NAME");
            String folderName = adapter.getFolderName(reportId);
            FileInputStream fileIn = new FileInputStream(adapter.privatePath + "/" + folderName + adapter.collect + repname + ".ser");
            ObjectInputStream in = new ObjectInputStream(fileIn);
            collect = (PbReportCollection) in.readObject();
            in.close();
            fileIn.close();
            query = collect.getRepQry();
            repObj = qryExec.executeQuery(collect, query, false);
            adapter.createCSV(repObj, collect.reportId, collect.reportName, collect.tableColNames);
        } catch (IOException ex) {
            logger.error("Exception:", ex);
        }
    }

    //Added by Amar for Export report in to excel sheets
    public String generateReportForExportReportSchedule(ReportSchedule schedule, String[] reportIds, String schedulerId, String userId, String contentType, String schedulerName) {
        String FileName = null;
        int totalValRepCount = reportIds.length;
        int count = 0;
        String filePath = schedule.getUploadedFilePath();
        String fileName = schedule.getUploadedFileName();
        String[] sheetNumbers = schedule.getSheetNumbers();
        String[] lineNumbers = schedule.getLineNumbers();
        String[] colNumbers = schedule.getColNumbers();
        String[] headerValue = schedule.getHeaderValues();
        String[] gtValues = schedule.getGTValues();
        for (int repIter = 0; repIter < reportIds.length; repIter++) {
            try {
                Container container = new Container();
                container = this.generateContainerFromSnapshot(schedule, reportIds[repIter], schedulerId, userId, schedulerName, repIter, gtValues[repIter]);
                PbReportTableBD reportTableBD = new PbReportTableBD();
                reportTableBD.searchDataSet(container);
                container.setNoOfScheduleReport(repIter);
                //Added by Amar
                facade = new DataFacade(container);
                //End of code
                ArrayList filterValues = new ArrayList();
                PbExcelGenerator driver1 = new PbExcelGenerator();//
                String viewbyvalues = "";
                String reportName = "";
                int counter = 0;
                String[] columns = null;
                String[] disColumns = null;
                String[] types = null;
                ArrayList cols = (ArrayList) container.getDisplayColumns().clone();
                ArrayList disCols = (ArrayList) container.getDisplayLabels().clone();
                ArrayList dTypes = (ArrayList) container.getDataTypes().clone();
//                          // Added by Amar for hide measures
//                        ArrayList<String> hiddenCols = container.getReportCollect().getHideMeasures();
//                        for (Object hiddenCol : hiddenCols) {
//                            int index = cols.indexOf("A_" + hiddenCol.toString());
//                            if (index != -1) {
//                                    cols.remove(index);
//                                    disCols.remove(index);
//                                    dTypes.remove(index);
//                            }
//                        }
//                        // end of code for hide measures
//
// Start of code by Nazneen for hidding measures during Excel download report
//                            if(cols.size()>dTypes.size()){
//                                for(int i=0;i<cols.size();i++){
//                                    if(dTypes.size()<=i)
//                                        dTypes.add("N");
//                                }
//                            }

                //end of code
                if (dTypes.size() < disCols.size()) {
                    for (int k = 0; k < disCols.size(); k++) {
                        if (dTypes.size() < disCols.size()) {
                            dTypes.add("N");
                        }
                    }
                }
                if (dTypes.size() > disCols.size()) {
                    int dTSize = dTypes.size();
                    for (int k = 0; k < dTSize; k++) {
                        if (dTypes.size() > disCols.size()) {
                            dTypes.remove(dTypes.size() - 1);
                        }
                    }
                }
                container.setDataTypes(dTypes);
                ArrayList<String> hiddenCols = container.getReportCollect().getHideMeasures();
                if (container.isReportCrosstab()) {
                    HashMap<String, String> crosstabMeasureId = ((PbReturnObject) container.getRetObj()).crosstabMeasureId;
                    String eleIdss = "";
                    for (Object hiddenCol : hiddenCols) {
                        for (int i = 0; i < cols.size(); i++) {
                            eleIdss = crosstabMeasureId.get(cols.get(i));
                            if (eleIdss != null && !eleIdss.equalsIgnoreCase("null") && !eleIdss.equalsIgnoreCase("")) {
                                if (hiddenCols.contains(eleIdss.replace("A_", ""))) {
                                    cols.remove(i);
                                    disCols.remove(i);
                                    dTypes.remove(i);
                                }
                            }
                        }
                    }
                } else {
                    for (Object hiddenCol : hiddenCols) {
                        int index = cols.indexOf("A_" + hiddenCol.toString());
                        if (index != -1) {
                            cols.remove(index);
                            disCols.remove(index);
                            dTypes.remove(index);
                        }
                    }
                }
                //code added by Amar on 28Oct 2015

                //end of code
// End of code by Nazneen for hidding measures during Excel download report
                if (container.getReportName() != null) {
                    reportName = container.getReportName();
                    reportName = reportName.trim().replace(" ", "_");
                    reportName = reportName.replaceAll("\\s", "");
                }
                count++;
                int fromRow = container.getFromRow();
                int toRow = container.getRetObj().getViewSequence().size();
                if (cols.contains("CBX")) {
                    columns = new String[cols.size() - 1];
                    disColumns = new String[cols.size() - 1];
                    types = new String[cols.size() - 1];
                } else {
                    columns = new String[cols.size()];
                    disColumns = new String[cols.size()];
                    types = new String[cols.size()];
                }
                for (int j = 0; j < cols.size(); j++) {
                    if (!"CBX".equals(String.valueOf(cols.get(j)))) {
                        columns[counter] = String.valueOf(cols.get(j));
                        //Added by Amar for prev/month issue
                        String dispColsSecond = String.valueOf(disCols.get(j));
                        if (dispColsSecond.contains("Prev Month")) {
                            disColumns[counter] = String.valueOf(facade.container.getMonthNameforTrailingFormulaOnColName(dispColsSecond));
                        } else {
                            disColumns[counter] = String.valueOf(dispColsSecond);
                        }
                        //End of code
                        //disColumns[counter] = String.valueOf(disCols.get(j));
                        if (dTypes.size() <= j) {
                            types[counter] = "N";
                        } else {
                            types[counter] = String.valueOf(dTypes.get(j));
                        }
                        counter++;
                    }
                }
                String[] values = new String[container.getReportCollect().paramValueList.size()];
                if (container.getReportCollect().paramValueList != null) {
                    for (int k = 0; k < container.getReportCollect().paramValueList.size(); k++) {
                        values = container.getReportCollect().paramValueList.get(k).toString().split(":");
                        viewbyvalues = values[1];
                        if (!viewbyvalues.contains("[All]")) {
                            String value = (String) container.getReportCollect().paramValueList.get(k);
                            if (!filterValues.contains(value)) {
                                filterValues.add(value);
                            }
                        }
                    }
                }
                // String paramType = request.getParameter("paramType");
                //driver1.setColorCodeMap(ColorCodeMap);
                driver1.setFilterValues(filterValues);
                //driver1.setParamType(paramType);
                //driver1.setTimeDetailsArray(timeDetailsArray);
                //driver1.setResponse(response);
                driver1.setTypes(types);
                driver1.setDisplayColumns(columns);
                driver1.setDisplayLabels(disColumns);
                //driver1.setDisplayType(displayType);
                //driver1.setRequest(request);
                driver1.setFilePaths(container.getImgPaths());
                driver1.setContainer(container);
                driver1.setFromRow(fromRow);
                driver1.setToRow(toRow);
                //driver1.setLogoPath(this.getServletContext().getRealPath("/").replace("\\.\\", "\\") + "images\\pi_logo.gif");
                driver1.setRet(container.getRetObj());
                //driver1.setHeaderTitle(headerTitle);
                driver1.setColorGroup(container.getColorGroup());
                driver1.setRepParameter(container.getReportParameter());
                driver1.setSortColumns(container.getSortColumns());
                driver1.setSortTypes(container.getSortTypes());
                driver1.setSortDataTypes(container.getSortDataTypes());
                driver1.setTotalValidReport(totalValRepCount);
                driver1.setSheetNumber(Integer.parseInt(sheetNumbers[repIter]) - 1);//modified by Amar
                driver1.setLineNumber(Integer.parseInt(lineNumbers[repIter]) - 1);//modified by Amar
                driver1.setColNumber(Integer.parseInt(colNumbers[repIter]) - 1);
                driver1.setHeader(headerValue[repIter]);
                driver1.setGTotal(gtValues[repIter]);
                driver1.setOperationType("exportSchedule");
                if (reportName != null && !"".equalsIgnoreCase(reportName)) {
                    reportName = reportName.replaceAll("\\s", "");
                    driver1.setReportName(reportName);
                    String ext = fileName.substring(fileName.lastIndexOf('.') + 1);//Added by Dinanath for accepting any type of file
                    driver1.setFileName(reportName + "." + ext);
                    //driver1.setFileName(reportName + ".xls");
                    if (ext.equalsIgnoreCase("xls")) {
                        driver1.createExcelForReportsXLS(count, filePath, fileName);
                    } else if (ext.equalsIgnoreCase("xlsm")) {
                        driver1.createExcelForReportsXLSM(count, filePath, fileName);
                    } else if (ext.equalsIgnoreCase("xlsx")) {
                        driver1.createExcelForReportsXLSX(count, filePath, fileName);
                    } else {
                        logger.warn("Wrong file format because File name is : " + fileName);
                    }
                } else {
                    driver1.setReportName("Excel Report");
                    driver1.setFileName("downloadExcel.xls");
                    String ext = fileName.substring(fileName.lastIndexOf('.') + 1);//Added by Dinanath for accepting any type of file
                    if (ext.equalsIgnoreCase("xls")) {
                        driver1.createExcelForReportsXLS(count, filePath, fileName);
                    } else if (ext.equalsIgnoreCase("xlsm")) {
                        driver1.createExcelForReportsXLSM(count, filePath, fileName);
                    } else if (ext.equalsIgnoreCase("xlsx")) {
                        driver1.createExcelForReportsXLSX(count, filePath, fileName);
                    } else {
                        logger.warn("Wrong file format because File name is : " + fileName);
                    }
                }
//            DataSnapshotGenerator snapshotgenerator=new DataSnapshotGenerator();
//            snapshotgenerator.setScheduleFileName(schedulerName+"_");
////
////         if ( container.getReportCollect().tablePropertiesXML != null )
////         ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.updateTablePropertiesInContainer(container, container.getReportCollect().tablePropertiesXML);
//
//         PbReportTableBD reportTableBD = new PbReportTableBD();
//         reportTableBD.searchDataSet(container);
//        //  
//            if(contentType.equals("H")){
//            FileName= snapshotgenerator.generateAndStoreHtmlSnapshot(container, userId,"dailyScheduleReport");
//            } else if (contentType.equals("E"))
//            {
//                FileName= snapshotgenerator.generateReportInfoExcel(container);
//            }
//            else if(contentType.equals("P"))
//            {
//                FileName= snapshotgenerator.generateReportInfoPdf(container);
//            }
            } catch (Exception ex) {
                logger.error("Exception:", ex);
                return null;
            }
        }
        return "success";

    }

//    public Container generateContainerForExportReports(ReportSchedule schedule, String reportId, String schedulerId, String userId, String schedulerName) {
//        Container container = new Container();
//        try {
//            PbReportCollection collect = new PbReportCollection();
////            HttpServletRequest request= schedule.getRequest();
////            HttpSession session = request.getSession(false);
////
////            String folderPath=(String)session.getAttribute("reportAdvHtmlFileProps")+"/collectStore";
////             File folderDir=new File(folderPath);
////                if(!folderDir.exists())
////                   folderDir.mkdir();
//            String[] pathInPieces = null;
//            String fileDir;
//            String folderPath = schedule.getUploadedFilePath();
//            String fileName = schedule.getUploadedFileName();
//            folderPath = folderPath.replaceAll("/importExcel/" + fileName, "/collectStore");
////            pathInPieces = folderPath.split("/");
////            fileDir = "/"+pathInPieces[1]+"/"+pathInPieces[2]+"/"+pathInPieces[3]+"/collectStore";
//            String reportFileName = "/collect_" + reportId + ".txt";
//            String filePath = folderPath + reportFileName;
//            //String finalFilePath = filePath.replace("/", "\\");
//            FileInputStream fileIn = new FileInputStream(filePath);
//            ObjectInputStream in = new ObjectInputStream(fileIn);
//            collect = (PbReportCollection) in.readObject();
//            in.close();
//            fileIn.close();
//            //query = collect.getRepQry();
//            //repObj = qryExec.executeQuery(collect, query, false);
//
//            container.setTableId(reportId);
//            // container.setReportId(reportId);
//            QueryExecutor qryExec = new QueryExecutor();
//            ProgenDataSet pbretObj = null;
//            PbReturnObject newCrossRetObj = null;
//            String[] dbColumns = null;
//            String[] columnTypes = null;
//            String FileName = "";
//            collect.reportId = reportId;
//            ArrayList originalColumns = new ArrayList();
//            ArrayList displayColumns = new ArrayList();
//            ArrayList displayLabels = new ArrayList();
//            ArrayList dataTypes = new ArrayList();
//            ArrayList displayTypes = new ArrayList();
//            ReportTemplateDAO reportDao = new ReportTemplateDAO();
//            // String url=reportDao.getURL(reportId,schedulerId);
//            //String[] reportParameters=url.split(";");
//            // PbReportRequestParameter param=new PbReportRequestParameter();
//            //Gson gson=new Gson();
//            //Type tarType=new TypeToken<List<String>>() {}.getType();
////            for(int i=2;i<reportParameters.length;i++){
////             String[] val=reportParameters[i].split("=");
////             if(val.length >0 && val[0].contains("CBOARP")){
////                 List<String> filterList=null;
////                 try {
////                         filterList = gson.fromJson(val[1],tarType);
////
////                     } catch (com.google.gson.JsonParseException e) {
////                         String normalString =val[1];
////                         String[] splitedStr = normalString.split(",");
////                         filterList = Arrays.asList(splitedStr);
////                 }
////                 param.requestParamValues.put(val[0], filterList);
////             }else{
////            param.requestParamValues.put(val[0], val[1]);
////            }
////            }
//            // collect.reportIncomingParameters = param.requestParamValues;
//            container.setReportCollect(collect);
//
//
//            container.setViewByColNames(collect.reportRowViewbyValues);
//            container.setViewByElementIds(collect.reportRowViewbyValues);
//            container.setTimeDetailsArray(collect.timeDetailsArray);
//            // List table= collect.getChildElementId("progen_table");
//            if (collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() != 0) {
//                if (collect.tablePropertiesXML != null) {
//                    ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.enableSummerizedMeasure(container, collect.tablePropertiesXML);
//                }
//            }
//            PbReturnObject summerizedMsrRetObj = null;
//            if (container.isSummarizedMeasuresEnabled()) {
//                summerizedMsrRetObj = this.summerizedMeasuresReturnObject(container, userId);
//            }
//            // collect.updateCollection(true);
//            collect.getParamMetaData(true);
////            container = readSnapShotXML(container, schedulerId, collect);
//            HashMap TableHashMap = container.getTableHashMap();
//            ArrayList Measures = (ArrayList) TableHashMap.get("Measures");
//            HashMap ReportHashMap = container.getReportHashMap();
//            //collect.reportQryElementIds = (ArrayList)ReportHashMap.get("reportQryElementIds");
//            //collect.reportQryAggregations = (ArrayList)ReportHashMap.get("reportQryAggregations");
//            // collect.reportQryColNames =  (ArrayList) ReportHashMap.get("reportQryColNames");
//            //collect.reportQryColTypes = (ArrayList) ReportHashMap.get("reportQryColTypes");
//            container.setTableMeasure(collect.reportQryElementIds);
//            container.setTableMeasureNames(collect.reportQryColNames);
//
////               if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
////            collect.timeDetailsArray = (ArrayList)(container.getParametersHashMap()).get("TimeDetailstList");
////            collect.timeDetailsMap = (HashMap) (container.getParametersHashMap()).get("TimeDimHashMap");
////               }
//            // container=prepareReport(collect, reportId, userId);
//            if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
//                if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("year")) {
//                    container.setTimeLevel("YEAR");
//                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Qtr")) {
//                    container.setTimeLevel("QUARTER");
//                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Month")) {
//                    container.setTimeLevel("MONTH");
//                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Week")) {
//                    container.setTimeLevel("WEEK");
//                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Day")) {
//                    container.setTimeLevel("DAY");
//                }
//            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_DATE_RANGE")) {
//                container.setTimeLevel("MONTH");
//            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_MONTH_RANGE")) {
//                container.setTimeLevel("QUARTER");
//            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_QTR_RANGE")) {
//                container.setTimeLevel("YEAR");
//            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_YEAR_RANGE")) {
//                container.setTimeLevel("YEAR");
//            }
//
//            container.setViewByColNames(collect.reportRowViewbyValues);
//            container.setViewByElementIds(collect.reportRowViewbyValues);
//            container.setTimeDetailsArray(collect.timeDetailsArray);
//
//            HashMap ParametersHashMap = container.getParametersHashMap();
//            ParametersHashMap.put("TimeDetailstList", collect.timeDetailsArray);
//            ParametersHashMap.put("TimeDimHashMap", collect.timeDetailsMap);
//            container.setParametersHashMap(ParametersHashMap);
//            //
//            container.setColumnProperties(collect.columnProperties);
//
//            //generating multilevel reportquery
//
//            PbReportViewerDAO dao = new PbReportViewerDAO();
//            //level 1
//            //end of level 1
//            // end of generating multilevel reportquery
//            PbReportQuery reportQuery = qryExec.formulateQuery(collect, userId);
//            if (container.getDepViewByConditionsmap() != null && !container.getDepViewByConditionsmap().isEmpty()) {
//                reportQuery.parameterType = container.getDepViewByConditionsmap();
//            }
//            if (container.getDependentviewbyIdQry() != null && !container.getDependentviewbyIdQry().isEmpty()) {
//                reportQuery.parameterQuery = container.getDependentviewbyIdQry();
//            }
//            // System.out.println("reportQuery"+reportQuery);
//            if (Boolean.parseBoolean(container.getgTAverage()) == true) {
//                PbReturnObject KpiretObj = new PbReturnObject();
//                KpiretObj = this.getKpiRetObjforgrandtotals(container, collect, userId);
//                container.setKpiRetObj(KpiretObj);
//            }
//         //   String query = collect.getRepQry();    //reportQuery.generateViewByQry();
//            String query = reportQuery.generateViewByQry();
//            //query.replace("and to_date()","");
//            container.setViewbyqry(reportQuery);
//            //
////                reportQryElementIds = collect.reportQryElementIds;
////                reportQryAggregations = collect.reportQryAggregations;
////                reportQryColNames = collect.reportQryColNames;
////                reportQryColTypes = collect.reportQryColTypes;
//            //
//            if (pbretObj == null) {
//                ProgenLog.log(ProgenLog.FINE, this, "prepareReport", "Going to Fire Query " + System.currentTimeMillis());
////                    pbretObj = qryExec.executeQuery(collect, query);//repQuery.getPbReturnObjectWithFlag(String.valueOf(reportQryElementIds.get(0)), query);//, session);
//                pbretObj = qryExec.executeQuery(collect, query, false);
//
//                if (collect.reportColViewbyValues != null && !collect.reportColViewbyValues.isEmpty()) {
//                    PbReturnObject retObj = (PbReturnObject) pbretObj;
//                    retObj.rowViewBys = reportQuery.getOrgRowViewbyCols();
//                    retObj.ColViewBys = reportQuery.getColViewbyCols();
//                    retObj.totalViewBys = reportQuery.getRowViewbyCols().size();
//                    retObj.totalOrderbys = reportQuery.getRowViewbyCols().size();
//                    retObj.rowViewCount = reportQuery.getOrgRowViewbyCols().size();
//                    retObj.colViewCount = reportQuery.getColViewbyCols().size();
//                    retObj.nonViewInput = reportQuery.NonViewByMap;
//                    retObj.Qrycolumns = reportQuery.getQryColumns();
//                    retObj.meausreOnCol = true;
////                        retObj.MeasurePos = container.getMeasurePosition();
//                    retObj.MeasurePos = reportQuery.getColViewbyCols().size();
//                    retObj.gtType = "LAST";
//                    retObj.subGtType = "AFTER";
////                          if(retObj.gtType.equalsIgnoreCase("NONE") || retObj.gtType.equalsIgnoreCase("") || retObj.gtType == null)
////                            retObj.isGTNone=true;
////                         if(retObj.subGtType.equalsIgnoreCase("NONE") || retObj.subGtType.equalsIgnoreCase("") || retObj.subGtType == null)
////                            retObj.isSTNone=true;
//                    //repQuery.setGrandTotalSubTotalDisplayPosition(collect.crosstabGTDisplayPos, collect.crosstabSTDisplayPos);
//                    newCrossRetObj = retObj.transposeExportReturnObject();
//                    ProgenChartDatasets dataset = new ProgenChartDatasets();
//                    dataset.isIsCrosstab();
//                    container.setRetObj(newCrossRetObj);
//                    collect.setNonViewByMap(reportQuery.NonViewByMap);
//                    boolean ismeasurePos = container.setMeasurePosition(reportQuery.getColViewbyCols().size());
//                    dbColumns = newCrossRetObj.getColumnNames();
//                    columnTypes = newCrossRetObj.getColumnTypes();
////                          if (isMeasChangeEvent == false && ChangeViewByEvent == false && isGrpMeasChgEvent == false && isParmChngEvent == false && isMapMeasChgEvent == false) {
//                    container.setReportMode("view");
////                            container.resetBackUpVariables();//newly added by santhosh.kumar@progenbusiness.com to reset back up variables;
////                            if ("".equals(collect.tableDisplayRows) || "All".equalsIgnoreCase(collect.tableDisplayRows)) {
//////                        container.setTableDisplayRows(((Integer) pbretObj.getRowCount()).toString());
////                                container.setPagesPerSlide(((Integer) newCrossRetObj.getRowCount()).toString());
////                }
////                        }
//                    container.setCrosstabColumnSpan(newCrossRetObj.colSpanMap);
//                    // 
//                } else {
//                    container.setRetObj(pbretObj);
//                    container.setGrret(pbretObj);
//                    container.setSqlStr(query);
//                    container.setNoOfDays(reportQuery.getNoOfDays());
//                    collect.setNonViewByMap(reportQuery.NonViewByMap);
//                }
//            }
//            container.setSqlStr(query);
//            if (collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() != 0) {
//                container.setColumnViewByCount(String.valueOf(collect.reportColViewbyValues.size()));
//                container.setColumnViewByName(collect.getElementName(String.valueOf(collect.reportColViewbyValues.get(0))));
//                container.setColumnViewByElementIds(collect.reportColViewbyValues);
//            } else {
//                container.setColumnViewByCount("0");
//            }
//
//            if ((collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() != 0)) {//for cross tab report
//
//                int viewByCount = collect.reportRowViewbyValues.size();
//
//                int count = 0;
//                for (int colNum = 0; colNum < dbColumns.length; colNum++) {
//                    if (dbColumns[colNum].equalsIgnoreCase("A1")) {
//                        for (int j = colNum; j < dbColumns.length; j++) {
//                            count = count + 1;
//                        }
//                        break;
//                    }
//
//                }
//                for (int colNum = 0; colNum < count; colNum++) {
//                    if (colNum <= (viewByCount - 1)) {
//                        displayLabels.add(collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(colNum))));
//                        displayColumns.add(dbColumns[colNum]);
//                    } else {//order need to changes here
//                        displayLabels.add(newCrossRetObj.nonViewByMapNew.get(String.valueOf(newCrossRetObj.CrossTabfinalOrder.get(colNum - viewByCount))));
//                        displayColumns.add(newCrossRetObj.CrossTabfinalOrder.get(colNum - viewByCount));
//
//                    }
//
//                }
//
//                ArrayList viewByColumnsAlist = new ArrayList();
//                ArrayList viewByElementdIdAlist = new ArrayList();
//                for (int i = 0; i < viewByCount; i++) {
//                    viewByColumnsAlist.add(String.valueOf(displayLabels.get(i)));
//                    if (String.valueOf(displayColumns.get(i)).equalsIgnoreCase("TIME")) {
//                        viewByElementdIdAlist.add(String.valueOf(displayColumns.get(i)));
//
//                    } else {
//                        viewByElementdIdAlist.add(String.valueOf(displayColumns.get(i)).substring(2));
//
//                    }
//                }
//                container.setViewByColNames(viewByColumnsAlist);
//                container.setViewByElementIds(viewByElementdIdAlist);
//                container.setViewByCount((viewByCount));
//            } else {
//
//                displayColumns = container.getDisplayColumns();
//                displayLabels = container.getDisplayLabels();
//                dataTypes = container.getDataTypes();
//                displayTypes = container.getDisplayTypes();
//                displayColumns = (displayColumns == null || displayColumns.isEmpty()) ? collect.tableElementIds : displayColumns;
//                dataTypes = (dataTypes == null || dataTypes.isEmpty()) ? collect.tableColTypes : dataTypes;
//                displayTypes = (displayTypes == null || displayTypes.isEmpty()) ? collect.tableColDispTypes : displayTypes;
////                    signs = collect.columnSignType;
//                if (displayLabels == null || displayLabels.isEmpty()) {
//                    displayLabels = collect.tableColNames;
//                }
////                    container.setDisplayColumns(displayColumns);
//                //container.setDataTypes(dataTypes);
//                container.setDataTypes(collect.tableColTypes);
//                container.setDisplayTypes(dataTypes);
////                    container.setDisplayLabels(displayLabels);
//            }
//            container.setDisplayLabels(displayLabels);
//            container.setDisplayColumns(displayColumns);
//            container.setOriginalColumns(originalColumns);
//            container.setDataTypes(dataTypes);
//            container.setDisplayTypes(displayTypes);
//            if (collect.tablePropertiesXML != null) {
//                ReportTablePropertyBuilder.TABLE_PROPERTY_BUILDER.updateTablePropertiesInContainer(container, collect.tablePropertiesXML);
//            }
////                container.setLinks(links);
////                container.setRepLinks(replinks);
////                container.setSelected(new ArrayList());
////                container.setSigns(signs);
//            container.setReportCollect(collect);
//            container.setReportName(collect.reportName);
//            container.setReportDesc(collect.reportDesc);
//            //
//
//            container.setViewByCount((collect.reportRowViewbyValues.size()));
////                 if (collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() > 0) {
////                            container.setReportCrosstab(true);
////
////                        } else {
//            container.setReportCrosstab(false);
////
////                        }
//            if (collect.reportColViewbyValues != null && !collect.reportColViewbyValues.isEmpty()) {
//                if (collect.getNumberFormat() != null) {
//                    Set nfKeys = collect.getNumberFormat().keySet();
//                    HashMap NFMap = collect.getNumberFormat();
//                    HashMap NFMapCT = new HashMap();
//                    Iterator nfKeysIter = nfKeys.iterator();
//                    int whichMeasure;
//                    while (nfKeysIter.hasNext()) {
//                        String measElement = (String) nfKeysIter.next();
//                        String nbrSymbol = (String) NFMap.get(measElement);
//                        if (nbrSymbol != null && !nbrSymbol.equals("")) {
//                            whichMeasure = Measures.lastIndexOf(measElement);
//                            whichMeasure += (container.getViewByCount());
//                            int size = displayColumns.size();
//                            String colName;
//                            for (int i = whichMeasure; i < size;) {
//                                colName = (String) displayColumns.get(i);
//                                NFMapCT.put(colName, nbrSymbol);
//                                i += Measures.size();
//                            }
//                            NFMapCT.put(measElement, nbrSymbol);
//                        }
//                    }
//                    TableHashMap.put("NFMap", NFMapCT);
//                }
//                if (collect.getRoundingPrecision() != null) {
//                    int whichMeasure;
//                    Set RndPrcsnKeys = collect.getRoundingPrecision().keySet();
//                    HashMap<String, Integer> RndPrcsnMap = collect.getRoundingPrecision();
//                    Iterator precisionItr = RndPrcsnKeys.iterator();
//                    while (precisionItr.hasNext()) {
//                        String measElement = (String) precisionItr.next();
//                        int Precision = RndPrcsnMap.get(measElement);
//                        container.setRoundPrecisionForMeasure(measElement, Precision);
//
//                    }
//
//                }
//
//            } else {
//                //this.initializeSignsForMeasures(container);
//                if (collect.getNumberFormat() != null) {
//                    TableHashMap.put("NFMap", collect.getNumberFormat());
//                }
//                if (collect.getRoundingPrecision() != null) {
//                    Set RndPrcsnKeys = collect.getRoundingPrecision().keySet();
//                    HashMap<String, Integer> RndPrcsnMap = collect.getRoundingPrecision();
//                    Iterator precisionItr = RndPrcsnKeys.iterator();
//                    while (precisionItr.hasNext()) {
//                        String measElement = (String) precisionItr.next();
//                        int Precision = RndPrcsnMap.get(measElement);
//                        container.setRoundPrecisionForMeasure(measElement, Precision);
//
//                    }
//
//                }
//
//
//            }
//            container.initializeRuntimeMeasures();
//            //TableHashMap.put("TableProperties", TableProperties);
//
//        } catch (Exception ex) {
//            Logger.getLogger(PbReportViewerBD.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        return container;
//    }
    //Added by Amar
    public Container generateContainerFromSnapshot(ReportSchedule schedule, String reportId, String schedulerId, String userId, String schedulerName, int snapIndex, String gtValues) {
        Container container = new Container();
        try {
            ProgenReportViewerBD pRvBD = new ProgenReportViewerBD();//added By Mohit Gupta
            PbReportCollection collect = new PbReportCollection();
            QueryExecutor qryExec = new QueryExecutor();
            ProgenDataSet pbretObj = null;
            PbReturnObject newCrossRetObj = null;
            String[] dbColumns = null;
            String[] columnTypes = null;
            String FileName = "";
            collect.reportId = reportId;
            ArrayList displayColumns = new ArrayList();
            ArrayList displayLabels = new ArrayList();
            ArrayList dataTypes = new ArrayList();
            ArrayList displayTypes = new ArrayList();
            ReportTemplateDAO reportDao = new ReportTemplateDAO();
            // Added by Amar to get url
            SAXBuilder builder = new SAXBuilder();
            pbXmlUtilities xmUtil = new pbXmlUtilities();
            Document document = null;
            Element root = null;
            String[] pathInPieces = null;
            String fileDir;
            String folderPath = schedule.getUploadedFilePath();
            String fileName = schedule.getUploadedFileName();
            String[] fileSepRator = folderPath.split("/importExcel");
            //folderPath = folderPath.replaceAll("/importExcel/" + fileName, "/collectStore");
            folderPath = fileSepRator[0] + "/collectStore";
//            pathInPieces = folderPath.split("/");
//            fileDir = "/"+pathInPieces[1]+"/"+pathInPieces[2]+"/"+pathInPieces[3]+"/collectStore";
            // Added to get snapshot path
            String[] snapshotUrls = schedule.getSnapshotUrls();
            String reportFileName = snapshotUrls[snapIndex];
            //end of code
            // String reportFileName = "/snapshot_" + reportId + ".ser";
            String filePath = folderPath + "/" + reportFileName;
            FileInputStream fileIn = new FileInputStream(filePath);
            ObjectInputStream in = new ObjectInputStream(fileIn);
            String clob = in.readObject().toString();
            DOMParser parser = new DOMParser();
            document = builder.build(new StringReader(clob));
            in.close();
            fileIn.close();
            root = document.getRootElement();
            List childrenList = root.getChildren("progen_parameter");
            Element paramMasterEle = (Element) childrenList.get(0);
            String fullUrl = xmUtil.getXmlTagValue(paramMasterEle, "url");
            String urlPart[] = fullUrl.substring(1).split("/");
            //end of code
            // String url = reportDao.getURL(reportId, schedulerId);
            String url = urlPart[1];
            String[] reportParameters = url.split(";");
            PbReportRequestParameter param = new PbReportRequestParameter();
            Gson gson = new Gson();
            Type tarType = new TypeToken<List<String>>() {
            }.getType();
            for (int i = 2; i < reportParameters.length; i++) {
                String[] val = reportParameters[i].split("=");
                if (val.length > 0 && val[0].contains("CBOARP")) {
                    List<String> filterList = null;
                    try {
                        filterList = gson.fromJson(val[1], tarType);

                    } catch (com.google.gson.JsonParseException e) {
                        String normalString = val[1];
                        String[] splitedStr = normalString.split(",");
                        filterList = Arrays.asList(splitedStr);
                    }
                    param.requestParamValues.put(val[0], filterList);
                } else {
                    param.requestParamValues.put(val[0], val[1]);
                }
            }
            collect.reportIncomingParameters = param.requestParamValues;
            container.setReportCollect(collect);
            // collect.updateCollection(true);
            collect.getParamMetaData(true);
            //Added code to get snapshot path
            //String finalFilePath = filePath.replace("/", "\\");
//            FileInputStream fileIn = new FileInputStream(filePath);
//            ObjectInputStream in = new ObjectInputStream(fileIn);
//            collect = (PbReportCollection) in.readObject();
//            in.close();
//            fileIn.close();
            //end of code
            container = progenBD.readSnapShotXMLFromFileSystem(container, schedulerId, collect, filePath, reportId);
            HashMap TableHashMap = container.getTableHashMap();
            ArrayList Measures = (ArrayList) TableHashMap.get("Measures");
            HashMap ReportHashMap = container.getReportHashMap();
            collect.reportQryElementIds = (ArrayList) ReportHashMap.get("reportQryElementIds");
            collect.reportQryAggregations = (ArrayList) ReportHashMap.get("reportQryAggregations");
            collect.reportQryColNames = (ArrayList) ReportHashMap.get("reportQryColNames");
            collect.reportQryColTypes = (ArrayList) ReportHashMap.get("reportQryColTypes");
            container.setTableMeasure(collect.reportQryElementIds);
            container.setTableMeasureNames(collect.reportQryColNames);

            if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                collect.timeDetailsArray = (ArrayList) (container.getParametersHashMap()).get("TimeDetailstList");
                collect.timeDetailsMap = (HashMap) (container.getParametersHashMap()).get("TimeDimHashMap");
            }
            // container=prepareReport(collect, reportId, userId);
            if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_STD")) {
                if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("year")) {
                    container.setTimeLevel("YEAR");
                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Qtr")) {
                    container.setTimeLevel("QUARTER");
                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Month")) {
                    container.setTimeLevel("MONTH");
                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Week")) {
                    container.setTimeLevel("WEEK");
                } else if (collect.timeDetailsArray.get(3).toString().equalsIgnoreCase("Day")) {
                    container.setTimeLevel("DAY");
                }
            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_DATE_RANGE")) {
                container.setTimeLevel("MONTH");
            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_MONTH_RANGE")) {
                container.setTimeLevel("QUARTER");
            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_QTR_RANGE")) {
                container.setTimeLevel("YEAR");
            } else if (collect.timeDetailsArray.get(1).toString().equalsIgnoreCase("PRG_YEAR_RANGE")) {
                container.setTimeLevel("YEAR");
            }

            container.setViewByColNames(collect.reportRowViewbyValues);
            container.setViewByElementIds(collect.reportRowViewbyValues);
            container.setTimeDetailsArray(collect.timeDetailsArray);

            HashMap ParametersHashMap = container.getParametersHashMap();
            ParametersHashMap.put("TimeDetailstList", collect.timeDetailsArray);
            ParametersHashMap.put("TimeDimHashMap", collect.timeDetailsMap);
            container.setParametersHashMap(ParametersHashMap);
            //System.out.println("***"+collect.columnProperties.toString());
            container.setColumnProperties(collect.columnProperties);
            //code added by Amar on sep 22,2015
            collect.crosstabGTDisplayPos = container.getCrosstabGrandTotalDisplayPosition();
            //end of code
            //generating multilevel reportquery

            PbReportViewerDAO dao = new PbReportViewerDAO();
            //level 1
            ArrayList dependentlist1 = dao.getDependentViewByidsandReps(reportId);
            if (dependentlist1 != null && !dependentlist1.isEmpty()) {
                HashMap map1 = (HashMap) dependentlist1.get(0);
                HashMap map2 = (HashMap) dependentlist1.get(1);
                if (map2 != null && !map2.isEmpty()) {
                    Set<String> viewbys = map2.keySet();
                    String dependentReportId = map2.get(viewbys.toArray()[0]).toString();
                    if (dependentReportId != null && !dependentReportId.equalsIgnoreCase("")) {
                        //level 2
                        ArrayList dependentlist2 = dao.getDependentViewByidsandReps(dependentReportId);
                        if (dependentlist2 != null && !dependentlist2.isEmpty()) {
                            HashMap map11 = (HashMap) dependentlist2.get(0);
                            HashMap map21 = (HashMap) dependentlist2.get(1);
                            if (map21 != null && !map21.isEmpty()) {
                                Set<String> viewbys21 = map21.keySet();
                                String dependentReportId21 = map21.get(viewbys21.toArray()[0]).toString();
                                if (dependentReportId21 != null && !dependentReportId21.equalsIgnoreCase("")) {
                                    //level 3
                                    ArrayList dependentlist3 = dao.getDependentViewByidsandReps(dependentReportId21);
                                    if (dependentlist3 != null && !dependentlist3.isEmpty()) {
                                        HashMap map12 = (HashMap) dependentlist3.get(0);
                                        HashMap map22 = (HashMap) dependentlist3.get(1);
                                        if (map22 != null && !map22.isEmpty()) {
                                            Set<String> viewbys31 = map22.keySet();
                                            String dependentReportId31 = map22.get(viewbys31.toArray()[0]).toString();
                                            if (dependentReportId31 != null && !dependentReportId31.isEmpty()) {
                                                //level 4
                                                ArrayList dependentlist4 = dao.getDependentViewByidsandReps(dependentReportId31);
                                                if (dependentlist4 != null && !dependentlist4.isEmpty()) {
                                                    HashMap map13 = (HashMap) dependentlist4.get(0);
                                                    HashMap map23 = (HashMap) dependentlist4.get(1);
                                                    if (map23 != null && !map23.isEmpty()) {
                                                        Set<String> viewbys41 = map23.keySet();
                                                        String dependentReportId41 = map23.get(viewbys41.toArray()[0]).toString();
                                                        if (dependentReportId41 != null && !dependentReportId41.equalsIgnoreCase("")) {
                                                            //level5
                                                            ArrayList dependentlist5 = dao.getDependentViewByidsandReps(dependentReportId41);
                                                            if (dependentlist5 != null && !dependentlist5.isEmpty()) {
                                                                HashMap map14 = (HashMap) dependentlist5.get(0);
                                                                HashMap map24 = (HashMap) dependentlist5.get(1);
                                                                if (map24 != null && !map24.isEmpty()) {
                                                                    Set<String> viewbys51 = map24.keySet();
                                                                    String dependentReportId51 = map24.get(viewbys51.toArray()[0]).toString();
                                                                    if (dependentReportId51 != null && !dependentReportId51.isEmpty()) {
                                                                        PbReportCollection collect51 = new PbReportCollection();
                                                                        collect51.reportId = dependentReportId51;
                                                                        collect51.timeDetailsArray = new ArrayList();
                                                                        collect51.timeDetailsArray = collect.timeDetailsArray;
                                                                        PbReportQuery depRepQry51 = new PbReportQuery();
                                                                        depRepQry51 = qryExec.formulateQuery(collect51, userId);
                                                                        String depquery51 = depRepQry51.generateViewByQry();
                                                                        HashMap viewbyidandqryMap51 = new HashMap();
                                                                        viewbyidandqryMap51.put(viewbys51.toArray()[0].toString(), depquery51);
                                                                        container.dependentviewbyIdQry.clear();
                                                                        container.depViewByConditionsmap.clear();
                                                                        container.setDependentviewbyIdQry(viewbyidandqryMap51);

                                                                    }
                                                                }
                                                                if (map14 != null && map14.isEmpty()) {
                                                                    container.setDepViewByConditionsmap(map14);
                                                                }
                                                            }
                                                            //end of level5
                                                            PbReportCollection collect41 = new PbReportCollection();
                                                            collect41.reportId = dependentReportId41;
                                                            boolean openVal = true;
                                                            collect41.getParamMetaData(openVal);
                                                            collect41.timeDetailsArray = new ArrayList();
                                                            collect41.timeDetailsArray = collect.timeDetailsArray;
                                                            PbReportQuery depRepQry41 = new PbReportQuery();
                                                            depRepQry41 = qryExec.formulateQuery(collect41, userId);
                                                            depRepQry41.parameterType = container.getDepViewByConditionsmap();
                                                            depRepQry41.parameterQuery = container.getDependentviewbyIdQry();
                                                            String depquery41 = depRepQry41.generateViewByQry();
                                                            HashMap viewbyidandqryMap41 = new HashMap();
                                                            viewbyidandqryMap41.put(viewbys41.toArray()[0].toString(), depquery41);
                                                            container.dependentviewbyIdQry.clear();
                                                            container.depViewByConditionsmap.clear();
                                                            container.setDependentviewbyIdQry(viewbyidandqryMap41);
                                                        }
                                                    }
                                                    if (map13 != null && !map13.isEmpty()) {
                                                        container.setDepViewByConditionsmap(map13);
                                                    }
                                                }
                                                //end of level4
                                                PbReportCollection collect31 = new PbReportCollection();
                                                collect31.reportId = dependentReportId31;
                                                collect31.ctxPath = requestCtxPath;//request.getContextPath();
                                                boolean openVal = true;
                                                collect31.getParamMetaData(openVal);
                                                collect31.timeDetailsArray = new ArrayList();
                                                collect31.timeDetailsArray = collect.timeDetailsArray;
                                                PbReportQuery depRepQry31 = new PbReportQuery();
                                                depRepQry31 = qryExec.formulateQuery(collect31, userId);
                                                depRepQry31.parameterType = container.getDepViewByConditionsmap();
                                                depRepQry31.parameterQuery = container.getDependentviewbyIdQry();
                                                String depquery31 = depRepQry31.generateViewByQry();
                                                HashMap viewbyidandqryMap31 = new HashMap();
                                                viewbyidandqryMap31.put(viewbys31.toArray()[0].toString(), depquery31);
                                                container.dependentviewbyIdQry.clear();
                                                container.depViewByConditionsmap.clear();
                                                container.setDependentviewbyIdQry(viewbyidandqryMap31);
                                            }
                                        }
                                        if (map12 != null && !map12.isEmpty()) {
                                            container.setDepViewByConditionsmap(map12);
                                        }
                                    }
                                    //end of level 3
                                    PbReportCollection collect21 = new PbReportCollection();
                                    collect21.reportId = dependentReportId21;
                                    collect21.ctxPath = requestCtxPath;//request.getContextPath();
                                    boolean openVal = true;
                                    collect21.getParamMetaData(openVal);
                                    collect21.timeDetailsArray = new ArrayList();
                                    collect21.timeDetailsArray = collect.timeDetailsArray;
                                    PbReportQuery depRepQry21 = new PbReportQuery();
                                    depRepQry21 = qryExec.formulateQuery(collect21, userId);
                                    depRepQry21.parameterType = container.getDepViewByConditionsmap();
                                    depRepQry21.parameterQuery = container.getDependentviewbyIdQry();
                                    String depquery21 = depRepQry21.generateViewByQry();
                                    HashMap viewbyidandqryMap21 = new HashMap();
                                    viewbyidandqryMap21.put(viewbys21.toArray()[0].toString(), depquery21);
                                    container.dependentviewbyIdQry.clear();
                                    container.depViewByConditionsmap.clear();
                                    container.setDependentviewbyIdQry(viewbyidandqryMap21);
                                }
                            }
                            if (map11 != null && !map11.isEmpty()) {
                                container.setDepViewByConditionsmap(map11);
                            }
                        }
                        //end of level2
                        PbReportCollection collect1 = new PbReportCollection();
                        collect1.reportId = dependentReportId;
                        collect1.ctxPath = requestCtxPath;//request.getContextPath();
                        boolean openVal = true;
                        collect1.getParamMetaData(openVal);
                        collect1.timeDetailsArray = new ArrayList();
                        collect1.timeDetailsArray = collect.timeDetailsArray;
                        PbReportQuery depRepQry = new PbReportQuery();
                        depRepQry = qryExec.formulateQuery(collect1, userId);
                        if (container.getDepViewByConditionsmap() != null && !container.getDepViewByConditionsmap().isEmpty()) {
                            depRepQry.parameterType = container.getDepViewByConditionsmap();
                        }
                        if (container.getDependentviewbyIdQry() != null && !container.getDependentviewbyIdQry().isEmpty()) {
                            depRepQry.parameterQuery = container.getDependentviewbyIdQry();
                        }
                        String depquery = depRepQry.generateViewByQry();
                        HashMap viewbyidandqryMap = new HashMap();
                        viewbyidandqryMap.put(viewbys.toArray()[0].toString(), depquery);
                        container.dependentviewbyIdQry.clear();
                        container.depViewByConditionsmap.clear();
                        container.setDependentviewbyIdQry(viewbyidandqryMap);
                    }
                }
                if (map1 != null && !map1.isEmpty()) {
                    container.setDepViewByConditionsmap(map1);
                }

            }
            //end of level 1
            // end of generating multilevel reportquery
            // Code Added By Amar for Hybrid Report
            PbReturnObject summerizedMsrRetObj = null;
            if (container.isSummarizedMeasuresEnabled()) {
                summerizedMsrRetObj = this.summerizedMeasuresReturnObject(container, userId);
            }
            // end of code
            PbReportQuery reportQuery = qryExec.formulateQuery(collect, userId);
            if (container.getDepViewByConditionsmap() != null && !container.getDepViewByConditionsmap().isEmpty()) {
                reportQuery.parameterType = container.getDepViewByConditionsmap();
            }
            if (container.getDependentviewbyIdQry() != null && !container.getDependentviewbyIdQry().isEmpty()) {
                reportQuery.parameterQuery = container.getDependentviewbyIdQry();
            }
            // System.out.println("reportQuery"+reportQuery);
            if (Boolean.parseBoolean(container.getgTAverage()) == true) {
                PbReturnObject KpiretObj = new PbReturnObject();
                KpiretObj = this.getKpiRetObjforgrandtotals(container, collect, userId);
                container.setKpiRetObj(KpiretObj);
            }
            String query = reportQuery.generateViewByQry();
            container.setViewbyqry(reportQuery);
            if (pbretObj == null) {
//                ProgenLog.log(ProgenLog.FINE, this, "prepareReport", "Going to Fire Query " + System.currentTimeMillis());
                logger.info("Going to Fire Query " + System.currentTimeMillis());
//                    pbretObj = qryExec.executeQuery(collect, query);//repQuery.getPbReturnObjectWithFlag(String.valueOf(reportQryElementIds.get(0)), query);//, session);
                pbretObj = qryExec.executeQuery(collect, query, false);

                if (collect.reportColViewbyValues != null && !collect.reportColViewbyValues.isEmpty()) {
                    PbReturnObject retObj = (PbReturnObject) pbretObj;
                    retObj.rowViewBys = reportQuery.getOrgRowViewbyCols();
                    retObj.ColViewBys = reportQuery.getColViewbyCols();
                    retObj.totalViewBys = reportQuery.getRowViewbyCols().size();
                    retObj.totalOrderbys = reportQuery.getRowViewbyCols().size();
                    retObj.rowViewCount = reportQuery.getOrgRowViewbyCols().size();
                    retObj.colViewCount = reportQuery.getColViewbyCols().size();
                    retObj.nonViewInput = reportQuery.NonViewByMap;
                    retObj.Qrycolumns = reportQuery.getQryColumns();
                    retObj.meausreOnCol = true;
                    if (container.getMeasurePosition() != -1) {
                        retObj.MeasurePos = container.getMeasurePosition();
                    } else {
                        retObj.MeasurePos = reportQuery.getColViewbyCols().size();
                        container.setMeasurePosition(retObj.MeasurePos);
                    }
//                    retObj.MeasurePos = reportQuery.getColViewbyCols().size();
                    retObj.gtType = container.getCrosstabGrandTotalDisplayPosition();
                    retObj.subGtType = "AFTER";
                    if (retObj.gtType.equalsIgnoreCase("NONE") || retObj.gtType.equalsIgnoreCase("") || retObj.gtType == null) {
                        retObj.isGTNone = true;
                    }
                    // added by Amar
                    //if(collect.crosstabGTDisplayPos == null || collect.crosstabGTDisplayPos.equalsIgnoreCase("NONE") || collect.crosstabGTDisplayPos.equalsIgnoreCase(""))
                    //retObj.isGTNone=true;
                    if (!gtValues.equalsIgnoreCase("on")) {
                        retObj.isGTNone = true;
                    }
                    if (collect.crosstabSTDisplayPos == null || collect.crosstabSTDisplayPos.equalsIgnoreCase("NONE") || collect.crosstabSTDisplayPos.equalsIgnoreCase("")) {
                        retObj.isSTNone = true;
                    }
                    // repQuery.setGrandTotalSubTotalDisplayPosition(collect.crosstabGTDisplayPos, collect.crosstabSTDisplayPos);
                    // Code added by Amar for Hybrid report
                    retObj.summarizedMeasuresEnabled = container.isSummarizedMeasuresEnabled();
                    retObj.summerizedTableHashMap = container.getSummerizedTableHashMap();
                    retObj.summerizedMsrRetObj = summerizedMsrRetObj;
                    // end of code
                    newCrossRetObj = retObj.transposeReturnObject();
                    ProgenChartDatasets dataset = new ProgenChartDatasets();
                    dataset.isIsCrosstab();
                    container.setRetObj(newCrossRetObj);
                    collect.setNonViewByMap(reportQuery.NonViewByMap);
                    boolean ismeasurePos = container.setMeasurePosition(reportQuery.getColViewbyCols().size());
                    dbColumns = newCrossRetObj.getColumnNames();
                    columnTypes = newCrossRetObj.getColumnTypes();
//                          if (isMeasChangeEvent == false && ChangeViewByEvent == false && isGrpMeasChgEvent == false && isParmChngEvent == false && isMapMeasChgEvent == false) {
                    container.setReportMode("view");
//                            container.resetBackUpVariables();//newly added by santhosh.kumar@progenbusiness.com to reset back up variables;
//                            if ("".equals(collect.tableDisplayRows) || "All".equalsIgnoreCase(collect.tableDisplayRows)) {
////                        container.setTableDisplayRows(((Integer) pbretObj.getRowCount()).toString());
//                                container.setPagesPerSlide(((Integer) newCrossRetObj.getRowCount()).toString());
//                }
//                        }
                    container.setCrosstabColumnSpan(newCrossRetObj.colSpanMap);
                    // System.out.println("newCrossRetObj.colSpanMap in scheduler"+newCrossRetObj.colSpanMap+"size"+newCrossRetObj.colSpanMap.size());
                } else {
                    container.setRetObj(pbretObj);
                    container.setGrret(pbretObj);
                    container.setSqlStr(query);
                    container.setNoOfDays(reportQuery.getNoOfDays());
                    collect.setNonViewByMap(reportQuery.NonViewByMap);
                }
            }
            container.setSqlStr(query);
            if (collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() != 0) {
                container.setColumnViewByCount(String.valueOf(collect.reportColViewbyValues.size()));
                container.setColumnViewByName(collect.getElementName(String.valueOf(collect.reportColViewbyValues.get(0))));
                container.setColumnViewByElementIds(collect.reportColViewbyValues);
            } else {
                container.setColumnViewByCount("0");
            }

            if ((collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() != 0)) {//for cross tab report

                int viewByCount = collect.reportRowViewbyValues.size();

                int count = 0;
                for (int colNum = 0; colNum < dbColumns.length; colNum++) {
                    if (dbColumns[colNum].equalsIgnoreCase("A1")) {
                        for (int j = colNum; j < dbColumns.length; j++) {
                            count = count + 1;
                        }
                        break;
                    }

                }
                for (int colNum = 0; colNum < count; colNum++) {
                    if (colNum <= (viewByCount - 1)) {
                        displayLabels.add(collect.getElementName(String.valueOf(collect.reportRowViewbyValues.get(colNum))));
                        displayColumns.add(dbColumns[colNum]);
                    } else {//order need to changes here
                        displayLabels.add(newCrossRetObj.nonViewByMapNew.get(String.valueOf(newCrossRetObj.CrossTabfinalOrder.get(colNum - viewByCount))));
                        displayColumns.add(newCrossRetObj.CrossTabfinalOrder.get(colNum - viewByCount));

                    }

                }

                ArrayList viewByColumnsAlist = new ArrayList();
                ArrayList viewByElementdIdAlist = new ArrayList();
                for (int i = 0; i < viewByCount; i++) {
                    viewByColumnsAlist.add(String.valueOf(displayLabels.get(i)));
                    if (String.valueOf(displayColumns.get(i)).equalsIgnoreCase("TIME")) {
                        viewByElementdIdAlist.add(String.valueOf(displayColumns.get(i)));

                    } else {
                        viewByElementdIdAlist.add(String.valueOf(displayColumns.get(i)).substring(2));

                    }
                }
                container.setViewByColNames(viewByColumnsAlist);
                container.setViewByElementIds(viewByElementdIdAlist);
                container.setViewByCount((viewByCount));
            } else {
                displayColumns = container.getDisplayColumns();
                displayLabels = container.getDisplayLabels();
                dataTypes = container.getDataTypes();
                displayTypes = container.getDisplayTypes();
                displayColumns = (displayColumns == null || displayColumns.isEmpty()) ? collect.tableElementIds : displayColumns;
                dataTypes = (dataTypes == null || dataTypes.isEmpty()) ? collect.tableColTypes : dataTypes;
                displayTypes = (displayTypes == null || displayTypes.isEmpty()) ? collect.tableColDispTypes : displayTypes;
//                    signs = collect.columnSignType;
                if (displayLabels == null || displayLabels.isEmpty()) {
                    displayLabels = collect.tableColNames;
                }
//                    container.setDisplayColumns(displayColumns);
                container.setDataTypes(dataTypes);
                container.setDisplayTypes(displayTypes);
//                    container.setDisplayLabels(displayLabels);
            }
            container.setDisplayLabels(displayLabels);
            container.setDisplayColumns(displayColumns);
            //System.out.println("displayLabels"+displayLabels.toString());

            container.setViewByCount((collect.reportRowViewbyValues.size()));
            if (collect.reportColViewbyValues != null && collect.reportColViewbyValues.size() > 0) {
                container.setReportCrosstab(true);

            } else {
                container.setReportCrosstab(false);
//
            }
            if (collect.reportColViewbyValues != null && !collect.reportColViewbyValues.isEmpty()) {
                if (collect.getNumberFormat() != null) {
                    Set nfKeys = collect.getNumberFormat().keySet();
                    HashMap NFMap = collect.getNumberFormat();
                    HashMap NFMapCT = new HashMap();
                    Iterator nfKeysIter = nfKeys.iterator();
                    int whichMeasure;
                    while (nfKeysIter.hasNext()) {
                        String measElement = (String) nfKeysIter.next();
                        String nbrSymbol = (String) NFMap.get(measElement);
                        if (nbrSymbol != null && !nbrSymbol.equals("")) {
                            whichMeasure = Measures.lastIndexOf(measElement);
                            whichMeasure += (container.getViewByCount());
                            int size = displayColumns.size();
                            String colName;
                            for (int i = whichMeasure; i < size;) {
                                colName = (String) displayColumns.get(i);
                                NFMapCT.put(colName, nbrSymbol);
                                i += Measures.size();
                            }
                            NFMapCT.put(measElement, nbrSymbol);
                        }
                    }
                    TableHashMap.put("NFMap", NFMapCT);
                }
                if (collect.getRoundingPrecision() != null) {
                    int whichMeasure;
                    Set RndPrcsnKeys = collect.getRoundingPrecision().keySet();
                    HashMap<String, Integer> RndPrcsnMap = collect.getRoundingPrecision();
                    Iterator precisionItr = RndPrcsnKeys.iterator();
                    while (precisionItr.hasNext()) {
                        String measElement = (String) precisionItr.next();
                        int Precision = RndPrcsnMap.get(measElement);
                        container.setRoundPrecisionForMeasure(measElement, Precision);

                    }

                }

            } else {
                //this.initializeSignsForMeasures(container);
                if (collect.getNumberFormat() != null) {
                    TableHashMap.put("NFMap", collect.getNumberFormat());
                }
                if (collect.getRoundingPrecision() != null) {
                    Set RndPrcsnKeys = collect.getRoundingPrecision().keySet();
                    HashMap<String, Integer> RndPrcsnMap = collect.getRoundingPrecision();
                    Iterator precisionItr = RndPrcsnKeys.iterator();
                    while (precisionItr.hasNext()) {
                        String measElement = (String) precisionItr.next();
                        int Precision = RndPrcsnMap.get(measElement);
                        container.setRoundPrecisionForMeasure(measElement, Precision);

                    }

                }

            }
            container.initializeRuntimeMeasures();
            //TableHashMap.put("TableProperties", TableProperties);

        } catch (Exception ex) {
            logger.error("Exception:", ex);
        }
        return container;
    }
    //Added by amar to read snapshot

    public void getGtCTAvgType(String pbReportId) {
        PbReturnObject retObj = null;
        PbDb pbdb = new PbDb();
        String ReportIdQry = "";
        if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER) || ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
            ReportIdQry = "SELECT  PARQD.element_id,PARTD.CT_GT_AGG_TYPE FROM PRG_AR_REPORT_TABLE_DETAILS PARTD "
                    + " LEFT OUTER JOIN PRG_AR_QUERY_DETAIL PARQD "
                    + " ON (PARQD.qry_col_id = PARTD.qry_col_id) "
                    + " WHERE PARTD.report_id= " + pbReportId
                    + " ORDER BY PARTD.disp_seq,PARTD.QRY_COL_ID";
        } else {
            ReportIdQry = "SELECT  PARQD.element_id,PARTD.CT_GT_AGG_TYPE "
                    + " FROM PRG_AR_REPORT_TABLE_DETAILS PARTD,PRG_AR_QUERY_DETAIL PARQD "
                    + " WHERE parqd.qry_col_id(+) = partd.qry_col_id  "
                    + " AND partd.report_id= " + pbReportId
                    + " ORDER BY PARTD.disp_seq, PARTD.QRY_COL_ID ";
        }
        try {
            retObj = pbdb.execSelectSQL(ReportIdQry);
            if (retObj != null && retObj.getRowCount() > 0) {
                for (int i = 0; i < retObj.getRowCount(); i++) {
                    if (retObj.getFieldValueString(i, 1) != null && !retObj.getFieldValueString(i, 1).equals("")) {
                        gtCTAvgType.put("A_" + retObj.getFieldValueString(i, 0), retObj.getFieldValueString(i, 1));
                    }
                }
            }
        } catch (SQLException ex) {
            logger.error("Exception:", ex);
        }
    }
    // added by amar to update subtotal sorting on elements

    private void updateSubTotalSortColumnsBasedOnDisplayColumns(Container container, boolean isMeasChangeEvent) {
        ArrayList<String> sortColsubT = null;
        char[] subSortTypes = null;
        sortColsubT = container.getExplicitSortColumns();
        if (!sortColsubT.isEmpty()) {
            if (isMeasChangeEvent) {
                String sortedCol = (String) sortColsubT.get(sortColsubT.size() - 1);
                ArrayList<String> displayColumns = container.getDisplayColumns();
                boolean isColExist = displayColumns.contains(sortedCol);
                if (!isColExist) {
                    container.getExplicitSortColumns().clear();
                    container.setExplicitSortTypes(null);
                    container.setSubTotalSort(false);
                }
            } else {
                PbReportCollection collect = (PbReportCollection) container.getReportCollect();
                int rowCnt = collect.reportRowViewbyValues.size();
                if (rowCnt > 1) {
                    subSortTypes = container.getExplicitSortTypes();
                    int lastIndex = subSortTypes.length;
                    String colSortType = Character.toString(subSortTypes[lastIndex - 1]);
                    String sortedCol = (String) sortColsubT.get(sortColsubT.size() - 1);
                    sortColsubT.clear();
                    container.setSortColumnForSubTot(sortedCol, colSortType);
                    container.setSubTotalSort(true);
                } else {
                    container.getExplicitSortColumns().clear();
                    container.setExplicitSortTypes(null);
                    container.setSubTotalSort(false);
                }
            }
        }
    }
// end of code
//    public String getAOReportQuery(String reportId,ArrayList<String> rowViewIds,ArrayList<String> colViewIds) {
//        String query;
//        String osql_AO = " , SUM(  B_16390) as B_16390  ,  Avg( 1 *  B_16521) as B_16521  , ( ((CASE WHEN SUM(B_16390) IS NULL THEN 0 ELSE SUM(B_16390) END )+(CASE WHEN AVG(B_16521) IS NULL THEN 0 ELSE AVG(B_16521) END ))) as E_302103 ";
////        String OViewByCol_AO = "VIEWBY1";
//        String OViewByCol_AO = "";
//        String OorderByCol_AO ="ORDER1";
//        String finalSql_AO = "select * from R_AO_"+reportId+ " where 1=1 ";
////        String OmViewByCol_AO = "VIEWBY1 AS A_111656";
//        String OmViewByCol_AO = "";
//        String OmorderByCol_AO = "ORDER1";
//        String ColOrderByCol_AO = "";
//        String omsql_AO = ", nvl(1.0*B_16390,0.0) as A_111285 , nvl(1.0*B_16521,0.0) as A_111341 , nvl(1.0*E_302103,0.0) as A_302103 ";
//        String osqlGroup_AO = "";
////        String finalViewByCol_AO = "A_111656 as   A_111656 ";
//        String finalViewByCol_AO = "";
//        String oWrapper_AO = " ,  A_111285      AS A_111285 ,  A_111341      AS A_111341 ,  A_302103      AS A_302103";
//        for(int i=0;i<rowViewIds.size();i++){
//            OViewByCol_AO += " , "+rowViewIds.get(i).toString();
//            OmViewByCol_AO += " , "+rowViewIds.get(i).toString()+" AS "+rowViewIds.get(i).toString();
//            finalViewByCol_AO += " , "+rowViewIds.get(i).toString()+" AS "+rowViewIds.get(i).toString();
//        }
//        for(int i=0;i<colViewIds.size();i++){
//            OViewByCol_AO += " , "+colViewIds.get(i).toString();
//            OmViewByCol_AO += " , "+colViewIds.get(i).toString()+" AS "+colViewIds.get(i).toString();
//            finalViewByCol_AO += " , "+colViewIds.get(i).toString()+" AS "+colViewIds.get(i).toString();
//        }
//       OViewByCol_AO = OViewByCol_AO.substring(1);
//       OmViewByCol_AO = OmViewByCol_AO.substring(1);
//       finalViewByCol_AO = finalViewByCol_AO.substring(1);
//
//        boolean isAOEnable = true;
//        String check = oWrapper_AO+" "+finalViewByCol_AO;
//        if(rowViewIds!=null){
//        for(int i=0;i<rowViewIds.size();i++){
//                if(!check.contains(rowViewIds.get(i).toString())){
//                    isAOEnable = false;
//                }
//         }}
//        if(colViewIds!=null){
//        for(int i=0;i<colViewIds.size();i++){
//                if(!check.contains(colViewIds.get(i).toString())){
//                    isAOEnable = false;
//                }
//         }}
//        if(isAOEnable){
//        if (colViewIds != null && colViewIds.size() > 0) {
//            finalSql_AO = " select " + OViewByCol_AO + " , " + OorderByCol_AO + osql_AO + " from ( " + finalSql_AO + " ) O5 group by " + OViewByCol_AO + " , " + OorderByCol_AO + " " + osqlGroup_AO + " ";//
//
//            finalSql_AO = " select " + OmViewByCol_AO + " , " + OmorderByCol_AO + " , " + ColOrderByCol_AO + omsql_AO + " from ( " + finalSql_AO + " ) O6  ";
//        } else {
//            finalSql_AO = " select " + OViewByCol_AO + " , " + OorderByCol_AO + osql_AO + " from ( " + finalSql_AO + " ) O7  group by " + OViewByCol_AO + " , " + OorderByCol_AO + " " + osqlGroup_AO + "  ";// //+ " order by " + OmorderByCol;
//
//            finalSql_AO = " select " + OmViewByCol_AO + " , " + OmorderByCol_AO + omsql_AO + " from ( " + finalSql_AO + " ) O7_1 ";
//        }
//        if (!(colViewIds != null && colViewIds.size() > 0)) {
//                    if (rowViewIds != null && rowViewIds.size() > 0) {
//                        finalSql_AO = " select " + finalViewByCol_AO + oWrapper_AO + " from ( " + finalSql_AO + " ) OT1 order by  " + OmorderByCol_AO;
//                    } }
//        }
//        
//        return finalSql_AO;
//}

    public void setReportObject(PbReportCollection collect, PbReportQuery reportQuery) {
        ReportObjectMeta roMeta = new ReportObjectMeta();
//            roMeta.setFinalSql_AO(reportQuery.finalSql_AO);
        roMeta.setOsql_AO(reportQuery.osql_AO);
        roMeta.setOViewByCol_AO(reportQuery.OViewByCol_AO);
        roMeta.setOorderByCol_AO(reportQuery.OorderByCol_AO);
        roMeta.setOmsql_AO(reportQuery.omsql_AO);
        roMeta.setOmViewByCol_AO(reportQuery.OmViewByCol_AO);
        roMeta.setOmorderByCol_AO(reportQuery.OmorderByCol_AO);
        roMeta.setColOrderByCol_AO(reportQuery.ColOrderByCol_AO);
        roMeta.setOsqlGroup_AO(reportQuery.osqlGroup_AO);
        roMeta.setFinalViewByCol_AO(reportQuery.finalViewByCol_AO);
        roMeta.setoWrapper_AO(reportQuery.oWrapper_AO);
        roMeta.setTableName_AO(reportQuery.tableName_AO);
        roMeta.setFilters_AO(reportQuery.filters_AO);
        roMeta.setIsAOEnable(reportQuery.isAOEnable);
        Gson gson = new Gson();
        FileReadWrite fileReadWrite = new FileReadWrite();
        File file;
        file = new File(PbReportViewerBD.fileLocation+"/analyticalobject");
        String path = file.getAbsolutePath();
        String fName = path + File.separator + "R_AO_" + collect.reportId + ".json";
        File f = new File(path);
        File file1 = new File(fName);
        f.mkdirs();
        File datafile = new File(PbReportViewerBD.fileLocation+"/analyticalobject/R_AO_" + collect.reportId + ".json");
        if (!datafile.exists()) {
            try {
                datafile.createNewFile();
            } catch (IOException ex) {
                logger.error("Exception:", ex);
            }
        }

//       for read Report meta
        fileReadWrite.writeToFile("/usr/local/cache/R_" + collect.reportId + ".json", gson.toJson(roMeta));
//       ReportObjectQuery repQuery = new ReportObjectQuery();
//       String objquery = repQuery.getObjectQuery(collect.reportId);
//       
    }

    public void setReportObjectAO(PbReportCollection collect, PbReportQuery reportQuery, String reportId, String dateValues_AO) {
        ReportObjectMeta roMeta = new ReportObjectMeta();

        String OViewByCol_AO = "";
        String OmViewByCol_AO = "";
        String finalViewByCol_AO = "";
//        for (int i = 0; i < rowViewIds.size(); i++) {
//            OViewByCol_AO += ", " + "A_" + rowViewIds.get(i).toString();
//            OmViewByCol_AO += ", " + "A_" + rowViewIds.get(i).toString() + " AS " + "A_" + rowViewIds.get(i).toString();
//            finalViewByCol_AO += ", " + "A_" + rowViewIds.get(i).toString() + " AS " + "A_" + rowViewIds.get(i).toString();
//        }
//        for (int i = 0; i < colViewIds.size(); i++) {
//            OViewByCol_AO += ", " + "A_" + colViewIds.get(i).toString();
//            OmViewByCol_AO += ", " + "A_" + colViewIds.get(i).toString() + " AS " + "A_" + colViewIds.get(i).toString();
//            finalViewByCol_AO += ", " + "A_" + colViewIds.get(i).toString() + " AS " + "A_" + colViewIds.get(i).toString();
//        }
//        OViewByCol_AO = OViewByCol_AO.substring(1);
//        OmViewByCol_AO = OmViewByCol_AO.substring(1);
//        finalViewByCol_AO = finalViewByCol_AO.substring(1);

//            roMeta.setFinalSql_AO(reportQuery.finalSql_AO);
        roMeta.setOsql_AO(reportQuery.osql_AO);
        roMeta.setOViewByCol_AO(reportQuery.OViewByCol_AO);
//        roMeta.setOViewByCol_AO(OViewByCol_AO);
        roMeta.setOorderByCol_AO(reportQuery.OorderByCol_AO);
        roMeta.setOmsql_AO(reportQuery.omsql_AO);
        roMeta.setOmViewByCol_AO(reportQuery.OmViewByCol_AO);
//        roMeta.setOmViewByCol_AO(OmViewByCol_AO);
        roMeta.setOmorderByCol_AO(reportQuery.OmorderByCol_AO);
        roMeta.setColOrderByCol_AO(reportQuery.ColOrderByCol_AO);
        roMeta.setOsqlGroup_AO(reportQuery.osqlGroup_AO);
        roMeta.setFinalViewByCol_AO(reportQuery.finalViewByCol_AO);
//        roMeta.setFinalViewByCol_AO(finalViewByCol_AO);
        roMeta.setoWrapper_AO(reportQuery.oWrapper_AO);
        roMeta.setTableName_AO(reportQuery.tableName_AO);
        roMeta.setFilters_AO(reportQuery.filters_AO);
        roMeta.setIsAOEnable(reportQuery.isAOEnable);
        roMeta.setFinalSqlNew_AO(reportQuery.finalSqlNew_AO);
        roMeta.setDateValues_AO(dateValues_AO);
        Gson gson = new Gson();
        FileReadWrite fileReadWrite = new FileReadWrite();
        File file;
        file = new File(PbReportViewerBD.fileLocation+"/analyticalobject");
        String path = file.getAbsolutePath();
        String fName = path + File.separator + "R_AO_" + reportId + ".json";
        File f = new File(path);
        File file1 = new File(fName);
        f.mkdirs();
        File datafile = new File(PbReportViewerBD.fileLocation+"/analyticalobject/R_AO_" + reportId + ".json");
        if (!datafile.exists()) {
            try {
                datafile.createNewFile();
            } catch (IOException ex) {
                logger.error("Exception:", ex);
            }
        }

//       for read Report meta
        fileReadWrite.writeToFile(PbReportViewerBD.fileLocation+"/analyticalobject/R_AO_" + reportId + ".json", gson.toJson(roMeta));
//       ReportObjectQuery repQuery = new ReportObjectQuery();
//       String objquery = repQuery.getObjectQuery(collect.reportId);
//       

    }

    public void createAOForReports(PbReportCollection collect, String ReportId) {
//        if (isAOEnable) {
        QueryExecutor qryExec = new QueryExecutor();
        ReportObjectMeta roMeta = new ReportObjectMeta();
        ReportObjectQuery repObjQuery = new ReportObjectQuery();
        ArrayList<String> reportRowViewbyValues = null;
        ArrayList<String> reportColViewbyValues = null;
        if (collect.ReportLayout.equalsIgnoreCase("KPI") || collect.ReportLayout.equalsIgnoreCase("None")) {
            collect.isKpi = true;
            reportRowViewbyValues = new ArrayList();
            reportColViewbyValues = new ArrayList();            //added by mohit for kpi and none
        } else {
            collect.isKpi = false;
            reportRowViewbyValues = collect.reportRowViewbyValues;
            reportColViewbyValues = collect.reportColViewbyValues;
        }
//            ArrayList<String> reportRowViewbyValues = collect.reportRowViewbyValues;
//            ArrayList<String> reportColViewbyValues = collect.reportColViewbyValues;
        PbReportQuery reportQuery = null;
        reportQuery = qryExec.formulateQuery(collect, userId);
        String filterClauses = repObjQuery.getFilterClause((HashMap<String, List>) collect.operatorFilters.get("IN"), (HashMap<String, List>) collect.operatorFilters.get("NOTIN"), (HashMap<String, List>) collect.operatorFilters.get("LIKE"), (HashMap<String, List>) collect.operatorFilters.get("NOTLIKE"));
        String[] elementArrList = repObjQuery.elementArrList;
        reportQuery.isQueryForAO = true;
        if (elementArrList != null) {
            for (int i = 0; i < elementArrList.length; i++) {
                if (reportRowViewbyValues != null && reportRowViewbyValues.size() > 0) {
                    if (!reportColViewbyValues.contains(elementArrList[i])) {
                        if (!reportRowViewbyValues.contains(elementArrList[i])) {
                            reportRowViewbyValues.add(elementArrList[i].toString());
                        }
                    }
                }
            }
        }
        reportQuery.setRowViewbyCols(reportRowViewbyValues);
        reportQuery.setColViewbyCols(reportColViewbyValues);
        reportQuery.isAOEnable = false;
        try {
            String reportQry = reportQuery.generateViewByQry();
            String st_Date = reportQuery.startDate_AO;
            String end_Date = reportQuery.endDate_AO;
            String timeLevel_AO = reportQuery.timeLevel_AO;
            String dateValues_AO = "stDate~" + st_Date + ";endDate~" + end_Date + ";timeLevel_AO~" + timeLevel_AO;
            String finalSql = "";
            setReportObjectAO(collect, reportQuery, ReportId, dateValues_AO);
            File datafile = new File(PbReportViewerBD.fileLocation+"/analyticalobject/R_AO_" + ReportId + ".json");
            if (datafile.exists()) {
                FileReadWrite readWrite = new FileReadWrite();
                String metaString = readWrite.loadJSON(PbReportViewerBD.fileLocation+"/analyticalobject/R_AO_" + ReportId + ".json");
                Gson gson = new Gson();
                Type tarType = new TypeToken<ReportObjectMeta>() {
                }.getType();
                roMeta = gson.fromJson(metaString, tarType);
                String innerRepQry = roMeta.getFinalSqlNew_AO();
                if (innerRepQry != null && !innerRepQry.equalsIgnoreCase("")) {
                    PbDb pbdb = new PbDb();
                    PbReturnObject rs = null;
                    Connection conn = null;
                    ProgenParam connectionparam = new ProgenParam();
                    String qryDeleteTableAO = "drop table R_AO_" + ReportId;
                    String qryCreateTableAo = "create table R_AO_" + ReportId + "  AS  " + innerRepQry;
//                    String qryUpdateReportMaster = "update prg_ar_report_master set AOValues='"+AOValues+"' where report_id="+ReportId;
                    if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.SQL_SERVER)) {
                        qryCreateTableAo = "SELECT * into R_AO_" + ReportId + " from ( " + innerRepQry + " ) A";
                    } else if (ProgenConnection.getInstance().getDatabaseType().equals(ProgenConnection.MYSQL)) {
                        qryCreateTableAo = "create table R_AO_" + ReportId + "  " + innerRepQry;
                    }
                    try {
                        conn = connectionparam.getConnection(collect.reportQryElementIds.get(0).toString().replace("A_", ""));
                        pbdb.execUpdateSQL(qryDeleteTableAO, conn);
                    } catch (Exception e) {
                        logger.error("Exception: ", e);
                    }
                    try {
                        conn = connectionparam.getConnection(collect.reportQryElementIds.get(0).toString().replace("A_", ""));
                        pbdb.execUpdateSQL(qryCreateTableAo, conn);
                    } catch (Exception e) {
                        logger.error("Exception: ", e);
                    }
                }
            }
            reportQuery.isAOEnable = true;
        } catch (Exception ex) {
            logger.error("Exception:", ex);
        }
//        } else {
//            FileReadWrite fileReadWrite = new FileReadWrite();
//            File file;
//            file = new File("/usr/local/cache/analyticalobject");
//            String path = file.getAbsolutePath();
//            String fName = path + File.separator + "R_AO_" + ReportId + ".json";
//            File f = new File(path);
//            File file1 = new File(fName);
//            f.mkdirs();
//            File datafile = new File("/usr/local/cache/analyticalobject/R_AO_" + ReportId + ".json");
//            if (datafile.exists()) {
//                datafile.delete();
//            }
//        }
    }

    public StringBuilder DisplayKpiDashBoard(Container container) throws Exception {
        StringBuilder KpiDashboardHTML = new StringBuilder();
        KPIDashboardBuilder KppDash = new KPIDashboardBuilder();
        if (container.IsTimedasboard()) {
            KpiDashboardHTML = KppDash.DashboardHTML(container);
        } else {
            KpiDashboardHTML = KppDash.getKpiDashboardHTML(container);
        }

        return KpiDashboardHTML;
    }
//public StringBuilder DisplayTimeDashBoard(Container container) throws Exception{
//StringBuilder KpiDashboardHTML = new StringBuilder();
//    TimeDashboardBuilder KppDash=new TimeDashboardBuilder();
//   KpiDashboardHTML=KppDash.DashboardHTML(container);
//   return KpiDashboardHTML;
//}
}
/*
 * Added By Mohit Gupta ** Severe Warning *** * "Due to exceeding the size limit
 * of this java file, Please Do'nt add any function in this file. * If nedded
 * then add new functions in 'ProgenReportViewerBD.java' ".
 */
